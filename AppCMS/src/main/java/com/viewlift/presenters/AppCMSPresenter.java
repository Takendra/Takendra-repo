package com.viewlift.presenters;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.DownloadManager;
import android.app.ProgressDialog;
import android.app.SearchManager;
import android.content.ActivityNotFoundException;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.database.Cursor;
import android.database.StaleDataException;
import android.graphics.Bitmap;
import android.graphics.BlendMode;
import android.graphics.BlendModeColorFilter;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.Network;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.media.MediaMetadataCompat;
import android.support.v4.media.session.MediaControllerCompat;
import android.text.Html;
import android.text.InputFilter;
import android.text.InputType;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.StyleSpan;
import android.util.Base64;
import android.util.Log;
import android.util.LruCache;
import android.util.Pair;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebView;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.annotation.UiThread;
import androidx.annotation.WorkerThread;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.appcompat.widget.DialogTitle;
import androidx.appcompat.widget.SwitchCompat;
import androidx.browser.customtabs.CustomTabsIntent;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.res.ResourcesCompat;
import androidx.core.widget.CompoundButtonCompat;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.facebook.AccessToken;
import com.facebook.FacebookRequestError;
import com.facebook.GraphRequest;
import com.facebook.HttpMethod;
import com.facebook.login.LoginManager;
import com.fasterxml.uuid.Generators;
import com.google.android.exoplayer2.Player;
import com.google.android.exoplayer2.RenderersFactory;
import com.google.android.exoplayer2.SimpleExoPlayer;
import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
import com.google.android.exoplayer2.drm.DrmInitData;
import com.google.android.exoplayer2.drm.ExoMediaCrypto;
import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
import com.google.android.exoplayer2.drm.OfflineLicenseHelper;
import com.google.android.exoplayer2.offline.Download;
import com.google.android.exoplayer2.offline.DownloadRequest;
import com.google.android.exoplayer2.offline.DownloadService;
import com.google.android.exoplayer2.source.dash.DashUtil;
import com.google.android.exoplayer2.source.dash.manifest.DashManifest;
import com.google.android.exoplayer2.ui.TrackSelectionView;
import com.google.android.exoplayer2.upstream.DataSource;
import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.util.Strings;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.textfield.TextInputEditText;
import com.google.firebase.analytics.FirebaseAnalytics;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.sslwireless.sslcommerzlibrary.model.initializer.SSLCAdditionalInitializer;
import com.sslwireless.sslcommerzlibrary.model.initializer.SSLCCustomerInfoInitializer;
import com.sslwireless.sslcommerzlibrary.model.initializer.SSLCommerzInitialization;
import com.sslwireless.sslcommerzlibrary.model.response.SSLCTransactionInfoModel;
import com.sslwireless.sslcommerzlibrary.model.util.SSLCSdkType;
import com.sslwireless.sslcommerzlibrary.view.singleton.IntegrateSSLCommerz;
import com.sslwireless.sslcommerzlibrary.viewmodel.listener.SSLCTransactionResponseListener;
import com.viewlift.AppCMSApplication;
import com.viewlift.BuildConfig;
import com.viewlift.R;
import com.viewlift.Utils;
import com.viewlift.analytics.AppCMSFirebaseAnalytics;
import com.viewlift.analytics.AppsFlyerUtils;
import com.viewlift.analytics.CleverTapSDK;
import com.viewlift.analytics.FacebookAnalytics;
import com.viewlift.audio.AudioServiceHelper;
import com.viewlift.audio.playback.AudioPlaylistHelper;
import com.viewlift.audio.playback.PlaybackManager;
import com.viewlift.calendar.AppCalendarEvent;
import com.viewlift.casting.CastHelper;
import com.viewlift.casting.CastServiceProvider;
import com.viewlift.ccavenue.screens.EnterMobileNumberActivity;
import com.viewlift.ccavenue.screens.WebViewActivity;
import com.viewlift.ccavenue.utility.AvenuesParams;
import com.viewlift.db.AppPreference;
import com.viewlift.downloadtask.DownloadTimerTaskTextUpdate;
import com.viewlift.models.billing.appcms.BillingHistory;
import com.viewlift.models.billing.appcms.authentication.GoogleRefreshTokenResponse;
import com.viewlift.models.billing.appcms.purchase.ContentRequest;
import com.viewlift.models.billing.appcms.purchase.InAppPurchase;
import com.viewlift.models.billing.appcms.purchase.JuspayData;
import com.viewlift.models.billing.appcms.purchase.SocketData;
import com.viewlift.models.billing.appcms.purchase.TvodPurchaseData;
import com.viewlift.models.billing.appcms.purchase.TvodPurchaseResponse;
import com.viewlift.models.billing.appcms.subscriptions.InAppPurchaseData;
import com.viewlift.models.data.appcms.LaunchData;
import com.viewlift.models.data.appcms.api.AddToWatchlistRequest;
import com.viewlift.models.data.appcms.api.AppCMSEmailConsentValue;
import com.viewlift.models.data.appcms.api.AppCMSEventArchieveResult;
import com.viewlift.models.data.appcms.api.AppCMSLibraryResult;
import com.viewlift.models.data.appcms.api.AppCMSLocationResponse;
import com.viewlift.models.data.appcms.api.AppCMSPageAPI;
import com.viewlift.models.data.appcms.api.AppCMSParentalRatingMapResponse;
import com.viewlift.models.data.appcms.api.AppCMSRentalResponse;
import com.viewlift.models.data.appcms.api.AppCMSRosterResult;
import com.viewlift.models.data.appcms.api.AppCMSScheduleResult;
import com.viewlift.models.data.appcms.api.AppCMSShowDetail;
import com.viewlift.models.data.appcms.api.AppCMSSignedURLResult;
import com.viewlift.models.data.appcms.api.AppCMSStandingResult;
import com.viewlift.models.data.appcms.api.AppCMSTeamRoasterResult;
import com.viewlift.models.data.appcms.api.AppCMSTransactionDataResponse;
import com.viewlift.models.data.appcms.api.AppCMSTransactionDataValue;
import com.viewlift.models.data.appcms.api.AppCMSVideoDetail;
import com.viewlift.models.data.appcms.api.Category;
import com.viewlift.models.data.appcms.api.ClosedCaptions;
import com.viewlift.models.data.appcms.api.ContentDatum;
import com.viewlift.models.data.appcms.api.CreditBlock;
import com.viewlift.models.data.appcms.api.DfpAds;
import com.viewlift.models.data.appcms.api.FilterGroupsModel;
import com.viewlift.models.data.appcms.api.Filters;
import com.viewlift.models.data.appcms.api.GameSchedule;
import com.viewlift.models.data.appcms.api.GetLinkCode;
import com.viewlift.models.data.appcms.api.Gist;
import com.viewlift.models.data.appcms.api.IPGeoLocatorResponse;
import com.viewlift.models.data.appcms.api.Language;
import com.viewlift.models.data.appcms.api.MetadataMap;
import com.viewlift.models.data.appcms.api.Module;
import com.viewlift.models.data.appcms.api.Mpeg;
import com.viewlift.models.data.appcms.api.Person;
import com.viewlift.models.data.appcms.api.PhotoGalleryData;
import com.viewlift.models.data.appcms.api.Players;
import com.viewlift.models.data.appcms.api.Season_;
import com.viewlift.models.data.appcms.api.Settings;
import com.viewlift.models.data.appcms.api.StreamingInfo;
import com.viewlift.models.data.appcms.api.SubscriptionPlan;
import com.viewlift.models.data.appcms.api.SubscriptionRequest;
import com.viewlift.models.data.appcms.api.SyncDeviceCode;
import com.viewlift.models.data.appcms.api.Tag;
import com.viewlift.models.data.appcms.api.Team;
import com.viewlift.models.data.appcms.api.VideoAssets;
import com.viewlift.models.data.appcms.api.VideoList;
import com.viewlift.models.data.appcms.api.WideVine;
import com.viewlift.models.data.appcms.article.AppCMSArticleResult;
import com.viewlift.models.data.appcms.audio.AppCMSAudioDetailResult;
import com.viewlift.models.data.appcms.audio.LastPlayAudioDetail;
import com.viewlift.models.data.appcms.beacon.AppCMSBeaconRequest;
import com.viewlift.models.data.appcms.beacon.BeaconRequest;
import com.viewlift.models.data.appcms.beacon.OfflineBeaconData;
import com.viewlift.models.data.appcms.ccavenue.RSAKeyResponse;
import com.viewlift.models.data.appcms.downloads.DownloadClosedCaptionRealm;
import com.viewlift.models.data.appcms.downloads.DownloadStatus;
import com.viewlift.models.data.appcms.downloads.DownloadVideoRealm;
import com.viewlift.models.data.appcms.downloads.RealmController;
import com.viewlift.models.data.appcms.downloads.UserVideoDownloadStatus;
import com.viewlift.models.data.appcms.history.AppCMSDeleteHistoryResult;
import com.viewlift.models.data.appcms.history.AppCMSHistoryResult;
import com.viewlift.models.data.appcms.history.AppCMSRecommendationGenreResult;
import com.viewlift.models.data.appcms.history.Record;
import com.viewlift.models.data.appcms.history.SeriesHistory;
import com.viewlift.models.data.appcms.history.UpdateHistoryRequest;
import com.viewlift.models.data.appcms.history.UpdateHistoryResponse;
import com.viewlift.models.data.appcms.history.UserVideoStatusResponse;
import com.viewlift.models.data.appcms.likes.LikeRequest;
import com.viewlift.models.data.appcms.likes.LikeResult;
import com.viewlift.models.data.appcms.likes.Likes;
import com.viewlift.models.data.appcms.photogallery.AppCMSPhotoGalleryResult;
import com.viewlift.models.data.appcms.playlist.AppCMSPlaylistResult;
import com.viewlift.models.data.appcms.search.AppCMSSearchRelatedEpisode;
import com.viewlift.models.data.appcms.search.CategorySearchFilter;
import com.viewlift.models.data.appcms.sites.AppCMSSite;
import com.viewlift.models.data.appcms.sslcommerz.SSLInitiateResponse;
import com.viewlift.models.data.appcms.subscribeForLatestNewsPojo.ResponsePojo;
import com.viewlift.models.data.appcms.subscriptions.AppCMSSubscriptionPlanResult;
import com.viewlift.models.data.appcms.subscriptions.AppCMSSubscriptionResult;
import com.viewlift.models.data.appcms.subscriptions.AppCMSUserSubscriptionPlanInfoResult;
import com.viewlift.models.data.appcms.subscriptions.AppCMSUserSubscriptionPlanResult;
import com.viewlift.models.data.appcms.subscriptions.PlanDetail;
import com.viewlift.models.data.appcms.subscriptions.Receipt;
import com.viewlift.models.data.appcms.subscriptions.UserSubscriptionPlan;
import com.viewlift.models.data.appcms.ui.AppCMSUIKeyType;
import com.viewlift.models.data.appcms.ui.Resources;
import com.viewlift.models.data.appcms.ui.android.AccessLevels;
import com.viewlift.models.data.appcms.ui.android.Advertising;
import com.viewlift.models.data.appcms.ui.android.AppCMSAndroidModules;
import com.viewlift.models.data.appcms.ui.android.AppCMSAndroidUI;
import com.viewlift.models.data.appcms.ui.android.Headers;
import com.viewlift.models.data.appcms.ui.android.LocalizationResult;
import com.viewlift.models.data.appcms.ui.android.MetaPage;
import com.viewlift.models.data.appcms.ui.android.Navigation;
import com.viewlift.models.data.appcms.ui.android.NavigationFooter;
import com.viewlift.models.data.appcms.ui.android.NavigationPrimary;
import com.viewlift.models.data.appcms.ui.android.NavigationUser;
import com.viewlift.models.data.appcms.ui.android.SubscriptionFlowContent;
import com.viewlift.models.data.appcms.ui.authentication.FeatureSetting;
import com.viewlift.models.data.appcms.ui.authentication.MonetizationPlan;
import com.viewlift.models.data.appcms.ui.authentication.PhoneObjectRequest;
import com.viewlift.models.data.appcms.ui.authentication.RestoreAmazonPurchase;
import com.viewlift.models.data.appcms.ui.authentication.SignInResponse;
import com.viewlift.models.data.appcms.ui.main.AppCMSMain;
import com.viewlift.models.data.appcms.ui.main.GenericMessages;
import com.viewlift.models.data.appcms.ui.main.LocalisedStrings;
import com.viewlift.models.data.appcms.ui.main.RecommendationGenre;
import com.viewlift.models.data.appcms.ui.main.Tablet;
import com.viewlift.models.data.appcms.ui.page.AppCMSPageUI;
import com.viewlift.models.data.appcms.ui.page.BottomTab;
import com.viewlift.models.data.appcms.ui.page.Component;
import com.viewlift.models.data.appcms.ui.page.Links;
import com.viewlift.models.data.appcms.ui.page.ModuleList;
import com.viewlift.models.data.appcms.ui.page.PrimaryCta;
import com.viewlift.models.data.appcms.ui.page.SocialLinks;
import com.viewlift.models.data.appcms.user.ParentalControlResponse;
import com.viewlift.models.data.appcms.user.UserDescriptionResponse;
import com.viewlift.models.data.appcms.user.UserIdentity;
import com.viewlift.models.data.appcms.user.UserIdentityPassword;
import com.viewlift.models.data.appcms.watchlist.AppCMSAddToWatchlistResult;
import com.viewlift.models.data.appcms.watchlist.AppCMSWatchlistResult;
import com.viewlift.models.data.appcms.weather.Cities;
import com.viewlift.models.data.appcms.weather.TickerFeed;
import com.viewlift.models.data.urbanairship.UAAssociateNamedUserRequest;
import com.viewlift.models.data.urbanairship.UANamedUserRequest;
import com.viewlift.models.data.verimatrix.TVProvider;
import com.viewlift.models.data.verimatrix.VerimatrixResponse;
import com.viewlift.models.network.background.tasks.GetAppCMSAPIAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSAndroidUIAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSContentDetailTask;
import com.viewlift.models.network.background.tasks.GetAppCMSFloodLightAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSMainUIAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSPageUIAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSParentalRatingMapAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSRefreshIdentityAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSRentalVideoAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSResourceAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSShowDetailAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSSignedURLAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSSiteAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSStreamingInfoAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSTransactionlDataAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSTransactionlDataResponseAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSVideoDetailAsyncTask;
import com.viewlift.models.network.background.tasks.GetAppCMSVideoEntitlementAsyncTask;
import com.viewlift.models.network.background.tasks.GetRecommendationGenreAsyncTask;
import com.viewlift.models.network.background.tasks.PostAppCMSLoginRequestAsyncTask;
import com.viewlift.models.network.background.tasks.PostAppCMSLoginRequestTVEAsyncTask;
import com.viewlift.models.network.background.tasks.PostAppCMSRedeemRequestAsyncTask;
import com.viewlift.models.network.background.tasks.PostUANamedUserEventAsyncTask;
import com.viewlift.models.network.background.tasks.StartEmailSubscripctionAsyncTask;
import com.viewlift.models.network.components.AppCMSAPIComponent;
import com.viewlift.models.network.components.AppCMSSearchUrlComponent;
import com.viewlift.models.network.components.DaggerAppCMSAPIComponent;
import com.viewlift.models.network.components.DaggerAppCMSSearchUrlComponent;
import com.viewlift.models.network.modules.AppCMSAPIModule;
import com.viewlift.models.network.modules.AppCMSSearchUrlModule;
import com.viewlift.models.network.rest.AppCMSAddToWatchlistCall;
import com.viewlift.models.network.rest.AppCMSAndroidModuleCall;
import com.viewlift.models.network.rest.AppCMSAndroidUICall;
import com.viewlift.models.network.rest.AppCMSAnonymousAuthTokenCall;
import com.viewlift.models.network.rest.AppCMSArticleCall;
import com.viewlift.models.network.rest.AppCMSAudioDetailCall;
import com.viewlift.models.network.rest.AppCMSAudioDetailRest;
import com.viewlift.models.network.rest.AppCMSBeaconCall;
import com.viewlift.models.network.rest.AppCMSBeaconRest;
import com.viewlift.models.network.rest.AppCMSBillingHistoryCall;
import com.viewlift.models.network.rest.AppCMSCCAvenueCall;
import com.viewlift.models.network.rest.AppCMSCCAvenueRSAKeyCall;
import com.viewlift.models.network.rest.AppCMSContentDetailCall;
import com.viewlift.models.network.rest.AppCMSDeleteHistoryCall;
import com.viewlift.models.network.rest.AppCMSDeviceCodeApiCall;
import com.viewlift.models.network.rest.AppCMSEmailConsentCall;
import com.viewlift.models.network.rest.AppCMSEventArchieveCall;
import com.viewlift.models.network.rest.AppCMSFacebookLoginCall;
import com.viewlift.models.network.rest.AppCMSFloodLightRest;
import com.viewlift.models.network.rest.AppCMSGoogleLoginCall;
import com.viewlift.models.network.rest.AppCMSHistoryCall;
import com.viewlift.models.network.rest.AppCMSIPGeoLocatorCall;
import com.viewlift.models.network.rest.AppCMSJuspayCall;
import com.viewlift.models.network.rest.AppCMSLibraryCall;
import com.viewlift.models.network.rest.AppCMSLocationCall;
import com.viewlift.models.network.rest.AppCMSMainUICall;
import com.viewlift.models.network.rest.AppCMSPageAPICall;
import com.viewlift.models.network.rest.AppCMSPageUICall;
import com.viewlift.models.network.rest.AppCMSParentalRatingMapCall;
import com.viewlift.models.network.rest.AppCMSPhotoGalleryCall;
import com.viewlift.models.network.rest.AppCMSPlaylistCall;
import com.viewlift.models.network.rest.AppCMSRedeemCall;
import com.viewlift.models.network.rest.AppCMSRefreshIdentityCall;
import com.viewlift.models.network.rest.AppCMSResetPasswordCall;
import com.viewlift.models.network.rest.AppCMSResourceCall;
import com.viewlift.models.network.rest.AppCMSRestorePurchaseCall;
import com.viewlift.models.network.rest.AppCMSRosterCall;
import com.viewlift.models.network.rest.AppCMSSSLCommerzInitiateCall;
import com.viewlift.models.network.rest.AppCMSScheduleCall;
import com.viewlift.models.network.rest.AppCMSSearchCall;
import com.viewlift.models.network.rest.AppCMSShowDetailCall;
import com.viewlift.models.network.rest.AppCMSSignInCall;
import com.viewlift.models.network.rest.AppCMSSignedURLCall;
import com.viewlift.models.network.rest.AppCMSSiteCall;
import com.viewlift.models.network.rest.AppCMSStreamingInfoCall;
import com.viewlift.models.network.rest.AppCMSSubscribeForLatestNewsCall;
import com.viewlift.models.network.rest.AppCMSSubscriptionCall;
import com.viewlift.models.network.rest.AppCMSSubscriptionPlanCall;
import com.viewlift.models.network.rest.AppCMSSyncDeviceCodeApiCall;
import com.viewlift.models.network.rest.AppCMSTeamRoasterCall;
import com.viewlift.models.network.rest.AppCMSTeamStandingCall;
import com.viewlift.models.network.rest.AppCMSUpdateWatchHistoryCall;
import com.viewlift.models.network.rest.AppCMSUserDownloadVideoStatusCall;
import com.viewlift.models.network.rest.AppCMSUserIdentityCall;
import com.viewlift.models.network.rest.AppCMSUserVideoStatusCall;
import com.viewlift.models.network.rest.AppCMSVideoDetailCall;
import com.viewlift.models.network.rest.AppCMSWatchlistCall;
import com.viewlift.models.network.rest.AppCMSWeatherFeedCall;
import com.viewlift.models.network.rest.GetUserRecommendGenreCall;
import com.viewlift.models.network.rest.GoogleCancelSubscriptionCall;
import com.viewlift.models.network.rest.GoogleRefreshTokenCall;
import com.viewlift.models.network.rest.PurchaseProductCall;
import com.viewlift.models.network.rest.UANamedUserEventCall;
import com.viewlift.models.network.rest.VerimatrixCall;
import com.viewlift.models.network.socket.AppCMSSocket;
import com.viewlift.offlinedrm.DownloadTracker;
import com.viewlift.offlinedrm.OfflineDownloadService;
import com.viewlift.offlinedrm.OfflineDownloadTimerTask;
import com.viewlift.offlinedrm.OfflineVideoData;
import com.viewlift.offlinedrm.OfflineVideoStatusCall;
import com.viewlift.offlinedrm.TrackSelectionDialog;
import com.viewlift.payment.AppCMSInappBilling;
import com.viewlift.utils.BillingHelper;
import com.viewlift.utils.CommonUtils;
import com.viewlift.utils.ContentTypeChecker;
import com.viewlift.utils.CustomTabsHelper;
import com.viewlift.utils.FileUtils;
import com.viewlift.utils.GetSocialHelper;
import com.viewlift.utils.ImageGetterFromHTMLText;
import com.viewlift.utils.JusPayUtils;
import com.viewlift.utils.LocaleUtils;
import com.viewlift.utils.Macros;
import com.viewlift.views.activity.AppCMSDownloadQualityActivity;
import com.viewlift.views.activity.AppCMSErrorActivity;
import com.viewlift.views.activity.AppCMSPageActivity;
import com.viewlift.views.activity.AppCMSPlayAudioActivity;
import com.viewlift.views.activity.AppCMSPlayVideoActivity;
import com.viewlift.views.activity.AppCMSSearchActivity;
import com.viewlift.views.activity.AutoplayActivity;
import com.viewlift.views.adapters.AppCMSBaseAdapter;
import com.viewlift.views.adapters.ItemAdapter;
import com.viewlift.views.adapters.RecommendationDataAdapter;
import com.viewlift.views.binders.AppCMSBinder;
import com.viewlift.views.binders.AppCMSDownloadQualityBinder;
import com.viewlift.views.binders.AppCMSVideoPageBinder;
import com.viewlift.views.binders.RetryCallBinder;
import com.viewlift.views.customviews.BaseView;
import com.viewlift.views.customviews.CustomVideoPlayerView;
import com.viewlift.views.customviews.CustomWebView;
import com.viewlift.views.customviews.DownloadComponent;
import com.viewlift.views.customviews.FullPlayerEpisodeView;
import com.viewlift.views.customviews.FullPlayerView;
import com.viewlift.views.customviews.MiniPlayerView;
import com.viewlift.views.customviews.OnInternalEvent;
import com.viewlift.views.customviews.PageView;
import com.viewlift.views.customviews.TVVideoPlayerView;
import com.viewlift.views.customviews.VideoPlayerView;
import com.viewlift.views.customviews.ViewCreator;
import com.viewlift.views.customviews.constraintviews.ConstraintViewCreator;
import com.viewlift.views.dialog.ListSelectionDialog;
import com.viewlift.views.dialog.WaysToWatchBottom;
import com.viewlift.views.fragments.AppCMSMoreFragment;
import com.viewlift.views.fragments.AppCMSMoreMenuDialogFragment;
import com.viewlift.views.fragments.AppCMSNavItemsFragment;
import com.viewlift.views.fragments.AppCMSNoPurchaseFragment;
import com.viewlift.views.fragments.AppCMSRedemptionSuccessDialog;
import com.viewlift.views.fragments.AppCMSTrayMenuDialogFragment;
import com.viewlift.views.fragments.BillingFragment;
import com.viewlift.views.fragments.PhoneUpdationLoginFragment;
import com.viewlift.views.fragments.VerifyOTPPhoneFragment;
import com.viewlift.views.rxbus.AppBus;
import com.viewlift.views.rxbus.SeasonTabSelectorBus;

import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.threeten.bp.Duration;
import org.threeten.bp.Instant;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoUnit;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Queue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.inject.Inject;

import butterknife.BindView;
import butterknife.ButterKnife;
import hu.akarnokd.rxjava3.interop.RxJavaInterop;
import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers;
import io.reactivex.rxjava3.functions.Consumer;
import io.realm.RealmList;
import io.realm.RealmResults;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.WebSocket;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import retrofit2.converter.gson.GsonConverterFactory;
import rx.Observable;
import rx.Observer;
import rx.Subscriber;
import rx.functions.Action0;
import rx.functions.Action1;
import rx.functions.Func1;
import rx.schedulers.Schedulers;

import static com.viewlift.Utils.getCountryCode;
import static com.viewlift.Utils.isFireTVDevice;
import static com.viewlift.Utils.loadJsonFromAssets;
import static com.viewlift.presenters.AppCMSActionType.MANAGE_PARENTAL_CONTROLS;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.BUTTON_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.EDIT_WATCHLIST;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.HISTORY_RETRY_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.LOGOUT_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.PAGE_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.RESET_PASSWORD_RETRY;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.SEARCH_RETRY_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.SUB_NAV_RETRY_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.VIDEO_ACTION;
import static com.viewlift.presenters.AppCMSPresenter.RETRY_TYPE.WATCHLIST_RETRY_ACTION;
import static com.viewlift.utils.CommonUtils.isMobileUpdateRequired;
import static com.viewlift.utils.CommonUtils.isSiteOTPEnabled;
import static com.viewlift.utils.CommonUtils.isValidPhoneNumber;

public class AppCMSPresenter {
    public static final String PRESENTER_CLOSE_AUTOPLAY_SCREEN = "appcms_presenter_close_autoplay_action";
    public static final String PRESENTER_OPEN_AUTOPLAY_SCREEN = "appcms_presenter_close_autoplay_action";
    public static final String PRESENTER_NAVIGATE_ACTION = "appcms_presenter_navigate_action";
    public static final String PRESENTER_PAGE_LOADING_ACTION = "appcms_presenter_page_loading_action";
    public static final String PRESENTER_STOP_PAGE_LOADING_ACTION = "appcms_presenter_stop_page_loading_action";
    public static final String PRESENTER_CLOSE_SCREEN_ACTION = "appcms_presenter_close_action";
    public static final String PRESENTER_RESET_NAVIGATION_ITEM_ACTION = "appcms_presenter_set_navigation_item_action";
    public static final String PRESENTER_UPDATE_HISTORY_ACTION = "appcms_presenter_update_history_action";
    public static final String PRESENTER_UPDATE_WATCHLIST_ACTION = "appcms_presenter_update_history_action";
    public static final String PRESENTER_REFRESH_PAGE_ACTION = "appcms_presenter_refresh_page_action";
    public static final String PRESENTER_UPDATE_LISTS_ACTION = "appcms_presenter_update_lists_action";
    public static final String PRESENTER_REFRESH_PAGE_DATA_ACTION = "appcms_presenter_refresh_page_data_action";
    public static final String PRESENTER_PHONE_HINT = "appcms_presenter_phone_hint";
    public static final String TVOD_PURCHASE = "tvod_purchase";
    public static final String PRESENTER_CLEAR_BACKSTACK_ACTION = "appcms_presenter_clear_backstack_action";
    public static final String PRESENTER_ENTER_FULLSCREEN_ACTION = "apppresenter_enter_fullscreen_action";
    public static final String PRESENTER_EXIT_FULLSCREEN_ACTION = "appcms_presenter_exit_fullscreen_action";
    public static final String PRESENTER_KEEP_SCREEN_ON_ACTION = "appcms_presenter_keep_screen_on_action";
    public static final String PRESENTER_DEEPLINK_ACTION = "appcms_presenter_deeplink_action";
    public static final String PRESENTER_OPEN_BROWSER_ACTION = "appcms_presenter_open_browser_action";
    public static final String PRESENTER_PROGRESS_ACTION = "appcms_presenter_progress_action";
    public static final String PRESENTER_CLEAR_KEEP_SCREEN_ON_ACTION = "appcms_presenter_dont_keep_screen_on_action";
    public static final String PRESENTER_CHROMECAST_DISCONNECTED_ACTION = "appcms_presenter_chromecast_disconnected_action";
    public static final String PRESENTER_TRAY_UPDATE_ON_ACTION = "appcms_presenter_tray_update_action";
    public static final String SWITCH_SEASON_ACTION = "switch_season_action";
    public static final String MOBILE_BUILD_VARIENT = "mobile";
    public static final String KINDLE_BUILD_VARIENT = "kindle";
    public static final String INITIATE_AMAZON_PURCHASE = "initiate_amazon_purchase";
    public static final String DIALOG_FRAGMENT_TAG = "text_overlay";
    public static final String MOBILE_JUSPAY_BUILD_VARIENT = "mobileJuspay";
    public static final String RECOMMENDATION_DIALOG_FRAGMENT_TAG = "recommendation_dialog_fragment_tag";
    public static String PRE_LANGUAGE = "en";
    public static final int RC_PURCHASE_PLAY_STORE_ITEM = 1002;
    public static final int RC_PHONE_SIGN_IN = 2;
    public static final int REQUEST_WRITE_EXTERNAL_STORAGE_FOR_DOWNLOADS = 2002;
    public static final int REQUEST_WRITE_CALENDAR = 2003;
    public static final int REQUEST_READ_CALENDAR = 2004;
    public static final int RC_GOOGLE_SIGN_IN = 1001;
    public static final int ADD_GOOGLE_ACCOUNT_TO_DEVICE_REQUEST_CODE = 5555;
    public static final int CC_AVENUE_REQUEST_CODE = 1;
    public static final int JUSPAY_REQUEST_CODE = 101;
    public static final String PRESENTER_DIALOG_ACTION = "appcms_presenter_dialog_action";
    public static final String PRESENTER_CLEAR_DIALOG_ACTION = "appcms_presenter_clear_dialog_action";
    public static final String PRESENTER_OPEN_PIN_DIALOG_ACTION = "appcms_presenter_open_pin_dialog_action";
    public static final String SEARCH_ACTION = "SEARCH_ACTION";
    public static final String LIBRARY_ACTION = "LIBRARY_ACTION";
    public static final String LIBRARY_DATA = "LIBRARY_DATA";
    public static final String UPDATE_SUBSCRIPTION = "UPDATE_SUBSCRIPTION";
    public static final String CLOSE_DIALOG_ACTION = "CLOSE_DIALOG_ACTION";
    public static final String STAND_ALONE_PLAYER_REFRESH = "STAND_ALONE_PLAYER_REFRESH";
    public static final String LOGIN_SUCCESSFUL_ON_AUTOPLAY = "LOGIN_SUCCESSFUL_ON_AUTOPLAY";

    public static final String ERROR_DIALOG_ACTION = "appcms_error_dialog_action";
    public static final String ENTITLEMENT_LOGIN_DIALOG = "appcms_entitlement_login_dialog_action";
    public static final String RESTORE_PURCHASE_DIALOG = "restore_purchase_dialog";

    public static final String SUBSCRIPTION_DIALOG = "subscription_dialog";
    public static final String MAX_SIMULTANEOUS_STREAM_DIALOG = "max_simulataneous_stream_dialog";
    public static final String GENERIC_DIALOG = "generic_dialog";
    public static final String ACCOUNT_DETAILS_EDIT_INFO_DIALOG = "account_details_edit_info_dialog";
    public static final String TVOD_PURCHASE_DIALOG = "tvod_purchase_dialog";
    public static final String ACTION_LOGO_ANIMATION = "appcms_logo_animation";
    public static final String ACTION_RESET_PASSWORD = "appcms_reset_password_action";
    public static final String SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION = "show_subscription_msg_on_video_player";
    public static final String CLOSE_VIEW_PLANS_PAGE_ON_VIDEO_PLAYER_ACTION = "close_view_plans_page_on_video_player";
    public static final String ACTION_LINK_YOUR_ACCOUNT = "appcms_link_your_account_action";
    public static final String ACTION_CHANGE_LANGUAGE = "appcms_change_language_action";
    private static final String LANGUAGE_SHARED_PREF_NAME = "language_pref";
    private static final String NAVIGATION_MODULE_SHARED_PREF = "navigation_module_pref";
    private static final String LANGUAGE_NAME_VALUE = "language_name";
    public static final int PLAYER_REQUEST_CODE = 1111;
    public static final String EXTRA_OPEN_AUDIO_PLAYER = "extra_open_audio_player";
    public static final String EXTRA_CURRENT_MEDIA_DESCRIPTION =
            "CURRENT_MEDIA_DESCRIPTION";
    private static final String TAG = "AppCMSPresenter";
    public static final String LETS_GO_ACTION = "LETS_GO_ACTION";
    public static final String CHECK_UPDATE_ACTION = "CHECK_UPDATE_ACTION";
    public static final String ACTION_LAUNCH_JUSPAY = "ACTION_LAUNCH_JUSPAY";
    public static final String ACTION_PRE_FATCH_JUSPAY_ASSETS = "ACTION_PRE_FATCH_JUSPAY_ASSETS";
    public int currentVideoPlayListIndex = 0;
    private double discountAmount_;
    public boolean isFetchingVideoQualities = false;

    private static final long MILLISECONDS_PER_SECOND = 1000L;
    private static final long SECONDS_PER_MINUTE = 60L;
    private static final long MAX_SESSION_DURATION_IN_MINUTES = 15L;
    private static final long MAX_ANONYMOUS_SESSIONS_DURATION_IN_MINUTES = 30L;
    private static final String MEDIA_SURFIX_MP4 = ".mp4";
    private static final String MEDIA_SURFIX_MP3 = ".mp3";
    private static final String MEDIA_SURFIX_PNG = ".png";
    private static final String MEDIA_SURFIX_JPG = ".jpg";
    private static final String MEDIA_SUFFIX_SRT = ".srt";

    private AppCMSDeviceCodeApiCall appCMSGetSyncCodeApiCall;
    private AppCMSSyncDeviceCodeApiCall appCmsSyncDeviceCodeAPICall;
    private static final String SUBSCRIPTION_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSX";
    private static final ZoneId UTC_ZONE_ID = ZoneId.of("UTC+00:00");
    public boolean isExitFullScreen = false;
    public boolean isFullScreenVisible;
    public final String IAP_AMAZON_INITIATED = "IAP_AMAZON_INITIATED";
    public final String IAP_AMAZON_SUCCESS = "IAP_AMAZON_SUCCESS";
    public final String IAP_AMAZON_RECEIPT_CANCEL = "IAP_AMAZON_RECEIPT_CANCEL";
    public final String IAP_AMAZON_EXCEPTION = "IAP_AMAZON_EXCEPTION";
    public final String IAP_AMAZON_FAILED = "IAP_AMAZON_FAILED";
    public final String IAP_VL_INITIATED = "IAP_VL_INITIATED";
    public final String IAP_VL_SUCCESS = "IAP_VL_SUCCESS";
    public final String IAP_VL_FAILED = "IAP_VL_FAILED";
    public final String IAP_VL_RESTORE_PURCHASE_INITIATED = "IAP_VL_RESTORE_PURCHASE_INITIATED";
    public final String IAP_VL_RESTORE_PURCHASE_SUCCESS = "IAP_VL_RESTORE_PURCHASE_SUCCESS";
    public final String IAP_VL_RESTORE_PURCHASE_FAILED = "IAP_VL_RESTORE_PURCHASE_FAILED";

    public final String AMAZON_IAP = "AMAZON_IAP";
    public final String IAP_AMAZON_ALREADY_PURCHASED = "IAP_AMAZON_ALREADY_PURCHASED";


    private final Gson gson;
    private final AppCMSMainUICall appCMSMainUICall;
    private final AppCMSAndroidUICall appCMSAndroidUICall;
    private final AppCMSPageUICall appCMSPageUICall;
    private final AppCMSResourceCall appCMSResourceCall;
    private final AppCMSSiteCall appCMSSiteCall;
    private final AppCMSIPGeoLocatorCall appCMSIPGeoLocatorCall;
    private final AppCMSWeatherFeedCall appCMSWeatherFeedCall;
    private final AppCMSSearchCall appCMSSearchCall;
    private final AppCMSSignInCall appCMSSignInCall;
    private final AppCMSRedeemCall appCMSRedeemCall;
    private final AppCMSRefreshIdentityCall appCMSRefreshIdentityCall;
    private final AppCMSResetPasswordCall appCMSResetPasswordCall;
    private final AppCMSFacebookLoginCall appCMSFacebookLoginCall;
    private final AppCMSGoogleLoginCall appCMSGoogleLoginCall;
    private final AppCMSUserIdentityCall appCMSUserIdentityCall;
    private final GoogleRefreshTokenCall googleRefreshTokenCall;
    private final AppCMSArticleCall appCMSArticleCall;
    private final AppCMSPhotoGalleryCall appCMSPhotoGalleryCall;
    private final AppCMSScheduleCall appCMSScheduleCall;
    private final AppCMSRosterCall appCMSRosterCall;
    private final AppCMSLibraryCall appCMSLibraryCall;
    private final AppCMSEmailConsentCall appCMSEmailConsentCall;
    private final AppCMSJuspayCall appCMSJuspayCall;
    private final AppCMSLocationCall appCMSLocationCall;

    private final AppCMSUpdateWatchHistoryCall appCMSUpdateWatchHistoryCall;
    private final AppCMSBillingHistoryCall appCMSBillingHistoryCall;
    private final Map<String, AppCMSUIKeyType> jsonValueKeyMap;
    private final Map<String, String> pageNameToActionMap;
    private final Map<String, AppCMSPageUI> actionToPageMap;
    private final Map<String, AppCMSActionType> actionToActionTypeMap;
    private final AppCMSWatchlistCall appCMSWatchlistCall;
    private final AppCMSHistoryCall appCMSHistoryCall;
    public final AppCMSUserDownloadVideoStatusCall appCMSUserDownloadVideoStatusCall;
    private final AppCMSBeaconCall appCMSBeaconCall;
    private final AppCMSRestorePurchaseCall appCMSRestorePurchaseCall;
    private final AppCMSAndroidModuleCall appCMSAndroidModuleCall;
    private final AppCMSSignedURLCall appCMSSignedURLCall;
    private final AppCMSUserVideoStatusCall appCMSUserVideoStatusCall;
    private final AppCMSAddToWatchlistCall appCMSAddToWatchlistCall;
    private final AppCMSDeleteHistoryCall appCMSDeleteHistoryCall;
    private final AppCMSSubscriptionPlanCall appCMSSubscriptionPlanCall;
    private final AppCMSAnonymousAuthTokenCall appCMSAnonymousAuthTokenCall;
    private final AppCMSSubscribeForLatestNewsCall appCMSSubscribeForLatestNewsCall;
    private final AppCMSParentalRatingMapCall appCMSParentalRatingMapCall;

    GetUserRecommendGenreCall getUserRecommendGenreCall;
    public static List<String> recommendedIds;
    public boolean isHintPickerOpen;
    public static boolean isHardCodedUrlNeeded = true;
    public boolean checkQuery = false;

    Action1<Boolean> verimatrixBounceAction;
    Action1<Boolean> verimatrixResourceAccessAction;

    public static AppCMSVideoPageBinder binder;

    private final String[] physicalPaths = {
            "/storage/sdcard0", "/storage/sdcard1", // Motorola Xoom
            "/storage/extsdcard", // Samsung SGS3
            "/storage/sdcard0/external_sdcard", // User request
            "/mnt/extsdcard", "/mnt/sdcard/external_sd", // Samsung galaxy family
            "/mnt/external_sd", "/mnt/media_rw/sdcard1", // 4.4.2 on CyanogenMod S3
            "/removable/microsd", // Asus transformer prime
            "/mnt/emmc", "/storage/external_SD", // LG
            "/storage/ext_sd", // HTC One Max
            "/storage/removable/sdcard1", // Sony Xperia Z1
            "/data/sdext", "/data/sdext2", "/data/sdext3", "/data/sdext4", "/sdcard1", // Sony Xperia Z
            "/sdcard2", // HTC One M8s
            "/storage/microsd" // ASUS ZenFone 2
    };
    private final Map<String, AppCMSPageUI> navigationPages;
    private final Map<String, AppCMSPageAPI> navigationPageData;
    private final Map<String, String> pageIdToPageAPIUrlMap;
    private final Map<String, String> actionToPageAPIUrlMap;
    private final Map<String, String> actionToPageNameMap;
    private final Map<String, String> pageIdToPageFunctionMap;
    private RecyclerView downloadRecyclerView = null;

    private final Map<AppCMSActionType, MetaPage> actionTypeToMetaPageMap;
    private final List<Action1<Boolean>> onOrientationChangeHandlers;
    private final Map<String, List<OnInternalEvent>> onActionInternalEvents;
    private final Stack<String> currentActions;
    private final BeaconRunnable beaconMessageRunnable;
    private final Runnable beaconMessageThread;
    private final String tvVideoPlayerPackage = "com.viewlift.tv.views.activity.AppCMSTVPlayVideoActivity";
    private final List<TimerTask> downloadProgressTimerList = new ArrayList<>();
    private final ReferenceQueue<Object> referenceQueue;
    private final AppCMSPlaylistCall appCMSPlaylistCall;
    private final AppCMSTeamStandingCall appCMSTeamStadingtCall;
    private final AppCMSTeamRoasterCall appCMSTeamRoasterCall;
    private final AppCMSEventArchieveCall appCMSEventArchieveCall;

    private final AppCMSSSLCommerzInitiateCall appCMSSSLCommerzInitiateCall;
    private final AppCMSCCAvenueRSAKeyCall appCMSCCAvenueRSAKeyCall;
    private final AppCMSAudioDetailCall appCMSAudioDetailCall;
    public TVVideoPlayerView tvVideoPlayerView;
    public boolean pipPlayerVisible = false;
    public CustomVideoPlayerView videoPlayerView = null;
    public CustomVideoPlayerView videoPlayerViewHome = null;
    public CustomVideoPlayerView trailerPlayerView = null;
    public ViewGroup videoPlayerViewParent = null;
    public ViewGroup videoPlayerViewHomeParent = null;
    public ViewGroup episodePlayerViewParent = null;
    ViewGroup.LayoutParams trailerPlayerParams = null;
    public boolean isconfig = false;
    public MiniPlayerView relativeLayoutPIP;
    Boolean isMoreOptionsAvailable = false;
    String loginPageUserName, loginPagePassword;
    AudioPlaylistHelper.IPlaybackCall callBackPlaylistHelper;
    public RelativeLayout relativeLayoutFull;
    private boolean isRenewable;
    private String serverClientId;
    private AppCMSPageAPICall appCMSPageAPICall;
    private AppCMSStreamingInfoCall appCMSStreamingInfoCall;
    private AppCMSVideoDetailCall appCMSVideoDetailCall;
    private AppCMSContentDetailCall appCMSContentDetailCall;
    private AppCMSShowDetailCall appCMSShowDetailCall;
    private AppCompatActivity currentActivity;
    private Context currentContext;
    private Navigation navigation;
    private Headers headers;
    private ArrayList<Headers> mainheader = new ArrayList<>();
    private BottomTab bottomTab;
    private SubscriptionFlowContent subscriptionFlowContent;
    private boolean loadFromFile;
    private boolean loadingPage;
    private int fightSelectId;
    private int selectedSchedulePosition = 0;
    private AppCMSMain appCMSMain;
    private AppCMSSite appCMSSite;
    private Queue<MetaPage> pagesToProcess;
    private AppCMSSearchUrlComponent appCMSSearchUrlComponent;
    public DownloadManager downloadManager;
    public RealmController realmController;
    private GoogleAnalytics googleAnalytics;
    private Tracker tracker;
    private String tvErrorScreenPackage = "com.viewlift.tv.views.activity.AppCmsTvErrorActivity";
    public Uri deeplinkSearchQuery;
    private boolean launched;
    private MetaPage entitlementScreenPage;
    private MetaPage splashPage;
    private MetaPage equipmentSelectionPage;
    private MetaPage instructorPage;
    private MetaPage conceptPage;
    private MetaPage loginPage;

    private MetaPage seeAllPage;
    private MetaPage loginScreenPage;
    private MetaPage filterPage;
    private MetaPage resetPasswordPage;
    private MetaPage profilePage;
    private MetaPage editProfilePage;
    private MetaPage accountSettingsPage;
    private MetaPage downloadQualityPage;
    private MetaPage homePage;
    private MetaPage playlistPage;
    private MetaPage teamDetailPage;
    private MetaPage referralPage;

    private MetaPage moviesPage;
    private MetaPage showsPage;
    private MetaPage browsePage;
    private MetaPage browseByGenrePage;

    private MetaPage downloadPage;
    private MetaPage subscriptionPage;
    private MetaPage playerDetailPage;

    private MetaPage historyPage;
    private MetaPage rosterPage;
    private MetaPage libraryPage;

    private MetaPage watchlistPage;
    private MetaPage followPage;
    private MetaPage signupPage;
    private MetaPage privacyPolicyPage;
    private MetaPage tosPage;
    private MetaPage weatherPage;
    private MetaPage searchPage;
    private MetaPage articlePage;
    private MetaPage personPage;
    private MetaPage photoGalleryPage;
    private MetaPage schedulePage;
    private MetaPage linkAccountPage;
    private MetaPage subNavPage;
    private MetaPage eventPage;
    private MetaPage brandNavigation;
    private MetaPage customNavigation;
    private MetaPage contactUsPage;

    private MetaPage juspayPaymentPage;
    private MetaPage subscriptionFlowPage;
    private PlatformType platformType;
    private AppCMSNavItemsFragment appCMSNavItemsFragment;
    private LaunchType launchType;
    private String subscriptionUserEmail;
    private String subscriptionUserPassword;
    private boolean isSignupFromFacebook;
    private boolean isSignupFromGoogle;

    public String unformattedPhone;
    public String unformattedPhoneCountryCode;
    private String facebookAccessToken;
    private String facebookUserId;
    private String facebookUsername;
    private String facebookEmail;
    private String googleAccessToken;
    private String googleUserId;
    private String googleUsername;
    private String googleEmail;
    private String skuToPurchase;
    private String planToPurchase;
    private String currencyCode;
    private String countryCode;
    private boolean upgradesAvailable;
    private boolean checkUpgradeFlag;
    private String currencyOfPlanToPurchase;
    private String planToPurchaseName;
    private String apikey;
    private double planToPurchasePrice;
    private String renewableFrequency = "";
    private double planToPurchaseDiscountedPrice;
    private List<String> allowedPayMethods;
    private List<String> carrierBillingProviders;
    public GoogleApiClient googleApiClient;
    private long downloaded = 0L;
    private LruCache<String, WeakReference<PageView>> pageViewLruCache;
    private LruCache<String, AppCMSPageAPI> pageAPILruCache;
    private EntitlementPendingVideoData entitlementPendingVideoData;

    private boolean configurationChanged;
    private FirebaseAnalytics mFireBaseAnalytics;
    public boolean runUpdateDownloadIconTimer;
    private ContentDatum downloadContentDatumAfterPermissionGranted;
    private Action1<UserVideoDownloadStatus> downloadResultActionAfterPermissionGranted;
    private Action1<Boolean> downloadResultActionForPlaylistAfterPermissionGranted;
    private boolean requestDownloadQualityScreen;
    private boolean requestPlaylistDownload;
    private DownloadQueueThread downloadQueueThread;
    private boolean isVideoPlayerStarted;
    private EntitlementCheckActive entitlementCheckActive;
    private AppCMSAndroidModules appCMSAndroidModules;
    private Toast customToast;
    private AlertDialog dialogAlert;
    private boolean pageLoading;
    private boolean cancelLoad;
    private boolean cancelAllLoads;
    private int currentResumedActivities = 0;

    private boolean downloadInProgress;
    private boolean loginFromNavPage;
    private Action0 afterLoginAction;
    private boolean shouldLaunchLoginAction;
    private boolean selectedSubscriptionPlan;
    private Map<String, ContentDatum> userHistoryData;

    private int currentArticleIndex;
    private int currentPhotoGalleryIndex;
    private List<String> relatedArticleIds;
    private List<String> relatedPhotoGalleryIds;

    private boolean loginDialogPopupOpen = false;

    private volatile boolean processedUIModules;
    private volatile boolean processedUIPages;
    private String cachedAPIUserToken;
    private HashMap<String, CustomVideoPlayerView> playerViewCache;
    private HashMap<String, CustomWebView> webViewCache;
    private AppCMSWatchlistResult filmsInUserWatchList;
    private List<String> temporaryWatchlist;
    private List<String> temporaryFollowlist;
    private ImageButton currentMediaRouteButton;
    private ViewGroup currentMediaRouteButtonParent;
    private Typeface regularFontFace;
    private Typeface boldTypeFace;
    private Typeface semiBoldTypeFace;
    private Typeface extraBoldTypeFace;
    private Typeface italicTypeFace;
    private Typeface lightTypeFace;
    private boolean showNetworkConnectivity;
    private boolean waithingFor3rdPartyLogin;
    private AppCMSAndroidUI appCMSAndroid;
    private Map<String, MetaPage> pageIdToMetaPageMap;
    private boolean forceLoad;
    private Map<String, ViewCreator.UpdateDownloadImageIconAction> updateDownloadImageIconActionMap;
    private Map<String, DownloadComponent.UpdateDownloadImageIconAction> updateDownloadComponentImageIconActionMap;
    private LruCache<String, Object> tvPlayerViewCache;
    private boolean isTeamPAgeVisible = false;
    private ResponsePojo responsePojo;
    private String subscribeEmail;
    private String currentPageName;
    ProgressDialog progressDialog = null;
    ProgressDialog progressDialogDeleteDownload = null;
    LocalizationResult localizationResult = null;
    GenericMessages genericMessages = null;
    AppCMSBinder currentAppCMSBinder;
    public boolean isRecommendationTrayClicked = true;
    public boolean isRecommendationTray = true;

    private boolean isAudioPlayerOpen;
    private boolean isValidRedemptionCode;

    private UrbanAirshipEventPresenter urbanAirshipEventPresenter;
    private String uaAccessKey;
    private String uaChannelId;
    private UANamedUserEventCall uaNamedUserEventCall;

    private boolean purchaseFromRestore;

    private BitmapCachePresenter bitmapCachePresenter;

    private int numPagesProcessed;
    private CleverTapSDK cleverTapSDK;
    private FacebookAnalytics facebookAnalytics;
    private Language defaultLanguage;

    private AppPreference appPreference;

    private boolean appbarPresent = true;
    private boolean navbarPresent = true;
    public boolean isLoginWithTVProvider;
    String showDeatil06TrailerPlayerKey;

    LocalisedStrings localisedStrings;

    private boolean isPinVerified;
    private boolean enableBiometric;
    private String previousPage;

    AppCalendarEvent appCalendarEvent;
    VerimatrixCall verimatrixCall;
    ContentTypeChecker contentTypeChecker;
    private JusPayUtils jusPayUtils;
    OfflineVideoStatusCall offlineVideoStatusCall;
    Retrofit retrofit;
    AppCMSFirebaseAnalytics firebaseAnalytics;
    private boolean shouldCheckTVUpgrade;

    @Inject
    public AppCMSPresenter(Gson gson, Retrofit retrofit,
                           AppCMSArticleCall appCMSArticleCall,
                           AppCMSPhotoGalleryCall appCMSPhotoGalleryCall,
                           AppCMSScheduleCall appCMSScheduleCall,
                           AppCMSRosterCall appCMSRosterCall,
                           AppCMSLibraryCall appCMSLibraryCall,

                           AppCMSPlaylistCall appCMSPlaylistCall,
                           AppCMSTeamStandingCall appCMSTeamStadingtCall,
                           AppCMSTeamRoasterCall appCMSTeamRoasterCall,
                           AppCMSEventArchieveCall appCMSEventArchieveCall,

                           AppCMSSSLCommerzInitiateCall appCMSSSLCommerzInitiateCall,
                           AppCMSCCAvenueRSAKeyCall appCMSCCAvenueRSAKeyCall,
                           AppCMSAudioDetailCall appCMSAudioDetailCall,
                           AppCMSMainUICall appCMSMainUICall,
                           AppCMSAndroidUICall appCMSAndroidUICall,
                           AppCMSPageUICall appCMSPageUICall,
                           AppCMSResourceCall appCMSResourceCall, AppCMSSiteCall appCMSSiteCall,
                           AppCMSIPGeoLocatorCall appCMSIPGeoLocatorCall,
                           AppCMSWeatherFeedCall appCMSWeatherFeedCall,
                           AppCMSSearchCall appCMSSearchCall,

                           AppCMSWatchlistCall appCMSWatchlistCall,

                           AppCMSBillingHistoryCall appCMSBillingHistoryCall,

                           AppCMSHistoryCall appCMSHistoryCall,

                           AppCMSDeleteHistoryCall appCMSDeleteHistoryCall,

                           AppCMSSubscriptionCall appCMSSubscriptionCall,
                           AppCMSSubscriptionPlanCall appCMSSubscriptionPlanCall,
                           AppCMSAnonymousAuthTokenCall appCMSAnonymousAuthTokenCall,

                           AppCMSBeaconRest appCMSBeaconRest,
                           AppCMSSignInCall appCMSSignInCall,
                           AppCMSRedeemCall appCMSRedeemCall,
                           AppCMSRefreshIdentityCall appCMSRefreshIdentityCall,
                           AppCMSResetPasswordCall appCMSResetPasswordCall,

                           AppCMSFacebookLoginCall appCMSFacebookLoginCall,
                           AppCMSGoogleLoginCall appCMSGoogleLoginCall,

                           AppCMSUserIdentityCall appCMSUserIdentityCall,
                           GoogleRefreshTokenCall googleRefreshTokenCall,
                           GoogleCancelSubscriptionCall googleCancelSubscriptionCall,

                           AppCMSUpdateWatchHistoryCall appCMSUpdateWatchHistoryCall,
                           AppCMSUserVideoStatusCall appCMSUserVideoStatusCall,
                           AppCMSUserDownloadVideoStatusCall appCMSUserDownloadVideoStatusCall,
                           AppCMSBeaconCall appCMSBeaconCall,

                           AppCMSRestorePurchaseCall appCMSRestorePurchaseCall,

                           AppCMSAndroidModuleCall appCMSAndroidModuleCall,
                           AppCMSSignedURLCall appCMSSignedURLCall,

                           AppCMSAddToWatchlistCall appCMSAddToWatchlistCall,

                           AppCMSCCAvenueCall appCMSCCAvenueCall,

                           Map<String, AppCMSUIKeyType> jsonValueKeyMap,
                           Map<String, String> pageNameToActionMap,
                           Map<String, AppCMSPageUI> actionToPageMap,
                           Map<String, AppCMSPageAPI> actionToPageAPIMap,
                           Map<String, AppCMSActionType> actionToActionTypeMap,

                           ReferenceQueue<Object> referenceQueue,
                           AppCMSSubscribeForLatestNewsCall appCMSSubscribeForLatestNewsCall,
                           CleverTapSDK cleverTapSDK,
                           AppCMSEmailConsentCall appCMSEmailConsentCall,
                           AppPreference appPreference,
                           FacebookAnalytics facebookAnalytics,
                           AppCMSJuspayCall appCMSJuspayCall,
                           GetUserRecommendGenreCall getUserRecommendGenreCall, LocalisedStrings localisedStrings,
                           AppCalendarEvent appCalendarEvent, AppCMSLocationCall appCMSLocationCall,
                           AppCMSParentalRatingMapCall appCMSParentalRatingMapCall,
                           VerimatrixCall verimatrixCall, OfflineVideoStatusCall offlineVideoStatusCall) {
        this.offlineVideoStatusCall = offlineVideoStatusCall;
        this.appCalendarEvent = appCalendarEvent;
        this.retrofit = retrofit;
        this.verimatrixCall = verimatrixCall;
        this.getUserRecommendGenreCall = getUserRecommendGenreCall;
        this.localisedStrings = localisedStrings;
        this.facebookAnalytics = facebookAnalytics;
        this.appPreference = appPreference;
        this.cleverTapSDK = cleverTapSDK;
        this.appCMSSubscribeForLatestNewsCall = appCMSSubscribeForLatestNewsCall;
        this.gson = gson;
        this.appCMSPlaylistCall = appCMSPlaylistCall;
        this.appCMSTeamStadingtCall = appCMSTeamStadingtCall;
        this.appCMSTeamRoasterCall = appCMSTeamRoasterCall;
        this.appCMSEventArchieveCall = appCMSEventArchieveCall;
        this.appCMSRosterCall = appCMSRosterCall;
        this.appCMSLibraryCall = appCMSLibraryCall;
        this.appCMSEmailConsentCall = appCMSEmailConsentCall;

        this.appCMSSSLCommerzInitiateCall = appCMSSSLCommerzInitiateCall;
        this.appCMSCCAvenueRSAKeyCall = appCMSCCAvenueRSAKeyCall;
        this.appCMSAudioDetailCall = appCMSAudioDetailCall;
        this.appCMSMainUICall = appCMSMainUICall;
        this.appCMSAndroidUICall = appCMSAndroidUICall;
        this.appCMSPageUICall = appCMSPageUICall;
        this.appCMSResourceCall = appCMSResourceCall;
        this.appCMSSiteCall = appCMSSiteCall;
        this.appCMSIPGeoLocatorCall = appCMSIPGeoLocatorCall;
        this.appCMSWeatherFeedCall = appCMSWeatherFeedCall;
        this.appCMSSearchCall = appCMSSearchCall;
        this.appCMSSignInCall = appCMSSignInCall;
        this.appCMSRedeemCall = appCMSRedeemCall;
        this.appCMSRefreshIdentityCall = appCMSRefreshIdentityCall;
        this.appCMSResetPasswordCall = appCMSResetPasswordCall;

        this.appCMSFacebookLoginCall = appCMSFacebookLoginCall;
        this.appCMSGoogleLoginCall = appCMSGoogleLoginCall;

        this.jsonValueKeyMap = jsonValueKeyMap;
        this.pageNameToActionMap = pageNameToActionMap;
        this.actionToPageMap = actionToPageMap;
        this.actionToActionTypeMap = actionToActionTypeMap;
        this.appCMSUserIdentityCall = appCMSUserIdentityCall;
        this.googleRefreshTokenCall = googleRefreshTokenCall;

        this.appCMSUpdateWatchHistoryCall = appCMSUpdateWatchHistoryCall;
        this.appCMSArticleCall = appCMSArticleCall;
        this.appCMSPhotoGalleryCall = appCMSPhotoGalleryCall;
        this.appCMSScheduleCall = appCMSScheduleCall;
        this.appCMSUserVideoStatusCall = appCMSUserVideoStatusCall;
        this.appCMSUserDownloadVideoStatusCall = appCMSUserDownloadVideoStatusCall;
        this.appCMSBeaconCall = appCMSBeaconCall;

        this.appCMSRestorePurchaseCall = appCMSRestorePurchaseCall;

        this.appCMSAndroidModuleCall = appCMSAndroidModuleCall;
        this.appCMSSignedURLCall = appCMSSignedURLCall;

        this.appCMSAddToWatchlistCall = appCMSAddToWatchlistCall;


        this.appCMSWatchlistCall = appCMSWatchlistCall;
        this.appCMSBillingHistoryCall = appCMSBillingHistoryCall;
        this.appCMSHistoryCall = appCMSHistoryCall;

        this.appCMSDeleteHistoryCall = appCMSDeleteHistoryCall;

        this.appCMSJuspayCall = appCMSJuspayCall;
        this.appCMSLocationCall = appCMSLocationCall;

        this.appCMSSubscriptionPlanCall = appCMSSubscriptionPlanCall;
        this.appCMSAnonymousAuthTokenCall = appCMSAnonymousAuthTokenCall;

        this.appCMSParentalRatingMapCall = appCMSParentalRatingMapCall;

        this.loadingPage = false;
        this.navigationPages = new HashMap<>();
        this.navigationPageData = new HashMap<>();
        this.pageIdToPageAPIUrlMap = new HashMap<>();
        this.actionToPageAPIUrlMap = new HashMap<>();
        this.actionToPageNameMap = new HashMap<>();
        this.pageIdToPageFunctionMap = new HashMap<>();
        this.actionTypeToMetaPageMap = new HashMap<>();
        this.onOrientationChangeHandlers = new ArrayList<>();
        this.onActionInternalEvents = new HashMap<>();
        this.currentActions = new Stack<>();
        this.beaconMessageRunnable = new BeaconRunnable(appCMSBeaconRest);
        this.beaconMessageThread = new Thread(this.beaconMessageRunnable);

        this.launchType = LaunchType.LOGIN_AND_SIGNUP;

        this.referenceQueue = referenceQueue;

        this.checkUpgradeFlag = false;
        this.upgradesAvailable = false;
        this.cancelAllLoads = false;
        this.downloadInProgress = false;
        this.loginFromNavPage = true;
        this.showNetworkConnectivity = true;
        this.waithingFor3rdPartyLogin = false;

        this.userHistoryData = new HashMap<>();

        this.updateDownloadImageIconActionMap = new HashMap<>();
        this.updateDownloadComponentImageIconActionMap = new HashMap<>();
        this.temporaryWatchlist = new ArrayList<>();
        this.purchaseFromRestore = false;
        this.pageIdToMetaPageMap = new HashMap<>();
        BaseView.setPreseneter(this);
        clearMaps();
        try {
            this.realmController = RealmController.with(currentActivity);
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.entitlementCheckActive = new EntitlementCheckActive(() -> {
            sendCloseOthersAction(null, true, false);
            launchButtonSelectedAction(entitlementCheckActive.getPagePath(),
                    entitlementCheckActive.getAction(),
                    entitlementCheckActive.getFilmTitle(),
                    entitlementCheckActive.getExtraData(),
                    entitlementCheckActive.getContentDatum(),
                    entitlementCheckActive.isCloseLauncher(),
                    entitlementCheckActive.getCurrentlyPlayingIndex(),
                    entitlementCheckActive.getRelateVideoIds());
        }, () -> {
            if (entitlementCheckActive.getContentDatum() != null && contentTypeChecker.isContentSVOD(entitlementCheckActive.getContentDatum().getSubscriptionPlans())) {
                showEntitlementDialog(DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                        () -> {
                        }, null);
                return;
            }
        });
        jusPayUtils = new JusPayUtils(this, appCMSJuspayCall);

        if (!TextUtils.isEmpty(appPreference.getFacebookAccessToken())) {
            isSignupFromFacebook = true;
            facebookAccessToken = appPreference.getFacebookAccessToken();
            facebookUserId = appPreference.getFacebookUserId();
            facebookEmail = appPreference.getLoggedInUserEmail();
            facebookUsername = appPreference.getLoggedInUserName();
        } else if (!TextUtils.isEmpty(appPreference.getGoogleAccessToken())) {
            isSignupFromGoogle = true;
            googleAccessToken = appPreference.getGoogleAccessToken();
            googleUserId = appPreference.getGoogleUserId();
            googleEmail = appPreference.getLoggedInUserEmail();
            googleUsername = appPreference.getLoggedInUserName();
        }
    }

    public JusPayUtils getJusPayUtils() {
        return jusPayUtils;
    }

    public String getPlanToPurchase() {
        return planToPurchase;
    }

    public String getSkuToPurchase() {
        return skuToPurchase;
    }

    public List<String> getAllowedPayMethods() {
        return allowedPayMethods;
    }

    public List<String> getCarrierBillingProviders() {
        return carrierBillingProviders;
    }

    public String getCurrentPageName() {
        return currentPageName;
    }

    public boolean isPinVerified() {
        return isPinVerified;
    }

    public void setPinVerified(boolean pinVerified) {
        isPinVerified = pinVerified;
    }

    public boolean isBiometricEnabled() {
        return enableBiometric;
    }

    public void setEnableBiometric(boolean enableBiometric) {
        this.enableBiometric = enableBiometric;
    }

    public void sendAppsFlyerPageViewEvent(String currentPage, String pageId) {
        String pageURL = null;
        if (!TextUtils.isEmpty(pageId)) {
            MetaPage metaPage = getMetaPage(pageId);
            if (metaPage != null) {
                pageURL = metaPage.getPageAPI();
            }
        }
        sendPageViewEvent(getPreviousPage(), currentPage, pageURL);
        if (currentPage.trim().toLowerCase().contains("view plans")) {
            sendPlanEvent();
        }
        setPreviousPage(currentPage);
    }

    public String getPreviousPage() {
        return previousPage;
    }

    public void setPreviousPage(String previousPage) {
        this.previousPage = previousPage;
    }


    public void setCurrentPageName(String pageId) {
        if (pageId != null && !TextUtils.isEmpty(pageId)) {
            this.currentPageName = pageIdToPageFunctionMap.get(pageId);
        }
    }

    public AppCMSBinder getCurrentAppCMSBinder() {
        return currentAppCMSBinder;
    }

    public void setCurrentAppCMSBinder(AppCMSBinder currentAppCMSBinder) {
        this.currentAppCMSBinder = currentAppCMSBinder;
    }

    public boolean isPageHeader(String pageId) {
        List<Headers> headerList = appCMSAndroid.getHeaders();
        if (headerList != null) {
            for (Headers header : headerList) {
                List<NavigationPrimary> headerItemData = header.getData();
                for (NavigationPrimary headerItemData1 : headerItemData) {
                    if (headerItemData1.getPageId() != null && pageId.contains(headerItemData1.getPageId())) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public AppCMSTrayMenuDialogFragment.TrayMenuClickListener trayMenuClickListener =
            new AppCMSTrayMenuDialogFragment.TrayMenuClickListener() {
                @Override
                public void addToWatchListClick(boolean isAddedOrNot, ContentDatum contentDatum) {
                    // ADD WATCHLIST API CALLING
                    addToWatchList(isAddedOrNot, contentDatum, null, null);
                }

                @Override
                public void downloadClick(ContentDatum contentDatum) {
                    //Start Downloading
                    startVideoDownload(contentDatum, null);
                }
            };

    public void addToWatchList(boolean isAddedOrNot, ContentDatum contentDatum, ConstraintLayout constraintLayout, AppCMSUIKeyType componentKey) {
        showLoader();
        this.loginFromNavPage = true;
        if (isUserLoggedIn()) {
            editWatchlist(null, contentDatum, appCMSAddToWatchlistResult -> {
                        stopLoader();
                    },
                    isAddedOrNot,
                    true, constraintLayout, componentKey);
        } else {
            if (isAppSVOD() && isUserLoggedIn()) {
                showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED, null, null);
            } else {
                showEntitlementDialog(AppCMSPresenter.DialogType.ADD_TO_WATCHLIST,
                        null, metadataMap);
            }
            stopLoader();
        }
    }

    public void startVideoDownload(ContentDatum contentDatum, View view) {
        videoEntitlementDownload(contentDatum, new Action1<ContentDatum>() {
            @Override
            public void call(ContentDatum entitlementContentDatum) {
                if (entitlementContentDatum.getSubscriptionPlans() != null)
                    contentDatum.setSubscriptionPlans(entitlementContentDatum.getSubscriptionPlans());
                if (contentDatum.getSubscriptionPlans() != null) {
                    if (contentDatum.getSubscriptionPlans() != null && (appPreference.getTVEUserId() != null && contentTypeChecker.isContentTVE(contentDatum.getSubscriptionPlans()))
                            || (isUserSubscribed() && contentTypeChecker.isContentSVOD(contentDatum.getSubscriptionPlans()))
                            || contentTypeChecker.isContentFree(contentDatum.getSubscriptionPlans()) || contentTypeChecker.isContentAVOD(contentDatum.getSubscriptionPlans())) {
                        if (!isUserLoggedIn() && (contentTypeChecker.isContentFree(contentDatum.getSubscriptionPlans()) || contentTypeChecker.isContentAVOD(contentDatum.getSubscriptionPlans()))) {
                            showEntitlementDialog(DialogType.LOGIN_REQUIRED, null, null);
                        } else if (!appPreference.isUserAllowedDownload()) {
                            showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_PLAN_UPGRADE,
                                    null, null);
                        } else if (isDownloadQualityScreenShowBefore()) {
                            editDownload(entitlementContentDatum, contentDatum, null, null, view);
                        } else {
                            showDownloadQualityScreen(entitlementContentDatum, userVideoDownloadStatus -> {
                            });
                        }
                    } else {
                        openEntitlementScreen(contentDatum, false);
                    }
                } else {
                    if ((isAppSVOD() && isUserSubscribed()) ||
                            !isAppSVOD() && isUserLoggedIn()) {
                        if (appPreference.isDownloadQualityScreenShowBefore()) {
                            editDownload(entitlementContentDatum, contentDatum, null, null, view);
                        } else if (appCMSMain != null
                                && appCMSMain.getFeatures() != null
                                && appCMSMain.getFeatures().isMobileAppDownloads()) {
                            showDownloadQualityScreen(entitlementContentDatum, null);
                        }
                    } else {
                        if (isAppSVOD()) {
                            if (isUserLoggedIn()) {
                                showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                        () -> {
                                            setAfterLoginAction(() -> {
                                            });
                                        }, null);
                            } else {
                                showEntitlementDialog(AppCMSPresenter.DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                        () -> {
                                            setAfterLoginAction(() -> {
                                            });
                                        }, null);
                            }
                        } else if (!(isAppSVOD() && isUserLoggedIn())) {
                            showEntitlementDialog(AppCMSPresenter.DialogType.LOGIN_REQUIRED,
                                    () -> {
                                    }, null);
                        }
                    }
                }
            }
        });
    }

    public void stopLoader() {
        try {
            Intent stopPageLoadingActionIntent = new Intent(AppCMSPresenter.PRESENTER_STOP_PAGE_LOADING_ACTION);
            stopPageLoadingActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(stopPageLoadingActionIntent);
        } catch (Exception ex) {
        }
    }

    /**
     * This detects whether the input text field contains spaces and displays a Toast message
     * if spaces are detected
     *
     * @param passwordEditText The text field to examine for spaces
     * @param con              The text field Context
     */
    /*does not let user enter space in editText*/
    public void noSpaceInEditTextFilter(EditText passwordEditText, Context con) {
        /* To restrict Space Bar in Keyboard */
        InputFilter filter = (source, start, end, dest, dstart, dend) -> {
            for (int i = start; i < end; i++) {
                if (Character.isWhitespace(source.charAt(i))) {
                    Toast.makeText(con, localisedStrings.getPasswordFormatValidationText(), Toast.LENGTH_SHORT).show();
                    return "";
                }
            }
            return null;
        };
        passwordEditText.setFilters(new InputFilter[]{filter});
    }

    /**
     * This will format a time value in msec since the epoch and convert it into a String value using
     * the dataFormat value.
     *
     * @param timeMilliSeconds The time value to convert into a Date/Time string
     * @param dateFormat       The data format to use for the conversion
     * @return Returns the converted Date/Time string
     */
    public String getDateFormat(long timeMilliSeconds, String dateFormat) {
        SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timeMilliSeconds);
        return formatter.format(calendar.getTime());
    }

    public String geTimeFormat(long timeDifference, boolean isWithUnit) {

        long difference = timeDifference;
        long secondsInMilli = 1000;
        long minutesInMilli = secondsInMilli * 60;
        long hoursInMilli = minutesInMilli * 60;
        long daysInMilli = hoursInMilli * 24;

        long elapsedDays = difference / daysInMilli;
        difference = difference % daysInMilli;

        long elapsedHours = difference / hoursInMilli;
        difference = difference % hoursInMilli;

        long elapsedMinutes = difference / minutesInMilli;
        difference = difference % minutesInMilli;

        long elapsedSeconds = difference / secondsInMilli;
        String daysDifference = "";
        String hoursDifference = "";
        String minDifference = "";
        String secDifference = "";

        String differenceFormat = "";
        if (isWithUnit) {
            if (elapsedDays > 1) {
                daysDifference = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.days));
            } else if (elapsedDays > 0) {
                daysDifference = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.day));
            }
            if (elapsedHours > 1) {
                hoursDifference = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hours));
            } else if (elapsedHours > 0) {
                hoursDifference = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hour));
            }
            if (elapsedMinutes > 1) {
                minDifference = String.format("%02d", elapsedMinutes) + " " + Utils.convertStringIntoCamelCase(getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minutes)));
            } else if (elapsedMinutes > 0) {
                minDifference = String.format("%02d", elapsedMinutes) + " " + Utils.convertStringIntoCamelCase(getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minute)));
            }
            if (elapsedSeconds > 1) {
                secDifference = String.format("%02d", elapsedSeconds) + " " + Utils.convertStringIntoCamelCase(getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.seconds)));
            } else if (elapsedSeconds > 0) {
                secDifference = String.format("%02d", elapsedSeconds) + " " + Utils.convertStringIntoCamelCase(getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.second)));
            }
            differenceFormat = daysDifference + " " + hoursDifference + " " + minDifference + " " + secDifference;
        } else {
            differenceFormat = (String.format("%02d", elapsedDays) + ":" + String.format("%02d", elapsedHours) + ":" + String.format("%02d", elapsedMinutes) + ":" + String.format("%02d", elapsedSeconds));

        }

        return differenceFormat;
    }


    public String getTimeFormatForHistory(long timeDifference, Module module) {
        long difference = timeDifference;
        long secondsInMilli = 1000;
        long minutesInMilli = secondsInMilli * 60;
        long hoursInMilli = minutesInMilli * 60;
        long daysInMilli = hoursInMilli * 24;

        long elapsedDays = difference / daysInMilli;
        difference = difference % daysInMilli;

        long elapsedHours = difference / hoursInMilli;
        difference = difference % hoursInMilli;

        long elapsedMinutes = difference / minutesInMilli;
        difference = difference % minutesInMilli;

        long elapsedSeconds = difference / secondsInMilli;

        String differenceFormat = "";
        if (elapsedDays > 0) {
            if (elapsedDays == 1) {
                String day = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.day_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrDayAgo() != null) {
                    day = module.getMetadataMap().getkStrDayAgo();
                }
                differenceFormat = String.format("%d", elapsedDays) + " " + day;
            } else {
                String days = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.days_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrDaysAgo() != null) {
                    days = module.getMetadataMap().getkStrDaysAgo();
                }
                differenceFormat = String.format("%d", elapsedDays) + " " + days;
            }
        } else if (elapsedHours > 0) {
            if (elapsedHours == 1) {
                String hour = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hour_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrHourAgo() != null) {
                    hour = module.getMetadataMap().getkStrHourAgo();
                }
                differenceFormat = String.format("%d", elapsedHours) + " " + hour;
            } else {
                String hours = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hours_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrHoursAgo() != null) {
                    hours = module.getMetadataMap().getkStrHoursAgo();
                }
                differenceFormat = String.format("%d", elapsedHours) + " " + hours;
            }
        } else if (elapsedMinutes > 0) {
            if (elapsedMinutes == 1) {
                String min = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minute_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrMinuteAgoiOS() != null) {
                    min = module.getMetadataMap().getkStrMinuteAgoiOS();
                }
                differenceFormat = String.format("%d", elapsedMinutes) + " " + min;
            } else {
                String mins = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minutes_ago));
                if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrMinutesAgoiOS() != null) {
                    mins = module.getMetadataMap().getkStrMinutesAgoiOS();
                }
                differenceFormat = String.format("%d", elapsedMinutes) + " " + mins;
            }
        } else if (elapsedSeconds > 0) {
            String sec = getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.second_ago));
            if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getkStrSecondsAgo() != null) {
                sec = module.getMetadataMap().getkStrSecondsAgo();
            }
            differenceFormat = String.format("%d", elapsedSeconds) + " " + sec;
        }
        String addedString = getLanguageResourcesFile().getStringValue(currentActivity.getString(R.string.added_time_ago));
        if (module != null && module.getMetadataMap() != null
                && module.getMetadataMap().getkAddedText() != null) {
            addedString = module.getMetadataMap().getkAddedText();
        }

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(addedString);
        stringBuilder.append(" ");
        stringBuilder.append(differenceFormat);


        return stringBuilder.toString();
    }


    public String getDateFormatByTimeZone(long timeMilliSeconds, String dateFormat, String timeZone) {
        SimpleDateFormat formatter = new SimpleDateFormat(dateFormat, Locale.US);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timeMilliSeconds);
//        formatter.setTimeZone(TimeZone.getTimeZone(timeZone));
        formatter.setTimeZone(TimeZone.getDefault());

        return formatter.format(calendar.getTime());
    }

    public long addHourtoMs(long timeMilliSeconds, float hour) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timeMilliSeconds);
        // Substract 2 hour from the current time
        calendar.add(Calendar.HOUR, (int) hour);


        return calendar.getTimeInMillis();
    }

    public long getTimeIntervalForEventSchedule(long timeMilliSecondsEvent, String dateFormat) {
        long timeDifference = 0;
        SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timeMilliSecondsEvent);
//        formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
//        formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
        formatter.setTimeZone(TimeZone.getDefault());

        String eventTime = formatter.format(calendar.getTime());

        SimpleDateFormat formatterCurrentTime = new SimpleDateFormat(dateFormat);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendarCurrent = Calendar.getInstance();
        calendarCurrent.setTimeInMillis(System.currentTimeMillis()
        );
        formatterCurrentTime.setTimeZone(TimeZone.getDefault());

        String currentTime = formatterCurrentTime.format(calendarCurrent.getTime());
        long eventTimeInMs = getMillisecondFromDaeString(dateFormat, eventTime);
        long currentTimeInMs = getMillisecondFromDaeString(dateFormat, currentTime);
        timeDifference = eventTimeInMs - currentTimeInMs;
        return timeDifference;
    }

    /**
     * @param timeMilliSecondsEvent
     * @param dateFormat
     * @return Calculating dateFormat difference from current time
     */
    public long getTimeIntervalForEvent(long timeMilliSecondsEvent, String dateFormat) {
        long timeDifference = 0, timeDifferenceEvent = 0;
        SimpleDateFormat formatter = new SimpleDateFormat(dateFormat);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timeMilliSecondsEvent);
//        formatter.setTimeZone(TimeZone.getTimeZone("GMT"));
        formatter.setTimeZone(TimeZone.getTimeZone("UTC"));
//        formatter.setTimeZone(TimeZone.getDefault());

        String eventTime = formatter.format(calendar.getTime());

        SimpleDateFormat formatterCurrentTime = new SimpleDateFormat(dateFormat);
        // Create a calendar object that will convert the date and time value in milliseconds to date.
        Calendar calendarCurrent = Calendar.getInstance();
        calendarCurrent.setTimeInMillis(System.currentTimeMillis()
        );
        formatterCurrentTime.setTimeZone(TimeZone.getTimeZone("UTC"));

//        formatterCurrentTime.setTimeZone(TimeZone.getDefault());

        String currentTime = formatterCurrentTime.format(calendarCurrent.getTime());
        long eventTimeInMs = getMillisecondFromDaeString(dateFormat, eventTime);
        long currentTimeInMs = getMillisecondFromDaeString(dateFormat, currentTime);
        ZonedDateTime nowTime = ZonedDateTime.now(UTC_ZONE_ID);
        nowTime.toEpochSecond();

        timeDifferenceEvent = calendar.getTimeInMillis() - calendarCurrent.getTimeInMillis();
        return timeDifferenceEvent;
    }

    public long getTimeDifferenceFromCurrentTime(long timeMilliSecondsEvent, String dateFormat) {
        long timeDifference = 0, timeDifferenceEvent = 0;


        timeDifferenceEvent = timeMilliSecondsEvent - System.currentTimeMillis();
        return timeDifferenceEvent;
    }

    public String getRentExpirationFormat(long timeDifference) {

        String differenceFormat = getTimeDifference(timeDifference);
        if (differenceFormat != null && differenceFormat.length() > 0)
            differenceFormat = differenceFormat + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.remaining));
        return differenceFormat;
    }

    public String getTimeDifference(long timeDifference) {
        long difference = timeDifference;
        long secondsInMilli = 1000;
        long minutesInMilli = secondsInMilli * 60;
        long hoursInMilli = minutesInMilli * 60;
        long daysInMilli = hoursInMilli * 24;

        long elapsedDays = difference / daysInMilli;
        difference = difference % daysInMilli;

        long elapsedHours = difference / hoursInMilli;
        difference = difference % hoursInMilli;

        long elapsedMinutes = difference / minutesInMilli;
        difference = difference % minutesInMilli;

        long elapsedSeconds = difference / secondsInMilli;
        String differenceFormat = "";

        if ((elapsedDays >= 0 && (elapsedHours == 0 && elapsedMinutes == 0 && elapsedSeconds == 0))) {
            if (elapsedDays > 1) {
                differenceFormat = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.days_caps));
            } else if (elapsedDays > 0) {
                differenceFormat = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.day_caps));
            }
        } else if ((elapsedHours >= 0 && (elapsedMinutes == 0 && elapsedSeconds == 0))) {
            if (elapsedHours > 1) {
                differenceFormat = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hours));
            } else if (elapsedHours > 0) {
                differenceFormat = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hour));
            }
        } else if ((elapsedDays > 0 && (elapsedHours > 0 || elapsedMinutes > 0 || elapsedSeconds > 0)) ||
                (elapsedDays == 0 && (elapsedHours > 0))) {

            elapsedDays++;
            if (elapsedDays > 1) {
                differenceFormat = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.days_caps));
            } else if (elapsedDays > 0) {
                differenceFormat = String.format("%02d", elapsedDays) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.day_caps));
            }
        } else if ((elapsedHours > 0 && (elapsedMinutes > 0 || elapsedSeconds > 0)) ||
                (elapsedHours == 0 && (elapsedMinutes > 0))) {
            elapsedHours++;
            if (elapsedHours > 1) {
                differenceFormat = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hours));
            } else if (elapsedHours > 0) {
                differenceFormat = String.format("%02d", elapsedHours) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.hour));
            }
        } else if (elapsedMinutes >= 0 && (elapsedSeconds > 0)) {
            elapsedMinutes++;
            if (elapsedMinutes > 1) {
                differenceFormat = String.format("%02d", elapsedMinutes) + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minutes));
            } else if (elapsedMinutes > 0) {
                differenceFormat = String.format("%02d", elapsedMinutes) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.minute));
            }
        } else if (elapsedSeconds > 1) {
            differenceFormat = String.format("%02d", elapsedSeconds) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.seconds));
        } else if (elapsedSeconds > 0) {
            differenceFormat = String.format("%02d", elapsedSeconds) + " " + getLanguageResourcesFile().getUIresource(currentContext.getResources().getString(R.string.second));
        }

        return differenceFormat;

    }

    private long getMillisecondFromDaeString(String dateFormat, String date) {
        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        try {
            Date mDate = sdf.parse(date);
            long timeInMilliseconds = mDate.getTime();
            return timeInMilliseconds;
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return 0;
    }


    /**
     * This converts an input time value in msec since the epoch into a Time value in the format
     * HH:MM:SS
     *
     * @param runtime The input time value to convert
     * @return Return a string with the converted time in the format HH:MM:SS
     */
    public String convertSecondsToTime(long runtime) {
        StringBuilder timeInString = new StringBuilder();
        runtime = runtime * 1000;
        long days = TimeUnit.MILLISECONDS.toDays(runtime);
        runtime -= TimeUnit.DAYS.toMillis(days);
        if (days != 0) {
            timeInString.append(Long.toString(days));
        }

        long hours = TimeUnit.MILLISECONDS.toHours(runtime);
        runtime -= TimeUnit.HOURS.toMillis(hours);
        if (hours != 0 || timeInString.length() > 0) {
            if (timeInString.length() > 0) {
                timeInString.append(":");
            }
            timeInString.append(Long.toString(hours));
        }
//        else {
//            timeInString.append("0");
//        }

        long minutes = TimeUnit.MILLISECONDS.toMinutes(runtime);
        runtime -= TimeUnit.MINUTES.toMillis(minutes);
//        if (minutes != 0 || timeInString.length() > 0){
        if (hours > 0) {
            timeInString.append(":");
        }
        if (minutes == 0) {
            timeInString.append("0");
        }
        if (minutes > 0 && minutes < 10)
            timeInString.append(minutes);

        if (minutes >= 10)
            timeInString.append(Long.toString(minutes));
//        }

        long seconds = TimeUnit.MILLISECONDS.toSeconds(runtime);
//        if (seconds != 0 || timeInString.length() > 0){
        if (timeInString.length() > 0) {
            timeInString.append(":");
        }
        if (seconds < 10) {
            timeInString.append("0");
        }
        timeInString.append(Long.toString(seconds));
//        }
        return timeInString.toString();
    }

    /**
     * This detects whether the input text field contains spaces and displays a Toast message
     * if spaces are detected
     */

    public String getUaAccessKey() {
        return uaAccessKey;
    }

    public void setUaAccessKey(String uaAccessKey) {
        this.uaAccessKey = uaAccessKey;
    }

    public String getUaChannelId() {
        return uaChannelId;
    }

    public void setUaChannelId(String uaChannelId) {
        this.uaChannelId = uaChannelId;
    }

    public boolean isHeaderNavExist() {
        if (getAppCMSAndroid().getHeaders() != null && getAppCMSAndroid().getHeaders().size() > 0) {
            return true;
        }
        return false;
    }

    /**
     * This returns the current Android JSON object
     *
     * @return Return the current Android JSON object
     */
    public AppCMSAndroidUI getAppCMSAndroid() {
        return appCMSAndroid;
    }

    public void initializeGetSocial() {
        if (appCMSAndroid != null && appCMSAndroid.getGetSocialAppId() != null) {
            GetSocialHelper.init(appCMSAndroid.getGetSocialAppId(), this);
        }
    }

    /**
     * This sets the current Android JSON object
     *
     * @param appCMSAndroid The Android JSON object to be assigned
     */
    public void setAppCMSAndroid(AppCMSAndroidUI appCMSAndroid) {
        this.appCMSAndroid = appCMSAndroid;
    }

    /**
     * Returns a flag to indicate whether the no network connectivity Toast should be displayed.
     *
     * @return Returns a flag to indicate whether the no network connectivity Toast should be displayed
     */
    public boolean shouldShowNetworkContectivity() {
        return showNetworkConnectivity;
    }

    /**
     * Sets the flag used to indicate whether the no network connectivity Toast should be displayed.
     *
     * @param showNetworkConnectivity The value of the flag
     */
    public void setShowNetworkConnectivity(boolean showNetworkConnectivity) {
        this.showNetworkConnectivity = showNetworkConnectivity;
    }

    /**
     * This sets the flag used to indicate whether all current network loads should be cancelled.
     *
     * @param cancelAllLoads The flag used to indicate whether all current network loads should be cancelled
     */
    public void setCancelAllLoads(boolean cancelAllLoads) {
        this.cancelAllLoads = cancelAllLoads;
        if (cancelAllLoads) {
            showLoadingDialog(false);
        }
    }

    public Headers getHeaders() {

        return headers;
    }

    /**
     * This returns the navigation JSON object returned in the main.json JSON object.
     *
     * @return Returns the navigation JSON object returned in the main.json JSON object.
     */
    public Navigation getNavigation() {
        return navigation;
    }

    /**
     * This returns the flag used to indicate whether the subscription flow banner message
     * should be displayed to the user.
     *
     * @return Returns the flag used to indicate whether the subscription flow banner message
     * should be displayed to the user
     */
    public SubscriptionFlowContent getSubscriptionFlowContent() {
        return subscriptionFlowContent;
    }

    /**
     * Returns the LRU cache for storing the most recent page API responses.
     *
     * @return Returns the LRU cache for storing the most recent page API responses
     */
    public LruCache<String, AppCMSPageAPI> getPageAPILruCache() {
        if (pageAPILruCache == null) {
            int PAGE_API_LRU_CACHE_SIZE = 10;
            pageAPILruCache = new LruCache<>(PAGE_API_LRU_CACHE_SIZE);
        }
        return pageAPILruCache;
    }

    /**
     * Return the LRU cache used for storing the most recent Page View objects.
     *
     * @return Return the LRU cache used for storing the most recent Page View objects
     */
    public LruCache<String, WeakReference<PageView>> getPageViewLruCache() {
        if (pageViewLruCache == null) {
            int PAGE_LRU_CACHE_SIZE = 10;
            pageViewLruCache = new LruCache<>(PAGE_LRU_CACHE_SIZE);
        }
        return pageViewLruCache;
    }

    /**
     * This removes a Page API response from the LRU cache.
     *
     * @param context The current Context
     * @param pageId  The pageId used to identify the element in the LRU cache
     */
    public void removeLruCacheItem(Context context, String pageId) {
        if (getPageViewLruCache().get(pageId + BaseView.isLandscape(context)) != null) {
            getPageViewLruCache().remove(pageId + BaseView.isLandscape(context));
        }
    }

    /**
     * This resets the current Activity object when an Activity has been destroyed and should no
     * longer be used.
     *
     * @param closedActivity The current Activity to be reset.
     */
    public void unsetCurrentActivity(Activity closedActivity) {
        if (currentActivity == closedActivity) {
            //currentActivity = null;
            if (this.realmController != null) {
                try {
                    this.realmController.closeRealm();
                } catch (Exception e) {

                }
            }
        }
    }

    /**
     * This calls the GA intialization method to begin tracking events.
     *
     * @param trackerId The GA ID to assign to the new tracker
     */
    @SuppressLint("MissingPermission")
    public void initializeGA(String trackerId) {
        if (this.googleAnalytics == null && currentActivity != null) {
            this.googleAnalytics = GoogleAnalytics.getInstance(currentActivity);
            this.tracker = this.googleAnalytics.newTracker(trackerId);
        }
    }

    /**
     * Returns a flag to indicate whether a page is currently being loaded.
     *
     * @param isLoading Returns a flag to indicate whether a page is currently being loaded
     */
    public void setIsLoading(boolean isLoading) {
        loadingPage = isLoading;
    }

    /**
     * Returns a flag to indicate whether a download is currently in progress.
     *
     * @return Returns a flag to indicate whether a download is currently in progress
     */
    @SuppressWarnings("unused")
    public boolean isDownloadInProgress() {
        return downloadInProgress;
    }

    /**
     * Sets the flag indicate whether a download is currently in progress.
     *
     * @param downloadInProgress The flag to be set to indicate whether a download is currently in progress.
     */
    public void setDownloadInProgress(boolean downloadInProgress) {
        this.downloadInProgress = downloadInProgress;
    }

    private String appApiBaseUrl() {
        String baseUrl = appCMSMain.getApiBaseUrl();
        if (isHardCodedUrlNeeded) {
            baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha); //"https://prod-api-cached-2.viewlift.com";
            if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null
                    && appCMSMain.getApiBaseUrl().contains("staging-api")) {
                baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha_staging);
            }
        } else {
            baseUrl = appCMSMain.getApiBaseUrl();
            if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null
                    && appCMSMain.getApiBaseUrl().contains("staging-api")
                    && appCMSMain.getApiBaseUrlCached() != null) {
                baseUrl = appCMSMain.getApiBaseUrlCached();
            }
        }
        return baseUrl;
    }

    /**
     * Returns the API URL to be used for making page API requests
     *
     * @param usePageIdQueryParam Flag to indicate whether the pageId query parameter should be used
     * @param viewPlansPage       Flag to indicate whether the requested page is the View Plans page
     * @param showPage            Flag to indicate whether the requested page is the Show page
     * @param baseUrl             The base URL of the API request
     * @param endpoint            The end point of the API request
     * @param siteId              The value of the Site ID query parameter
     * @param pageId              The pageId value
     * @param usedCachedAPI       Flag to indicate whether the cache API should be used
     * @return Returns the constructed API URL
     */
    // TODO : comment this method and uncomment below method for apps other than uses cached api(Hoichoi, Aha, ...)
    public String getApiUrl(boolean usePageIdQueryParam,
                            boolean viewPlansPage,
                            boolean showPage,
                            boolean categoryPage,
                            String[] extraData,
                            String baseUrl,
                            String endpoint,
                            String siteId,
                            String pageId,
                            boolean usedCachedAPI) {
        String planUrl = baseUrl;
        String deviceType = currentContext.getString(R.string.app_cms_subscription_platform_key);
        if (platformType == PlatformType.TV)
            deviceType = currentContext.getString(R.string.app_cms_subscription_tv_platform_key);
        baseUrl = appApiBaseUrl();
        appCMSMain.setApiBaseUrlCached(baseUrl);
        if (currentContext != null && pageId != null) {
            if (usePageIdQueryParam && pageId.contains("/")) {
                usePageIdQueryParam = false;
            }
            String urlWithContent = null;
            String storeCountryCode = this.storeCountryCode;
            if (platformType != PlatformType.TV)
                storeCountryCode = CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode());
            if (usePageIdQueryParam) {
                if (viewPlansPage) {
                    if (platformType == PlatformType.TV) {
                        if (!TextUtils.isEmpty(storeCountryCode)) {
                            urlWithContent =
                                    currentContext.getString(R.string.app_cms_page_api_view_plans_url_country,
                                            planUrl,
                                            endpoint,
                                            siteId,
                                            deviceType,
                                            getLanguageParamForAPICall(),
                                            storeCountryCode);
                        } else {
                            urlWithContent =
                                    currentContext.getString(R.string.app_cms_page_api_view_plans_url,
                                            planUrl,
                                            endpoint,
                                            siteId,
                                            deviceType,
                                            getLanguageParamForAPICall());
                        }
                    } else {
                        urlWithContent =
                                currentContext.getString(R.string.app_cms_page_api_view_plans_url_country,
                                        planUrl,
                                        endpoint,
                                        siteId,
                                        deviceType,
                                        getLanguageParamForAPICall(),
                                        storeCountryCode);
                    }
                } else {
                    if (usedCachedAPI && appCMSMain.getApiBaseUrlCached() != null && !TextUtils.isEmpty(appCMSMain.getApiBaseUrlCached())) {

                        urlWithContent = currentContext.getString(R.string.app_cms_cached_page_api_url,
                                baseUrl,
                                siteId,
                                pageId,
                                getLanguageParamForAPICall(), deviceType, storeCountryCode);
                    } else {
                        if (getMetaPage(pageId) != null
                                && (isPageAVideoPage(getMetaPage(pageId).getPageName())
                                || isPageAShowPage(pageId, getMetaPage(pageId).getPageName())
                                || isPageAPlayListPage(getMetaPage(pageId).getPageName()))) {
                            urlWithContent = currentContext.getString(R.string.app_cms_page_api_url,
                                    baseUrl,
                                    endpoint,
                                    siteId,
                                    currentContext.getString(R.string.app_cms_page_id_query_parameter),
                                    pageId,
                                    getLanguageParamForAPICall(), deviceType, storeCountryCode);
                        } else {
                            urlWithContent = currentContext.getString(R.string.app_cms_page_api_url,
                                    baseUrl,
                                    endpoint,
                                    siteId,
                                    currentContext.getString(R.string.app_cms_page_id_query_parameter),
                                    pageId,
                                    getLanguageParamForAPICall(), deviceType, storeCountryCode);
                        }
                    }
                }
            } else {
                if (showPage) {
                    urlWithContent = currentContext.getString(R.string.app_cms_shows_status_api_url,
                            baseUrl,
                            endpoint,
                            pageId,
                            siteId,
                            getLanguageParamForAPICall(), deviceType, storeCountryCode);
                } else if (categoryPage) {
                    if (platformType.equals(PlatformType.ANDROID)) {
                        String categoryModule = "";
                        if (moduleId != null && !TextUtils.isEmpty(moduleId)) {
                            categoryModule = ("&moduleId=" + moduleId);
                        }
                        urlWithContent = currentContext.getString(R.string.app_cms_category_api_url,
                                baseUrl,
                                endpoint == null ? "/content/pages" : endpoint,
                                pageId,
                                siteId,
                                "0",
                                getLanguageParamForAPICall(),
                                CommonUtils.getCountryCodeFromAuthToken(getAuthToken()),
                                moduleId);
                    } else {
                        if (isUserLoggedIn()) {
                            urlWithContent = currentContext.getString(R.string.app_cms_see_all_category_api_url_with_user_id,
                                    baseUrl,
                                    endpoint == null ? "/content/pages" : endpoint,
                                    getSeeAllModule().getSettings().getSeeAllPermalink(),
                                    siteId,
                                    "true",
                                    String.valueOf(offset),
                                    getLanguageParamForAPICall(),
                                    CommonUtils.getCountryCodeFromAuthToken(getAuthToken()),
                                    /*extraData[0],*/
                                    getLoggedInUser());
                        } else {
                            urlWithContent = currentContext.getString(R.string.app_cms_see_all_category_api_url,
                                    baseUrl,
                                    endpoint == null ? "/content/pages" : endpoint,
                                    getSeeAllModule().getSettings().getSeeAllPermalink(),
                                    siteId,
                                    "true",
                                    String.valueOf(offset),
                                    getLanguageParamForAPICall(),
                                    CommonUtils.getCountryCodeFromAuthToken(getAuthToken())/*,
                                extraData[0]*/);
                        }
                    }
                } else {
                    urlWithContent = currentContext.getString(R.string.app_cms_page_api_url,
                            baseUrl,
                            endpoint,
                            siteId,
                            currentContext.getString(R.string.app_cms_page_path_query_parameter),
                            pageId,
                            getLanguageParamForAPICall(), deviceType, storeCountryCode);
                }
            }
            urlWithContent = urlWithContent + "&countryCode=" + CommonUtils.getCountryCodeFromAuthToken(getAuthToken());
            //  Log.d("urlWithContent, getCountryCodeFromAuthToken ", CommonUtils.getCountryCodeFromAuthToken(getAuthToken()) + ", " + urlWithContent);
            return urlWithContent;
        }
        return null;
    }

    /*
        public String getApiUrl(boolean usePageIdQueryParam,
                            boolean viewPlansPage,
                            boolean showPage,
                            boolean categoryPage,
                            String[] extraData,
                            String baseUrl,
                            String endpoint,
                            String siteId,
                            String pageId,
                            boolean usedCachedAPI) {
        if (currentContext != null && pageId != null) {
            if (usePageIdQueryParam && pageId.contains("/")) {
                usePageIdQueryParam = false;
            }
            String urlWithContent = null;
            if (usePageIdQueryParam) {
                if (viewPlansPage) {
                    String deviceType = currentContext.getString(R.string.app_cms_subscription_platform_key);
                    String storeCountryCode = "IN";  //TODO :default should be for android.
                    if (platformType == PlatformType.TV) {
                        deviceType = currentContext.getString(R.string.app_cms_subscription_tv_platform_key);
                        storeCountryCode = this.storeCountryCode;
                    }
                    urlWithContent =
                            currentContext.getString(R.string.app_cms_page_api_view_plans_url,
                                    baseUrl,
                                    endpoint,
                                    siteId,
                                    deviceType,
                                    getLanguageParamForAPICall(),
                                    storeCountryCode
                            );
                } else {
                    if (usedCachedAPI && appCMSMain.getApiBaseUrlCached() != null && !TextUtils.isEmpty(appCMSMain.getApiBaseUrlCached())) {
                        if (isUserLoggedIn()) {
                            urlWithContent = currentContext.getString(R.string.app_cms_cached_page_api_url_with_user_id,
                                    appCMSMain.getApiBaseUrlCached(),
                                    siteId,
                                    pageId,
                                    appPreference.getLoggedInUser(),
                                    getLanguageParamForAPICall());
                        } else {
                            urlWithContent = currentContext.getString(R.string.app_cms_cached_page_api_url,
                                    appCMSMain.getApiBaseUrlCached(),
                                    siteId,
                                    pageId,
                                    getLanguageParamForAPICall());
                        }
                    } else {
                        if (isUserLoggedIn())
                            urlWithContent = currentContext.getString(R.string.app_cms_page_api_url_with_user_id,
                                    baseUrl,
                                    endpoint,
                                    siteId,
                                    currentContext.getString(R.string.app_cms_page_id_query_parameter),
                                    pageId,
                                    appPreference.getLoggedInUser(),
                                    getLanguageParamForAPICall());
                        else
                            urlWithContent = currentContext.getString(R.string.app_cms_page_api_url,
                                    baseUrl,
                                    endpoint,
                                    siteId,
                                    currentContext.getString(R.string.app_cms_page_id_query_parameter),
                                    pageId,
                                    getLanguageParamForAPICall());
                    }
                }
            } else {
                if (showPage) {
                    urlWithContent = currentContext.getString(R.string.app_cms_shows_status_api_url,
                            baseUrl,
                            endpoint,
                            pageId,
                            siteId,
                            isUserLoggedIn(),
                            getLanguageParamForAPICall());
                } else if (categoryPage) {
                    urlWithContent = currentContext.getString(R.string.app_cms_category_api_url,
                            baseUrl,
                            endpoint == null ? "/content/pages" : endpoint,
                            pageId,
                            siteId,
                            moduleId,
                            "0",
                            getLanguageParamForAPICall());
                } else {
                    if (isUserLoggedIn())
                        urlWithContent = currentContext.getString(R.string.app_cms_page_api_url_with_user_id,
                                baseUrl,
                                endpoint,
                                siteId,
                                currentContext.getString(R.string.app_cms_page_path_query_parameter),
                                pageId,
                                appPreference.getLoggedInUser(),
                                getLanguageParamForAPICall());
                    else
                        urlWithContent = currentContext.getString(R.string.app_cms_page_api_url,
                                baseUrl,
                                endpoint,
                                siteId,
                                currentContext.getString(R.string.app_cms_page_path_query_parameter),
                                pageId,
                                getLanguageParamForAPICall());
                }
            }
            return urlWithContent;
        }
        return null;
    }
    * */

    public void getCurrencyCodeFromApi(Action1<String> action1) {
        String url = getApiUrl(true, true, false, false, null, appCMSMain.getApiBaseUrl(), currentContext.getString(R.string.content_pages), appCMSMain.getInternalName(), currentContext.getString(R.string.view_plans), false);
        getPageIdContent(url,
                getSubscriptionPage().getPageId(),
                null,
                false,
                false, new Action1<AppCMSPageAPI>() {
                    @Override
                    public void call(AppCMSPageAPI appCMSPageAPI) {
                        if (appCMSPageAPI != null && appCMSPageAPI.getModules() != null) {
                            for (Module module : appCMSPageAPI.getModules()) {
                                if (module != null && module.getModuleType() != null && module.getModuleType().equalsIgnoreCase(currentContext.getString(R.string.app_cms_view_plan_module_key))) {
                                    if (module.getContentData() != null && module.getContentData().size() > 0 && module.getContentData().get(0) != null) {
                                        ContentDatum contentDatum = module.getContentData().get(0);
                                        if (contentDatum.getPlanDetails() != null && contentDatum.getPlanDetails().size() > 0) {
                                            com.viewlift.models.data.appcms.api.PlanDetail planDetail = contentDatum.getPlanDetails().get(0);
                                            action1.call(planDetail.getRecurringPaymentCurrencyCode());
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                });

    }

    /**
     * Returns the flag indicating whether a page is currently being loaded.
     *
     * @return Returns the flag indicating whether a page is currently being loaded
     */
    public boolean isPageLoading() {
        return pageLoading;
    }

    /**
     * Sets the flag indicating whether a page is currently being loaded
     *
     * @param pageLoading The value of the flag
     */
    public void setPageLoading(boolean pageLoading) {
        this.pageLoading = pageLoading;
    }

    /**
     * Returns the Android modules JSON object.
     *
     * @return Returns the Android modules JSON object
     */
    public AppCMSAndroidModules getAppCMSAndroidModules() {
        return appCMSAndroidModules;
    }

    private boolean customVideoPlayer;

    public void setCustomPlayerVideoView(boolean customVideoPlayer) {
        this.customVideoPlayer = customVideoPlayer;
    }

    private boolean isPricingContent = false;

    public void setPricingContent(boolean isPricingContent) {
        this.isPricingContent = isPricingContent;
    }

    /**
     * Performs a network call to refresh a video URL CDN token
     *
     * @param id           The film ID of the video to refresh
     * @param readyAction  The callback to handle the result when the URL with the updated CDN is ready
     * @param needCallBack
     */
    public void refreshVideoData(final String id, Action1<ContentDatum> readyAction, Action1<Boolean> downloadNotProcessedAction,
                                 Boolean isDownload, boolean needCallBack, ContentDatum contentDatum) {
        if (currentActivity != null) {
            if (!isDownload) {
                //ToDo Use this for entitlement API implementation
                isFromEntitlementAPI = true;
                int endPoint = R.string.app_cms_entitlement_api_url;
                String url = currentActivity.getString(endPoint,
                        appCMSMain.getApiBaseUrl(),
                        id, getDeviceId(), getDeviceValueForAPI(), getPlatformValueForAPI(), false);
                //ToDo Replace this once store country code implemented in android
                if (getPlatformType() == PlatformType.TV && storeCountryCode != null) {
                    url = url + "&store_countryCode=" + storeCountryCode;
                }
                if (contentDatum != null)
                    contentDatum.setFromEntitlement(true);
                GetAppCMSVideoEntitlementAsyncTask.Params params =
                        new GetAppCMSVideoEntitlementAsyncTask.Params.Builder().url(url)
                                .authToken(getAuthToken())
                                .apiKey(apikey)
                                .build();

                new GetAppCMSVideoEntitlementAsyncTask(appCMSVideoDetailCall, appCMSEntitlementResponse -> {
                    try {
                        if (appCMSEntitlementResponse != null &&
                                appCMSEntitlementResponse.isSuccess() &&
                                appCMSEntitlementResponse.isPlayable() &&
                                appCMSEntitlementResponse.getVideoContentDatum() != null) {
                            setWaysToWatchFromEntitlement(false);
                            ContentDatum currentContentDatum = appCMSEntitlementResponse.getVideoContentDatum();
                            currentContentDatum.setFromEntitlement(true);
                            Macros.INSTANCE.setParameters(AppCMSPresenter.this, contentDatum);
                            if (appCMSMain.isMonetizationModelEnabled() && appCMSAndroid.getAdvertising() != null
                                    && (isUserSubscribed() || contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), currentContentDatum.getGist().getId()) || appPreference.getTVEUserId() != null))
                                appCMSAndroid.setAdvertising(null);

                            if (appCMSEntitlementResponse.getAppCMSSignedURLResult() != null) {
                                currentContentDatum.setAppCMSSignedURLResult(appCMSEntitlementResponse.getAppCMSSignedURLResult());
                            }
                            if (currentContentDatum != null &&
                                    currentContentDatum.getStreamingInfo().getVideoAssets() != null &&
                                    currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail() != null &&
                                    currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getKeypairId() != null &&
                                    currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getPolicy() != null &&
                                    currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getSignature() != null) {
                                if (currentContentDatum.getAppCMSSignedURLResult() == null) {
                                    currentContentDatum.setAppCMSSignedURLResult(new AppCMSSignedURLResult());
                                }
                                currentContentDatum.getAppCMSSignedURLResult().setKeyPairId(currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getKeypairId());
                                currentContentDatum.getAppCMSSignedURLResult().setPolicy(currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getPolicy());
                                currentContentDatum.getAppCMSSignedURLResult().setSignature(currentContentDatum.getStreamingInfo().getVideoAssets().getHlsDetail().getSignature());
                            }
                            ContentDatum userHistoryContentDatum = getUserHistoryContentDatum(currentContentDatum.getGist().getId());
                            if (userHistoryContentDatum != null) {
                                currentContentDatum.getGist().setWatchedTime(userHistoryContentDatum.getGist().getWatchedTime());
                            }
                            if (contentDatum != null && contentDatum.isTrailer()) {
                                readyAction.call(currentContentDatum);
                                return;
                            }
                            if (appCMSEntitlementResponse.getDfp() != null && appCMSEntitlementResponse.getDfp().size() > 0) {
                                for (DfpAds dfpAds : appCMSEntitlementResponse.getDfp()) {
                                    //if (dfpAds.getDeviceType().contains("android") && getPlatformType()== PlatformType.ANDROID && appCMSAndroid.getAdvertising()!=null){
                                    if (dfpAds.getDeviceType().contains("android")
                                            && getPlatformType() == PlatformType.ANDROID
                                            && appCMSAndroid.getAdvertising() != null) {
                                        appCMSAndroid.getAdvertising().setVideoTag(dfpAds.getDfpAdTag());
                                        currentContentDatum.setAdUrl(getAppAdsURL(currentContentDatum));
                                    } else if (dfpAds.getDeviceType().contains("fir_tv")
                                            && getPlatformType() == PlatformType.TV
                                            && appCMSAndroid.getAdvertising() != null) {
                                        appCMSAndroid.getAdvertising().setVideoTag(dfpAds.getDfpAdTag());
                                        currentContentDatum.setAdUrl(getAppAdsURL(currentContentDatum));
                                    }
                                }
                            }
                            if (appCMSEntitlementResponse.getSubscriptionPlans() != null) {
                                if (contentDatum != null)
                                    contentDatum.setSubscriptionPlans(appCMSEntitlementResponse.getSubscriptionPlans());
                                currentContentDatum.setSubscriptionPlans(appCMSEntitlementResponse.getSubscriptionPlans());
                                if (appCMSAndroid.getAdvertising() != null || isUserSubscribed()) {
                                    appCMSAndroid.setAdvertising(new Advertising());
                                }
                                String adTag = null;

                                if (currentContentDatum.getSubscriptionPlans() != null &&
                                        (((contentTypeChecker.isContentSVOD_AVOD(currentContentDatum.getSubscriptionPlans()) && contentTypeChecker.isAdsAvailable(currentContentDatum.getSubscriptionPlans(), getCurrentContext().getString(R.string.pricing_model_SVOD))) ||
                                                (contentTypeChecker.isContentTVOD_AVOD(currentContentDatum.getSubscriptionPlans()) && contentTypeChecker.isAdsAvailable(currentContentDatum.getSubscriptionPlans(), getCurrentContext().getString(R.string.pricing_model_TVOD))) ||
                                                (contentTypeChecker.isContentAVOD(currentContentDatum.getSubscriptionPlans())))) /*|| appCMSEntitlementResponse.getAds() != null*/) {
                                    if (currentContentDatum.getSubscriptionPlans() != null && contentTypeChecker.isContentAVOD(currentContentDatum.getSubscriptionPlans())) {
                                        currentContentDatum.getGist().setFree(true);
                                    }
                                    if (getPlatformType() == PlatformType.TV && currentContentDatum.getSubscriptionPlans() != null) {
                                        adTag = contentTypeChecker.getAmazonAdTagFromAVOD(currentContentDatum.getSubscriptionPlans());
                                    } else {
                                        if (currentContentDatum.getSubscriptionPlans() != null)
                                            adTag = contentTypeChecker.getAdTagFromAVOD(currentContentDatum.getSubscriptionPlans());
                                    }

                                    if (adTag == null && appCMSEntitlementResponse.getAds() != null) {
                                        if (getPlatformType() == PlatformType.TV)
                                            adTag = contentTypeChecker.getAdTagAmazon(appCMSEntitlementResponse.getAds());
                                        else
                                            adTag = contentTypeChecker.getAdTagAndroid(appCMSEntitlementResponse.getAds());
                                    }

                                    if (adTag != null) {
                                        FeatureSetting featureSetting = contentTypeChecker.getAdFeatures(currentContentDatum.getSubscriptionPlans());
                                        if (featureSetting == null && appCMSEntitlementResponse.getAds() != null)
                                            featureSetting = appCMSEntitlementResponse.getAds().getFeatureSetting();
                                        if (featureSetting != null) {
                                            if (appCMSAndroid.getAdvertising() == null) {
                                                appCMSAndroid.setAdvertising(new Advertising());
                                            }
                                            if ((featureSetting.isGuestUser() && !isUserLoggedIn()))
                                                appCMSAndroid.getAdvertising().setVideoTag(adTag);
                                            else if ((featureSetting.isChurned() && appPreference.isChurnedUser())
                                                    || ((featureSetting.isLoggedIn() && isUserLoggedIn() && !isUserSubscribed())))
                                                appCMSAndroid.getAdvertising().setVideoTag(adTag);
                                            else if ((featureSetting.isSubscribed() && isUserSubscribed()))
                                                appCMSAndroid.getAdvertising().setVideoTag(adTag);
                                            else if ((featureSetting.isTransactionPurchased() && contentTypeChecker.isContentTVOD(currentContentDatum.getSubscriptionPlans())))
                                                appCMSAndroid.getAdvertising().setVideoTag(adTag);
                                        }
                                        currentContentDatum.setAdUrl(getAppAdsURL(currentContentDatum));
                                    }
                                } else if (currentContentDatum.getSubscriptionPlans() != null
                                        && contentTypeChecker.isContentFree(currentContentDatum.getSubscriptionPlans())) {
                                    currentContentDatum.getGist().setFree(true);
                                    FeatureSetting featureSetting = contentTypeChecker.getFreePlanFeatures(currentContentDatum.getSubscriptionPlans());
                                    if (featureSetting != null) {
                                        if (featureSetting.isLoginRequired() && !isUserLoggedIn()) {
                                            if (platformType.equals(PlatformType.TV)) {
                                                stopLoader();
                                                currentActivity.sendBroadcast(new Intent(AppCMSPresenter.ENTITLEMENT_LOGIN_DIALOG));
                                                return;
                                            } else {
                                                currentContentDatum.setLoginRequired(true);
                                            }
                                        } else if (featureSetting.isEmailRequired() && appPreference.getLoggedInUserEmail() == null) {
                                            if (platformType.equals(PlatformType.TV)) {
                                                stopLoader();
                                                openAccountDetailsEditInfoDialog(localisedStrings.getEnterEmailAddressMsgText(), null,
                                                        currentContext.getResources().getString(R.string.app_cms_page_dialog_type_email_update), AppCMSPresenter.ACCOUNT_DETAILS_EDIT_INFO_DIALOG);
                                                return;
                                            } else {
                                                currentContentDatum.setEmailRequired(true);
                                            }
                                        }
                                    }
                                }
                            }
                            readyAction.call(currentContentDatum);
                        } else if (appCMSEntitlementResponse != null
                                && (appCMSEntitlementResponse.getCode() == 409/* || appCMSEntitlementResponse.getCode() == 403*/)
                                && needCallBack
                                && platformType == PlatformType.TV) {
                            stopLoader();
                            ContentDatum tempContentDatum = new ContentDatum();
                            String msg = !TextUtils.isEmpty(localisedStrings.getMaxStreamErrorText())
                                    ? localisedStrings.getMaxStreamErrorText()
                                    : appCMSEntitlementResponse.getErrorMessage();
                            tempContentDatum.setVideoPlayError(msg);
                            readyAction.call(tempContentDatum);
                            return;
                        } else if (appCMSEntitlementResponse != null &&
                                appCMSEntitlementResponse.getCode() != 200) {
                            stopLoader();
                            //In Case of Offline Download. Stop Download
                            stopDownloadProgressDialog();
                            if (contentDatum != null
                                    && appCMSEntitlementResponse.getSubscriptionPlans() != null
                                    && appCMSEntitlementResponse.getErrorCode() != null && !appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("VIDEO_NOT_EXISTS")) {
                                contentDatum.setSubscriptionPlans(appCMSEntitlementResponse.getSubscriptionPlans());
                                if (platformType.equals(PlatformType.TV) && !contentDatum.isFromStandalone() && validateTVEContent(contentDatum)) {
                                    readyAction.call(null);
                                    return;
                                }
                            }
                            if (needCallBack && platformType == PlatformType.TV) {
                                readyAction.call(null);
                                return;
                            }
                            String message = getLanguageResourcesFile().getStringValue(
                                    currentActivity.getString(R.string.entitlement_api_server_error),
                                    String.format("%d", appCMSEntitlementResponse.getCode()));
                            if (platformType.equals(PlatformType.ANDROID) && videoPlayerView != null) {
                                videoPlayerView.setVideoId(localisedStrings.getContentNotAvailable());
                            }

                            if (isUserSubscribed() || isPricingContent || needCallBack) {
                                if (platformType == PlatformType.ANDROID) {
                                    if (currentActivity.findViewById(R.id.video_player_id) != null || contentDatum.isFromStandalone()) {
                                        videoPlayerView.showPreviewFrame(contentDatum);
                                    } else {
                                        if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("MAX_STREAMS_ERROR")) {
                                            showDialog(DialogType.MAX_STREAMS_ERROR,
                                                    appCMSEntitlementResponse.getErrorMessage() != null
                                                            ? appCMSEntitlementResponse.getErrorMessage()
                                                            : message,
                                                    false,
                                                    () -> {
                                                        if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                            getCurrentActivity().finish();
                                                        downloadNotProcessedAction.call(false);
                                                    },
                                                    null, null);
                                        } else if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT")) {
                                            showDialog(DialogType.VIDEO_NOT_AVAILABLE_ALERT,
                                                    localisedStrings.getContentNotAvailableTVProviderText(),
                                                    false, () -> {
                                                        if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                            getCurrentActivity().finish();
                                                        downloadNotProcessedAction.call(false);
                                                    },
                                                    null, localisedStrings.getContentNotAvailable());
                                        } else if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT_USER_LOGGED_OUT")) {
                                            appPreference.setTVEUserId(null);
                                            openEntitlementScreen(contentDatum, false);
                                        } /*else if (contentTypeChecker.isContentSVOD(contentDatum) || contentTypeChecker.isContentSVOD_AVOD(contentDatum))
                                            navigateToContentSubscription(contentDatum.getSubscriptionPlans());
                                        else if (contentTypeChecker.isContentTVE_AVOD(contentDatum) || contentTypeChecker.isContentTVE(contentDatum)) {
                                            setLoginFromNavPage(false);
                                            openTvProviderScreen();
                                        } */ else if (isScheduleVideoPlayable(contentDatum.getGist().getScheduleStartDate(), contentDatum.getGist().getScheduleEndDate())) {
                                            readyAction.call(contentDatum);
                                            return;
                                        } else if (contentDatum.getSubscriptionPlans() == null && appCMSEntitlementResponse.getErrorMessage() != null) {
                                            showDialog(DialogType.VIDEO_NOT_AVAILABLE_ALERT,
                                                    localisedStrings.getContentNotAvailable(),
                                                    false, () -> {
                                                        if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                            getCurrentActivity().finish();
                                                    },
                                                    null, appCMSEntitlementResponse.getErrorMessage());
                                        } else
                                            openEntitlementScreen(contentDatum, false);
                                    }

                                } else {
                                    String title = localisedStrings.getContentNotAvailable();
                                    String msg = null;
                                    if (appCMSEntitlementResponse.getCode() == 409) {
                                        msg = localisedStrings.getMaxStreamErrorText();
                                    }
                                    if (msg == null) {
                                        msg = appCMSEntitlementResponse.getErrorMessage();
                                    }
                                    openTVErrorDialog(msg,
                                            title,
                                            false);
                                }
                            } else if (!isAppAVOD()) {
                                if (!isUserLoggedIn()) {
                                    if (platformType == PlatformType.ANDROID) {
                                        if (currentActivity.findViewById(R.id.video_player_id) != null || contentDatum.isFromStandalone()) {
                                            videoPlayerView.showPreviewFrame(contentDatum);
                                        } else {
                                            if (contentDatum.getSubscriptionPlans() != null) {
                                                if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                    getCurrentActivity().finish();
                                               /* if (isUserLoggedIn() && contentDatum.getSubscriptionPlans() != null && (contentTypeChecker.isContentSVOD(contentDatum.getSubscriptionPlans()) || contentTypeChecker.isContentSVOD_AVOD(contentDatum.getSubscriptionPlans())))
                                                    navigateToContentSubscription(contentDatum.getSubscriptionPlans());
                                                else if (contentDatum.getSubscriptionPlans() != null && (contentTypeChecker.isContentTVE_AVOD(contentDatum.getSubscriptionPlans()) || contentTypeChecker.isContentTVE(contentDatum.getSubscriptionPlans()))) {
                                                    setLoginFromNavPage(false);
                                                    openTvProviderScreen();
                                                } else*/
                                                openEntitlementScreen(contentDatum, false);
                                            } else if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("VIDEO_NOT_EXISTS")) {
                                                showDialog(DialogType.VIDEO_NOT_AVAILABLE,
                                                        appCMSEntitlementResponse.getErrorMessage() != null
                                                                ? appCMSEntitlementResponse.getErrorMessage()
                                                                : message,
                                                        false,
                                                        () -> {
                                                            if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                                getCurrentActivity().finish();
                                                        },
                                                        null, null);
                                            } else {
//                                                readyAction.call(contentDatum);
                                                showEntitlementDialog(DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                                        () -> {
                                                            if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                                getCurrentActivity().finish();
                                                        }, null);
                                            }

                                        }
                                    } else {
                                        String title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.preview_content));
                                        openTVEntitlementDialog(appCMSEntitlementResponse.getErrorMessage() != null
                                                        ? appCMSEntitlementResponse.getErrorMessage()
                                                        : message,
                                                title,
                                                false, null, contentDatum);
                                    }
                                } else if (!isUserSubscribed()) {
                                    if (platformType == PlatformType.ANDROID) {
                                        if (currentActivity.findViewById(R.id.video_player_id) != null || contentDatum.isFromStandalone()) {
                                            videoPlayerView.showPreviewFrame(contentDatum);
                                        } else {
                                            if (contentDatum.getSubscriptionPlans() != null) {
                                                if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT")) {
                                                    showDialog(DialogType.VIDEO_NOT_AVAILABLE_ALERT,
                                                            localisedStrings.getContentNotAvailableTVProviderText(),
                                                            false, () -> {
                                                                if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                                    getCurrentActivity().finish();
                                                                downloadNotProcessedAction.call(false);
                                                            },
                                                            null, localisedStrings.getContentNotAvailable());
                                                } else if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT_USER_LOGGED_OUT")) {
                                                    appPreference.setTVEUserId(null);
                                                    openEntitlementScreen(contentDatum, false);
                                                } else {
                                                    if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                        getCurrentActivity().finish();
                                                /*if (isUserLoggedIn() && (contentTypeChecker.isContentSVOD(contentDatum) || contentTypeChecker.isContentSVOD_AVOD(contentDatum)))
                                                    navigateToContentSubscription(contentDatum.getSubscriptionPlans());
                                                else if (contentTypeChecker.isContentTVE_AVOD(contentDatum) || contentTypeChecker.isContentTVE(contentDatum)) {
                                                    setLoginFromNavPage(false);
                                                    openTvProviderScreen();
                                                } else*/
                                                    openEntitlementScreen(contentDatum, false);
                                                }
                                            } else {
                                                if (appCMSMain.isMonetizationModelEnabled()) {
                                                    showDialog(DialogType.UNABLE_TO_PLAY_VIDEO,
                                                            appCMSEntitlementResponse.getErrorMessage() != null
                                                                    ? appCMSEntitlementResponse.getErrorMessage()
                                                                    : message,
                                                            false,
                                                            () -> {
                                                                if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                                    getCurrentActivity().finish();
                                                            },
                                                            null, null);
                                                } else {
                                                    showEntitlementDialog(DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                                            () -> {
                                                                if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                                    getCurrentActivity().finish();
                                                            }, null);
                                                }
                                            }
                                        }
                                    } else {
                                        String title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.preview_content));
                                        String dialogMessage = appCMSEntitlementResponse.getErrorMessage() != null
                                                ? appCMSEntitlementResponse.getErrorMessage()
                                                : message;
                                        if (dialogMessage.toLowerCase().contains("User does not have a valid subscription".toLowerCase())) {
                                            dialogMessage = currentActivity.getString(R.string.unsubscribe_text);
                                            if (getGenericMessagesLocalizationMap() != null
                                                    && getGenericMessagesLocalizationMap().getPremiumContentLoggedInUserDialogMessage() != null) {
                                                dialogMessage = getGenericMessagesLocalizationMap().getPremiumContentLoggedInUserDialogMessage();
                                            }
                                        }

                                        if (isUserLoggedInByTVProvider() &&
                                                appCMSEntitlementResponse.getErrorCode() != null &&
                                                appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT")) {
                                            openTVErrorDialog(localisedStrings.getContentNotAvailableTVProviderText(),
                                                    title,
                                                    false);
                                        } else if (appCMSEntitlementResponse.getErrorCode() != null &&
                                                appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("VIDEO_NOT_EXISTS")) {
                                            openTVErrorDialog(appCMSEntitlementResponse.getErrorMessage(),
                                                    title,
                                                    false);
                                        } else {
                                            Bundle bundle = new Bundle();
                                            bundle.putBoolean(currentActivity.getString(R.string.retry_key), false);
                                            bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), false);
                                            bundle.putBoolean(currentActivity.getString(R.string.shouldNavigateToLogin), false);

                                            Intent args = new Intent(AppCMSPresenter.SUBSCRIPTION_DIALOG);
                                            args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                                            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                            currentActivity.sendBroadcast(args);
                                        }

                                    }
                                }
                            }
                        } else {
                            String message = getLanguageResourcesFile().getStringValue(
                                    currentActivity.getString(R.string.entitlement_api_server_error),
                                    String.format("%d", appCMSEntitlementResponse.getCode()));
                            if (platformType == PlatformType.ANDROID) {
                                stopDownloadProgressDialog();
                                if (!isNewsTemplate()) {
                                    showDialog(DialogType.UNABLE_TO_PLAY_VIDEO,
                                            appCMSEntitlementResponse.getErrorMessage() != null
                                                    ? appCMSEntitlementResponse.getErrorMessage()
                                                    : message,
                                            false,
                                            () -> {
                                                if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                    getCurrentActivity().finish();
                                                downloadNotProcessedAction.call(false);
                                            },
                                            null, null);
                                }
                            } else {
                                String title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_unable_to_play_video_error_title));
                                if (getGenericMessagesLocalizationMap() != null
                                        && getGenericMessagesLocalizationMap().getVideoNotPlayableDialogTitle() != null) {
                                    title = getGenericMessagesLocalizationMap().getVideoNotPlayableDialogTitle();
                                }
                                openTVErrorDialog(appCMSEntitlementResponse.getErrorMessage() != null
                                                ? appCMSEntitlementResponse.getErrorMessage()
                                                : message,
                                        title,
                                        false);
                            }
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }).execute(params);
            } else {
                String url = currentActivity.getString(R.string.app_cms_content_detail_api_url,
                        appCMSMain.getApiBaseUrl(),
                        id,
                        appCMSMain.getInternalName(),
                        getLanguageParamForAPICall());
                GetAppCMSContentDetailTask.Params params =
                        new GetAppCMSContentDetailTask.Params.Builder().url(url)
                                .authToken(getAuthToken())
                                .apiKey(apikey).build();
                new GetAppCMSContentDetailTask(appCMSContentDetailCall,
                        appCMSContentDetail -> {
                            if (appCMSContentDetail != null) {
                                ContentDatum currentContentDatum = appCMSContentDetail.convertToContentDatum(null);
                                ContentDatum userHistoryContentDatum = getUserHistoryContentDatum(currentContentDatum.getGist().getId());
                                if (userHistoryContentDatum != null) {
                                    currentContentDatum.getGist().setWatchedTime(userHistoryContentDatum.getGist().getWatchedTime());
                                }
                                readyAction.call(currentContentDatum);
                            }
                        }).execute(params);

            }
        }
    }

    public void videoEntitlementDownload(ContentDatum contentDatum, Action1<ContentDatum> readyAction) {
        showLoader();
        int endPoint = R.string.app_cms_entitlement_api_url;
        String url = currentActivity.getString(endPoint, appCMSMain.getApiBaseUrl(),
                contentDatum.getGist().getId(), getDeviceId(), getDeviceValueForAPI(), getPlatformValueForAPI(), true);
        /*if(contentDatum!=null && contentDatum.isDRMEnabled()){
            endPoint = R.string.app_cms_entitlement_api_url_drm;
            url = currentActivity.getString(endPoint,
                    appCMSMain.getApiBaseUrl(),
                    contentDatum.getGist().getId(), getDeviceId(), getDeviceValueForAPI(), getPlatformValueForAPI(), true);
        }*/
        GetAppCMSVideoEntitlementAsyncTask.Params params =
                new GetAppCMSVideoEntitlementAsyncTask.Params.Builder().url(url)
                        .authToken(getAuthToken())
                        .apiKey(apikey)
                        .build();
        new GetAppCMSVideoEntitlementAsyncTask(appCMSVideoDetailCall, appCMSEntitlementResponse -> {
            stopLoader();
            try {
                if (appCMSEntitlementResponse != null &&
                        appCMSEntitlementResponse.isSuccess() &&
                        appCMSEntitlementResponse.isPlayable() &&
                        appCMSEntitlementResponse.getVideoContentDatum() != null) {
                    setWaysToWatchFromEntitlement(false);
                    ContentDatum currentContentDatum = appCMSEntitlementResponse.getVideoContentDatum();
                    currentContentDatum.setFromEntitlement(true);
                    if (appCMSEntitlementResponse.getAppCMSSignedURLResult() != null) {
                        currentContentDatum.setAppCMSSignedURLResult(appCMSEntitlementResponse.getAppCMSSignedURLResult());
                    }
                    ContentDatum userHistoryContentDatum = getUserHistoryContentDatum(currentContentDatum.getGist().getId());
                    if (userHistoryContentDatum != null) {
                        currentContentDatum.getGist().setWatchedTime(userHistoryContentDatum.getGist().getWatchedTime());
                    }
                    if (appCMSEntitlementResponse.getSubscriptionPlans() != null) {
                        currentContentDatum.setSubscriptionPlans(appCMSEntitlementResponse.getSubscriptionPlans());
                    }
                    readyAction.call(currentContentDatum);
                } else if (appCMSEntitlementResponse != null &&
                        appCMSEntitlementResponse.getCode() != 200) {
                    if (appCMSEntitlementResponse.getSubscriptionPlans() != null)
                        contentDatum.setSubscriptionPlans(appCMSEntitlementResponse.getSubscriptionPlans());
                    stopLoader();
                    String message = getLanguageResourcesFile().getStringValue(
                            currentActivity.getString(R.string.entitlement_api_server_error),
                            String.format("%d", appCMSEntitlementResponse.getCode()));
                    if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("CANT_ACCESS_TVE_CONTENT_USER_LOGGED_OUT")) {
                        appPreference.setTVEUserId(null);
                    }
                    // MAX_STREAMS_ERROR is not needed while download.
                   /* if (appCMSEntitlementResponse.getErrorCode() != null && appCMSEntitlementResponse.getErrorCode().equalsIgnoreCase("MAX_STREAMS_ERROR")) {
                        showDialog(DialogType.MAX_STREAMS_ERROR,
                                appCMSEntitlementResponse.getErrorMessage() != null
                                        ? appCMSEntitlementResponse.getErrorMessage()
                                        : message,
                                false,
                                () -> {
                                },
                                null, null);
                    } else*/
                    if (appCMSEntitlementResponse.getSubscriptionPlans() != null) {
                        setWaysToWatchFromEntitlement(true);
                        openEntitlementScreen(contentDatum, false);
                    } else if (!isUserLoggedIn()) {
                        showEntitlementDialog(DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                () -> {
                                    setAfterLoginAction(() -> {
                                    });
                                }, null);
                    } else if (!isUserSubscribed()) {
                        showEntitlementDialog(DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                                () -> {
                                    setAfterLoginAction(() -> {
                                    });
                                }, null);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }).execute(params);
    }

    public void getRentalData(String id,
                              Action1<AppCMSRentalResponse> readyAction,
                              boolean isStartTimeUpdate,
                              long startTime) {
        if (currentActivity != null) {
            String url = "";
            if (isStartTimeUpdate) {
                int endPoint = R.string.app_cms_update_view_start_api_url;

                String strStartTime = String.valueOf(startTime);

                url = currentActivity.getString(endPoint,
                        appCMSMain.getApiBaseUrl(), appPreference.getLoggedInUser(),
                        id, strStartTime);

            } else {
                int endPoint = R.string.app_cms_getrental_api_url;

                url = currentActivity.getString(endPoint,
                        appCMSMain.getApiBaseUrl(), appPreference.getLoggedInUser(),
                        id);
                showLoader();

            }

            GetAppCMSRentalVideoAsyncTask.Params params =
                    new GetAppCMSRentalVideoAsyncTask.Params.Builder().url(url)
                            .authToken(getAuthToken())
                            .apiKey(apikey)
                            .build();

            new GetAppCMSRentalVideoAsyncTask(appCMSVideoDetailCall, appCMSEntitlementResponse -> {
                try {
                    Observable.just(appCMSEntitlementResponse).subscribe(readyAction);
                    stopLoader();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }).execute(params);

        }
    }

    @Deprecated
    public void getTransactionDataResponse(String id, Action1<AppCMSTransactionDataResponse> readyAction, String contentType) {
        if (currentActivity != null) {
            String url = "";
            int endPoint = R.string.app_cms_gettransactiondata_api_url;

            String contentTypeArg = contentType;
            if (contentType == null) {
                contentTypeArg = "Video";
            }
            //dynamic url
            url = currentActivity.getString(endPoint,
                    appCMSMain.getApiBaseUrl(), appPreference.getLoggedInUser(),
                    id, contentTypeArg, "false", appCMSMain.getInternalName());


            GetAppCMSTransactionlDataResponseAsyncTask.Params params =
                    new GetAppCMSTransactionlDataResponseAsyncTask.Params.Builder().url(url)
                            .authToken(getAuthToken())
                            .apiKey(apikey)
                            .build();
            showLoader();

            new GetAppCMSTransactionlDataResponseAsyncTask(appCMSVideoDetailCall, appCMSTransactionDataResponse -> {
                try {
                    Observable.just(appCMSTransactionDataResponse).subscribe(readyAction);
                    // stopLoader();
//                        System.out.println("Rental Response-"+appCMSEntitlementResponse);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }).execute(params);


        }
    }

    @Deprecated
    public void getTransactionData(String id, Action1<List<Map<String, AppCMSTransactionDataValue>>> readyAction, String contentType) {
        if (currentActivity != null) {
            String url = "";
            int endPoint = R.string.app_cms_gettransactiondata_api_url;

            String contentTypeArg = contentType;
            if (contentType == null) {
                contentTypeArg = "Video";
            }
            //dynamic url
            url = currentActivity.getString(endPoint,
                    appCMSMain.getApiBaseUrl(), appPreference.getLoggedInUser(),
                    id, contentTypeArg, "false", appCMSMain.getInternalName());


            GetAppCMSTransactionlDataAsyncTask.Params params =
                    new GetAppCMSTransactionlDataAsyncTask.Params.Builder().url(url)
                            .authToken(getAuthToken())
                            .apiKey(apikey)
                            .build();


            new GetAppCMSTransactionlDataAsyncTask(appCMSVideoDetailCall, appCMSEntitlementResponse -> {
                try {
                    Observable.just(appCMSEntitlementResponse).subscribe(readyAction);
                    // stopLoader();
//                        System.out.println("Rental Response-"+appCMSEntitlementResponse);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }).execute(params);

        }
    }

    public void setResumedActivities(int currentResumedActivities) {
        this.currentResumedActivities = currentResumedActivities;
    }


    /**
     * Launches the Video Player view associated with the input data
     *
     * @param contentDatum          The video data returned by the API request
     * @param filmId                The film ID of the video
     * @param currentlyPlayingIndex The currently playing index within a list of related videos used for Autoplay
     * @param relateVideoIds        The list of related videos used for Autoplay
     * @param watchedTime           The current watched time of this video for the current user
     * @param expectedAction        The action to take when launching the player, which may to navigate to the Detail page or play the video
     * @return
     */
    public boolean launchVideoPlayer(final ContentDatum contentDatum,
                                     String filmId,
                                     final int currentlyPlayingIndex,
                                     List<String> relateVideoIds,
                                     long watchedTime,
                                     String expectedAction) {
        boolean result = false;
        if (currentActivity != null &&
                appCMSMain != null &&
                !TextUtils.isEmpty(appCMSMain.getApiBaseUrl()) &&
                !TextUtils.isEmpty(appCMSMain.getInternalName())) {

            final String action = currentActivity.getString(R.string.app_cms_action_watchvideo_key);
            result = true;

            /*When content details are null it means video player is launched from somewhere
             * other than video detail fragment*/

            String url = currentActivity.getString(R.string.app_cms_video_detail_api_url,
                    appCMSMain.getApiBaseUrl(),
                    filmId,
                    appCMSMain.getInternalName(),
                    getLanguageParamForAPICall());
            GetAppCMSVideoDetailAsyncTask.Params params =
                    new GetAppCMSVideoDetailAsyncTask.Params.Builder().url(url)
                            .authToken(getAuthToken())
                            .apiKey(apikey)
                            .build();


            showLoader();
            refreshVideoData(filmId,
                    updatedContentDatum -> {
                        stopLoader();
                        setCurrentContentDatum(updatedContentDatum);
                        if (updatedContentDatum != null) {
                            String updatedAction = expectedAction;
                            List<String> updatedRelateVideoIds = relateVideoIds;

                            if (!TextUtils.isEmpty(expectedAction) &&
                                    !expectedAction.equals(currentContext.getString(R.string.app_cms_action_videopage_key)) &&
                                    !expectedAction.equals(currentContext.getString(R.string.app_cms_action_watchvideo_key))) {
                                String contentType = "";

                                if (updatedContentDatum.getGist() != null &&
                                        updatedContentDatum.getGist().getContentType() != null) {
                                    contentType = updatedContentDatum.getGist().getContentType();
                                }

                                switch (contentType) {
                                    case "SHOW":
                                        updatedAction = currentContext.getString(R.string.app_cms_action_showvideopage_key);
                                        break;

                                    case "VIDEO":
                                        updatedAction = currentContext.getString(R.string.app_cms_action_detailvideopage_key);
                                        break;

                                    default:
                                        break;
                                }
                            }


                            if (updatedAction == null) {
                                updatedAction = currentContext.getString(R.string.app_cms_action_videopage_key);
                            }

                            if (contentDatum.getGist() != null) {
                                updatedContentDatum.setModuleApi(contentDatum.getModuleApi());
                                Log.d(TAG, "Existing watched time: " + contentDatum.getGist().getWatchedTime());
                                Log.d(TAG, "Updated watched time: " + updatedContentDatum.getGist().getWatchedTime());
                                updatedContentDatum.getGist().setWatchedTime(contentDatum.getGist().getWatchedTime());
                                updatedContentDatum.getGist().setWatchedPercentage(contentDatum.getGist().getWatchedPercentage());
                            }

                            if (updatedContentDatum.getContentDetails() != null
                                    && updatedContentDatum.getContentDetails().getRelatedVideoIds() != null
                                    && updatedContentDatum.getContentDetails().getRelatedVideoIds().size() > 0) {
                                updatedRelateVideoIds = updatedContentDatum.getContentDetails().getRelatedVideoIds();
                                if (updatedRelateVideoIds != null) {
                                    updatedRelateVideoIds.add(0, updatedContentDatum.getGist().getId());
                                }
                            }
                            launchButtonSelectedAction(updatedContentDatum.getGist().getPermalink(),
                                    updatedAction,
                                    updatedContentDatum.getGist().getTitle(),
                                    null,
                                    updatedContentDatum,
                                    false,
                                    currentlyPlayingIndex,
                                    updatedRelateVideoIds);
                        } else {
                            if (!isNetworkConnected()) {
                                // Fix of SVFA-1435
                                openDownloadScreenForNetworkError(false,
                                        () -> launchVideoPlayer(contentDatum,
                                                contentDatum.getGist().getId(),
                                                currentlyPlayingIndex,
                                                relateVideoIds,
                                                watchedTime,
                                                expectedAction));
                            } else {
                                if (watchedTime >= 0) {
                                    contentDatum.getGist().setWatchedTime(watchedTime);
                                }
                                launchButtonSelectedAction(
                                        contentDatum.getGist().getPermalink(),
                                        action,
                                        contentDatum.getGist().getTitle(),
                                        null,
                                        contentDatum,
                                        false,
                                        currentlyPlayingIndex,
                                        relateVideoIds);
                            }
                        }
                    }, null, false, false, contentDatum);


           /* new GetAppCMSVideoDetailAsyncTask(appCMSVideoDetailCall,
                    appCMSVideoDetail -> {
                        try {
                            if (appCMSVideoDetail != null &&
                                    appCMSVideoDetail.getRecords() != null &&
                                    appCMSVideoDetail.getRecords().get(0) != null &&
                                    appCMSVideoDetail.getRecords().get(0).getContentDetails() != null) {
                                String updatedAction = expectedAction;

                                if (!TextUtils.isEmpty(expectedAction) &&
                                        !expectedAction.equals(currentContext.getString(R.string.app_cms_action_videopage_key)) &&
                                        !expectedAction.equals(currentContext.getString(R.string.app_cms_action_watchvideo_key))) {
                                    String contentType = "";

                                    if (appCMSVideoDetail.getRecords().get(0).getGist() != null &&
                                            appCMSVideoDetail.getRecords().get(0).getGist().getContentType() != null) {
                                        contentType = appCMSVideoDetail.getRecords().get(0).getGist().getContentType();
                                    }

                                    switch (contentType) {
                                        case "SHOW":
                                            updatedAction = currentContext.getString(R.string.app_cms_action_showvideopage_key);
                                            break;

                                        case "VIDEO":
                                            updatedAction = currentContext.getString(R.string.app_cms_action_detailvideopage_key);
                                            break;

                                        default:
                                            break;
                                    }
                                }

                                if (updatedAction == null) {
                                    updatedAction = currentContext.getString(R.string.app_cms_action_videopage_key);
                                }
                                if (watchedTime > 0) {
                                    contentDatum.getGist().setWatchedTime(watchedTime);
                                }
                                Log.d(TAG, "Existing watched time: " + contentDatum.getGist().getWatchedTime());
                                Log.d(TAG, "Updated watched time: " + appCMSVideoDetail.getRecords().get(0).getGist().getWatchedTime());

                                appCMSVideoDetail.getRecords().get(0).getGist().setWatchedTime(contentDatum.getGist().getWatchedTime());
                                appCMSVideoDetail.getRecords().get(0).getGist().setWatchedPercentage(contentDatum.getGist().getWatchedPercentage());

                                launchButtonSelectedAction(appCMSVideoDetail.getRecords().get(0).getGist().getPermalink(),
                                        updatedAction,
                                        appCMSVideoDetail.getRecords().get(0).getGist().getTitle(),
                                        null,
                                        appCMSVideoDetail.getRecords().get(0),
                                        false,
                                        currentlyPlayingIndex,
                                        relateVideoIds);
                            } else {
                                if (!isNetworkConnected()) {
                                    // Fix of SVFA-1435
                                    openDownloadScreenForNetworkError(false,
                                            () -> launchVideoPlayer(contentDatum,
                                                    contentDatum.getGist().getId(),
                                                    currentlyPlayingIndex,
                                                    relateVideoIds,
                                                    watchedTime,
                                                    expectedAction));
                                } else {
                                    if (watchedTime >= 0) {
                                        contentDatum.getGist().setWatchedTime(watchedTime);
                                    }
                                    launchButtonSelectedAction(
                                            contentDatum.getGist().getPermalink(),
                                            action,
                                            contentDatum.getGist().getTitle(),
                                            null,
                                            contentDatum,
                                            false,
                                            currentlyPlayingIndex,
                                            relateVideoIds);
                                }
                            }

                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving AppCMS Video Details: " + e.getMessage());
                        }
                    }).execute(params);*/
        }
        return result;
    }


    /**
     * This returns a hashmap containing a list of download callbacks, which are used when returning to
     * a screen with active downloads to resume the UI for each individual download.
     *
     * @return Returns the hashmap containing the list of download callback
     */
    public Map<String, ViewCreator.UpdateDownloadImageIconAction> getUpdateDownloadImageIconActionMap() {
        return updateDownloadImageIconActionMap;
    }

    public Map<String, DownloadComponent.UpdateDownloadImageIconAction> getUpdateDownloadComponentImageIconActionMap() {
        return updateDownloadComponentImageIconActionMap;
    }

    /**
     * Updates the watched time parameter for all downloaded (offline) videos.
     */
    private void updateAllOfflineWatchTime() {
        realmController = RealmController.with(currentActivity);
        if (appPreference.getLoggedInUser() != null) {
            if (currentActivity != null) {
                currentActivity.runOnUiThread(() -> {
                    if (realmController != null) {
                        try {
                            for (DownloadVideoRealm downloadVideoRealm : realmController.getAllUnSyncedWithServer(appPreference.getLoggedInUser())) {
                                updateWatchedTime(downloadVideoRealm.getVideoId(), downloadVideoRealm.getShowId(), downloadVideoRealm.getWatchedTime(), null);
                                //sync start time of videos to server which dont have transaction end date

                            }
                        } catch (NullPointerException e) {
                            e.printStackTrace();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        }
    }

    /**
     * Updates the rented start time parameter for all downloaded (offline) videos.
     */
    private void updateAllOfflineRentStartTime() {
        realmController = RealmController.with(currentActivity);
        if (appPreference.getLoggedInUser() != null) {
            if (currentActivity != null) {

                if (realmController != null) {
                    try {
                        for (DownloadVideoRealm downloadVideoRealm : realmController.getAllUnSyncedRentedVideos(appPreference.getLoggedInUser())) {
                            updateRentStartTime(downloadVideoRealm.getVideoId(), downloadVideoRealm.getRentStartWatchTime());

                        }
                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
//                currentActivity.runOnUiThread(() -> {
//                    if (realmController != null) {
//                        try {
//                            for (DownloadVideoRealm downloadVideoRealm : realmController.getAllUnSyncedRentedVideos(getLoggedInUser())) {
//                                //sync start time of videos to server which dont have transaction end date
//                                getRentalData(downloadVideoRealm.getVideoId(), updatedContentDatum -> {
//                                    downloadVideoRealm.setRentStartTimeSyncedWithServer(true);
//                                }, null, false);
//                            }
//                        } catch (NullPointerException e) {
//                            e.printStackTrace();
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
//                    }
//                });
            }
        }
    }

    /**
     * Evaluates whether the app should display the subscription cancel button (usually displayed in the Settings page).
     *
     * @return Returns the flag indicating whether the subscription cancel button should be displayed
     */
    public boolean shouldDisplaySubscriptionCancelButton() {
        if (currentActivity != null) {
            String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
            if (!TextUtils.isEmpty(paymentProcessor) && paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.robi)))
                return true;
            return currentActivity.getResources().getBoolean(R.bool.display_cancel_subscription_button);
        }

        return true;
    }

    public void updateRentStartTime(String filmId, long startRentTime) {
        if (appPreference.getLoggedInUser() != null && appCMSMain != null) {

            realmController = RealmController.with(currentActivity);
            //sync start time of videos to server which dont have transaction end date
            getRentalData(filmId, updatedContentDatum -> {
                if (updatedContentDatum != null)
                    if (updatedContentDatum.getTransactionEndDate() > 0) {
                        updateVideoTransactionEndTime(filmId, updatedContentDatum.getTransactionEndDate());
                    }

            }, true, startRentTime);

            currentActivity.runOnUiThread(() -> {
                try {
                    // copyFromRealm is used to get an unmanaged in-memory copy of an already
                    // persisted RealmObject
                    DownloadVideoRealm downloadedVideo = realmController.getRealm()
                            .copyFromRealm(realmController.getDownloadById(filmId));
                    if (!isNetworkConnected()) {
                        downloadedVideo.setRentStartTimeSyncedWithServer(false);
                    } else {
                        downloadedVideo.setRentStartTimeSyncedWithServer(true);
                    }
                    realmController.updateDownload(downloadedVideo);
                } catch (Exception e) {
                    //Log.e(TAG, "Film " + filmId + " has not been downloaded");
                }
            });
        }
    }

    /**
     * Calls the update watch history API to update the watch time for the specified video.
     *
     * @param filmId      The ID of the to update the watched time value
     * @param watchedTime The value of the watchedTime to update
     */
    public void updateWatchedTime(String filmId, String seriesId, long watchedTime, Action1<UpdateHistoryResponse> action) {
        if (appPreference.getLoggedInUser() != null && appCMSMain != null) {

            UpdateHistoryRequest updateHistoryRequest = null;
            if (platformType.equals(PlatformType.ANDROID)) {
                realmController = RealmController.with(currentActivity);
            }
            updateHistoryRequest = new UpdateHistoryRequest();
            updateHistoryRequest.setUserId(appPreference.getLoggedInUser());
            updateHistoryRequest.setWatchedTime(watchedTime);
            updateHistoryRequest.setVideoId(filmId);
            updateHistoryRequest.setSeriesId(seriesId);
            updateHistoryRequest.setSiteOwner(appCMSMain.getInternalName());
            if (currentActivity == null)
                return;
            String userId = isUserLoggedIn() ? getLoggedInUser() : CommonUtils.getUserIdFromAuthToken(appPreference.getAnonymousUserToken());
            String url = currentActivity.getString(R.string.app_cms_update_watch_history_api_url,
                    appCMSMain.getApiBaseUrl(), userId/*, getDeviceId()*/);

            appCMSUpdateWatchHistoryCall.call(url, getAuthToken(), apikey,
                    updateHistoryRequest, updateHistoryResponse -> {

                        if (updateHistoryResponse != null) {
                            if (updateHistoryResponse.getResponseCode() != 200) {
                                if (action != null) {
                                    action.call(updateHistoryResponse);
                                }
                            }
                            try {
                                if (currentActivity != null) {
                                    sendUpdateHistoryAction();
                                }
                            } catch (Exception e) {
                                Log.e(TAG, "Error updating watched time: " + e.getMessage());
                            }
                            populateUserHistoryData();
                        }
                    });

            if (platformType.equals(PlatformType.ANDROID)) {

                currentActivity.runOnUiThread(() -> {
                    try {
                        // copyFromRealm is used to get an unmanaged in-memory copy of an already
                        // persisted RealmObject
                        DownloadVideoRealm downloadedVideo = realmController.getRealm()
                                .copyFromRealm(realmController.getDownloadById(filmId));
                        downloadedVideo.setWatchedTime(watchedTime);
                        downloadedVideo.setLastWatchDate(System.currentTimeMillis());
                        if (!isNetworkConnected()) {
                            downloadedVideo.setSyncedWithServer(false);
                        } else {
                            downloadedVideo.setSyncedWithServer(true);
                        }
                        realmController.updateDownload(downloadedVideo);
                    } catch (Exception e) {
                        //Log.e(TAG, "Film " + filmId + " has not been downloaded");
                    }
                });
            }
        }
    }

    public void getBillingHistory(Action1<BillingHistory> action) throws IOException {
        if (appPreference.getLoggedInUser() != null && appCMSMain != null) {
            if (currentActivity == null)
                return;
            String url = currentActivity.getString(R.string.app_cms_billing_history_url,
                    appCMSMain.getApiBaseUrl(), appCMSMain.getInternalName());
            appCMSBillingHistoryCall.call(url, getAuthToken(), apikey,
                    billingHistoryModelAction1 -> {
                        if (billingHistoryModelAction1 != null) {
                            if (action != null) {
                                action.call(billingHistoryModelAction1);
                            }
                        }
                    });
        }
    }

    public void updateVideoStartTime(String id) {
        {

            if (isNetworkConnected()) {

                getRentalData(id, updatedContentDatum -> {
                    if (updatedContentDatum != null)
                        updateVideoTransactionEndTime(id, updatedContentDatum.getTransactionEndDate());

                }, true, System.currentTimeMillis());
            }
            currentActivity.runOnUiThread(() -> {
                try {
                    // copyFromRealm is used to get an unmanaged in-memory copy of an already
                    // persisted RealmObject
                    DownloadVideoRealm downloadedVideo = realmController.getRealm()
                            .copyFromRealm(realmController.getDownloadById(id));
                    downloadedVideo.setRentStartWatchTime(System.currentTimeMillis());

                    realmController.updateDownload(downloadedVideo);
                } catch (Exception e) {
                    //Log.e(TAG, "Film " + filmId + " has not been downloaded");
                }
            });


        }
    }

    public void updateVideoTransactionEndTime(String id, long transactionEndDate) {
        {
            currentActivity.runOnUiThread(() -> {
                try {
                    // copyFromRealm is used to get an unmanaged in-memory copy of an already
                    // persisted RealmObject
                    DownloadVideoRealm downloadedVideo = realmController.getRealm()
                            .copyFromRealm(realmController.getDownloadById(id));
                    downloadedVideo.setTransactionEndDate(transactionEndDate);
                    realmController.updateDownload(downloadedVideo);
                } catch (Exception e) {
                    //Log.e(TAG, "Film " + filmId + " has not been downloaded");
                }
            });

        }
    }

    /**
     * This will retrieve the current user watch history and store the data into a hashmap
     * to be used as a cache for future requests to display the user's current watched history.
     */
    private void populateUserHistoryData() {
        getHistoryData(appCMSHistoryResult -> {
            if (appCMSHistoryResult != null && appCMSHistoryResult.getRecords() != null
                    && appCMSHistoryResult.getRecords().size() > 0) {
                try {
                    int contentDatumLength = appCMSHistoryResult.getRecords().size();
                    List<Record> historyRecords = appCMSHistoryResult.getRecords();
                    for (int i = 0; i < contentDatumLength; i++) {
                        ContentDatum recordContentDatum = historyRecords.get(i).convertToContentDatum();
                        userHistoryData.put(recordContentDatum.getGist().getId(), recordContentDatum);
                        if (historyRecords.size() > 3) {
                            if (appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist().getPrimaryCategory() != null &&
                                    appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist().getPrimaryCategory().getTitle() != null)
                                if (platformType.equals(PlatformType.ANDROID)) {
                                    sendUAAboutCategory(appPreference.getLoggedInUser(), historyRecords.get(i).getContentResponse().getGist().getPrimaryCategory().getTitle());
                                }
                        }
                    }

                    if (currentActivity != null && currentActivity instanceof AppCMSPageActivity && isHomePage(((AppCMSPageActivity) currentActivity).getCurrentPageId())) {
                        sendRefreshPageAction();
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * This will make a call to the Watchlist API and populate a hashmap used as a cache
     * for retrieving the current user's watchlist again.
     */
    private void populateFilmsInUserWatchlist() {
        if (watchlistPage == null) {
            return;
        }
        AppCMSPageUI appCMSPageUI = navigationPages.get(watchlistPage.getPageId());

        if (appCMSPageUI == null) {
            getAppCMSPage(createPageUiUrl(watchlistPage),
                    appCMSPageUIResult -> {
                        if (appCMSPageUIResult != null) {
                            navigationPages.put(watchlistPage.getPageId(), appCMSPageUIResult);
                            String action = pageNameToActionMap.get(watchlistPage.getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, appCMSPageUIResult);
                            }

                            populateFilmsInUserWatchlist();
                        }
                    },
                    loadFromFile,
                    false);
        }

        getWatchlistPageContent(appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName(),
                new AppCMSWatchlistAPIAction(true,
                        false,
                        true,
                        appCMSPageUI,
                        watchlistPage.getPageId(),
                        watchlistPage.getPageId(),
                        watchlistPage.getPageFunction(),
                        watchlistPage.getPageId(),
                        null) {
                    @Override
                    public void call(AppCMSWatchlistResult appCMSWatchlistResult) {
                        if (appCMSWatchlistResult != null && appCMSWatchlistResult.getRecords() != null) {
                            temporaryWatchlist.clear();
                            List<Record> watchlistRecords = appCMSWatchlistResult.getRecords();
                            int numWatchlistRecords = watchlistRecords.size();
                            for (int i = 0; i < numWatchlistRecords; i++) {
                                Record watchlistRecord = watchlistRecords.get(i);
                                if (watchlistRecord != null &&
                                        watchlistRecord.getContentResponse() != null &&
                                        watchlistRecord.getContentResponse().getGist() != null) {
                                    temporaryWatchlist.add(watchlistRecord.getContentResponse().getGist().getId());
                                }
                            }
                        }
                        //AppCMSPresenter.this.filmsInUserWatchList = appCMSWatchlistResult;
                    }
                });
    }

    public MetaPage getWatchlistPage() {
        return watchlistPage;
    }

    /**
     * This will make a call to the Follow API and populate a hashmap used as a cache
     * for retrieving the current user's Follow list again.
     */
    private void populateFilmsInUserFollowlist() {

        if (followPage == null) {
            return;
        }
        AppCMSPageUI appCMSPageUI = navigationPages.get(followPage.getPageId());

        if (appCMSPageUI == null) {
            getAppCMSPage(followPage.getPageUI(),
                    appCMSPageUIResult -> {
                        if (appCMSPageUIResult != null) {
                            navigationPages.put(followPage.getPageId(), appCMSPageUIResult);
                            String action = pageNameToActionMap.get(followPage.getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, appCMSPageUIResult);
                            }

                            populateFilmsInUserFollowlist();
                        }
                    },
                    loadFromFile,
                    false);
        }

        getFollowingData(appCMSWatchlistResult -> {
            if (appCMSWatchlistResult != null) {
                if (appCMSWatchlistResult != null && appCMSWatchlistResult.getRecords() != null) {
                    temporaryFollowlist.clear();
                    List<Record> watchlistRecords = appCMSWatchlistResult.getRecords();
                    int numWatchlistRecords = watchlistRecords.size();
                    for (int i = 0; i < numWatchlistRecords; i++) {
                        Record watchlistRecord = watchlistRecords.get(i);
                        if (watchlistRecord != null &&
                                watchlistRecord.getContentDatum() != null &&
                                watchlistRecord.getContentDatum().getGist() != null) {
                            temporaryFollowlist.add(watchlistRecord.getContentDatum().getId());
                        }
                    }
                }
            }
        });

    }

    /**
     * This will send a broadcast action to registered receivers to update make a call to the History API
     * and then use the result to update the UI accordingly.
     */
    private void sendUpdateHistoryAction() {
        try {
            Intent updateHistoryIntent = new Intent(PRESENTER_UPDATE_HISTORY_ACTION);
            updateHistoryIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(updateHistoryIntent);
        } catch (Exception ex) {
        }
    }

    /**
     * This will make a call to the video status API to refresh the CDN token used for the film.
     *
     * @param filmId         This is the ID for which to receive the video status
     * @param responseAction This is the callback to execute after the API has returned with the result
     */
    public void getUserVideoStatus(String filmId, Action1<UserVideoStatusResponse> responseAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(),
                        () -> {
                            String url = currentActivity.getString(R.string.app_cms_video_status_api_url,
                                    appCMSMain.getApiBaseUrl(), filmId, appCMSMain.getInternalName());
                            appCMSUserVideoStatusCall.call(url, getAuthToken(), apikey, responseAction);
                        });
            } else {
                String url = currentActivity.getString(R.string.app_cms_video_status_api_url,
                        appCMSMain.getApiBaseUrl(), filmId, appCMSMain.getInternalName());
                appCMSUserVideoStatusCall.call(url, getAuthToken(), apikey, responseAction);
            }
        }
    }

    /**
     * This retrieves the download status of a specified video.
     *
     * @param filmId         This is the ID of the video to check the download status
     * @param responseAction This is the callback to execute when the download status is ready
     * @param userId         This is the user ID of the user whose downloads should be examined for the specfied video
     */
    public void getUserVideoDownloadStatus(String filmId, Action1<UserVideoDownloadStatus> responseAction, String userId) {
        appCMSUserDownloadVideoStatusCall.call(filmId, this, responseAction, userId);
    }

    public void getUserOfflineVideoDownloadStatus(String filmId, Action1<ConstraintViewCreator.OfflineVideoStatusHandler> responseAction, String userId) {
        offlineVideoStatusCall.call(filmId, this, responseAction, userId);
    }

    public boolean isDownloadEnable() {
        return getAppCMSMain() != null &&
                getAppCMSMain().getFeatures() != null &&
                getAppCMSMain().getFeatures().isMobileAppDownloads();
    }

    public boolean isAutoPlayEnable() {
        return getAppCMSMain() != null &&
                getAppCMSMain().getFeatures() != null &&
                getAppCMSMain().getFeatures().isAutoPlay();
    }

    /**
     * This will make a call to the anonymous user API to retrieve an anonymous user token.
     * The token will be stored as a Shared Preference which may be used future usages.  The
     * token is only used when there are no users logged in.
     */
    boolean isFetchingAnonymouseToken = false;

    private void signinAnonymousUser() {
        if (CommonUtils.isTokenExpired(appPreference.getAnonymousUserToken())) {
            if (!isFetchingAnonymouseToken) {
                isFetchingAnonymouseToken = true;
                if (currentActivity != null) {
                    String url = currentActivity.getString(R.string.app_cms_anonymous_auth_token_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName());
                    appCMSAnonymousAuthTokenCall.call(url, anonymousAuthTokenResponse -> {
                        isFetchingAnonymouseToken = false;
                        try {
                            if (anonymousAuthTokenResponse != null) {
                                appPreference.setAnonymousUserToken(anonymousAuthTokenResponse.getAuthorizationToken());
                                CommonUtils.setCountryCode(CommonUtils.getCountryCodeFromAuthToken(anonymousAuthTokenResponse.getAuthorizationToken()));
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error signing in as anonymous user: " + e.getMessage());
                        }
                    }, apikey);
                }
            }
        }
    }

    /**
     * This will make a call to the anonymous user API to retrieve an anonymous user token.
     * The token will be stored as a Shared Preference which may be used future usages.  The
     * token is only used when there are no users logged in.  This also resume the app launch flow
     * by executing the call to retrieve the android.json.
     *
     * @param tryCount     This is the number of sequential attempts that this method has been exectued
     * @param platformType This is the Platform Type, which may either by Android or TV
     */
    private void signinAnonymousUser(int tryCount,
                                     PlatformType platformType) {
        if (currentActivity != null) {
            String url = currentActivity.getString(R.string.app_cms_anonymous_auth_token_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName());
            appCMSAnonymousAuthTokenCall.call(url, anonymousAuthTokenResponse -> {
                if (anonymousAuthTokenResponse != null) {
                    appPreference.setAnonymousUserToken(anonymousAuthTokenResponse.getAuthorizationToken());
                    if (tryCount == 0) {
                        if (platformType == PlatformType.TV) {
                            getAppCMSTV(tryCount + 1);
                        }
                    } else {
                        showDialog(DialogType.NETWORK, null, false, null, null, null);
                    }
                } else {
                    if (platformType == PlatformType.ANDROID) {
                        getAppCMSAndroid(tryCount + 1, null);
                    } else if (platformType == PlatformType.TV) {
                        getAppCMSTV(tryCount + 1);
                    }
                }
            }, apikey);
        }
    }

    /**
     * This will retrieve the app text color from the main.json in the general brand JSON object.
     *
     * @return Returns the app text color from the main.json in the general brand JSON object
     */
    public String getAppTextColor() {
        if (appCMSMain != null && appCMSMain.getBrand() != null && appCMSMain.getBrand().getGeneral() != null) {
            return appCMSMain.getBrand()
                    .getGeneral()
                    .getTextColor();
        }

        return null;
    }

    /**
     * This will retrieve the app background color from the main.json in the general JSON object.
     *
     * @return Returns the app background color from the main.json in the general JSON object
     */
    public String getAppBackgroundColor() {
        if (appCMSMain != null && appCMSMain.getBrand() != null && appCMSMain.getBrand().getGeneral() != null) {
            return appCMSMain.getBrand()
                    .getGeneral()
                    .getBackgroundColor();
        }

        return null;
    }

    /**
     * This will retrieve the app CTA text color from the main.json in the CTA JSON object.
     *
     * @return Returns the CTA text color from the main.json in the general JSON object
     */
    public String getAppCtaTextColor() {
        if (appCMSMain != null && appCMSMain.getBrand() != null && appCMSMain.getBrand().getCta() != null && appCMSMain.getBrand().getCta().getPrimary() != null) {
            return appCMSMain.getBrand()
                    .getCta()
                    .getPrimary()
                    .getTextColor();
        }
        return null;
    }

    /**
     * This will retrieve the app CTA background color from the main.json in the CTA JSON object.
     *
     * @return Returns the CTA background color from the main.json in the general JSON object
     */
    public String getAppCtaBackgroundColor() {
        if (appCMSMain != null && appCMSMain.getBrand() != null && appCMSMain.getBrand().getCta() != null && appCMSMain.getBrand().getCta().getPrimary() != null) {
            return appCMSMain.getBrand()
                    .getCta()
                    .getPrimary()
                    .getBackgroundColor();
        }
        return null;
    }

    /**
     * This will construct the ad URL from the android.json JSON object.
     *
     * @return Returns the constructed ad URL using the API URL from android.json and the given path
     */
    public String getAppAdsURL(ContentDatum data) {

        if (currentActivity != null && appCMSAndroid != null) {
            String videoTag = "";
            if (appCMSAndroid.getAdvertising() != null &&
                    !TextUtils.isEmpty(appCMSAndroid.getAdvertising().getVideoTag())) {
                Date now = new Date();
                videoTag = appCMSAndroid.getAdvertising().getVideoTag();
                videoTag = Macros.INSTANCE.replaceURl(videoTag);
                if (videoTag.contains("spotxAdTags")) {
                    if (videoTag.contains("&")) {
                        videoTag = videoTag.split("&", 2)[0];
                        videoTag = currentActivity.getString(R.string.app_cms_spotx_ads_api_url,
                                videoTag,
                                currentContext.getResources().getString(R.string.package_name),
                                currentContext.getResources().getString(R.string.app_name),
                                2,
                                Utils.getAdvertisingID(currentContext),
                                Build.MANUFACTURER,
                                CommonUtils.getDeviceName(),
                                Utils.getDeviceHeight(currentContext),
                                Utils.getDeviceHeight(currentContext),
                                Utils.getIPAddress(),
                                new WebView(currentContext).getSettings().getUserAgentString(),
                                now.getTime());
                        return videoTag;
                    }
                } else {
                    String appID = "", categorys = null, tags = null;
                    if (videoTag.contains("[placeholder]")) {
                        videoTag = videoTag.replace("[placeholder]", getPermalinkCompletePath(data.getGist().getPermalink()));
                    }
                    try {
                        if (data.getCategories() != null)
                            categorys = getCategorysForAds(data.getCategories());
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }
                    try {
                        if (data.getTags() != null)
                            tags = getTagsForAds(data.getTags());
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    }

                    if (categorys != null && !TextUtils.isEmpty(categorys)) {
                        appID = appID + categorys;
                    }
                    if (tags != null && !TextUtils.isEmpty(tags)) {
                        appID = appID + tags;
                    }
//                    appID= "deployment%3Ddevsite%26sample_ar%3Dpremidpostpod";
//                    appID = "deployment%3Ddevsite%26sample_ar%3Dpremidpostlongpod&cmsid=496";
                    return currentActivity.getString(R.string.app_cms_ads_api_url,
                            videoTag,
                            now.getTime(),
                            appID);
                }

            }


        }
        return null;
    }

    public String getCategorysForAds(List<Category> categories) throws UnsupportedEncodingException {
        StringBuilder category = new StringBuilder("&categories=");
        for (Category categoryItem : categories) {
            category.append(categoryItem.getTitle());
            category.append(",");
        }
        return category.toString().trim().equalsIgnoreCase("&categories=") ? null : URLEncoder.encode(category.toString(), "utf-8");
    }

    public String getTagsForAds(List<Tag> tags) throws UnsupportedEncodingException {
        StringBuilder tag = new StringBuilder("&tags=");
        int i = 0;
        for (Tag tagItem : tags) {
            i++;
            tag.append(tagItem.getTitle());
            if (i < tags.size()) {
                tag.append(",");
            }
        }
        return tag.toString().trim().equalsIgnoreCase("&tags=") ? null : URLEncoder.encode(tag.toString(), "utf-8");
    }

    /**
     * This will return a flag to indicate whether to display CRWs set by the main.json JSON object.
     *
     * @return Returns a flag to indicate whether to display CRWs set by the main.json JSON object.
     */
    public boolean shouldDisplayCRW() {
        if (appCMSMain != null && appCMSMain.getFeatures() != null) {
            return appCMSMain.getFeatures().isAutoPlay();
        }
        return false;
    }

    /**
     * This will set a flag that is used to force a new page to be loaded.
     */
    public void forceLoad() {
        this.forceLoad = true;
    }

    /**
     * This is the entry point for most user click options, which are specified as actions
     * in AppCMS UI results.  This will evaulate the input arguments to determine which screen
     * or dialog should be presented to the user next.
     *
     * @param pagePath              This is the URL path of the next screen to load
     * @param action                This is the action which will determine which type of screen to display next
     * @param filmTitle             This is the name of the video
     * @param extraData             This additional data that is used by different results, which could include the video permalink or HLS URL
     * @param contentDatum          This the API data associated with the video to be associated with the next screen to launch
     * @param closeLauncher         This flag will send a broadcast message to close the screen that launching the next scren (e.g. a Video Detail page will close itself when launching another Video Detail page)
     * @param currentlyPlayingIndex This is the current index in the list of related videos used for Autoplay
     * @param relateVideoIds        This is the list of related video used for Autoplay
     * @return This will return true if the input parameters, otherwise it will return false
     */
    ExtraScreenType screenType;
    boolean isHardWallChecked = false;
    boolean isFromSignInPageSuccess;

    public boolean launchButtonSelectedAction(String pagePath,
                                              String action,
                                              String filmTitle,
                                              String[] extraData,
                                              ContentDatum contentDatum,
                                              final boolean closeLauncher,
                                              int currentlyPlayingIndex,
                                              List<String> relateVideoIds) {
        boolean result = false;
        boolean isVideoOffline = false;
        try {
            isVideoOffline = Boolean.parseBoolean(extraData != null && extraData.length > 2 ? extraData[3] : "false");
        } catch (Exception ignored) {
        }
        setWaysToWatchFromEntitlement(false);
        if (appCMSMain.getFeatures().isTrickPlay()) {
            if (contentDatum != null && contentDatum.getGist() != null) {
                if (contentDatum.getGist().getContentType() != null && contentDatum.getGist().getContentType().equalsIgnoreCase(currentContext.getString(R.string.app_cms_video_content_type))) {
                    action = currentContext.getString(R.string.app_cms_action_watchvideo_key);
                }
                if (contentDatum.getGist().getMediaType() != null) {
                    if (contentDatum.getGist().getMediaType().equalsIgnoreCase(currentContext.getString(R.string.media_type_episode)) ||
                            contentDatum.getGist().getMediaType().equalsIgnoreCase(currentContext.getString(R.string.media_type_video))) {
                        action = currentContext.getString(R.string.app_cms_action_watchvideo_key);
                    }
                }
            }
        }
        final AppCMSActionType actionType = actionToActionTypeMap.get(action);
        setCurrentAction(action);
        String finalAction = action;
        if ((actionType == AppCMSActionType.OPEN_OPTION_DIALOG)) {
            showLoader();
            if (contentDatum != null && contentDatum.getGist() != null &&
                    contentDatum.getGist().getId() != null) {
                String videoId = contentDatum.getGist().getOriginalObjectId();
                if (videoId == null) {
                    videoId = contentDatum.getGist().getId();
                }
                getUserVideoStatus(videoId, userVideoStatusResponse -> {

                    boolean isQueue = false;
                    if (userVideoStatusResponse != null) {
                        isQueue = userVideoStatusResponse.isQueued();
                    }
                    stopLoader();
                    AppCMSTrayMenuDialogFragment appCMSTrayMenuDialogFragment = AppCMSTrayMenuDialogFragment.newInstance(isQueue, contentDatum);
                    appCMSTrayMenuDialogFragment.show(currentActivity.getFragmentManager(), "AppCMSTrayMenuDialogFragment");
                    appCMSTrayMenuDialogFragment.setMoreClickListener(trayMenuClickListener);
//                    }
                });
            }

            return false;
        }

        if (!isNetworkConnected() && !isVideoOffline) { //checking isVideoOffline here to fix SVFA-1431 in offline mode
            // Fix of SVFA-1435
            if (actionType == AppCMSActionType.CLOSE) {
                if (pagePath == null) {
                    if (AudioServiceHelper.getAudioInstance() != null) {
                        AudioServiceHelper.getAudioInstance().onStop();
                    }
                    currentActivity.finishAffinity();
                    return false;
                }
                sendCloseOthersAction(null, true, false);
                return false;
            }
            int finalCurrentlyPlayingIndex = currentlyPlayingIndex;
            List<String> finalRelateVideoIds = relateVideoIds;
            String finalPagePath1 = pagePath;
            openDownloadScreenForNetworkError(false,
                    () -> launchButtonSelectedAction(finalPagePath1,
                            finalAction,
                            filmTitle,
                            extraData,
                            contentDatum,
                            closeLauncher,
                            finalCurrentlyPlayingIndex,
                            finalRelateVideoIds));
        } else if (!cancelAllLoads) {
            //Log.d(TAG, "Attempting to load page " + filmTitle + ": " + pagePath);
            if (launched) {
                refreshPages(null, false, 0, 0);
            }
            if (actionType == AppCMSActionType.PLAY_VIDEO_PAGE && isVideoOffline)
                loadingPage = false;
            /*This is to enable offline video playback even if Internet is not available*/
            if (!(actionType == AppCMSActionType.PLAY_VIDEO_PAGE && isVideoOffline) && !isNetworkConnected()) {
                showDialog(DialogType.NETWORK, null, false, null, null, null);
            } else if (currentActivity != null && (!loadingPage || forceLoad)) {
                forceLoad = false;
                if (actionType == null) {
                    //Log.e(TAG, "Action " + action + " not found!");
                    return false;
                }
                result = true;

                boolean isTrailer = actionType == AppCMSActionType.WATCH_TRAILER;


                if ((actionType == AppCMSActionType.PLAY_VIDEO_PAGE ||
                        actionType == AppCMSActionType.WATCH_TRAILER) &&
                        contentDatum != null &&
                        !isVideoPlayerStarted) {

                    final boolean videoOffline = isVideoOffline;
                    if (videoOffline) {
                        openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
                                pagePath, action, filmTitle, extraData, closeLauncher,
                                currentlyPlayingIndex, relateVideoIds, actionType);
                    } else {
                        if (getAppCMSMain().isMonetizationModelEnabled() && getPlatformType() != PlatformType.TV && !isTrailer && contentDatum != null && contentDatum.getMonetizationModels() != null) {
                            boolean isUserSubscribed = isUserSubscribed();
                            boolean isTveUser = appPreference.getTVEUserId() != null;
                            boolean isContentPurchased = isUserLoggedIn() && (appPreference.getUserPurchases() != null && !TextUtils.isEmpty(appPreference.getUserPurchases())
                                    && (contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), contentDatum.getGist().getId())
                                    || (contentDatum.getSeasonId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), contentDatum.getSeasonId()))
                                    || (contentDatum.getSeriesId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), contentDatum.getSeriesId()))));
                            if (contentTypeChecker.isContentSVODMonetization(contentDatum.getMonetizationModels()) &&
                                    contentTypeChecker.isContentTVEMonetization(contentDatum.getMonetizationModels()) &&
                                    contentTypeChecker.isContentTVODMonetization(contentDatum.getMonetizationModels())) {
                                if (!isContentPurchased && !isUserSubscribed && !isTveUser && !isPreviewAvailable()) {
                                    openEntitlementScreen(contentDatum, false);
                                    return false;
                                }
                            } else if (contentTypeChecker.isContentSVODMonetization(contentDatum.getMonetizationModels()) &&
                                    contentTypeChecker.isContentTVODMonetization(contentDatum.getMonetizationModels())) {
                                if (!isContentPurchased && !isUserSubscribed && !isPreviewAvailable()) {
                                    openEntitlementScreen(contentDatum, false);
                                    return false;
                                }
                            } else if (contentTypeChecker.isContentTVEMonetization(contentDatum.getMonetizationModels()) &&
                                    contentTypeChecker.isContentSVODMonetization(contentDatum.getMonetizationModels())) {
                                if (!isTveUser && !isUserSubscribed && !isPreviewAvailable()) {
                                    openEntitlementScreen(contentDatum, false);
                                    return false;
                                }
                            } else if (contentTypeChecker.isContentSVODMonetization(contentDatum.getMonetizationModels()) &&
                                    contentTypeChecker.isContentTVODMonetization(contentDatum.getMonetizationModels())) {
                                if (!isContentPurchased && !isUserSubscribed && !isPreviewAvailable()) {
                                    openEntitlementScreen(contentDatum, false);
                                    return false;
                                }
                            } else if (contentTypeChecker.isContentSVODMonetization(contentDatum.getMonetizationModels()) && !isUserSubscribed && !isPreviewAvailable()) {
                                if (!contentTypeChecker.isContentFREEMonetization(contentDatum.getMonetizationModels())) {
                                    openEntitlementScreen(contentDatum, false);
                                    return false;
                                }
                            } else if (contentTypeChecker.isContentTVEMonetization(contentDatum.getMonetizationModels()) && !isTveUser && !isPreviewAvailable()) {
                                openEntitlementScreen(contentDatum, false);
                                return false;
                            } else if (contentTypeChecker.isContentTVODMonetization(contentDatum.getMonetizationModels()) && !isContentPurchased && !isPreviewAvailable()) {
                                openEntitlementScreen(contentDatum, false);
                                return false;
                            }
                            removeWaysToWatch();
                        }

                        String filmid = contentDatum.getGist().getId();
                        if (isTrailer) {
                            if (contentDatum != null &&
                                    contentDatum.getContentDetails() != null &&
                                    contentDatum.getContentDetails().getTrailers() != null &&
                                    !contentDatum.getContentDetails().getTrailers().isEmpty() &&
                                    contentDatum.getContentDetails().getTrailers().size() > 0 &&
                                    contentDatum.getContentDetails().getTrailers().get(0) != null) {
                                filmid = contentDatum.getContentDetails().getTrailers().get(0).getId();
                            } else if (contentDatum.getShowDetails() != null &&
                                    contentDatum.getShowDetails().getTrailers() != null &&
                                    !contentDatum.getShowDetails().getTrailers().isEmpty() &&
                                    contentDatum.getShowDetails().getTrailers().size() > 0 &&
                                    contentDatum.getShowDetails().getTrailers().get(0) != null &&
                                    contentDatum.getShowDetails().getTrailers().get(0).getId() != null) {
                                filmid = contentDatum.getShowDetails().getTrailers().get(0).getId();
                            }
                        }
                        if (contentDatum.getSubscriptionPlans() != null && appPreference.getTVEUserId() != null && contentTypeChecker.isContentTVE(contentDatum.getSubscriptionPlans())) {
                            String url = currentActivity.getString(R.string.verimatrix_bounce, currentActivity.getString(R.string.verimatrix__base_url),
                                    CommonUtils.getVerimatrixPartnerId(getAppCMSAndroid(), currentContext.getString(R.string.tvprovider_verimatrix)));
                            openAppcmsWebView(url);
                            verimatrixBounceAction = new Action1<Boolean>() {
                                @Override
                                public void call(Boolean aBoolean) {
                                    //TODO:- boolean to be picked for content authz from appcmsmain
                                    /*String url = currentActivity.getString(R.string.verimatrix_resource_access, currentActivity.getString(R.string.verimatrix__base_url),
                                    getVerimatrixPartnerId(),"/outdoor?resource_id=outdoor&resource_id=WFN");
                                    openAppcmsWebView(url);
                                    verimatrixResourceAccessAction=new Action1<Boolean>() {
                                        @Override
                                        public void call(Boolean aBoolean) {
                                            showLoader();
                                    openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
                                            pagePath, action, filmTitle, extraData, closeLauncher,
                                            currentlyPlayingIndex, relateVideoIds, actionType);
                                        }
                                    } ;*/
                                    sendCloseOthersAction(null, true, false);
                                    showLoader();
                                    openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
                                            pagePath, finalAction, filmTitle, extraData, closeLauncher,
                                            currentlyPlayingIndex, relateVideoIds, actionType);
                                }
                            };
                        } else {
                            showLoader();
                            openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
                                    pagePath, action, filmTitle, extraData, closeLauncher,
                                    currentlyPlayingIndex, relateVideoIds, actionType);
                        }
//                        refreshVideoData(filmid, new Action1<ContentDatum>() {
//                            @Override
//                            public void call(ContentDatum videoContentDatum) {
//                                stopLoader();
//                                if (contentDatum.getGist() != null && contentDatum.getGist().getWatchedTime() <= 0 &&
//                                        videoContentDatum != null && videoContentDatum.getGist() != null && videoContentDatum.getGist().getWatchedTime() > 0) {
//                                    contentDatum.getGist().setWatchedTime(videoContentDatum.getGist().getWatchedTime());
//                                }
//                                if (isAppTVE()) {
//                                    if (isTrailer ||
//                                            videoContentDatum.getGist().getFree()) {
//                                        if (videoContentDatum.getVideoPlayError() != null) {
//                                            contentDatum.setVideoPlayError(videoContentDatum.getVideoPlayError());
//                                            showDialog(DialogType.VIDEO_NOT_AVAILABLE_ALERT,
//                                                    videoContentDatum.getVideoPlayError(),
//                                                    false,
//                                                    () -> {
//                                                        if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
//                                                            getCurrentActivity().finish();
//                                                    },
//                                                    null, localisedStrings.getContentNotAvailable());
//                                            stopLoader();
//                                        } else if (appCMSMain.getFeatures().isMathProblemEnabled() &&
//                                                contentDatum.getParentalRating() != null &&
//                                                (contentDatum.getParentalRating().matches(".*\\d.*") && Integer.parseInt(contentDatum.getParentalRating().split("\\+")[0]) >= 5
//                                                        && Integer.parseInt(contentDatum.getParentalRating().split("\\+")[0]) <= 11) ||
//                                                (contentDatum.getShowParentalRating() != null && contentDatum.getShowParentalRating().matches(".*\\d.*") && Integer.parseInt(contentDatum.getShowParentalRating().split("\\+")[0]) >= 5
//                                                        && Integer.parseInt(contentDatum.getShowParentalRating().split("\\+")[0]) <= 11)) {
//                                            launchMathProblemPage(new LaunchData(contentDatum, isTrailer, videoOffline,
//                                                    pagePath, action, filmTitle, extraData, closeLauncher,
//                                                    currentlyPlayingIndex, relateVideoIds, actionType, null));
//                                        } else {
//                                            openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
//                                                    pagePath, action, filmTitle, extraData, closeLauncher,
//                                                    currentlyPlayingIndex, relateVideoIds, actionType);
//                                        }
//                                    } else if (!isUserLoggedIn()) {
//                                        showEntitlementDialog(AppCMSPresenter.DialogType.LOGIN_REQUIRED,
//                                                () -> {
//                                                    setDoNotClosePage(true);
//                                                }, null);
//                                    } else {
//                                        if (videoContentDatum.getVideoPlayError() != null) {
//                                            contentDatum.setVideoPlayError(videoContentDatum.getVideoPlayError());
//                                            showDialog(DialogType.VIDEO_NOT_AVAILABLE_ALERT,
//                                                    videoContentDatum.getVideoPlayError(),
//                                                    false,
//                                                    () -> {
//                                                        if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
//                                                            getCurrentActivity().finish();
//                                                    },
//                                                    null, localisedStrings.getContentNotAvailable());
//                                            stopLoader();
//                                        } else if (appCMSMain.getFeatures().isMathProblemEnabled() && (contentDatum.getParentalRating() != null && contentDatum.getParentalRating().matches(".*\\d.*") && Integer.parseInt(contentDatum.getParentalRating().split("\\+")[0]) >= 5
//                                                && Integer.parseInt(contentDatum.getParentalRating().split("\\+")[0]) <= 11) || (contentDatum.getShowParentalRating() != null && contentDatum.getShowParentalRating().matches(".*\\d.*") && Integer.parseInt(contentDatum.getShowParentalRating().split("\\+")[0]) >= 5
//                                                && Integer.parseInt(contentDatum.getShowParentalRating().split("\\+")[0]) <= 11)) {
//                                            launchMathProblemPage(new LaunchData(contentDatum, isTrailer, videoOffline,
//                                                    pagePath, action, filmTitle, extraData, closeLauncher,
//                                                    currentlyPlayingIndex, relateVideoIds, actionType, null));
//                                        } else {
//                                            openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
//                                                    pagePath, action, filmTitle, extraData, closeLauncher,
//                                                    currentlyPlayingIndex, relateVideoIds, actionType);
//                                        }
//                                    }
//                                } else {
//                                    openVideoPlayerActivity(contentDatum, isTrailer, videoOffline,
//                                            pagePath, action, filmTitle, extraData, closeLauncher,
//                                            currentlyPlayingIndex, relateVideoIds, actionType);
//                                }
//                            }
//                        }, null, false, false, null);
                    }
                } else if (actionType == AppCMSActionType.SHARE) {
                    if (extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                        String httpsScheme = currentActivity.getString(R.string.https_scheme);
                        if (contentDatum != null && contentDatum.getGist() != null) {
                            sendShareEvent(contentDatum);
                        }
                        Intent sendIntent = new Intent();
                        sendIntent.setAction(Intent.ACTION_SEND);
                        sendIntent.putExtra(Intent.EXTRA_TEXT, extraData[0].startsWith(httpsScheme) ? extraData[0] : httpsScheme + extraData[0]);
                        sendIntent.setType(currentActivity.getString(R.string.text_plain_mime_type));
                        if (isHoichoiApp()) {
                            CommonUtils.launchSharingIntentApp(currentActivity, sendIntent, localisedStrings.getShareVideoText());
                        } else {
                            Intent chooserIntent = Intent.createChooser(sendIntent, localisedStrings.getShareVideoText());
                            chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                            currentActivity.startActivity(chooserIntent);
                        }
                        stopLoader();
                    }
                } else if (actionType == AppCMSActionType.LAUNCH_WHATSAPP) {
                    if (extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                        String httpsScheme = currentActivity.getString(R.string.https_scheme);
                        if (contentDatum != null && contentDatum.getGist() != null) {
                            sendShareEvent(contentDatum);
                        }
                        Intent sendIntent = new Intent(Intent.ACTION_SEND);
                        sendIntent.putExtra(Intent.EXTRA_TEXT, extraData[0].startsWith(httpsScheme) ? extraData[0] : httpsScheme + extraData[0]);
                        sendIntent.setType(currentActivity.getString(R.string.text_plain_mime_type));
                        sendIntent.setPackage(CommonUtils.WHATSAPPP_PACKAGE_NAME);
                        try {
                            currentActivity.startActivity(sendIntent);
                        } catch (ActivityNotFoundException e) {
                            e.printStackTrace();
                        }
                    }
                } else if (actionType == AppCMSActionType.CLOSE) {
                    if (!BaseView.isTablet(currentContext)) {
                        restrictPortraitOnly();
                    }

                    //ViewCreator.clearPlayerView();
                    sendCloseOthersAction(null, true, false);
                } else if (actionType == AppCMSActionType.LOGIN) {
                    //Log.d(TAG, "Login action selected: " + extraData[0]);
                    //ViewCreator.clearPlayerView();

                    if (TextUtils.isEmpty(extraData[0])) {
                        stopLoader();
                        showDialog(DialogType.SIGNIN, localisedStrings.getEmptyEmailValidationText(), false, null, null, localisedStrings.getSignInText());
                        return false;
                    }
                    if (!isValidEmail(extraData[0])) {
                        stopLoader();

                        showDialog(DialogType.SIGNIN, localisedStrings.getEmailFormatValidationMsg(), false, null, null, localisedStrings.getSignInText());
                        return false;
                    }
                    if (TextUtils.isEmpty(extraData[1])) {
                        stopLoader();
                        showDialog(DialogType.SIGNIN, localisedStrings.getEmptyPasswordValidationText(), false, null, null, localisedStrings.getSignInText());
                        return false;
                    }
                    if (extraData[1].length() < 5 && getModuleApi() != null && getModuleApi().getMetadataMap() != null && getModuleApi().getMetadataMap().getPasswordLengthError() != null) {
                        stopLoader();
                        showDialog(DialogType.SIGNIN, getModuleApi().getMetadataMap().getPasswordLengthError(), false, null, null, localisedStrings.getSignInText());
                        return false;
                    }
                    if (extraData[1].length() > 50 && getModuleApi() != null && getModuleApi().getMetadataMap() != null && getModuleApi().getMetadataMap().getPASSWORD_NOT_VALID() != null) {
                        stopLoader();
                        showDialog(DialogType.SIGNIN, getModuleApi().getMetadataMap().getPASSWORD_NOT_VALID(), false, null, null, localisedStrings.getSignInText());
                        return false;
                    }
                    closeSoftKeyboard();
                    login(extraData[0], extraData[1]);
//                    sendSignInEmailFirebase();
                } else if (actionType == AppCMSActionType.RESET_PASSWORD) {
                    closeSoftKeyboard();
                    navigateToResetPasswordPage();
                } else if (actionType == AppCMSActionType.REDEEM_CODE) {
                    closeSoftKeyboard();
                    TextInputEditText subscribeEditText = currentActivity.findViewById(R.id.redemption_edit_text_id);
                    if (subscribeEditText != null) {
                        String redemptionCode = subscribeEditText.getText().toString().trim();
                        if (!TextUtils.isEmpty(redemptionCode)) {
                            isValidRedemptionCode = false;
                            validateRedemptionCode(redemptionCode);
                        }
                    }
                } else if (actionType == AppCMSActionType.FORGOT_PASSWORD) {
                    //Log.d(TAG, "Forgot password selected: " + extraData[0]);
                    //ViewCreator.clearPlayerView();
                    closeSoftKeyboard();
                    launchResetPasswordPage(extraData[0]);
                } else if (actionType == AppCMSActionType.LOGIN_FACEBOOK) {
                    //Log.d(TAG, "Facebook Login selected");
                    //ViewCreator.clearPlayerView();
                    loginFacebook();
                    if (launchType != LaunchType.VIEWING_RESTRICTIONS_VIEW && launchType != LaunchType.VIDEO_PIN_VIEW)
                        firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_facebook));
                } else if (actionType == AppCMSActionType.SIGNUP_FACEBOOK) {
                    //Log.d(TAG, "Facebook Signup selected");
                    //ViewCreator.clearPlayerView();
                    loginFacebook();
                    firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_facebook));
                } else if (actionType == AppCMSActionType.LOGIN_GOOGLE) {
                    //Log.d(TAG, "Google Login selected");
                    //ViewCreator.clearPlayerView();
                    loginGoogle();
                    if (launchType != LaunchType.VIEWING_RESTRICTIONS_VIEW && launchType != LaunchType.VIDEO_PIN_VIEW)
                        firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_google));
                } else if (actionType == AppCMSActionType.SIGNUP_GOOGLE) {
                    //Log.d(TAG, "Google signup selected");
                    //ViewCreator.clearPlayerView();
                    loginGoogle();
                    firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_google));
                } else if (actionType == AppCMSActionType.SUBSCRIBEGO) {
                    TextInputEditText subscribeEditText = currentActivity.findViewById(R.id.subscribe_edit_text_id);
                    subscribeEmail = subscribeEditText.getText().toString();
                    if (isValidEmail(subscribeEmail)) {
                        // Showing progress dialog
                        showProgressDialog();
                        StartEmailSubscripctionAsyncTask startEmailSubscripctionAsyncTask = new StartEmailSubscripctionAsyncTask(this, appCMSSubscribeForLatestNewsCall);
                        startEmailSubscripctionAsyncTask.execute(subscribeEmail);
                    } else {
                        showEntitlementDialog(DialogType.
                                SUBSCRIPTION_EMAIL_INVALID, null, null);
                    }
                } else if (actionType == AppCMSActionType.LAUNCH_WALLET_PAYMENT_PAGE) {
                    if (contentDatum != null && jusPayUtils != null) {
                        String method = contentDatum.getWalletKey();
                        if (TextUtils.isEmpty(method))
                            method = contentDatum.getTitle().replace(" ", "").toUpperCase();
                        jusPayUtils.urlBasedPayments(currentActivity.getString(R.string.wallet), method);
                    }
                } else if (actionType == AppCMSActionType.LAUNCH_NET_BANKING_PAYMENT_PAGE) {
                    if (contentDatum != null && jusPayUtils != null)
                        jusPayUtils.urlBasedPayments(currentActivity.getString(R.string.nb), currentActivity.getString(R.string.nb) + "_" + contentDatum.getTitle().toUpperCase());
                } else if (actionType == AppCMSActionType.LAUNCH_PARENTAL_CONTROLS_PAGE) {
                    navigateToParentalControlsPage();
                } else if (actionType == AppCMSActionType.LAUNCH_VIEWING_RESTRICTIONS_PAGE) {
                    navigateToReauthoriseUser(LaunchType.VIEWING_RESTRICTIONS_VIEW);
                } else if (actionType == AppCMSActionType.LAUNCH_CHANGE_VIDEO_PIN_PAGE) {
                    navigateToReauthoriseUser(LaunchType.VIDEO_PIN_VIEW);
                } else if (actionType == MANAGE_PARENTAL_CONTROLS) {
                    if (appPreference != null && extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                        showLoadingDialog(true);
                        String url = currentActivity.getString(R.string.app_cms_identity_parental_api_url, appCMSMain.getApiBaseUrl());
                        boolean isEnable = Boolean.parseBoolean(extraData[0]);
                        ParentalControlResponse request = new ParentalControlResponse();
                        request.setParentalControl(isEnable);
                        appCMSUserIdentityCall.setUserParentalControlInfo(url, getAuthToken(), getApiKey(), request, response -> {
                            showLoadingDialog(false);
                            if (response != null && response.isSaved()) {
                                appPreference.setParentalControlsEnable(isEnable);
                                Button parentalControlsBtn = currentActivity.findViewById(R.id.parentalControlsButton);
                                if (parentalControlsBtn != null) {
                                    if (isEnable) {
                                        parentalControlsBtn.setTextColor(getBrandPrimaryCtaColor());
                                        parentalControlsBtn.setAlpha(1f);
                                    } else {
                                        parentalControlsBtn.setTextColor(Color.parseColor(getAppTextColor()));
                                        parentalControlsBtn.setAlpha(0.5f);
                                    }
                                    parentalControlsBtn.setEnabled(isEnable);
                                }
                            } else {
                                Switch parentalControlsSwitch = currentActivity.findViewById(R.id.parentalControlToggle);
                                if (parentalControlsSwitch != null) {
                                    parentalControlsSwitch.setEnabled(false);
                                    parentalControlsSwitch.setChecked(!isEnable);
                                    parentalControlsSwitch.setEnabled(true);
                                }
                            }
                        });
                    }
                } else if (actionType == AppCMSActionType.SAVE_VIDEO_PIN) {
                    if (appPreference != null && extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                        showLoadingDialog(true);
                        String url = currentActivity.getString(R.string.app_cms_identity_parental_api_url, appCMSMain.getApiBaseUrl());
                        ParentalControlResponse request = new ParentalControlResponse();
                        request.setParentalControl(appPreference.isParentalControlsEnable());
                        request.setParentalPin(extraData[0]);
                        appCMSUserIdentityCall.setUserParentalControlInfo(url, getAuthToken(), getApiKey(), request, response -> {
                            showLoadingDialog(false);
                            if (response != null && response.isSaved()) {
                                appPreference.setParentalPin(extraData[0]);
                                if (isBiometricEnabled()) {
                                    appPreference.setBiometricPinEnable(true);
                                    setEnableBiometric(false);
                                }
                                sendCloseOthersAction(null, true, true);
                                if (launchType == LaunchType.VIEWING_RESTRICTIONS_FROM_VIDEO_PIN_VIEW) {
                                    navigateToViewingRestrictionsPage();
                                }
                            }
                        });
                        closeSoftKeyboard();
                    }
                } else if (actionType == AppCMSActionType.SET_PARENTAL_RATING) {
                    if (appPreference != null && extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                        showLoadingDialog(true);
                        String url = currentActivity.getString(R.string.app_cms_identity_parental_api_url, appCMSMain.getApiBaseUrl());
                        ParentalControlResponse request = new ParentalControlResponse();
                        request.setParentalControl(appPreference.isParentalControlsEnable());
                        request.setParentalRating(extraData[0]);
                        appCMSUserIdentityCall.setUserParentalControlInfo(url, getAuthToken(), getApiKey(), request, response -> {
                            showLoadingDialog(false);
                            if (response != null && response.isSaved()) {
                                appPreference.setParentalRating(extraData[0]);
                                sendCloseOthersAction(null, true, true);
                            }
                        });

                    }
                } else {
                    if (actionType == AppCMSActionType.SIGNUP) {
                        //Log.d(TAG, "Sign-Up selected: " + extraData[0]);
                        //ViewCreator.clearPlayerView();
                        if (extraData != null) {
                            if (TextUtils.isEmpty(extraData[0])) {
                                stopLoader();
                                showDialog(DialogType.SIGNUP, localisedStrings.getEmptyEmailValidationText(), false, null, null, localisedStrings.getSignUpText());
                                return false;
                            }
                            if (!isValidEmail(extraData[0])) {
                                stopLoader();
                                showDialog(DialogType.SIGNUP, localisedStrings.getEmailFormatValidationMsg(), false, null, null, localisedStrings.getSignUpText());
                                return false;
                            }
                            if (TextUtils.isEmpty(extraData[1])) {
                                stopLoader();
                                showDialog(DialogType.SIGNUP, localisedStrings.getEmptyPasswordValidationText(), false, null, null, localisedStrings.getSignUpText());
                                return false;
                            }
                            if (extraData[1].length() < 5 && getModuleApi() != null && getModuleApi().getMetadataMap() != null && getModuleApi().getMetadataMap().getPasswordLengthError() != null) {
                                stopLoader();
                                showDialog(DialogType.SIGNUP, getModuleApi().getMetadataMap().getPasswordLengthError(), false, null, null, localisedStrings.getSignUpText());
                                return false;
                            }
                            if (extraData[1].length() > 50 && getModuleApi() != null && getModuleApi().getMetadataMap() != null && getModuleApi().getMetadataMap().getPASSWORD_NOT_VALID() != null) {
                                stopLoader();
                                showDialog(DialogType.SIGNUP, getModuleApi().getMetadataMap().getPASSWORD_NOT_VALID(), false, null, null, localisedStrings.getSignUpText());
                                return false;
                            }
                            closeSoftKeyboard();
                            signup(extraData[0], extraData[1], Boolean.valueOf(extraData[2]), extraData[3], null, true);
                            firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_email));
                        }

                    } else if (actionType == AppCMSActionType.START_TRIAL) {
                        //Log.d(TAG, "Start Trial selected");
                        //ViewCreator.clearPlayerView();
                        navigateToSubscriptionPlansPage(false);
                    } else if (actionType == AppCMSActionType.EDIT_PROFILE) {
                        //ViewCreator.clearPlayerView();
                        launchAppFragment(currentActivity.getString(R.string.app_cms_edit_profile_page_tag),
                                null, ExtraScreenType.EDIT_PROFILE, true, navigationPages.get(accountSettingsPage.getPageId()),
                                getPageAPILruCache().get(accountSettingsPage.getPageId()));
                    } else if (actionType == AppCMSActionType.CHANGE_PASSWORD) {
                        //ViewCreator.clearPlayerView();
                        launchChangePasswordPage();
                    } else if (actionType == AppCMSActionType.MANAGE_SUBSCRIPTION) {
                        //ViewCreator.clearPlayerView();
                        if (extraData != null && extraData.length > 0) {
                            String key = extraData[0];
                            if (jsonValueKeyMap.get(key) == AppCMSUIKeyType.PAGE_SETTINGS_UPGRADE_PLAN_PROFILE_KEY) {
                                String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                                if (isUserSubscribed() &&
                                        !TextUtils.isEmpty(paymentProcessor) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_sslcommerz_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_paygate_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_juspay_payment_processor_friendly))) {
                                    showEntitlementDialog(DialogType.CANNOT_UPGRADE_SUBSCRIPTION, new Action0() {
                                        @Override
                                        public void call() {
                                            if (getCurrentActivity() instanceof AppCMSPlayVideoActivity)
                                                getCurrentActivity().finish();
                                        }
                                    }, null);
                                } else if (isUserSubscribed() &&
                                        TextUtils.isEmpty(paymentProcessor)) {
                                    showEntitlementDialog(DialogType.UNKNOWN_SUBSCRIPTION_FOR_UPGRADE, null, null);
                                } else if (isUserSubscribed() &&
                                        (appPreference.isExistingGooglePlaySubscriptionSuspended() ||
                                                !upgradesAvailableForUser())) {
                                    showEntitlementDialog(DialogType.UPGRADE_UNAVAILABLE, null, null);
                                } else {
                                    navigateToSubscriptionPlansPage(false);
                                }
                            } else if (jsonValueKeyMap.get(key) == AppCMSUIKeyType.PAGE_SETTINGS_CANCEL_PLAN_PROFILE_KEY) {
                                String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                                if ((!TextUtils.isEmpty(paymentProcessor) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly))) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_sslcommerz_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_paygate_payment_processor_friendly)) &&
                                        !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly)) &&
                                        !(paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.robi)))) {
                                    showEntitlementDialog(DialogType.CANNOT_CANCEL_SUBSCRIPTION, null, null);
                                } else if (isUserSubscribed() && TextUtils.isEmpty(paymentProcessor)) {
                                    showEntitlementDialog(DialogType.UNKNOWN_SUBSCRIPTION_FOR_CANCEL, null, null);
                                } else {
                                    initiateSubscriptionCancellation();
                                }
                            } else if (jsonValueKeyMap.get(key) == AppCMSUIKeyType.PAGE_SETTINGS_RE_SUBSCRIBE_PLAN_PROFILE_KEY) {
                                String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                                String existinngPlaySubscriptioID = appPreference.getExistingGooglePlaySubscriptionId();
                                if (((existinngPlaySubscriptioID != null && !TextUtils.isEmpty(existinngPlaySubscriptioID)) &&
                                        (paymentProcessor != null && !TextUtils.isEmpty(paymentProcessor) &&
                                                (paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) ||
                                                        paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly)))))
                                        && getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_deferred_cancellation))) {

                                    Intent googlePlayStoreCancelIntent = new Intent(Intent.ACTION_VIEW,
                                            Uri.parse(currentActivity.getString(R.string.google_play_store_subscriptions_url)));
                                    currentActivity.startActivity(googlePlayStoreCancelIntent);

                                } else if (isSubscribedFromAndroid()
                                        || getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_cancelled))
                                        || getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_suspended))) {
                                    navigateToSubscriptionPlansPage(false);
                                } else {
                                    showEntitlementDialog(DialogType.CANNOT_RE_SUBSCRIPTION, null, null);
                                }
                            }
                        }
                    } else if (actionType == AppCMSActionType.REFERRAL_PAGE) {
                        //ViewCreator.clearPlayerView();
                        navigateToReferralPage();
                    } else if (actionType == AppCMSActionType.HOME_PAGE) {
                        //ViewCreator.clearPlayerView();
                        navigateToHomePage(true);
                    } else if (actionType == AppCMSActionType.SIGNIN) {
                        //ViewCreator.clearPlayerView();
                        navigateToLoginPage(false);
                    } else if (actionType == AppCMSActionType.CHANGE_DOWNLOAD_QUALITY
                            && appCMSMain != null
                            && appCMSMain.getFeatures() != null
                            && appCMSMain.getFeatures().isMobileAppDownloads()) {
                        //ViewCreator.clearPlayerView();
                        showDownloadQualityScreen(null, null);
                    } else {
                        //ViewCreator.clearPlayerView();
                        boolean appbarPresent = true;
                        boolean fullscreenEnabled = false;
                        boolean navbarPresent = true;
                        final StringBuffer screenName = new StringBuffer();
                        if (!TextUtils.isEmpty(actionToPageNameMap.get(action))) {
                            screenName.append(actionToPageNameMap.get(action));
                        }
                        loadingPage = true;

                        String baseUrl = appCMSMain.getApiBaseUrl();
                        String endPoint = actionToPageAPIUrlMap.get(action);
                        String siteId = appCMSMain.getInternalName();
                        boolean usePageIdQueryParam = false;
                        boolean showPage = false;
                        boolean categoryPage = false;

                        switch (actionType) {
                            case AUTH_PAGE:
                            case LAUNCH_VIDEO_PLAYLIST_PAGE:
                                appbarPresent = false;
                                fullscreenEnabled = false;
                                navbarPresent = false;
                                screenType = ExtraScreenType.NONE;
                                break;

                            case SHOW_PAGE:
                                setSelectedSeason(0);
                                showPage = true;
                                screenType = ExtraScreenType.NONE;
                                screenName.append(currentActivity.getString(
                                        R.string.app_cms_template_page_separator));
                                screenName.append(filmTitle);
                                fullscreenEnabled = false;
                                appbarPresent = false;
                                navbarPresent = false;
                                if (getTemplateType() == TemplateType.NEWS) {
                                    //    appbarPresent = true;
                                    navbarPresent = true;
                                }
                                break;
                            case VIDEO_PAGE:
                                appbarPresent = false;
                                fullscreenEnabled = false;
                                navbarPresent = false;
                                screenType = ExtraScreenType.NONE;
                                screenName.append(currentActivity.getString(
                                        R.string.app_cms_template_page_separator));
                                screenName.append(filmTitle);
                                //If  Template is Sports AppBar and NevBar will present at video details page
                                if (getTemplateType() == TemplateType.SPORTS
                                        || getTemplateType() == TemplateType.FITNESS) {
                                    appbarPresent = true;
                                    navbarPresent = true;
                                }
                                break;

                            case PAGE_BUNDLE_KEY:
                                appbarPresent = false;
                                fullscreenEnabled = false;
                                navbarPresent = false;
                                screenType = ExtraScreenType.NONE;
                                screenName.append(currentActivity.getString(
                                        R.string.app_cms_template_page_separator));
                                screenName.append(filmTitle);
                                //If  Template is Sports AppBar and NevBar will present at video details page
                                if (getTemplateType() == TemplateType.SPORTS
                                        || getTemplateType() == TemplateType.FITNESS) {
                                    appbarPresent = true;
                                    navbarPresent = true;
                                }
                                break;

                            case PLAY_VIDEO_PAGE:
                                appbarPresent = false;
                                fullscreenEnabled = false;
                                navbarPresent = false;
                                screenType = ExtraScreenType.NONE;
                                break;

                            case SEE_ALL_CATEGORY:
                                categoryPage = true;
                                screenType = ExtraScreenType.NONE;
                                break;

                            default:
                                screenType = ExtraScreenType.NONE;
                                break;
                        }

                        AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);
                        if (action.equalsIgnoreCase("seeAllCategory")) {
                            showLoadingDialog(true);
                            navigateToSeeAllPage(action,
                                    filmTitle,
                                    baseUrl,
                                    endPoint,
                                    siteId,
                                    pagePath,
                                    screenName,
                                    loadFromFile,
                                    appCMSPageUI != null &&
                                            appCMSPageUI.getCaching() != null &&
                                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                            appCMSPageUI.getCaching().isEnabled());
                            return result;
                        }


                        final String path = pagePath;

                        if (appCMSPageUI == null) {
                            MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
                            if (metaPage != null) {
                                getAppCMSPage(createPageUiUrl(metaPage),
                                        appCMSPageUIResult -> {
                                            if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                                String updatedAction = pageNameToActionMap.get(metaPage.getPageFunction());
                                                if (updatedAction != null && actionToPageMap.get(updatedAction) == null) {
                                                    actionToPageMap.put(updatedAction, appCMSPageUIResult);
                                                } else if ((updatedAction == null || TextUtils.isEmpty(updatedAction)) && finalAction.equalsIgnoreCase("seeAllCategory")) {
                                                    updatedAction = finalAction;
                                                    actionToPageMap.put(updatedAction, appCMSPageUIResult);
                                                }
                                                launchButtonSelectedAction(path,
                                                        updatedAction,
                                                        filmTitle,
                                                        extraData,
                                                        contentDatum,
                                                        closeLauncher,
                                                        currentlyPlayingIndex,
                                                        relateVideoIds);
                                            }
                                        },
                                        loadFromFile,
                                        false);
                            }
                        }

                        showLoader();
                        if (appCMSPageUI != null) {
                            if (appCMSPageUI.getModuleList() != null &&
                                    appCMSPageUI.getModuleList().get(0) != null) {
                                setModuleId(appCMSPageUI.getModuleList());
                            }
                            String apiUrl = getApiUrl(usePageIdQueryParam,
                                    false,
                                    showPage,
                                    categoryPage,
                                    extraData,
                                    baseUrl,
                                    endPoint,
                                    siteId,
                                    pagePath,
                                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled());

                            getPageIdContent(apiUrl,
                                    pagePath,
                                    null,
                                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled(),
                                    categoryPage,
                                    new AppCMSPageAPIAction(appbarPresent,
                                            fullscreenEnabled,
                                            navbarPresent,
                                            appCMSPageUI,
                                            action,
                                            getPageId(appCMSPageUI),
                                            filmTitle,
                                            pagePath,
                                            false,
                                            closeLauncher,
                                            null) {

                                        final AppCMSPageAPIAction appCMSPageAPIAction = this;

                                        @Override
                                        public void call(final AppCMSPageAPI appCMSPageAPI) {
                                            if (appCMSPageAPI != null) {
                                                if (platformType == PlatformType.ANDROID && pageId != null && !isCategoryPage(pageId)) {
                                                    try {
                                                        getPageAPILruCache().put(pageId, appCMSPageAPI);
                                                    } catch (Exception ex) {
                                                        ex.printStackTrace();
                                                    }
                                                }
                                                cancelInternalEvents();
                                                pushActionInternalEvents(this.action
                                                        + BaseView.isLandscape(currentActivity));
                                                if (getPageFunctionValue(appCMSPageAPI.getId(), appCMSPageAPI.getTitle()).equalsIgnoreCase(currentActivity.getResources().getString(R.string.app_cms_pagename_photogalleryscreen_key))) {
                                                    convertToAppCMSPageAPI(appCMSPageAPI);
                                                } else if (getPageFunctionValue(appCMSPageAPI.getId(), appCMSPageAPI.getTitle()).equalsIgnoreCase(currentActivity.getString(R.string.app_cms_pagename_articlescreen_key))) {
                                                    processRelatedArticleDeepLink(appCMSPageAPI);
                                                }

                                                boolean isSelectedModuleFound = false;

                                                for (int i = 0; i < Objects.requireNonNull(appCMSPageAPI.getModules()).size(); i++) {
                                                    if (appCMSPageAPI.getModules().get(i) != null &&
                                                            appCMSPageAPI.getModules().get(i).getModuleType() != null) {
                                                        /**
                                                         * if module type is video details or bundle details then check
                                                         * if it has pricing ifo and check purchased status by calling datData API and update the data
                                                         */
                                                        if (appCMSPageAPI.getModules().get(i) != null && appCMSPageAPI.getModules().get(i).getContentData() != null &&
                                                                (appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase("VideoDetailModule") ||
                                                                        appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase("BundleDetailModule"))) {
                                                            int position = i;
                                                            if ((appCMSPageAPI.getModules().get(i).getContentData() != null && appCMSPageAPI.getModules().get(i).getContentData().size() > 0
                                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(0).getPricing() != null &&
                                                                    appCMSPageAPI.getModules().get(i).getContentData().get(0).getPricing().getType() != null &&
                                                                    (CommonUtils.isPPVContent(currentActivity, appCMSPageAPI.getModules().get(i).getContentData().get(0)) || (appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist() != null &&
                                                                            appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getBundlePricing() != null &&
                                                                            (appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getContentType().equalsIgnoreCase("BUNDLE")))))) {
                                                                isSelectedModuleFound = true;
                                                                String contentType = appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getContentType();
                                                                //Doing because of parmalink
                                                                try {
                                                                    getPageAPILruCache().put(appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getPermalink(), appCMSPageAPI);
                                                                } catch (Exception ex) {
                                                                    ex.printStackTrace();
                                                                }

                                                                if (contentType.equalsIgnoreCase("BUNDLE")) {
                                                                    getTransactionDataResponse(appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getId(), appCMSTransactionDataResponse -> {

                                                                        if (appCMSTransactionDataResponse != null
                                                                                && appCMSTransactionDataResponse.getRecords() != null
                                                                                && appCMSTransactionDataResponse.getRecords().size() > 0) {

                                                                            Map<String, AppCMSTransactionDataValue> map = new HashMap<String, AppCMSTransactionDataValue>();
                                                                            for (AppCMSTransactionDataValue item : appCMSTransactionDataResponse.getRecords()) {
                                                                                map.put(item.getGist().getId(), item);
                                                                                CommonUtils.setUserPurchasedBundle(item.getGist().getId());
                                                                            }

                                                                            List<Map<String, AppCMSTransactionDataValue>> list = new ArrayList<>();
                                                                            list.add(map);
                                                                            appCMSPageAPI.getModules().get(position).getContentData().get(0).getGist().setObjTransactionDataValue(list);
                                                                            appCMSPageAPI.getModules().get(position).getContentData().get(0).getGist().setRentedDialogShow(false);
                                                                        }
                                                                        launchNavigationPageWithBundleData(appCMSPageAPIAction, appCMSPageAPI, screenType, screenName);
                                                                    }, contentType);
                                                                } else if (contentType.equalsIgnoreCase("VIDEO")) {
                                                                    getTransactionData(appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getId(), updatedContentDatum -> {

                                                                        if (updatedContentDatum != null
                                                                                && updatedContentDatum.size() > 0) {
                                                                            for (Map<String, AppCMSTransactionDataValue> map : updatedContentDatum) {
                                                                                for (Map.Entry<String, AppCMSTransactionDataValue> entry : map.entrySet()) {
                                                                                    CommonUtils.setUserPurchasedBundle(entry.getKey());
                                                                                }
                                                                            }

                                                                        }
                                                                        appCMSPageAPI.getModules().get(position).getContentData().get(0).getGist().setObjTransactionDataValue(updatedContentDatum);
                                                                        appCMSPageAPI.getModules().get(position).getContentData().get(0).getGist().setRentedDialogShow(false);
                                                                        launchNavigationPageWithBundleData(appCMSPageAPIAction, appCMSPageAPI, screenType, screenName);
                                                                    }, contentType);
                                                                }
                                                                break;
                                                            }


                                                        }
                                                    }
                                                }
                                                if (!isSelectedModuleFound) {
                                                    launchNavigationPageWithBundleData(appCMSPageAPIAction, appCMSPageAPI, screenType, screenName);

                                                }

                                            } else {
                                                if (launched) {
                                                    sendStopLoadingPageAction(true,
                                                            () -> launchButtonSelectedAction(pagePath, action, filmTitle, extraData, contentDatum, closeLauncher, currentlyPlayingIndex, relateVideoIds));
                                                    setNavItemToCurrentAction(currentActivity);
                                                } else {
                                                    launchBlankPage();
                                                }
                                            }
                                            loadingPage = false;
                                        }
                                    });
                        } else {
                            loadingPage = false;
                        }
                    }
                }
            }
        }
        return result;
    }

    public void deeplinkCallForShowDetailEpisode(String action, String pagePath, Action1<ContentDatum> contetData) {
        String baseUrl = appCMSMain.getApiBaseUrl();
        String endPoint = actionToPageAPIUrlMap.get(action);
        String siteId = appCMSMain.getInternalName();
        AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);
        final AppCMSActionType actionType = actionToActionTypeMap.get(action);
        if (appCMSPageUI == null) {
            MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
            if (metaPage != null) {
                getAppCMSPage(createPageUiUrl(metaPage),
                        appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                String updatedAction = pageNameToActionMap.get(metaPage.getPageFunction());
                                if (updatedAction != null && actionToPageMap.get(updatedAction) == null) {
                                    actionToPageMap.put(updatedAction, appCMSPageUIResult);
                                }
                                deeplinkCallForShowDetailEpisode(action, pagePath, contetData);
                            }
                        },
                        loadFromFile,
                        false);
            }
        } else {
            String apiUrl = getApiUrl(false,
                    false,
                    false,
                    false,
                    null,
                    baseUrl,
                    endPoint,
                    siteId,
                    pagePath,
                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled());

            getPageIdContent(apiUrl,
                    pagePath,
                    null,
                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled(),
                    false, new AppCMSPageAPIAction(true,
                            false,
                            true,
                            appCMSPageUI,
                            action,
                            getPageId(appCMSPageUI),
                            pagePath,
                            pagePath,
                            false,
                            false,
                            null) {
                        @Override
                        public void call(final AppCMSPageAPI appCMSPageAPI) {
                            Module module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentContext().getString(R.string.ui_block_video_player_info_01)), appCMSPageAPI);
                            if (module == null)
                                module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentContext().getString(R.string.ui_block_video_player_info_02)), appCMSPageAPI);
                            if (module == null)
                                module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentContext().getString(R.string.ui_block_video_player_info_03)), appCMSPageAPI);
                            if (module == null)
                                module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentContext().getString(R.string.ui_block_video_player_info_04)), appCMSPageAPI);
                            if (module == null)
                                module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentContext().getString(R.string.ui_block_video_player_info_05)), appCMSPageAPI);
                            if (module != null) {
                                contetData.call(module.getContentData().get(0));
                            }

                        }
                    });

        }
    }

    private boolean isPreviewAvailable() {
        if (appCMSMain.getFeatures() != null && appCMSMain.getFeatures().getFreePreview() != null) {
            if (appCMSMain.getFeatures().getFreePreview().isFreePreview())
                if (appCMSMain.getFeatures().getFreePreview().isPerVideo())
                    return true;
                else if (appCMSMain.getFeatures().getFreePreview().getLength() != null &&
                        appCMSMain.getFeatures().getFreePreview().getLength().getUnit().equalsIgnoreCase("Minutes")
                        && appPreference.getPreviewTimerValue() / 60 < Integer.parseInt(appCMSMain.getFeatures().getFreePreview().getLength().getMultiplier()))
                    return true;
                else return false;
        }
        return false;
    }

    public PhoneObjectRequest getPhoneObjectRequest() {
        return phoneObjectRequest;
    }

    public PhoneObjectRequest phoneObjectRequest = new PhoneObjectRequest();


    public void verifyOTPRequestCreation(String otpValue, PhoneObjectRequest phoneObjectRequest, String url, VerifyOTPPhoneFragment verifyOTPPhoneFragment, boolean isResendOTP) {

        PostAppCMSLoginRequestAsyncTask.Params params = new PostAppCMSLoginRequestAsyncTask.Params
                .Builder()
                .url(url)
                .authToken(getAuthToken())
                .otpValue(otpValue)
                .appCMSPresenter(this)
                .whatsAppConsent(phoneObjectRequest.isWhatsAppConsent())
                .emailConsent(phoneObjectRequest.isEmailConsent())
                .name(Strings.isEmptyOrWhitespace(phoneObjectRequest.getName()) ? "" : phoneObjectRequest.getName())
                .email(phoneObjectRequest.getEmail())
                .phoneValue(phoneObjectRequest.getPhone())
                .requestType(phoneObjectRequest.getRequestType())
                .screenName(phoneObjectRequest.getScreenName())
                .build();

        boolean signup = phoneObjectRequest.getScreenName() != null && phoneObjectRequest.getScreenName().equalsIgnoreCase(currentActivity.getString(R.string.app_cms_action_signup_key));
        boolean followWithSubsctiptions = false;
        if (signup) {
            if (launchType == LaunchType.SUBSCRIBE || launchType == LaunchType.V2_SUBSCRIPTION_FLOW || (!isUserLoggedIn() && !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt()))) {
                followWithSubsctiptions = true;
            }
        } else {
            if (!isUserLoggedIn() && !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())) {
                followWithSubsctiptions = true;
            }
        }
        boolean finalFollowWithSubsctiptions = followWithSubsctiptions;

        new PostAppCMSLoginRequestAsyncTask(appCMSSignInCall,
                signInResponse -> {
                    try {
                        String headerText;
                        if (!TextUtils.isEmpty(signInResponse.getMessage()) || signInResponse.isErrorResponseSet()) {
                            String message = signInResponse.getErrorResponse().getError();
                            if (getModuleApi() != null && phoneObjectRequest.getMetadataMap() != null && signInResponse.getErrorResponse().getCode() != null) {
                                message = (String) convertClassToMap(phoneObjectRequest.getMetadataMap()).get(signInResponse.getErrorResponse().getCode());
                            }
                            if (verifyOTPPhoneFragment != null)
                                verifyOTPPhoneFragment.enableLayoutClick();
                            showDialog(DialogType.SIGNIN, message, false, null, null, " ");
                        } else {
                            stopLoader();
                            if (isResendOTP) {
                                return;
                            }
                            if (verifyOTPPhoneFragment != null) {
                                verifyOTPPhoneFragment.dismiss();
                            }
                            if (phoneObjectRequest.getScreenName().equalsIgnoreCase("update")) {
                                if (!Strings.isEmptyOrWhitespace(appPreference.getLoggedInUserPhone())
                                        && signInResponse.getPhoneNumber().equalsIgnoreCase(appPreference.getLoggedInUserPhone()) && phoneObjectRequest.getFragmentName() != null && phoneObjectRequest.getFragmentName().equalsIgnoreCase("phoneUpdationLoginFragment")) {
                                    openMobileUpdationScreen();
                                } else {
                                    appPreference.setLoggedInUserPhone(signInResponse.getPhoneNumber());
                                    if (!Strings.isEmptyOrWhitespace(phoneObjectRequest.getEmail()))
                                        appPreference.setLoggedInUserEmail(phoneObjectRequest.getEmail());
                                    if (!Strings.isEmptyOrWhitespace(phoneObjectRequest.getName()))
                                        appPreference.setLoggedInUserName(phoneObjectRequest.getName());

                                    getUserData(null);
                                    //senduserProfileEvent();

                                    if (launchType == LaunchType.SUBSCRIBE && !isUserSubscribed()) {
                                        initiateItemPurchase(false);
                                        stopLoader();
                                    } else {
                                        sendRefreshPageAction();
                                        refreshPages(null, false, 0, 0);
                                    }
                                }
                                return;
                            }
                            finalizePhoneVerifiedFlow(signInResponse,
                                    phoneObjectRequest,
                                    finalFollowWithSubsctiptions,
                                    signup,
                                    false,
                                    false);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        stopLoader();
                    }
                }, apikey).execute(params);
    }


    private void finalizePhoneVerifiedFlow(SignInResponse signInResponse,
                                           PhoneObjectRequest phoneObjectRequest, boolean followWithSubscription, boolean signup, boolean forceSubscribed, boolean refreshSubscriptionData) {
        try {
            appPreference.setLoggedInUserPhone(signInResponse.getPhoneNumber());
            appPreference.setRefreshToken(signInResponse.getRefreshToken());
            appPreference.setAuthToken(signInResponse.getAuthorizationToken());
            setLoggedInUser(signInResponse.getUserId());
            //Log.d(TAG, "Sign in user ID response: " + signInResponse.getUserId());
            appPreference.setLoggedInUserName(signInResponse.getName());
            appPreference.setLoggedInUserEmail(signInResponse.getEmail());
            appPreference.setLoginType(currentActivity.getString(R.string.login_type_otp));
//            appPreference.setLoggedInUserPassword(password);
            //Log.d(TAG, "Initiating subscription purchase");

            if (launchType == LaunchType.VIEWING_RESTRICTIONS_VIEW || launchType == LaunchType.VIDEO_PIN_VIEW) {
                if (launchType == LaunchType.VIEWING_RESTRICTIONS_VIEW) {
                    if (appPreference != null && !TextUtils.isEmpty(appPreference.getParentalPin())) {
                        navigateToViewingRestrictionsPage();
                    } else {
                        launchType = LaunchType.VIEWING_RESTRICTIONS_FROM_VIDEO_PIN_VIEW;
                        navigateToChangeVideoPinPage();
                    }
                } else {
                    navigateToChangeVideoPinPage();
                }
                return;
            }

            firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));

            if (followWithSubscription) {
                isSignupFromFacebook = false;
                isSignupFromGoogle = false;
                subscriptionUserEmail = signInResponse.getEmail();
//                subscriptionUserPassword = password;
            }

            setSignupFlag(signup);

            GetSocialHelper.onLoginSuccess(appPreference);

            finalizeLogin(forceSubscribed,
                    signInResponse.isSubscribed(),
                    followWithSubscription,
                    refreshSubscriptionData);

            sendRefreshPageAction();

            senduserProfileEvent();
            if (signup) {

                if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                    AppsFlyerUtils.registrationEvent(this, currentActivity, signInResponse.getUserId(),
                            appPreference.getAppsFlyerKey());
                }
                if (!isAmazonPurchaseInitiated() && isRecommendationEnabled()) {
                    openRecommendationDialog(false);
                }
                sendSignUpEvent("native");
            } else {
                sendLoginEvent("native");
                if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                    AppsFlyerUtils.loginEvent(this);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            stopLoader();
        }
    }


    public boolean sendPhoneOTP(PhoneObjectRequest phoneObjectRequest, final Consumer<String> call) {

        if (phoneObjectRequest.getPhone() == null || phoneObjectRequest.getPhone().equalsIgnoreCase("") || phoneObjectRequest.getPhone().equalsIgnoreCase(" ")) {
            stopLoader();
            showDialog(DialogType.SIGNUP,
                    (phoneObjectRequest.getMetadataMap() != null && phoneObjectRequest.getMetadataMap().getPHONE_NOT_VALID() != null) ?
                            phoneObjectRequest.getMetadataMap().getPHONE_NOT_VALID() : currentActivity.getString(R.string.phone_not_valid),
                    false,
                    null,
                    null,
                    localisedStrings.getSignUpText());
            return false;
        }

        if (phoneObjectRequest.getEmail() != null)
            if (!isValidEmail(phoneObjectRequest.getEmail()) && phoneObjectRequest.getScreenName().equalsIgnoreCase(currentActivity.getString(R.string.app_cms_action_signup_key))) {
                stopLoader();
                showDialog(DialogType.SIGNIN, localisedStrings.getEmailFormatValidationMsg(), false, null, null, localisedStrings.getSignInText());
                return false;
            }

        if (launchType != LaunchType.VIEWING_RESTRICTIONS_VIEW && launchType != LaunchType.VIDEO_PIN_VIEW)
            firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_email));
        startPhoneOTPAsyncTask(phoneObjectRequest, call);
        return true;
    }

    public void navigateToReferralPage() {
        if (referralPage != null) {
            if (platformType == PlatformType.ANDROID) {
                navigateToPage(referralPage.getPageId(),
                        referralPage.getPageFunction(),
                        createPageUiUrl(referralPage),
                        false,
                        false,
                        true,
                        false,
                        true,
                        deeplinkSearchQuery);
            }
        }
    }

    public boolean openVideoPlayerActivity(ContentDatum contentDatum, boolean isTrailer, boolean isVideoOffline,
                                           String pagePath, String action, String filmTitle, String[] extraData, boolean closeLauncher,
                                           int currentlyPlayingIndex, List<String> relateVideoIds, AppCMSActionType actionType) {

        isVideoPlayerStarted = true;
        boolean entitlementActive = true;
        /**
         * if content is tvod or PPV then play video as its play condition already checked on play button clicked
         */
       /* if ((contentDatum.getPricing() != null &&
                contentDatum.getPricing().getType() != null &&
                (contentDatum.getPricing().getType().equalsIgnoreCase(currentContext.getString(R.string.PURCHASE_TYPE_TVOD)) ||
                        contentDatum.getPricing().getType().equalsIgnoreCase(currentContext.getString(R.string.PURCHASE_TYPE_PPV)) ||
                        contentDatum.getPricing().getType().equalsIgnoreCase(currentContext.getString(R.string.PURCHASE_TYPE_SVOD_TVOD)) ||
                        contentDatum.getPricing().getType().equalsIgnoreCase(currentContext.getString(R.string.PURCHASE_TYPE_SVOD_PPV))))) {
            entitlementActive = true;

        } else if (isAppSVOD() &&
                !isTrailer &&
                contentDatum.getGist() != null &&
                !contentDatum.getGist().getFree() && !isVideoOffline) {
            boolean freePreview = appCMSMain.getFeatures() != null &&
                    appCMSMain.getFeatures().getFreePreview() != null &&
                    appCMSMain.getFeatures().getFreePreview().isFreePreview();
            if (checkContentType.isContentTVE(contentDatum)) {
                if (appPreference.getTVEUserId() == null) {
                    entitlementPendingVideoData = new EntitlementPendingVideoData();
                    entitlementPendingVideoData.action = action;
                    entitlementPendingVideoData.closeLauncher = closeLauncher;
                    entitlementPendingVideoData.contentDatum = contentDatum;
                    entitlementPendingVideoData.currentlyPlayingIndex = currentlyPlayingIndex;
                    entitlementPendingVideoData.pagePath = pagePath;
                    entitlementPendingVideoData.filmTitle = filmTitle;
                    entitlementPendingVideoData.extraData = extraData;
                    entitlementPendingVideoData.relateVideoIds = relateVideoIds;
                    isVideoPlayerStarted = false;
                    stopLoader();
                    showEntitlementDialog(DialogType.LOGIN_TVE,
                            () -> {
                            }, null);
                    return false;
                }
            } else if (appPreference.getLoggedInUserEmail() == null && !freePreview && !entitlementCheckActive.isSuccess()) {
                entitlementCheckActive.setPagePath(pagePath);
                entitlementCheckActive.setAction(action);
                entitlementCheckActive.setFilmTitle(filmTitle);
                entitlementCheckActive.setExtraData(extraData);
                entitlementCheckActive.setContentDatum(contentDatum);
                entitlementCheckActive.setCloseLauncher(closeLauncher);
                entitlementCheckActive.setCurrentlyPlayingIndex(currentlyPlayingIndex);
                entitlementCheckActive.setRelateVideoIds(relateVideoIds);

                entitlementActive = false;
            }
        }

        if (entitlementActive) {
            entitlementCheckActive.setSuccess(false);*/
        entitlementPendingVideoData = new EntitlementPendingVideoData();
        entitlementPendingVideoData.action = action;
        entitlementPendingVideoData.closeLauncher = closeLauncher;
        entitlementPendingVideoData.contentDatum = contentDatum;
        entitlementPendingVideoData.currentlyPlayingIndex = currentlyPlayingIndex;
        entitlementPendingVideoData.pagePath = pagePath;
        entitlementPendingVideoData.filmTitle = filmTitle;
        entitlementPendingVideoData.extraData = extraData;
        entitlementPendingVideoData.relateVideoIds = relateVideoIds;
        Intent playVideoIntent = new Intent(currentActivity, AppCMSPlayVideoActivity.class);
        boolean requestAds = /*!svodServiceType &&*/!isUserSubscribed() && actionType == AppCMSActionType.PLAY_VIDEO_PAGE;

        //Send Firebase Analytics when user is subscribed and user is Logged In
        sendFirebaseLoginSubscribeSuccess();

        String adsUrl = null;
        if (actionType == AppCMSActionType.PLAY_VIDEO_PAGE) {
            if (pagePath != null && pagePath.contains(
                    currentActivity.getString(R.string.app_cms_action_qualifier_watchvideo_key))) {
                requestAds = false;
            }
            playVideoIntent.putExtra(currentActivity.getString(R.string.play_ads_key), requestAds);

            if (contentDatum != null &&
                    contentDatum.getGist() != null &&
                    !TextUtils.isEmpty(contentDatum.getGist().getId())) {
                String filmId = contentDatum.getGist().getId();
                try {
                    DownloadVideoRealm downloadedVideo = realmController.getRealm()
                            .copyFromRealm(realmController.getDownloadById(filmId));
                    if (downloadedVideo != null) {
                        boolean isContentPurchased = appPreference.getUserPurchases() != null && !TextUtils.isEmpty(appPreference.getUserPurchases())
                                && (contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), downloadedVideo.getVideoId())
                                || (downloadedVideo.getSeasonId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), downloadedVideo.getSeasonId()))
                                || (downloadedVideo.getSeriesId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), downloadedVideo.getSeriesId())));
                        boolean isFreeContent = downloadedVideo.getPlanMonetizationModel() != null && downloadedVideo.getPlanMonetizationModel().equalsIgnoreCase(currentContext.getString(R.string.pricing_model_FREE));
                        if (isVideoOffline)
                            if (!isAppAVOD() && !isUserSubscribed() && !isFreeContent) {
                                if (!isContentPurchased) {
                                    showEntitlementDialog(DialogType.SUBSCRIPTION_PREMIUM_DOWNLOAD,
                                            null, null);
                                    isVideoPlayerStarted = false;
                                    return false;
                                }
                            }
                        if (isVideoOffline && !isNetworkConnected()) {
                            if ((getDifferenceDays(new Date(appPreference.getAppLaunchTime()), new Date()) >= 30)) {
                                showDialog(DialogType.DOWNLOAD_NOT_AVAILABLE,
                                        localisedStrings.getUserOnlineTimeAlertText(),
                                        false,
                                        null,
                                        null, localisedStrings.getPremiumContentText());
                                isVideoPlayerStarted = false;
                                return false;
                            }
                            if (!isAppAVOD() && !isUserSubscribed()) {
                                if (!isContentPurchased) {
                                    showEntitlementDialog(DialogType.SUBSCRIPTION_PREMIUM_DOWNLOAD,
                                            null, null);
                                    isVideoPlayerStarted = false;
                                    return false;
                                }
                            }

                            contentDatum.getGist().setWatchedTime(downloadedVideo.getWatchedTime());
                        }
                        if (isNetworkConnected() && !downloadedVideo.isSyncedWithServer()) {
                            updateWatchedTime(filmId, downloadedVideo.getShowId(), downloadedVideo.getWatchedTime(), null);
                            downloadedVideo.setSyncedWithServer(true);
                        } else if (!isNetworkConnected() && isVideoOffline) {
                            downloadedVideo.setSyncedWithServer(false);
                        }
                    }
                } catch (Exception e) {
                    //Log.e(TAG, "Film " + filmId + " has not been downloaded");
                }
            }

            long entitlementCheckVideoWatchTime = -1L;
            if (entitlementPendingVideoData != null) {
                if (isUserSubscribed() || (isUserLoggedIn() && CommonUtils.isFreeContent(getCurrentContext(), contentDatum))) {
                    entitlementCheckVideoWatchTime = entitlementPendingVideoData.currentWatchedTime;
                    entitlementPendingVideoData = null;
                }
            }

            if (entitlementCheckVideoWatchTime != -1L) {
                if ((isUserSubscribed() || (isUserLoggedIn() && CommonUtils.isFreeContent(getCurrentContext(), contentDatum))
                ) && contentDatum.getGist().getWatchedTime() == 0L) {
                    contentDatum.getGist().setWatchedTime(entitlementCheckVideoWatchTime);
                }
            }

                /*if (contentDatum != null &&
                        contentDatum.getGist() != null &&
                        contentDatum.getGist().getWatchedTime() != 0) {
                    playVideoIntent.putExtra(currentActivity.getString(R.string.watched_time_key),
                            contentDatum.getGist().getWatchedTime());
                }*/
            if (contentDatum != null &&
                    contentDatum.getGist() != null) {
                if (getUserHistoryData().containsKey(contentDatum.getGist().getId())) {
                    playVideoIntent.putExtra(currentActivity.getString(R.string.watched_time_key),
                            getUserHistoryData().get(contentDatum.getGist().getId()).getGist().getWatchedTime());
                }
            }
        } else if (actionType == AppCMSActionType.WATCH_TRAILER) {
            playVideoIntent.putExtra(currentActivity.getString(R.string.watched_time_key),
                    0L);
        }
        if (contentDatum != null &&
                contentDatum.getGist() != null &&
                contentDatum.getGist().getVideoImageUrl() != null) {
            playVideoIntent.putExtra(currentActivity.getString(R.string.played_movie_image_url),
                    contentDatum.getGist().getVideoImageUrl());
        } else {
            playVideoIntent.putExtra(currentActivity.getString(R.string.played_movie_image_url), "");
        }

        if (contentDatum != null &&
                contentDatum.getGist() != null &&
                contentDatum.getGist().getVideoImageUrl() != null) {
            playVideoIntent.putExtra(currentActivity.getString(R.string.played_movie_image_url),
                    contentDatum.getGist().getVideoImageUrl());
        } else {
            playVideoIntent.putExtra(currentActivity.getString(R.string.played_movie_image_url), "");
        }

        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_font_color_key), getAppTextColor());
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_title_key),
                filmTitle);
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_hls_url_key),
                extraData);

        try {
            if (!appCMSMain.isMonetizationModelEnabled()) {
                if (isUserSubscribed()) {
                    requestAds = false;
                } else {
                    adsUrl = getAppAdsURL(contentDatum);
                }
            }
        } catch (Exception e) {
            requestAds = false;
        }

        if (TextUtils.isEmpty(adsUrl)) {
            requestAds = false;
        }

        String backgroundColor = getAppBackgroundColor();

        if (!getAutoplayEnabledUserPref(currentActivity)) {
            relateVideoIds = null;
            currentlyPlayingIndex = -1;
        }
        if (getRestWorkoutDialog()) {
            contentDatum.setModuleApi(getModuleApi());
        }
        AppCMSVideoPageBinder appCMSVideoPageBinder =
                getDefaultAppCMSVideoPageBinder(contentDatum, currentlyPlayingIndex, relateVideoIds, isVideoOffline, isTrailer, requestAds, adsUrl, backgroundColor, null);
        if (closeLauncher) {
            sendCloseOthersAction(null, true, false);
        }

        setWaysToWatchFromEntitlement(true);

        Bundle bundle = new Bundle();
        bundle.putBinder(currentActivity.getString(R.string.app_cms_video_player_binder_key),
                appCMSVideoPageBinder);
        playVideoIntent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), bundle);
        playVideoIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
        stopLoader();
        currentActivity.startActivity(playVideoIntent);

        //sendCloseOthersAction(null, true, false);
       /* } else {
            entitlementPendingVideoData = new EntitlementPendingVideoData();
            entitlementPendingVideoData.action = action;
            entitlementPendingVideoData.closeLauncher = closeLauncher;
            entitlementPendingVideoData.contentDatum = contentDatum;
            entitlementPendingVideoData.currentlyPlayingIndex = currentlyPlayingIndex;
            entitlementPendingVideoData.pagePath = pagePath;
            entitlementPendingVideoData.filmTitle = filmTitle;
            entitlementPendingVideoData.extraData = extraData;
            entitlementPendingVideoData.relateVideoIds = relateVideoIds;
            isVideoPlayerStarted = false;
            stopLoader();
            if (!isUserLoggedIn()) {
                showEntitlementDialog(DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED, null, null);
            }
        }*/
        return false;
    }

    public List<String> relatedVideosForShows(ContentDatum contentDatum, List<String> relateVideo) {
        List<String> relateVideoIds = new ArrayList<>();
        if (contentDatum.getModuleApi() != null && contentDatum.getModuleApi().getContentData() != null &&
                contentDatum.getModuleApi().getContentData() != null && contentDatum.getModuleApi().getContentData().size() > 0 &&
                contentDatum.getModuleApi().getContentData().get(0).getSeason() != null) {
            List<Season_> season = contentDatum.getModuleApi().getContentData().get(0).getSeason();
            /*int currentSeason = 0, currentEpisode = 0;
            for (int i = 0; i < season.size(); i++) {
                if (season.get(i).getEpisodes() != null) {
                    List<ContentDatum> episodes = season.get(i).getEpisodes();
                    for (int j = 0; j < episodes.size(); j++) {
                        if (episodes.get(j).getGist() != null && episodes.get(j).getGist().getId() != null
                                && contentDatum.getGist() != null && contentDatum.getGist().getId() != null &&
                                contentDatum.getGist().getId().equalsIgnoreCase(episodes.get(j).getGist().getId())) {
                            currentSeason = i;
                            currentEpisode = j;
                            break;
                        }
                    }
                }
            }
            if (!(currentSeason == 0 && currentEpisode == 0))
                relateVideoIds.add(0, contentDatum.getGist().getId());
            if (currentEpisode == contentDatum.getModuleApi().getContentData().get(0).getSeason().get(currentSeason).getEpisodes().size() - 1) {
                currentEpisode = 0;
                currentSeason++;
            }

            if (currentSeason == contentDatum.getModuleApi().getContentData().get(0).getSeason().size() - 1 &&
                    currentEpisode == contentDatum.getModuleApi().getContentData().get(0).getSeason().get(currentSeason).getEpisodes().size() - 1) {
                return relateVideo;
            }*/
            for (int i = 0; i < season.size(); i++) {
                if (season.get(i).getEpisodes() != null) {
                    List<ContentDatum> episodes = season.get(i).getEpisodes();
                    for (int j = 0; j < episodes.size(); j++) {
                        if (episodes.get(j).getGist() != null && episodes.get(j).getGist().getId() != null) {
                            relateVideoIds.add(episodes.get(j).getGist().getId());
                        }
                    }
                }
            }


        }
        if (relateVideoIds.size() == 0)
            return relateVideo;
        else
            return relateVideoIds;
    }

    private String moduleId;

    public String setModuleId(List<ModuleList> moduleList) {
        String[] modules_to_ignore;
        if (getAppCMSMain().isMonetizationModelEnabled()) {
            modules_to_ignore = currentActivity.getResources().getStringArray(R.array.app_cms_deprecate_modules_ignore);
        } else {
            modules_to_ignore = currentActivity.getResources().getStringArray(R.array.app_cms_modules_to_ignore);
        }
        for (ModuleList module : moduleList) {
            if (!Arrays.asList(modules_to_ignore).contains(module.getType())) {
                this.moduleId = module.getId();
                break;
            }
        }
        return moduleId;
    }

    public void launchNavigationPageWithBundleData(AppCMSPageAPIAction appCMSPageAPIAction, AppCMSPageAPI appCMSPageAPI, ExtraScreenType screenType, StringBuffer screenName) {
        Bundle args = getPageActivityBundle(currentActivity,
                appCMSPageAPIAction.appCMSPageUI,
                appCMSPageAPI,
                appCMSPageAPIAction.pageId,
                appCMSPageAPI.getTitle(),
                appCMSPageAPIAction.pagePath,
                screenName.toString(),
                loadFromFile,
                appCMSPageAPIAction.appbarPresent,
                appCMSPageAPIAction.fullscreenEnabled,
                appCMSPageAPIAction.navbarPresent,
                appCMSPageAPIAction.sendCloseAction,
                appCMSPageAPIAction.searchQuery,
                screenType,
                null,
                false, null);
        if (args != null) {
            Intent updatePageIntent =
                    new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
            updatePageIntent.putExtra(
                    currentActivity.getString(R.string.app_cms_bundle_key),
                    args);
            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(updatePageIntent);

            stopLoader();
        }
        launched = true;
    }

    public void navigateToEventDetailPage(String permaLink) {

        if (currentActivity != null && !TextUtils.isEmpty(permaLink) && eventPage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(eventPage.getPageId());

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(eventPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToEventDetailPage(permaLink);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {

                String baseUrl = appCMSMain.getApiBaseUrl();
                String endPoint = pageIdToPageAPIUrlMap.get(eventPage.getPageId());
                String siteId = appCMSMain.getInternalName();
                String apiUrl = getApiUrl(false,
                        false,
                        false,
                        false,
                        null,
                        baseUrl,
                        endPoint,
                        siteId,
                        permaLink,
                        appCMSPageUI != null &&
                                appCMSPageUI.getCaching() != null &&
                                !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                appCMSPageUI.getCaching().isEnabled());
                getPageIdContent(apiUrl,
                        permaLink,
                        null,
                        appCMSPageUI != null &&
                                appCMSPageUI.getCaching() != null &&
                                !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                appCMSPageUI.getCaching().isEnabled(),
                        false,
                        new AppCMSPageAPIAction(true,
                                true,
                                true,
                                appCMSPageUI,
                                "",
                                getPageId(appCMSPageUI),
                                "",
                                permaLink,
                                false,
                                false,
                                null) {

                            final AppCMSPageAPIAction appCMSPageAPIAction = this;

                            @Override
                            public void call(final AppCMSPageAPI appCMSPageAPI) {
                                if (appCMSPageAPI != null) {
                                    navigationPageData.put(this.pageId, appCMSPageAPI);

                                    String dataId = "";
                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.action
                                            + BaseView.isLandscape(currentActivity));
                                    for (int i = 0; i < appCMSPageAPI.getModules().size(); i++) {
                                        if (appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase("EventDetailModule")) {
                                            dataId = appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getDataId();
                                            break;
                                        }
                                    }

                                    getEventsArchieve(
                                            dataId,
                                            new AppCMSEventArchieveAPIAction(true,
                                                    false,
                                                    true,
                                                    appCMSPageUI,
                                                    "",
                                                    pageId,
                                                    pageTitle,
                                                    pagePath,
                                                    launchActivity, null) {

                                                @Override
                                                public void call(AppCMSEventArchieveResult appCMSTeamRoasterResult) {
                                                    if (appCMSTeamRoasterResult != null) {

                                                        if (appCMSTeamRoasterResult != null) {
                                                            pageApi = appCMSTeamRoasterResult.convertToAppCMSPageModule(appCMSPageAPI);
                                                        }

                                                    } else {
                                                        pageApi = appCMSPageAPI;

                                                    }

                                                    final StringBuffer screenName = new StringBuffer();
                                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(eventPage.getPageId()))) {
                                                        screenName.append(eventPage.getPageFunction());
                                                    }
                                                    //by default select first item of fight
                                                    setSelectedFightId(0);
                                                    Bundle args = getPageActivityBundle(currentActivity,
                                                            appCMSPageUI,
                                                            pageApi,
                                                            this.pageId,
                                                            pageApi.getTitle(),
                                                            this.pagePath,
                                                            screenName.toString(),
                                                            loadFromFile,
                                                            this.appbarPresent,
                                                            this.fullscreenEnabled,
                                                            this.navbarPresent,
                                                            false,
                                                            this.searchQuery,
                                                            ExtraScreenType.NONE,
                                                            null,
                                                            false, null);
                                                    if (args != null) {
                                                        Intent updatePageIntent =
                                                                new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                                                        updatePageIntent.putExtra(
                                                                currentActivity.getString(R.string.app_cms_bundle_key),
                                                                args);
                                                        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                        currentActivity.sendBroadcast(updatePageIntent);

                                                        stopLoader();
                                                    }
                                                    launched = true;
                                                }
                                            });

                                } else {
                                    stopLoader();
                                }
                                loadingPage = false;
                            }
                        });
            }

        }
//            showLoader();
//        if (appCMSPageUI != null) {
//
//
//        } else {
//            loadingPage = false;
//        }
    }

    public String getAmazonUserId() {
        return amazonUserId;
    }

    public void setShouldCheckTVUpgrade(boolean shouldCheckTVUpgrade) {
        this.shouldCheckTVUpgrade = shouldCheckTVUpgrade;
    }

    public boolean getShouldCheckTVUpgrade() {
        return shouldCheckTVUpgrade;
    }


    private abstract static class RecommendationAPIAction implements Action1<AppCMSHistoryResult> {
        RecommendationAPIAction() {

        }
    }

    /**
     * This will create a Binder object containing a default set of flags used for launching the Video Player.
     *
     * @param contentDatum          This is the API content data used for launching the video player
     * @param currentlyPlayingIndex This is the currently playing index in the list of related videos used for Autoplay
     * @param relateVideoIds        This is the list of related videos used for Autoplay
     * @param isVideoOffline        This flag should be true if there no available networks and the video should be played in offline mode
     * @param isTrailer             This flag should be true if the video to be launched is a trailer
     * @param requestAds            This flag should be true if Ads should be requested
     * @param adsUrl                This is ad URL associated with this video
     * @param backgroundColor       This is the app background color to be used by the Video Player
     * @return
     */
    public AppCMSVideoPageBinder getDefaultAppCMSVideoPageBinder(ContentDatum contentDatum,
                                                                 int currentlyPlayingIndex,
                                                                 List<String> relateVideoIds,
                                                                 boolean isVideoOffline,
                                                                 boolean isTrailer,
                                                                 boolean requestAds,
                                                                 String adsUrl,
                                                                 String backgroundColor,
                                                                 String seriesParentalRating) {
        return getAppCMSVideoPageBinder(currentActivity,
                null,
                null,
                null,
                null,
                null,
                false,
                false,
                false,
                false,
                false,
                requestAds,
                appCMSMain.getBrand().getGeneral().getTextColor(),
                backgroundColor,
                adsUrl,
                contentDatum,
                isTrailer,
                relateVideoIds,
                currentlyPlayingIndex,
                isVideoOffline,
                seriesParentalRating);
    }

    private void showProgressDialog() {
        if (currentActivity != null && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
            progressDialog = new ProgressDialog(currentActivity);
            progressDialog.setMessage("Subscribing...");
            progressDialog.setCancelable(false);
            progressDialog.show();
        }
    }

    public void showDownloadProgressDialog() {
        Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_PROGRESS_ACTION);
        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), true);
        currentActivity.sendBroadcast(updatePageIntent);
    }

    public void stopDownloadProgressDialog() {
        Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_PROGRESS_ACTION);
        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), false);
        currentActivity.sendBroadcast(updatePageIntent);
    }

    public void emailSubscriptionResponse(ResponsePojo result) {
        if (progressDialog != null) {
            try {
                if (progressDialog.isShowing()) {
                    progressDialog.hide();
                    progressDialog.dismiss();
                    progressDialog = null;
                }
            } catch (Exception ex) {

            }
        }
        this.responsePojo = result;
        if (result != null) {
            if (result.getUserExist() == null) {//success
                showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_EMAIL_SUCCESS, null, null);
            } else {//exist
                showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_EMAIL_EXIST, null, null);
            }
        } else {//fail
            showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_EMAIL_FAIL, null, null);
        }
    }

    /**
     * This flag is set to true if the video player is running.  This may used to determine specific logic
     * based upon whether a video is playing or not.  For example, it may be used to prevent the app
     * from automatically redirecting the user to different pages based upon a change in the network status.
     */
    public void setVideoPlayerHasStarted() {
        isVideoPlayerStarted = false;
    }


    /**
     * This will retrieve the content datum associated with a specific in the user's history.
     *
     * @param filmId This is the ID of the video of the retrieved content datum
     * @return Returns the content datum associated with a specific in the user's history
     */
    public ContentDatum getUserHistoryContentDatum(String filmId) {
        try {
            return userHistoryData.get(filmId);
        } catch (Exception e) {

        }
        return null;
    }

    /**
     * This will return a list of all video content data associated with the currently logged in user.
     *
     * @return Returns a list of all video content data associated with the currently logged in user
     */
    public ArrayList<ContentDatum> getAllUserHistory() {
        if (userHistoryData != null) {
            ArrayList<ContentDatum> continueWatching = new ArrayList<>();
            for (ContentDatum data : userHistoryData.values()) {
                //if (getWatchingPercentage(data) < 95) {
                continueWatching.add(data);
                //}
            }

            try {
                Collections.sort(continueWatching, (ContentDatum o1, ContentDatum o2) -> {
                    if (o1.getGist().getUpdateDate() == null) {
                        return (o2.getGist().getUpdateDate() == null) ? 0 : -1;
                    }
                    if (o2.getGist().getUpdateDate() == null) {
                        return 1;
                    }
                    return Long.compare(Long.valueOf(o1.getGist().getUpdateDate()),
                            Long.valueOf(o2.getGist().getUpdateDate()));
                });
                if (continueWatching != null && continueWatching.size() >= 2) {
                    if (Long.compare((Long) continueWatching.get(0).getUpdateDate(), (Long) continueWatching.get(1).getUpdateDate()) == 1) {
                        Collections.reverse(continueWatching);
                    }
                }
            } catch (NumberFormatException ex) {
                ex.printStackTrace();
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            return continueWatching;
        }
        return null;
    }

    public int getWatchingPercentage(ContentDatum historyData) {

        int progress = 0;
        if (historyData != null) {
            if (historyData.getGist().getWatchedPercentage() > 0) {
                progress = historyData.getGist().getWatchedPercentage();
            } else {
                long watchedTime = historyData.getGist().getWatchedTime();
                long runTime = historyData.getGist().getRuntime();
                if (watchedTime > 0 && runTime > 0) {
                    long percentageWatched = (long) (((double) watchedTime / (double) runTime) * 100.0);
                    progress = (int) percentageWatched;
                }
            }
        }
        return progress;
    }

    /**
     * This will determine if a film has been added to the user's watchlist.
     *
     * @param filmId This is the ID of the video to determine whether it is in the user's watchlist
     * @return Returns true if the video is in the user's watchlist
     */
    public boolean isFilmAddedToWatchlist(String filmId) {
        if (isUserLoggedIn()) {
            try {
                if (filmId != null && filmsInUserWatchList != null && filmsInUserWatchList.getRecords() != null) {
                    List<Record> watchlistRecords = filmsInUserWatchList.getRecords();
                    int numWatchlistRecords = watchlistRecords.size();
                    for (int i = 0; i < numWatchlistRecords; i++) {
                        Record watchlistRecord = watchlistRecords.get(i);
                        if (watchlistRecord != null &&
                                watchlistRecord.getContentResponse() != null &&
                                watchlistRecord.getContentResponse().getGist() != null) {
                            if (filmId.equals(watchlistRecord.getContentResponse().getGist().getId())) {
                                return true;
                            }
                        }
                    }
                }

                return temporaryWatchlist.contains(filmId);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return false;
    }

    public boolean isFilmAddedToFollowlist(String filmId) {
        if (isUserLoggedIn()) {
            try {
                return temporaryFollowlist.contains(filmId);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    /**
     * This will launch the navigation (menu/more) page.
     *
     * @return Returns true if the page can be launched
     */
    public boolean launchNavigationPage() {
        boolean result = false;

        if (currentActivity != null) {
            cancelInternalEvents();

            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    null,
                    currentActivity.getString(R.string.app_cms_navigation_page_tag),
                    currentActivity.getString(R.string.app_cms_navigation_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_navigation_page_tag),
                    false,
                    true,
                    false,
                    true,
                    false,
                    null,
                    ExtraScreenType.NAVIGATION,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }

            result = true;
        }

        return result;
    }

    /**
     * This will launch the Team page.
     *
     * @return Returns true if the page can be launched
     */
    public boolean launchTeamNavPage() {
        boolean result = false;

        if (currentActivity != null) {
            cancelInternalEvents();

            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    null,
                    currentActivity.getString(R.string.app_cms_team_page_tag),
                    currentActivity.getString(R.string.app_cms_team_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_team_page_tag),
                    false,
                    true,
                    false,
                    true,
                    false,
                    null,
                    ExtraScreenType.TEAM,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }

            result = true;
        }

        return result;
    }

    /**
     * This flag is set to true if the app launch flow, which includes the retrieval of main.json,
     * platform, site.json, platform modules.json, and the landing page UI
     *
     * @return Returns true if the app launch flow has been completed
     */
    public boolean isLaunched() {
        return launched;
    }

    public void resetLaunched() {
        launched = false;
    }

    public void mergeData(AppCMSPageAPI fromAppCMSPageAPI, AppCMSPageAPI toAppCMSPageAPI) {
        for (Module module : fromAppCMSPageAPI.getModules()) {
            Module updateToModule = null;
            Module updateFromModule = null;
            for (Module module1 : toAppCMSPageAPI.getModules()) {
                if (module.getId() != null && module1 != null &&
                        module.getId().equals(module1.getId())) {
                    updateFromModule = module;
                    updateToModule = module1;
                }
            }
            if (updateFromModule != null && updateFromModule.getContentData() != null) {
                if (updateToModule != null &&
                        updateToModule.getContentData() != null) {
                    AppCMSUIKeyType moduleType = jsonValueKeyMap.get(updateToModule.getModuleType());
                    if (moduleType == AppCMSUIKeyType.PAGE_API_HISTORY_MODULE_KEY) {
                        updateToModule.setContentData(updateFromModule.getContentData());
                    } else {
                        for (ContentDatum toContentDatum : updateToModule.getContentData()) {
                            for (ContentDatum fromContentDatum : updateFromModule.getContentData()) {
                                if (toContentDatum.getGist() != null && !TextUtils.isEmpty(toContentDatum.getGist().getDescription()) &&
                                        toContentDatum.getGist().getDescription().equals(fromContentDatum.getGist().getDescription())) {
                                    toContentDatum.getGist().setWatchedTime(fromContentDatum.getGist().getWatchedTime());
                                    toContentDatum.getGist().setWatchedPercentage(fromContentDatum.getGist().getWatchedPercentage());
                                    toContentDatum.getGist().setUpdateDate(fromContentDatum.getGist().getUpdateDate());
                                }
                            }
                        }
                    }
                } else {
                    updateToModule.setContentData(updateFromModule.getContentData());
                }
            }
        }
    }

    /**
     * This will dismiss the Navigation menu.
     *
     * @param newAppCMSNavItemsFragment This is the curent Navigation fragment
     */
    public void dismissOpenDialogs(AppCMSNavItemsFragment newAppCMSNavItemsFragment) {
        if (appCMSNavItemsFragment != null && appCMSNavItemsFragment.isVisible()) {
            appCMSNavItemsFragment.dismiss();
            appCMSNavItemsFragment = null;
        }
        appCMSNavItemsFragment = newAppCMSNavItemsFragment;
    }

    /**
     * This flag determines if a configuration change has occurred.
     *
     * @param configurationChanged This is set to true if a configuration change has just occurred
     */
    public void onConfigurationChange(boolean configurationChanged) {
        this.configurationChanged = configurationChanged;
    }

    /**
     * This returns a flag to indicate that a configuration change has occurred.
     *
     * @return Returns a flag to indicate that configuration change has occurred.
     */
    public boolean getConfigurationChanged() {
        return configurationChanged;
    }

    public boolean isMainFragmentTransparent() {
        if (currentActivity != null) {
            FrameLayout mainFragmentView =
                    currentActivity.findViewById(R.id.app_cms_fragment);
            if (mainFragmentView != null) {
                return (mainFragmentView.getAlpha() != 1.0f &&
                        mainFragmentView.getVisibility() == View.VISIBLE);
            }
        }
        return false;
    }

    /**
     * This will return a flag indicating whether the main content fragment is visible.  The main fragment
     * is used for displaying most of the content of the app.  It may be invisible if another fragment
     * is overlaid on top of the main fragment, e.g. a dialog displaying additional content such as the More
     * option in the Video Details screen.
     *
     * @return Returns true if the main content fragment is visible.
     */
    public boolean isMainFragmentViewVisible() {
        if (currentActivity != null) {
            FrameLayout mainFragmentView =
                    currentActivity.findViewById(R.id.app_cms_fragment);
            if (mainFragmentView != null) {
                return (mainFragmentView.getVisibility() == View.VISIBLE);
            }
        }
        return false;
    }

    /**
     * This will show the main fragment entirely and set it's transparency to 100% based upon
     * the input flag.
     *
     * @param show The flag that will determine whether to display the fragment entirely or not
     */
    public void showMainFragmentView(boolean show) {
        if (currentActivity != null) {
            FrameLayout mainFragmentView =
                    currentActivity.findViewById(R.id.app_cms_fragment);
            if (mainFragmentView != null) {
                if (show) {
                    mainFragmentView.setVisibility(View.VISIBLE);
                    mainFragmentView.setAlpha(1.0f);
                    FrameLayout addOnFragment =
                            currentActivity.findViewById(R.id.app_cms_addon_fragment);
                    if (addOnFragment != null) {
                        addOnFragment.setVisibility(View.GONE);
                    }
                    setMainFragmentEnabled(true);
                } else {
                    mainFragmentView.setAlpha(0.0f);
                    mainFragmentView.setVisibility(View.GONE);
                }
            }
        }
    }

    /**
     * This well enable the main fragment and all its children based upon the input flag.
     * This may be set to false to disable the fragment if there another dialog has a modal property
     *
     * @param isEnabled This will enable the main fragment and all its children if set to true
     */
    private void setMainFragmentEnabled(boolean isEnabled) {
        FrameLayout mainFragmentView =
                currentActivity.findViewById(R.id.app_cms_fragment);
        if (mainFragmentView != null) {
            setAllChildrenEnabled(isEnabled, mainFragmentView);
        }
    }

    /**
     * This is a helper method that will iterate through all child views of the given ViewGroup
     * and set each one's enabled property
     *
     * @param isEnabled This will enable all children if set to true and disable all children if set to false
     * @param viewGroup This is the ViewGroup to traverse all child views
     */
    private void setAllChildrenEnabled(boolean isEnabled, ViewGroup viewGroup) {
        viewGroup.setNestedScrollingEnabled(isEnabled);
        for (int i = 0; i < viewGroup.getChildCount(); i++) {
            View view = viewGroup.getChildAt(i);
            if (view instanceof ViewGroup) {
                if (view instanceof RecyclerView) {
                    ((RecyclerView) view).setLayoutFrozen(!isEnabled);
                    if (((RecyclerView) view).getAdapter() instanceof AppCMSBaseAdapter) {
                        AppCMSBaseAdapter appCMSViewAdapter =
                                (AppCMSBaseAdapter) ((RecyclerView) view).getAdapter();
                        appCMSViewAdapter.setClickable(isEnabled);
                    }
                }
                setAllChildrenEnabled(isEnabled, (ViewGroup) view);
            } else {
                if (view instanceof Button || view instanceof ImageButton) {
                    view.setEnabled(isEnabled);
                    view.setClickable(isEnabled);
                }
            }
        }
    }

    /**
     * This will set the transparency value of the main fragment.
     *
     * @param transparency This is the transparency value to apply to the main fragment
     */
    public void setMainFragmentTransparency(float transparency) {
        if (currentActivity != null) {
            FrameLayout mainFragmentView =
                    currentActivity.findViewById(R.id.app_cms_fragment);
            if (mainFragmentView != null) {
                mainFragmentView.setAlpha(transparency);
            }
        }
    }

    /**
     * This will return a value to indicate whether the add on fragment is visible or not.
     *
     * @return Returns true if the add on fragment is visible
     */
    public boolean isAddOnFragmentVisible() {
        if (currentActivity != null) {
            FrameLayout addOnFragment =
                    currentActivity.findViewById(R.id.app_cms_addon_fragment);
            return addOnFragment != null && addOnFragment.getVisibility() == View.VISIBLE;
        }
        return false;
    }

    /**
     * This will return a value to indicate whether the add on fragment is visible or not.
     *
     * @return Returns true if the add on fragment is visible
     */
    public boolean isAdditionalFragmentVisibile() {
        if (currentActivity != null) {
            FrameLayout additionalFragmentView =
                    currentActivity.findViewById(R.id.app_cms_addon_fragment);
            if (additionalFragmentView != null) {
                return additionalFragmentView.getVisibility() == View.VISIBLE;
            }
        }
        return false;
    }

    /**
     * This will display or hide the add on fragment based upon the input parameter and set the
     * transparency of the main fragment of the
     *
     * @param showMainFragment
     * @param mainFragmentTransparency
     */
    public void showAddOnFragment(boolean showMainFragment, float mainFragmentTransparency) {
        if (currentActivity != null) {
            showMainFragmentView(showMainFragment);
            setMainFragmentTransparency(mainFragmentTransparency);
            FrameLayout addOnFragment =
                    currentActivity.findViewById(R.id.app_cms_addon_fragment);
            if (addOnFragment != null) {
                addOnFragment.setVisibility(View.VISIBLE);
                addOnFragment.bringToFront();
            }
            setMainFragmentEnabled(false);
        }
    }

    private boolean isAdditionalFragmentViewAvailable() {
        if (currentActivity != null) {
            FrameLayout additionalFragmentView =
                    currentActivity.findViewById(R.id.app_cms_addon_fragment);
            return additionalFragmentView != null;
        }
        return false;
    }

    private void clearAdditionalFragment() {
        if (isAdditionalFragmentViewAvailable()) {
            FrameLayout additionalFragmentView =
                    currentActivity.findViewById(R.id.app_cms_addon_fragment);
            additionalFragmentView.removeAllViews();
        }
    }

    public ImageButton getCurrentMediaRouteButton() {
        return currentMediaRouteButton;
    }

    public void setCurrentMediaRouteButton(ImageButton currentMediaRouteButton) {
        this.currentMediaRouteButton = currentMediaRouteButton;
    }

    public ViewGroup getCurrentMediaRouteButtonParent() {
        return currentMediaRouteButtonParent;
    }

    public void setCurrentMediaRouteButtonParent(ViewGroup currentMediaRouteButtonParent) {
        this.currentMediaRouteButtonParent = currentMediaRouteButtonParent;
    }

    public void launchSearchPage() {
        if (currentActivity != null) {
            cancelInternalEvents();

            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    null,
                    currentActivity.getString(R.string.app_cms_search_page_tag),
                    currentActivity.getString(R.string.app_cms_search_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_search_page_tag),
                    false,
                    true,
                    false,
                    true,
                    false,
                    null,
                    ExtraScreenType.SEARCH,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    public void launchFilterPage() {
        if (currentActivity != null) {
            cancelInternalEvents();

            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    null,
                    currentActivity.getString(R.string.app_cms_filter_page_tag),
                    currentActivity.getString(R.string.app_cms_filter_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_filter_page_tag),
                    false,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.FILTER,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    public void launchSearchResultsPage(String searchQuery, String filterTag, boolean isFilter) {
        if (currentActivity != null && !cancelAllLoads) {

            Intent searchIntent = null;
            if (isFilter) {
                //   searchIntent = new Intent(currentActivity, AppCMSSearchFilterActivity.class);
            } else {
                searchIntent = new Intent(currentActivity, AppCMSSearchActivity.class);
            }
            searchIntent.setAction(Intent.ACTION_SEARCH);
            searchIntent.putExtra(SearchManager.QUERY, searchQuery);
            searchIntent.putExtra("FILTER_TAG", filterTag);
            currentActivity.startActivity(searchIntent);
        }
    }

    private void launchResetPasswordPage(String email) {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            AppCMSPageAPI appCMSPageAPI = navigationPageData.get(loginPage.getPageId());
            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    appCMSPageAPI,
                    currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                    currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                    email,
                    currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                    false,
                    true,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.RESET_PASSWORD,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private void launchResetPasswordTVPage(AppCMSPageUI appCMSPageUI, String action) {
        if (currentActivity != null) {
            if (appCMSPageUI == null) {
                showLoader();

                AppCMSActionType actionType = actionToActionTypeMap.get(action);
                MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);

                if (metaPage == null) metaPage = resetPasswordPage;

                if (metaPage != null) {
                    MetaPage finalMetaPage = metaPage;
                    getAppCMSPage(createPageUiUrl(metaPage),
                            new Action1<AppCMSPageUI>() {
                                @Override
                                public void call(AppCMSPageUI appCMSPageUI) {
                                    navigationPages.put(finalMetaPage.getPageId(), appCMSPageUI);
                                    String action1 = pageNameToActionMap.get(finalMetaPage.getPageFunction());
                                    if (action1 != null && actionToPageMap.containsKey(action1)) {
                                        actionToPageMap.put(action1, appCMSPageUI);
                                    }
                                    launchResetPasswordTVPage(appCMSPageUI, action1);
                                }
                            }, loadFromFile, false);
                }
                return;
            }

            String pagePath = getPageId(appCMSPageUI), filmTitle = null;
            String apiUrl = getApiUrl(true,
                    false,
                    false,
                    false,
                    null,
                    appCMSMain.getApiBaseUrl(),
                    actionToPageAPIUrlMap.get(action),
                    appCMSMain.getInternalName(),
                    pagePath,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled());

            getPageIdContent(apiUrl,
                    pagePath,
                    null,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled(),
                    false,
                    new AppCMSPageAPIAction(false,
                            false,
                            false,
                            appCMSPageUI,
                            action,
                            getPageId(appCMSPageUI),
                            filmTitle,
                            pagePath,
                            false,
                            false,
                            null) {
                        @Override
                        public void call(AppCMSPageAPI appCMSPageAPI) {
                            if (appCMSPageAPI != null) {
                                cancelInternalEvents();
                                Bundle args = getPageActivityBundle(currentActivity,
                                        appCMSPageUI,
                                        appCMSPageAPI,
                                        currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                                        currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                                        null,
                                        currentActivity.getString(R.string.app_cms_reset_password_page_tag),
                                        false,
                                        true,
                                        false,
                                        false,
                                        false,
                                        null,
                                        ExtraScreenType.RESET_PASSWORD,
                                        null,
                                        false, null);

                                if (args != null) {
                                    Intent updatePageIntent =
                                            new Intent(AppCMSPresenter.ACTION_RESET_PASSWORD);
                                    updatePageIntent.putExtra(
                                            currentActivity.getString(R.string.app_cms_bundle_key),
                                            args);
                                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                    currentActivity.sendBroadcast(updatePageIntent);
                                }

                            }
                            loadingPage = false;
                        }
                    });
        }
    }

    public void showLoader() {
        Intent pageLoadingActionIntent = new Intent(AppCMSPresenter.PRESENTER_PAGE_LOADING_ACTION);
        pageLoadingActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(pageLoadingActionIntent);
    }

    public List<Language> getLanguageArrayList() {
        if (null != appCMSMain.getLanguages() && null != appCMSMain.getLanguages().getLanguageList()) {
            return appCMSMain.getLanguages().getLanguageList();
        }
        return null;
    }

    /**
     * Launch language Selector dialog.
     *
     * @param appCMSPageUI
     * @param action
     */
    private void showChangeLanguageTVDialog(AppCMSPageUI appCMSPageUI, String action) {
        if (currentActivity != null) {
            if (appCMSPageUI == null) {
                showLoader();

                AppCMSActionType actionType = actionToActionTypeMap.get(action);
                MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            new Action1<AppCMSPageUI>() {
                                @Override
                                public void call(AppCMSPageUI appCMSPageUI) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUI);
                                    String action1 = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action1 != null && actionToPageMap.containsKey(action1)) {
                                        actionToPageMap.put(action1, appCMSPageUI);
                                    }
                                    showChangeLanguageTVDialog(appCMSPageUI, action1);
                                }
                            }, loadFromFile, false);
                }
                return;
            }

            cancelInternalEvents();
            AppCMSPageAPI appCMSPageAPI = getAppCMSPageAPI(appCMSPageUI);


            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    currentActivity.getString(R.string.app_cms_link_change_language_action),
                    currentActivity.getString(R.string.app_cms_link_change_language_action),
                    null,
                    currentActivity.getString(R.string.app_cms_link_change_language_action),
                    false,
                    true,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.NONE,
                    null, false, null);

            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.ACTION_CHANGE_LANGUAGE);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    @NonNull
    private AppCMSPageAPI getAppCMSPageAPI(AppCMSPageUI appCMSPageUI) {
        AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
        appCMSPageAPI.setId(appCMSPageUI.getModuleList().get(0).getId());

        Module module = new Module();
        module.setId(currentActivity.getString(R.string.blank_string));
        if (null != appCMSPageUI && null != appCMSPageUI.getModuleList()
                && appCMSPageUI.getModuleList().size() > 0) {
            module.setId(appCMSPageUI.getModuleList().get(0).getId());
            module.setTitle("");
        }

        ArrayList<Module> moduleList = new ArrayList<>();
        moduleList.add(module);
        appCMSPageAPI.setModules(moduleList);
        ArrayList<ContentDatum> data = new ArrayList<>();

        if (null != getLanguageArrayList()) {
            for (Language language : getLanguageArrayList()) {
                data.add(language.convertToContentDatum());
            }
        }

        module.setContentData(data);
        return appCMSPageAPI;
    }

    public LocalisedStrings getLocalisedStrings() {
        return localisedStrings;
    }

    /**
     * save the language value in SharedPref.
     *
     * @param language
     * @return
     */
    public boolean setLanguage(Language language) {
        if (currentContext != null) {
            Gson gson = new Gson();
            String json = gson.toJson(language);
            SharedPreferences sharedPrefs = currentContext.getSharedPreferences(LANGUAGE_SHARED_PREF_NAME, 0);
            defaultLanguage = language;
//            downLoadLanguageFile(defaultLanguage.getLanguageCode());
            downLoadLanguageFile("en");
            if (appCMSMain != null
                    && appCMSMain.getGenericMessages() != null
                    && appCMSMain.getGenericMessages().getLocalizationMap() != null
                    && appCMSMain.getGenericMessages().getLocalizationMap().size() > 0
                    && appCMSMain.getGenericMessages().getLocalizationMap().get(defaultLanguage.getLanguageCode()) != null)
                localizationResult = appCMSMain.getGenericMessages().getLocalizationMap().get(defaultLanguage.getLanguageCode());
            else
                localizationResult = null;

            if (appCMSMain != null && appCMSMain.getGenericMessages() != null)
                genericMessages = appCMSMain.getGenericMessages();
            localisedStrings.setObjects(localizationResult, genericMessages);
            return sharedPrefs.edit().putString(LANGUAGE_NAME_VALUE, json).commit();
        }
        return false;
    }

    /**
     * Reterieve the Language from SharedPref.
     *
     * @return
     */
    public Language getLanguage() {
        Language language = null;
        if (currentContext != null) {
            SharedPreferences sharedPrefs = currentContext.getSharedPreferences(LANGUAGE_SHARED_PREF_NAME, 0);

            Gson gson = new Gson();
            String json = sharedPrefs.getString(LANGUAGE_NAME_VALUE, null);
            if (json != null) {
                language = gson.fromJson(json, Language.class);
            } else {
                language = new Language();
                /*language.setLanguageCode(Locale.getDefault().getLanguage());
                language.setLanguageName(Locale.getDefault().getDisplayLanguage());*/
                language.setLanguageCode(android.content.res.Resources.getSystem().getConfiguration().locale.getLanguage());
                language.setLanguageName(android.content.res.Resources.getSystem().getConfiguration().locale.getDisplayLanguage());
            }
        }
        return language;
    }

    private void launchLinkYourAccountPage(AppCMSPageUI appCMSPageUI, String action) {
        if (currentActivity != null) {
            if (appCMSPageUI == null) {
                showLoader();

                AppCMSActionType actionType = actionToActionTypeMap.get(action);
                MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            new Action1<AppCMSPageUI>() {
                                @Override
                                public void call(AppCMSPageUI appCMSPageUI) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUI);
                                    String action1 = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action1 != null && actionToPageMap.containsKey(action1)) {
                                        actionToPageMap.put(action1, appCMSPageUI);
                                    }
                                    launchLinkYourAccountPage(appCMSPageUI, action1);
                                }
                            }, loadFromFile, false);
                }
                return;
            }

            String pagePath = getPageId(appCMSPageUI), filmTitle = null;
            String apiUrl = getApiUrl(true,
                    false,
                    false,
                    false,
                    null,
                    appCMSMain.getApiBaseUrl(),
                    actionToPageAPIUrlMap.get(action),
                    appCMSMain.getInternalName(),
                    pagePath,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled());

            getPageIdContent(apiUrl,
                    pagePath,
                    null,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled(),
                    false,
                    new AppCMSPageAPIAction(false,
                            false,
                            false,
                            appCMSPageUI,
                            action,
                            getPageId(appCMSPageUI),
                            filmTitle,
                            pagePath,
                            false,
                            false,
                            null) {
                        @Override
                        public void call(AppCMSPageAPI appCMSPageAPI) {
                            if (appCMSPageAPI != null) {
                                cancelInternalEvents();
                                Bundle args = getPageActivityBundle(currentActivity,
                                        appCMSPageUI,
                                        appCMSPageAPI,
                                        currentActivity.getString(R.string.app_cms_pagename_link_your_account_screen_key),
                                        getMetaPage(pageId).getPageName(),
                                        null,
                                        currentActivity.getString(R.string.app_cms_pagename_link_your_account_screen_key),
                                        false,
                                        true,
                                        false,
                                        false,
                                        false,
                                        null,
                                        ExtraScreenType.LINK_YOUR_ACCOUNT,
                                        null,
                                        false, null);

                                if (args != null) {
                                    Intent updatePageIntent =
                                            new Intent(AppCMSPresenter.ACTION_LINK_YOUR_ACCOUNT);
                                    updatePageIntent.putExtra(
                                            currentActivity.getString(R.string.app_cms_bundle_key),
                                            args);
                                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                    currentActivity.sendBroadcast(updatePageIntent);
                                }

                            }
                            loadingPage = false;
                        }
                    });
        }
    }

    public void getDeviceLinkCode(final Action1<GetLinkCode> getSyncCodeAction1, final Action1<VerimatrixResponse> getShortCodeAction) {
        try {
            showLoader();
            if (isLoginWithTVProvider) {
                String url = getCurrentContext().getString(R.string.verimatrix_shortcode, getCurrentContext().getString(R.string.verimatrix__base_url_shortcode),
                        CommonUtils.getVerimatrixPartnerId(getAppCMSAndroid(), currentContext.getString(R.string.tvprovider_verimatrix)));
                verimatrixCall.call(url, getShortCodeAction, "serial", CommonUtils.getHMACSignature(currentContext));
            } else {
                String platform;
                String deviceName;
                if (platformType.equals(PlatformType.ANDROID)) {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                    platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                } else {
                    if (isFireTVDevice(currentContext)) {
                        deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                        platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                    } else {
                        deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                        platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                    }
                }
                appCMSGetSyncCodeApiCall.call(
                        currentActivity.getString(R.string.app_cms_get_code_api_url,
                                appCMSMain.getApiBaseUrl(),
                                getDeviceId(),
                                platform,
                                appCMSMain.getInternalName(),
                                CommonUtils.getDeviceName(),
                                deviceName),
                        getAuthToken(),
                        apikey,
                        getSyncCodeAction1
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deSyncDevice() {
        String deviceName;
        String platform;
        if (platformType.equals(PlatformType.ANDROID)) {
            deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
        } else {
            if (isFireTVDevice(currentContext)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
            } else {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            }
        }
        try {
            appCmsSyncDeviceCodeAPICall.call(
                    currentActivity.getString(R.string.app_cms_desync_device_api_url,
                            appCMSMain.getApiBaseUrl(), getDeviceId(),
                            platform,
                            appCMSMain.getInternalName(),
                            CommonUtils.getDeviceName(),
                            deviceName),
                    getAuthToken(),
                    apikey,
                    true,
                    new Action1<SyncDeviceCode>() {
                        @Override
                        public void call(SyncDeviceCode syncDeviceCode) {
                            // Log.d(TAG , "DesyncDevice status = "+syncDeviceCode.getStatus());
                        }
                    }
            );

        } catch (Exception e) {

        }
    }

    public void deSyncVerimatrixDevice() {
        try {
            String url = getCurrentContext().getString(R.string.verimatrix_logout, getCurrentContext().getString(R.string.verimatrix__base_url),
                    CommonUtils.getVerimatrixPartnerId(getAppCMSAndroid(), currentContext.getString(R.string.tvprovider_verimatrix)));
            verimatrixCall.callVerimatrixSloApi(url, "serial", CommonUtils.getHMACSignature(currentContext));

        } catch (Exception e) {

        }
    }

    public void callSignOutAPI() {
        try {
            String platform;
            if (platformType.equals(PlatformType.ANDROID)) {
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            } else {
                if (isFireTVDevice(currentContext)) {
                    platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                } else {
                    platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                }
            }
            final String url = currentActivity.getString(R.string.app_cms_signout_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    platform,
                    getDeviceId(),
                    CommonUtils.getDeviceName());
            appCMSSignInCall.signout(
                    url,
                    getAuthToken(),
                    apikey,
                    null
            );

        } catch (Exception e) {

        }
    }

    public void syncCode(final Action1<SyncDeviceCode> getSyncCodeAction1, final Action1<VerimatrixResponse> verimatrixLoginAction, String url) {
        try {
            if (!isSyncCodeAPIRunning()) {
                Log.d("TAG", "syncCode.........1");
                startSyncCodeAPI();
                if (isLoginWithTVProvider && url != null) {
                    verimatrixCall.verimatrixPollingApiCall(url, new Action1<VerimatrixResponse>() {
                        @Override
                        public void call(VerimatrixResponse verimatrixResponse) {
                            //stopLoader();
                            if (verimatrixResponse == null) {
                                stopLoader();
                            } else if (verimatrixResponse.getResult()) {
                                stopSyncCodeAPI();
                                String url = getCurrentContext().getString(R.string.tv_verimatrix_init, getCurrentContext().getString(R.string.verimatrix__base_url),
                                        getCurrentContext().getString(R.string.verimatrix_partner_id))/*"https://idp.securetve.com/rest/1.0/urn:outdoorchannel:com:sp:motv:staging:1/init"*/;
                                verimatrixCall.call(url, verimatrixResponse1 -> {
                                    if (verimatrixResponse1 != null && verimatrixResponse1.isAuthenticated()) {
                                        TVProvider provider = null;
                                        for (String key : verimatrixResponse1.getProviders().keySet()) {
                                            provider = verimatrixResponse1.getProviders().get(key);
                                        }
                                        provider.setUserId(verimatrixResponse1.getUserId());
                                        getAppPreference().setTvProviderLogo(provider.getImages().getImageUrl());
                                        TVProvider finalProvider = provider;
                                        String resourceAccessUrl = CommonUtils.getVerimatrixResourceAccessUrl(AppCMSPresenter.this, currentContext);
                                        verimatrixCall.call(resourceAccessUrl, resourceAccessResult -> {
                                            if (getmFireBaseAnalytics() != null)
                                                getmFireBaseAnalytics().logEvent(getCurrentContext().getString(R.string.firebase_event_name_tve_login_succes), new Bundle());
                                            finalProvider.setResourceIds(resourceAccessResult.convertResourceId(resourceAccessResult.getResourceAccess()));
                                            startLoginTVEAsyncTask(finalProvider.getUserId(), finalProvider);
                                            verimatrixLoginAction.call(verimatrixResponse1);

                                        }, "serial", CommonUtils.getShortCodeHMACSignature());
                                    } else {
                                        stopLoader();
                                    }
                                }, "serial", CommonUtils.getShortCodeHMACSignature());
                            } else {
                                if (isSyncCodeAPIRunning()) {
                                    Log.d("TAG", "syncCode.........3");
                                    stopSyncCodeAPI();
                                    syncCode(getSyncCodeAction1, verimatrixLoginAction, url);
                                }
                            }

                        }
                    });
                } else {
                    String deviceName;
                    String platform;
                    if (platformType.equals(PlatformType.ANDROID)) {
                        deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                        platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                    } else {
                        if (isFireTVDevice(currentContext)) {
                            deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                            platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                        } else {
                            deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                        }
                    }
                    appCmsSyncDeviceCodeAPICall.call(
                            currentActivity.getString(R.string.app_cms_sync_code_api_url,
                                    appCMSMain.getApiBaseUrl(),
                                    getDeviceId(),
                                    platform,
                                    appCMSMain.getInternalName(),
                                    CommonUtils.getDeviceName(),
                                    deviceName),
                            getAuthToken(),
                            apikey,
                            false,
                            new Action1<SyncDeviceCode>() {
                                @Override
                                public void call(SyncDeviceCode syncDeviceCode) {
                                    if (syncDeviceCode != null) {
                                        stopSyncCodeAPI();
                                        appPreference.setLoginWithLinkYourAccount(true);
                                        appPreference.setRefreshToken(syncDeviceCode.getRefreshToken());
                                        appPreference.setAuthToken(syncDeviceCode.getAuthorizationToken());
                                        setLoggedInUser(syncDeviceCode.getUserId());
                                        //Log.d(TAG, "Sign in user ID response: " + signInResponse.getUserId());
                                        firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
                                        appPreference.setLoggedInUserName(syncDeviceCode.getName());
                                        appPreference.setLoggedInUserEmail(syncDeviceCode.getEmail());
                                        // boolean isSubscribed = syncDeviceCode.getIsSubscribed() != null ? Boolean.parseBoolean(syncDeviceCode.getIsSubscribed()) : false;
                                        showLoader();
                                        // send device activation event to clever tap for MI-TV
                                        if (platformType.equals(PlatformType.TV)) {
                                            appPreference.setDeviceActivated(true);
                                        }

                                        finalizeLogin(false,
                                                syncDeviceCode.getIsSubscribed(),
                                                false,
                                                true);
                                        getSyncCodeAction1.call(syncDeviceCode);
                                    } else {
                                        if (isSyncCodeAPIRunning()) {
                                            Log.d("TAG", "syncCode.........3");
                                            stopSyncCodeAPI();
                                            syncCode(getSyncCodeAction1, verimatrixLoginAction, url);
                                        }
                                    }
                                }
                            }
                    );
                }
            }
        } catch (Exception e) {

        }
    }

    public AppCMSFirebaseAnalytics getFirebaseAnalytics() {
        return firebaseAnalytics;
    }

    private boolean isSyncCodeApiRunning = false;

    public void startSyncCodeAPI() {
        isSyncCodeApiRunning = true;
    }

    public void stopSyncCodeAPI() {
        isSyncCodeApiRunning = false;
    }

    public boolean isSyncCodeAPIRunning() {
        return isSyncCodeApiRunning;
    }


    private void launchChangePasswordPage() {
        if (currentActivity != null && !cancelAllLoads && accountSettingsPage != null) {
            cancelInternalEvents();

            Bundle args = getPageActivityBundle(currentActivity,
                    navigationPages.get(accountSettingsPage.getPageId()),
                    getPageAPILruCache().get(accountSettingsPage.getPageId()),
                    currentActivity.getString(R.string.app_cms_change_password_page_tag),
                    currentActivity.getString(R.string.app_cms_change_password_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_change_password_page_tag),
                    false,
                    true,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.CHANGE_PASSWORD,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private void loginFacebook() {
        if (videoPlayerView != null) {
            Handler handler = new Handler();
            handler.postDelayed(() -> videoPlayerView.pausePlayer(), 2000);
        }
        if (currentActivity != null) {
            isSignupFromFacebook = true;
            waithingFor3rdPartyLogin = true;
            LoginManager.getInstance().logOut();
            Intent pageLoadingIntent = new Intent(AppCMSPresenter.PRESENTER_PAGE_LOADING_ACTION);
            pageLoadingIntent.putExtra(currentActivity.getString(R.string.thrid_party_login_intent_extra_key), true);
            pageLoadingIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(pageLoadingIntent);
            LoginManager.getInstance().logInWithReadPermissions(currentActivity,
                    Arrays.asList("public_profile", "email"));
        }
    }

    public boolean isSignUpFromFacebook() {
        return isSignupFromFacebook;
    }

    public boolean isSignupFromGoogle() {
        return isSignupFromGoogle;
    }

    private void loginGoogle() {
        if (currentActivity != null) {
            Intent pageLoadingIntent = new Intent(AppCMSPresenter.PRESENTER_PAGE_LOADING_ACTION);
            pageLoadingIntent.putExtra(currentActivity.getString(R.string.thrid_party_login_intent_extra_key), true);
            pageLoadingIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(pageLoadingIntent);

            isSignupFromGoogle = true;

            waithingFor3rdPartyLogin = true;

            if (googleApiClient != null && googleApiClient.isConnected()) {
                Auth.GoogleSignInApi.signOut(googleApiClient);
            }
            try {
                if (isMOTVApp()) {
                    serverClientId = currentActivity.getString(R.string.motv_server_client_id);
                } else if (isAhaApp()) {
                    serverClientId = currentActivity.getString(R.string.server_client_id);
                } else {
                    /**
                     * @Team
                     * For making build of above two we much comment bellow line
                     */
                    serverClientId = currentActivity.getString(R.string.default_web_client_id);
                }

            } catch (Exception e) {
                serverClientId = currentActivity.getString(R.string.server_client_id);
            }

            GoogleSignInOptions googleSignInOptions = new GoogleSignInOptions
                    .Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                    .requestIdToken(serverClientId)
                    .requestEmail()
                    .build();

            GoogleSignInClient mGoogleSignInClient = GoogleSignIn.getClient(currentActivity, googleSignInOptions);
            Intent signInIntent = mGoogleSignInClient.getSignInIntent();
            currentActivity.startActivityForResult(signInIntent, RC_GOOGLE_SIGN_IN);
        }
    }

    public GoogleApiClient getGoogleApiClient(GoogleSignInOptions googleSignInOptions) {
        if (googleApiClient == null) {
            try {
                googleApiClient = new GoogleApiClient.Builder(currentActivity)
                        .enableAutoManage(currentActivity,
                                (GoogleApiClient.OnConnectionFailedListener) currentActivity)
                        .addApi(Auth.GOOGLE_SIGN_IN_API, googleSignInOptions)
                        .addApi(Auth.CREDENTIALS_API)
                        .build();
            } catch (Exception e) {

            }
        }
        return googleApiClient;
    }


    public void initiateSignUpAndSubscription(String sku,
                                              String planId,
                                              String currency,
                                              String planName,
                                              double planPrice,
                                              double discountedPrice,
                                              String recurringPaymentCurrencyCode,
                                              String countryCode,
                                              boolean isRenewable,
                                              String getRenewableFrequency,
                                              boolean upgradesAvailable, double discountedPriceAmount,
                                              List<String> allowedPayMethods, List<String> carrierBillingProviders) {
        if (currentActivity != null) {
            launchType = LaunchType.SUBSCRIBE;
            skuToPurchase = sku;
            planToPurchase = planId;
            planToPurchaseName = planName;
            currencyOfPlanToPurchase = currency;
            planToPurchasePrice = planPrice;
            planToPurchaseDiscountedPrice = discountedPrice;
            currencyCode = recurringPaymentCurrencyCode;
            this.upgradesAvailable = upgradesAvailable;
            this.checkUpgradeFlag = true;
            this.countryCode = countryCode;
            this.isRenewable = isRenewable;
            discountAmount_ = discountedPriceAmount;
            this.renewableFrequency = getRenewableFrequency;
            if (allowedPayMethods != null && allowedPayMethods.size() > 0) {
                this.allowedPayMethods = new ArrayList<>();
                for (String payMethod : allowedPayMethods) {
                    if (payMethod != null && !TextUtils.isEmpty(payMethod))
                        this.allowedPayMethods.add(payMethod);
                }
            } else {
                this.allowedPayMethods = null;
            }
            this.carrierBillingProviders = carrierBillingProviders;
            setSelectedPlanPrice(discountedPrice, planName);
            firebaseAnalytics.addToCartEvent(planId, planName, currency, planPrice);
            sendSubscriptionEvent(planName, planPrice, discountedPrice, currencyCode, discountedPriceAmount, countryCode);
            if (isUserLoggedIn() /*&& appPreference.getLoggedInUserEmail() != null*/) {
                initiateItemPurchase(false);
            } else {
                navigateToLoginPage(loginFromNavPage);
                firebaseAnalytics.screenViewEvent(currentContext.getString(R.string.value_signup_screen));
            }
        }
    }


    public void setContentToPurchase(TvodPurchaseData contentToPurchase) {
        this.contentToPurchase = contentToPurchase;
    }

    public TvodPurchaseData getContentToPurchase() {
        return contentToPurchase;
    }

    TvodPurchaseData contentToPurchase;


    public void initiateTvodPurchase() {
        String identifier = "";
        String price = "";
        String purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[0];
        if (contentToPurchase.isRent()) {
            identifier = contentToPurchase.getPlanToPurchase().getRentIdentifier();
            price = contentTypeChecker.fetchTvodRentPrice(contentToPurchase.getPlanToPurchase());
            purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[1];
            planToPurchaseDiscountedPrice = contentTypeChecker.fetchTvodRentNumericPrice(contentToPurchase.getPlanToPurchase());
        } else {
            identifier = contentToPurchase.getPlanToPurchase().getPurchaseIdentifier();
            price = contentTypeChecker.fetchTvodBuyPrice(contentToPurchase.getPlanToPurchase());
            planToPurchaseDiscountedPrice = contentTypeChecker.fetchTvodBuyNumericPrice(contentToPurchase.getPlanToPurchase());
        }
        planToPurchase = contentToPurchase.getPlanToPurchase().getId();
        planToPurchaseName = contentToPurchase.getPlanToPurchase().getName();
        currencyCode = contentToPurchase.getPlanToPurchase().getPlanDetails().get(0).getRecurringPaymentCurrencyCode();
        try {
            firebaseAnalytics.addToCartTVODEvent(contentToPurchase.getPlanToPurchase().getId(), contentToPurchase.getPlanToPurchase().getName(),
                    contentTypeChecker.fetchCurrency(contentToPurchase.getPlanToPurchase()), Double.parseDouble(price.split(" ")[1]), contentToPurchase.getContentId(), contentToPurchase.getContentName(), purchaseType);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (platformType == PlatformType.ANDROID) {
            if (selectedPaymentMethod != null) {
                if (selectedPaymentMethod == BillingFragment.PaymentMethod.IN_APP_PURCHASE) {
                    AppCMSInappBilling billing = new AppCMSInappBilling(getCurrentActivity(), this);
                    if (identifier != null)
                        billing.launchPaymentFlow(identifier);
                } else if (selectedPaymentMethod == BillingFragment.PaymentMethod.SSL_COMMERZ || selectedPaymentMethod == BillingFragment.PaymentMethod.JUSPAY) {
                    openMobileNumberActivity();
                }
            }
        } else {
            Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.TVOD_PURCHASE);
            refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.tvod_sku), identifier);
            currentActivity.sendBroadcast(refreshPageDataActionIntent);
        }
    }

    boolean tvodPurchaseInitiated = false;

    public void finalizeProductPurchase(final int retryCount, String receipt, String paymentUniqueId) {
        tvodPurchaseInitiated = true;
        showLoader();
        String purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[0];
        String price = "";
        if (contentToPurchase.isRent()) {
            purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[1];
            price = contentTypeChecker.fetchTvodRentPrice(contentToPurchase.getPlanToPurchase());
        } else {
            price = contentTypeChecker.fetchTvodBuyPrice(contentToPurchase.getPlanToPurchase());
        }
        firebaseAnalytics.ecommPurchaseTvodEvent(contentToPurchase.getPlanToPurchase().getId(), contentToPurchase.getPlanToPurchase().getName(),
                contentTypeChecker.fetchCurrency(contentToPurchase.getPlanToPurchase()), Double.parseDouble(price.split(" ")[1]), contentToPurchase.getContentId(), contentToPurchase.getContentName(), purchaseType);
        AppsFlyerUtils.purchaseEvent(getCurrentContext(), getDeviceId(), getLoggedInUser(), contentToPurchase.getPlanToPurchase().getName(),
                price, contentTypeChecker.fetchCurrency(contentToPurchase.getPlanToPurchase()), contentToPurchase.getContentId(), contentToPurchase.getContentName(), purchaseType);
        AppCMSSocket listener = new AppCMSSocket();
        String finalPurchaseType = purchaseType;
        listener.setListener(new AppCMSSocket.SocketListener() {
            @Override
            public void onComplete() {
                completeTvodPurchase();
                stopLoader();
            }

            @Override
            public void onError(@NonNull String error) {
                updateTVODTransaction(retryCount, receipt, finalPurchaseType, paymentUniqueId, aBoolean -> completeTvodPurchase());
                stopLoader();
            }

            @Override
            public void onOpen(WebSocket webSocket) {
                showLoader();
                updateTVODTransaction(retryCount, receipt, finalPurchaseType, paymentUniqueId, aBoolean -> webSocket.send(new Gson().toJson(new SocketData("subscribe", "PURCHASE_SUCCESS", getAuthToken()))));

            }
        });
        OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(60, TimeUnit.SECONDS)
                .readTimeout(60, TimeUnit.SECONDS)
                .writeTimeout(60, TimeUnit.SECONDS)
                .build();
        Request request = new Request.Builder().url(appCMSMain.getApiBaseUrl().replace("api", "ws").replace("https", "wss") + "/notification?token=" + getAuthToken()).build();
        client.newWebSocket(request, listener);
        client.dispatcher().executorService().shutdown();
    }


    private void updateTVODTransaction(int retryCount, String receipt, String purchaseType, String paymentUniqueId, Action1<Boolean> purchaseSuccess) {
        ContentRequest contentRequest = null;
        if (contentToPurchase.isSeriesPurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_series), contentToPurchase.getSeriesId(), null, null, contentToPurchase.getSeriesId(), "HD");
        else if (contentToPurchase.isSeasonPurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.app_cms_season_content_type), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getSeasonId(), "HD");
        else if (contentToPurchase.isBundlePurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_bundle), null, null, contentToPurchase.getVideoId(), contentToPurchase.getVideoId(), "HD");
        else
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_video), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getVideoId(), "HD");
        InAppPurchase inAppPurchase = new InAppPurchase();
        inAppPurchase.setTransaction(getTransactionValue());
        inAppPurchase.setReceipt(receipt);
        inAppPurchase.setPurchaseType(purchaseType);
        inAppPurchase.setPlatform(getPlatformValueForAPI());
        inAppPurchase.setSiteId(Utils.getProperty("SiteId", currentActivity));
        inAppPurchase.setUserId(getLoggedInUser());
        inAppPurchase.setSite(appCMSMain.getInternalName());
        inAppPurchase.setDevice(getDeviceValueForAPI());
        inAppPurchase.setContentRequest(contentRequest);
        inAppPurchase.setPaymentUniqueId(paymentUniqueId);
        PurchaseProductCall productCall = new PurchaseProductCall(retrofit);
        String storeCountryCode = this.storeCountryCode;
        if (platformType == PlatformType.ANDROID)
            storeCountryCode = CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode());
        productCall.call(currentActivity.getString(R.string.app_cms_purchase_product_api_url,
                appCMSMain.getApiBaseUrl(), storeCountryCode), apikey,
                getAuthToken(), inAppPurchase, response -> {
                    if (response != null && response.getStatus() != null && response.getStatus().equals("success")) {
                        purchaseSuccess.call(true);
                    } else {
                        int count = retryCount;
                        count++;
                        if (count < 3)
                            updateTVODTransaction(retryCount, receipt, purchaseType, paymentUniqueId, purchaseSuccess);
                        else {
                            stopLoader();
                            if (response.getError() != null)
                                showToast(response.getError(), Toast.LENGTH_SHORT);
                        }
                    }
                });
    }

    private void completeTvodPurchase() {
        getUserData(userIdentity -> {
            if (platformType == PlatformType.ANDROID) {
                stopLoader();
                sendCloseOthersAction(null, true, !loginFromNavPage);
                if (entitlementPendingVideoData != null && entitlementPendingVideoData.contentDatum != null && !entitlementPendingVideoData.contentDatum.isFromStandalone()) {
                    launchButtonSelectedAction(entitlementPendingVideoData.pagePath,
                            entitlementPendingVideoData.action,
                            entitlementPendingVideoData.filmTitle,
                            entitlementPendingVideoData.extraData,
                            entitlementPendingVideoData.contentDatum,
                            entitlementPendingVideoData.closeLauncher,
                            entitlementPendingVideoData.currentlyPlayingIndex,
                            entitlementPendingVideoData.relateVideoIds);
                    if (entitlementPendingVideoData != null) {
                        entitlementPendingVideoData.pagePath = null;
                        entitlementPendingVideoData.action = null;
                        entitlementPendingVideoData.filmTitle = null;
                        entitlementPendingVideoData.extraData = null;
                        entitlementPendingVideoData.contentDatum = null;
                        entitlementPendingVideoData.closeLauncher = false;
                        entitlementPendingVideoData.currentlyPlayingIndex = -1;
                        entitlementPendingVideoData.relateVideoIds = null;
                    }
                }
            } else {
                if (tvodPurchaseInitiated) {
                    Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                    currentActivity.sendBroadcast(updateSubscription);
                    stopLoader();
                    if (ways2WatchScreenOpenFromPlayer) {
                        currentActivity.getSupportFragmentManager().popBackStack();
                    }
                    tvodPurchaseInitiated = false;
                }

            }
        });
    }

    private void openMobileNumberActivity() {
        try {
            if (isValidPhoneNumber(getLoggedInPhone())) {
                openPaymentPage();
            } else {
                if (useCarrierBilling()) {
                    if (isSiteOTPEnabled(this))
                        navigateToUpdateMobileNumberPage();
                    else
                        navigateToCheckoutPage(null);
                } else if (useJusPay()) {
                    if (byPassCheckoutScreenForJusPay() && isSiteOTPEnabled(this))
                        navigateToUpdateMobileNumberPage();
                    else
                        getSubscriptionFlowPageContent(this::navigateToCheckoutPage);
                } else if (useSSLCommerz()) {
                    if (byPassCheckoutScreenForSslCommerz() && isSiteOTPEnabled(this))
                        navigateToUpdateMobileNumberPage();
                    else
                        navigateToCheckoutPage(null);
                } else
                    navigateToCheckoutPage(null);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void openPaymentPage() {
        if (useCarrierBilling()) {
            navigateToCheckoutPage(null);
        } else if (useJusPay()) {
            if (byPassCheckoutScreenForJusPay()) {
                showLoader();
                navigateToJuspayPaymentPage(this::stopLoader);
            } else {
                getSubscriptionFlowPageContent(this::navigateToCheckoutPage);
            }
        } else if (useCCAvenue()) {
            Intent intent = new Intent(currentActivity, WebViewActivity.class);
            intent.putExtra("payment_option", "");
            intent.putExtra("orderId", "");
            intent.putExtra("accessCode", "");
            intent.putExtra("merchantID", "");
            intent.putExtra("cancelRedirectURL", "");
            intent.putExtra("rsa_key", "");
            intent.putExtra("billing_tel", getLoggedInPhone());
            currentActivity.startActivity(intent);
        } else if (useSSLCommerz()) {
            if (byPassCheckoutScreenForSslCommerz()) {
                showLoader();
                initiateSSLCommerzPurchase(getLoggedInPhone(), planToPurchase, planToPurchaseName, planToPurchaseDiscountedPrice, currencyCode, isSuccess -> stopLoader());
            } else
                navigateToCheckoutPage(null);
        }
    }

    private void navigateToCheckoutPage(AppCMSPageAPI appCMSPageAPI) {
        String strAmount = Double.toString(planToPurchaseDiscountedPrice);
        Intent intent = new Intent(currentActivity, EnterMobileNumberActivity.class);
        intent.putExtra(AvenuesParams.CURRENCY, currencyCode);
        intent.putExtra(AvenuesParams.AMOUNT, strAmount);
        intent.putExtra(currentActivity.getString(R.string.app_cms_site_name), appCMSMain.getInternalName());
        intent.putExtra(currentActivity.getString(R.string.app_cms_user_id), appPreference.getLoggedInUser());
        intent.putExtra(currentActivity.getString(R.string.app_cms_plan_id), planToPurchase);
        intent.putExtra("plan_to_purchase_name", planToPurchaseName);
        intent.putExtra("siteId", appCMSMain.getInternalName());
        intent.putExtra("email", appPreference.getLoggedInUserEmail());
        intent.putExtra("authorizedUserName", appPreference.getLoggedInUser());
        intent.putExtra("x-api-token", apikey);
        intent.putExtra("auth_token", getAuthToken());
        intent.putExtra("renewable", isRenewable);
        intent.putExtra("mobile_number", "");
        intent.putExtra("api_base_url", appCMSMain.getApiBaseUrl());
        intent.putExtra("si_frequency", "2");
        intent.putExtra("si_frequency_type", renewableFrequency);
        intent.putExtra("color_theme", getBrandPrimaryCtaColor());
        if (appCMSPageAPI != null)
            intent.putExtra(currentActivity.getString(R.string.page_content_data), appCMSPageAPI);
        currentActivity.startActivity(intent);
    }

    public String getMerchantId() {
        if (appCMSMain != null && appCMSMain.getPaymentProviders() != null && appCMSMain.getPaymentProviders().getJusPay() != null)
            return appCMSMain.getPaymentProviders().getJusPay().getMerchantId();
        return "";
    }

    public boolean byPassCheckoutScreenForJusPay() {
        if (appCMSMain != null && appCMSMain.getPaymentProviders() != null && appCMSMain.getPaymentProviders().getJusPay() != null)
            return appCMSMain.getPaymentProviders().getJusPay().isByPassCheckoutScreen();
        return false;
    }

    public boolean byPassCheckoutScreenForSslCommerz() {
        if (appCMSMain != null && appCMSMain.getPaymentProviders() != null && appCMSMain.getPaymentProviders().getSslCommerz() != null)
            return appCMSMain.getPaymentProviders().getSslCommerz().isByPassCheckoutScreen();
        return false;
    }

    public boolean useJusPay() {
        boolean useJusPay = false;
        if (currentActivity != null && BuildConfig.FLAVOR.contains(AppCMSPresenter.MOBILE_JUSPAY_BUILD_VARIENT)) {

            useJusPay =
                    CommonUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId()) &&
                            !TextUtils.isEmpty(CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode())) &&
                            appCMSMain != null &&
                            appCMSMain.getPaymentProviders() != null &&
                            appCMSMain.getPaymentProviders().getJusPay() != null &&
                            !TextUtils.isEmpty(appCMSMain.getPaymentProviders().getJusPay().getCountry()) &&
                            appCMSMain.getPaymentProviders().getJusPay().getCountry().equalsIgnoreCase(CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode()));
        }

        return useJusPay;
    }

    public boolean useCCAvenue() {
        boolean useCCAve = false;
        if (currentActivity != null) {
            useCCAve =
                    CommonUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId()) &&
                            !TextUtils.isEmpty(CommonUtils.getPlay_Store_Country_Code(this, countryCode)) &&
                            appCMSMain != null &&
                            appCMSMain.getPaymentProviders() != null &&
                            appCMSMain.getPaymentProviders().getCcav() != null &&
                            !TextUtils.isEmpty(appCMSMain.getPaymentProviders().getCcav().getCountry()) &&
                            appCMSMain.getPaymentProviders().getCcav().getCountry().equalsIgnoreCase(CommonUtils.getPlay_Store_Country_Code(this, countryCode));
        }
        return useCCAve;
    }

    public boolean useSSLCommerz() {
        boolean useSSLCommerz = false;
        if (currentActivity != null) {
            useSSLCommerz =
                    CommonUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId()) &&
                            !TextUtils.isEmpty(CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode())) &&
                            appCMSMain != null &&
                            appCMSMain.getPaymentProviders() != null &&
                            appCMSMain.getPaymentProviders().getSslCommerz() != null &&
                            appCMSMain.getPaymentProviders().getSslCommerz().isActive() &&
                            !TextUtils.isEmpty(appCMSMain.getPaymentProviders().getSslCommerz().getCountry()) &&
                            (appCMSMain.getPaymentProviders().getSslCommerz().getCountry().equalsIgnoreCase(CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode()))
                                    || appCMSMain.getPaymentProviders().getSslCommerz().getCountry().equalsIgnoreCase("ROW"));
        }
        return useSSLCommerz;
    }

    public boolean useCarrierBilling() {
        return CommonUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId())
                && carrierBillingProviders != null && carrierBillingProviders.size() > 0
                && (carrierBillingProviders.contains(currentActivity.getString(R.string.gp_data_bundle)) || carrierBillingProviders.contains(currentActivity.getString(R.string.robi)));
        //&& "BD".equalsIgnoreCase(CommonUtils.getPlay_Store_Country_Code(this, countryCode));
    }

    public void initiateSSLCommerzPurchase(String mobile, String planId, String planName, double planPrice, String currencyCode, Action1<Boolean> action1) {

        UUID transId = Generators.timeBasedGenerator().generate();
        String transactionId = transId.toString().replace("-", "").substring(0, 20);

        initiateSSLCommerz(planId, transactionId,
                mobile,
                new AppCMSSSLCommerzInitiateAPIAction("Inititate SSL") {
                    @Override
                    public void call(SSLInitiateResponse sslInitiateResponse) {

                        if (sslInitiateResponse != null && (sslInitiateResponse.getStatus() != null && sslInitiateResponse.getStatus().equalsIgnoreCase("SUCCESS")) || sslInitiateResponse.isSuccess()) {
                            onVLApiInitialRespons(planId, planName, Double.toString(planPrice), currencyCode, transactionId, mobile);
                            if (action1 != null)
                                action1.call(true);
                        } else {
                            showDialog(DialogType.SSL_SUBSCRIPTION_ERROR,
                                    (sslInitiateResponse != null && sslInitiateResponse.getError() != null) ? sslInitiateResponse.getError() : localisedStrings.getSSLCommerzInitErrorMessage(),
                                    false,
                                    null,
                                    null,
                                    getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.failed_to_subscribe)));

                            if (action1 != null)
                                action1.call(false);
                        }
                    }
                });

    }

    private void onVLApiInitialRespons(String planId, String planName, String planAmt, String currencyCode, String transactionId, String mobile) {

        String sdkType = SSLCSdkType.TESTBOX;
        if (!appCMSMain.getPaymentProviders().getSslCommerz().getEnvironment().equals("sandbox")) {
            sdkType = SSLCSdkType.LIVE;
        }
        //TO:DO - store password to be picked dynamically in future. Arul to update on this
        String storeId = "";
        String storePassword = "";

        if (appCMSMain.getPaymentProviders().getSslCommerz().getEnvironment().equals("sandbox")) {
            storeId = appCMSMain.getPaymentProviders().getSslCommerz().getSandboxStoreId();
            if (isProthomApp() || isMOTVApp()) {
                storePassword = "chork5f9fe4c02c893@ssl";
            } else if (isHoichoiApp()) {
                storePassword = "test_hoichoi@ssl";
            }
        } else {
            storeId = appCMSMain.getPaymentProviders().getSslCommerz().getStoreId();
            if (isProthomApp()) {
                storePassword = "5FBF71136DF7779546";
            } else if (isHoichoiApp()) {
                storePassword = "5BACA6BEB108067455";
            }
        }
        final SSLCommerzInitialization sslCommerzInitialization = new SSLCommerzInitialization(storeId, storePassword, Double.parseDouble(planAmt),
                currencyCode, transactionId, planId, sdkType);

        String custName = appPreference.getLoggedInUserName();
        if (custName == null && appPreference.getLoggedInUserEmail() != null) {
            custName = appPreference.getLoggedInUserEmail().split("@")[0];
        }
        final SSLCCustomerInfoInitializer customerInfoInitializer = new SSLCCustomerInfoInitializer(custName,
                appPreference.getLoggedInUserEmail(), "", "", "", "", mobile);
        SSLCAdditionalInitializer additionalInitializer = new SSLCAdditionalInitializer();
        additionalInitializer.setValueA(getLoggedInUser());
        additionalInitializer.setValueB(planId);
        if (getLaunchType() == LaunchType.TVOD_PURCHASE) {
            String purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[0];
            if (contentToPurchase.isRent()) {
                purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[1];
            }
            additionalInitializer.setValueC(purchaseType);
        }
        IntegrateSSLCommerz
                .getInstance(getCurrentActivity())
                .addAdditionalInitializer(additionalInitializer)
                .addSSLCommerzInitialization(sslCommerzInitialization)
                .addCustomerInfoInitializer(customerInfoInitializer)
                .buildApiCall(new SSLCTransactionResponseListener() {
                    @Override
                    public void transactionSuccess(SSLCTransactionInfoModel sslcTransactionInfoModel) {
                        firebaseAnalytics.ecommPurchaseEvent(planId, planName,
                                sslcTransactionInfoModel.getCurrencyType(), Double.parseDouble(sslcTransactionInfoModel.getAmount()), sslcTransactionInfoModel.getTranId());
                        String title = null;
                        String msg = currentActivity.getString(R.string.ssl_commerz_transaction_successful);
                        if (getLaunchType() == LaunchType.TVOD_PURCHASE) {
                            title = localisedStrings.getTransactionTitle();
                            msg = localisedStrings.getTransactionSuccessMsg();
                        }
                        SSLComerzTransactionStatus(title, msg, true);
                        Log.d(TAG, "Transaction Successfully completed");
                    }

                    @Override
                    public void transactionFail(String failureReason) {
                        // Transaction failed
                        SSLComerzTransactionStatus(null, currentActivity.getString(R.string.ssl_commerz_transaction_cancel), false);
                        Log.d(TAG, "Transaction Fail. Session key : " + failureReason);
                    }

                    @Override
                    public void merchantValidationError(String error) {
                        Log.d(TAG, "Transaction error: " + error);
                    }
                });
    }


    private void initiateSSLCommerz(String planId, String transId, String mobile,
                                    final AppCMSSSLCommerzInitiateAPIAction sslCommerzInitiateAPIAction) {
        if (currentContext != null) {
            String baseUrl = appCMSMain.getApiBaseUrl();
            String siteId = appCMSMain.getInternalName();

            InAppPurchase inAppPurchase = null;
            if (getLaunchType() == LaunchType.TVOD_PURCHASE) {
                String purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[0];
                if (contentToPurchase.isRent()) {
                    purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[1];
                }
                planId = contentToPurchase.getPlanToPurchase().getId();
                ContentRequest contentRequest = null;
                if (contentToPurchase.isSeriesPurchase())
                    contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_series), contentToPurchase.getSeriesId(), null, null, contentToPurchase.getSeriesId(), "HD");
                else if (contentToPurchase.isSeasonPurchase())
                    contentRequest = new ContentRequest(currentActivity.getString(R.string.app_cms_season_content_type), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getSeasonId(), "HD");
                else if (contentToPurchase.isBundlePurchase())
                    contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_bundle), null, null, contentToPurchase.getVideoId(), contentToPurchase.getVideoId(), "HD");
                else
                    contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_video), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getVideoId(), "HD");
                inAppPurchase = new InAppPurchase();
                inAppPurchase.setTransaction("sslcommerz");
                inAppPurchase.setPurchaseType(purchaseType);
                inAppPurchase.setPlatform(getPlatformValueForAPI());
                inAppPurchase.setSiteId(Utils.getProperty("SiteId", currentActivity));
                inAppPurchase.setUserId(getLoggedInUser());
                inAppPurchase.setSite(appCMSMain.getInternalName());
                inAppPurchase.setDevice(getDeviceValueForAPI());
                inAppPurchase.setContentRequest(contentRequest);
            }
            appCMSSSLCommerzInitiateCall.call(
                    currentContext.getString(R.string.app_cms_sslcommerz_initiate_api_url,
                            baseUrl,
                            siteId),
                    sslCommerzInitiateAPIAction,
                    apikey,
                    getAuthToken(),
                    planId,
                    transId,
                    inAppPurchase,
                    mobile
            );
        }
    }

    public abstract static class AppCMSSSLCommerzInitiateAPIAction implements Action1<SSLInitiateResponse> {
        final String action;

        public AppCMSSSLCommerzInitiateAPIAction(String action) {
            this.action = action;
        }
    }

    public void getCCAvenueRSAKey(
            final AppCMSCCAvenueRSAKeyAPIAction rsaKeyAPIAction) {
        if (currentContext != null) {
            String currentDate = "" + new Date().getTime();
            appCMSCCAvenueRSAKeyCall.call(currentContext.getString(R.string.app_cms_ccavenue_rsa_key_api_url,
                    appCMSMain.getApiBaseUrl(),
                    currentDate),
                    rsaKeyAPIAction,
                    apikey,
                    getAuthToken(),
                    planToPurchase,
                    appCMSMain.getInternalName(),
                    appPreference.getLoggedInUser()
            );
        }
    }

    public abstract static class AppCMSCCAvenueRSAKeyAPIAction implements Action1<RSAKeyResponse> {
        final String action;

        public AppCMSCCAvenueRSAKeyAPIAction(String action) {
            this.action = action;
        }
    }

    private void SSLComerzTransactionStatus(String title, String msg, boolean isSuccessful) {
        new Handler().postDelayed(() -> {
            if (currentActivity != null) {
                showDialog(DialogType.SUBSCRIBE, msg, false, new Action0() {
                    @Override
                    public void call() {
                        if (isSuccessful)
                            finalizeSignupAfterCCAvenueSubscription(false);
                    }
                }, null, title);
            }
        }, 400);
    }

    BillingFragment.PaymentMethod selectedPaymentMethod;

    public void setSelectedPaymentMethod(BillingFragment.PaymentMethod selectedPaymentMethod) {
        this.selectedPaymentMethod = selectedPaymentMethod;
    }


    public void initiateItemPurchase(boolean purchaseFromRestore) {
        this.purchaseFromRestore = purchaseFromRestore;
        checkForExistingSubscription(false);
        if (billlingOptionsShown) {
            if ((useJusPay() || useCCAvenue() || useSSLCommerz()) && (selectedPaymentMethod != null && selectedPaymentMethod != BillingFragment.PaymentMethod.IN_APP_PURCHASE)) {
                if (isUserSubscribed()) {
                    try {
                        showLoadingDialog(true);
                        appCMSSubscriptionPlanCall.call(
                                currentActivity.getString(R.string.app_cms_get_current_subscription_api_url,
                                        appCMSMain.getApiBaseUrl(),
                                        appPreference.getLoggedInUser(),
                                        appCMSMain.getInternalName()),
                                R.string.app_cms_subscription_subscribed_plan_key,
                                null,
                                true,
                                apikey,
                                getAuthToken(),
                                listResult -> {
                                    showLoadingDialog(false);
                                }, appCMSSubscriptionPlanResults -> {
                                    showLoadingDialog(false);
                                    sendCloseOthersAction(null, true, false);
                                    refreshSubscriptionData(this::sendRefreshPageAction, true);
                                },
                                appCMSSubscriptionPlanResult -> {
                                    showLoadingDialog(false);
                                    try {
                                        if (appCMSSubscriptionPlanResult != null) {
                                            upgradePlanAPICall();
                                        }
                                    } catch (Exception e) {
                                    }
                                }, errorResponse -> {

                                }
                        );
                    } catch (Exception ex) {
                        //
                    }
                } else {
                    openMobileNumberActivity();
                }
            } else {
                if (currentActivity != null && TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())) {
                    BillingHelper.getInstance(this).purchaseItemFromGoogleAppStore(skuToPurchase, purchaseFromRestore);
                    //Log.d(TAG, "Initiating Google Play Services purchase");

                } else if (!TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())) {
                    try {
                        InAppPurchaseData inAppPurchaseData = gson.fromJson(appPreference.getRestoreSubscriptionReceipt(),
                                InAppPurchaseData.class);
                        skuToPurchase = inAppPurchaseData.getProductId();
                        finalizeSignupAfterSubscription(appPreference.getRestoreSubscriptionReceipt());
                    } catch (Exception e) {
                    }
                }
            }
        } else {
            if (useJusPay() || useCCAvenue() || useSSLCommerz()) {
                if (isUserSubscribed()) {
                    try {
                        showLoadingDialog(true);
                        appCMSSubscriptionPlanCall.call(
                                currentActivity.getString(R.string.app_cms_get_current_subscription_api_url,
                                        appCMSMain.getApiBaseUrl(),
                                        appPreference.getLoggedInUser(),
                                        appCMSMain.getInternalName()),
                                R.string.app_cms_subscription_subscribed_plan_key,
                                null,
                                true,
                                apikey,
                                getAuthToken(),
                                listResult -> {
                                    showLoadingDialog(false);
                                }, appCMSSubscriptionPlanResults -> {
                                    showLoadingDialog(false);
                                    sendCloseOthersAction(null, true, false);
                                    refreshSubscriptionData(this::sendRefreshPageAction, true);
                                },
                                appCMSSubscriptionPlanResult -> {
                                    showLoadingDialog(false);
                                    try {
                                        if (appCMSSubscriptionPlanResult != null) {
                                            upgradePlanAPICall();
                                        }
                                    } catch (Exception e) {
                                    }
                                }, errorResponse -> {

                                }
                        );
                    } catch (Exception ex) {
                        //
                    }
                } else {
                    openMobileNumberActivity();
                }
            } else {
                if (currentActivity != null && TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())) {
                    BillingHelper.getInstance(this).purchaseItemFromGoogleAppStore(skuToPurchase, purchaseFromRestore);
                    //Log.d(TAG, "Initiating Google Play Services purchase");

                } else if (!TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())) {
                    try {
                        InAppPurchaseData inAppPurchaseData = gson.fromJson(appPreference.getRestoreSubscriptionReceipt(),
                                InAppPurchaseData.class);
                        skuToPurchase = inAppPurchaseData.getProductId();
                        finalizeSignupAfterSubscription(appPreference.getRestoreSubscriptionReceipt());
                    } catch (Exception e) {
                    }
                }
            }
        }

    }

    @SuppressWarnings("unused")
    private void checkCCAvenueUpgradeStatus(String referenceNo) {
        try {
            SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
            subscriptionRequest.setReferenceNo(referenceNo);
            showLoader();
            appCMSSubscriptionPlanCall.call(
                    currentActivity.getString(R.string.app_cms_ccavenue_is_plan_upgradable_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName()),
                    R.string.app_cms_check_ccavenue_plan_status_key,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    listResult -> {
                        //Log.v("currentActivity", "currentActivity");
                    },
                    singleResult -> {
                        if (singleResult != null) {
                            String siStatus = singleResult.getSiStatus();
                            if (siStatus != null && siStatus.equalsIgnoreCase("ACTI")) {
                                upgradePlanAPICall();
                            } else {
                                showDialog(DialogType.SUBSCRIBE, localisedStrings.getServerErrorText(), false, null, null, localisedStrings.getSubscriptionMsgHeaderText());
                                sendCloseOthersAction(null, true, false);
                            }
                        } else {
                            showDialog(DialogType.SUBSCRIBE, localisedStrings.getServerErrorText(), false, null, null, localisedStrings.getSubscriptionMsgHeaderText());
                            sendCloseOthersAction(null, true, false);
                        }
                    },
                    appCMSSubscriptionPlanResult -> {
                        //
                    }, errorResponse -> {

                    }
            );
        } catch (Exception ex) {
            //
        }
    }

    private void upgradePlanAPICall() {
        SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
        subscriptionRequest.setPlatform(currentActivity.getString(R.string.app_cms_subscription_platform_key));
        subscriptionRequest.setSiteId(Utils.getProperty("SiteId", currentActivity));
        subscriptionRequest.setSubscription(currentActivity.getString(R.string.app_cms_subscription_key));
        subscriptionRequest.setCurrencyCode(appPreference.getActiveSubscriptionCurrency());
        subscriptionRequest.setPlanIdentifier(skuToPurchase);
        subscriptionRequest.setPlanId(planToPurchase);
        subscriptionRequest.setUserId(appPreference.getLoggedInUser());
        subscriptionRequest.setReceipt(appPreference.getActiveSubscriptionReceipt());
        showLoader();
        try {
            appCMSSubscriptionPlanCall.call(
                    currentActivity.getString(R.string.app_cms_register_subscription_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(),
                            currentActivity.getString(R.string.app_cms_subscription_platform_key)),
                    R.string.app_cms_subscription_plan_update_key,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    result -> {
                        //
                        //Log.v("got result", "got result");
                    }, appCMSSubscriptionPlanResults -> {
                        if (appCMSSubscriptionPlanResults != null &&
                                (!TextUtils.isEmpty(appCMSSubscriptionPlanResults.getMessage()) ||
                                        !TextUtils.isEmpty(appCMSSubscriptionPlanResults.getError()))) {
                            if (!TextUtils.isEmpty(appCMSSubscriptionPlanResults.getMessage())) {
                                if (!TextUtils.isEmpty(appCMSSubscriptionPlanResults.getSubscriptionStatus())) {
                                    if (appCMSSubscriptionPlanResults.getSubscriptionStatus().equalsIgnoreCase(currentContext.getString(R.string.subscription_status_completed)) &&
                                            !TextUtils.isEmpty(appCMSSubscriptionPlanResults.getMessage())) {
                                        showDialog(DialogType.SUBSCRIBE,
                                                appCMSSubscriptionPlanResults.getMessage(),
                                                false,
                                                null,
                                                null, localisedStrings.getSubscriptionMsgHeaderText());
                                    }
                                    sendCloseOthersAction(null, true, false);

                                    refreshSubscriptionData(this::sendRefreshPageAction, true);
                                } else {
                                    showDialog(DialogType.SUBSCRIBE,
                                            appCMSSubscriptionPlanResults.getMessage(),
                                            false,
                                            null,
                                            null, localisedStrings.getSubscriptionMsgHeaderText());
                                }
                            } else {
                                showDialog(DialogType.SUBSCRIBE,
                                        appCMSSubscriptionPlanResults.getError(),
                                        false,
                                        null,
                                        null, localisedStrings.getSubscriptionMsgHeaderText());
                            }
                            showLoadingDialog(false);
                        } else {
                            sendCloseOthersAction(null, true, false);

                            refreshSubscriptionData(this::sendRefreshPageAction, true);
                        }
                    },
                    currentUserPlan -> {
                        //
                    }, errorResponse -> {

                    });
        } catch (IOException e) {

        }
    }

    public void addGoogleAccountToDevice() {
        Intent addAccountIntent = new Intent(android.provider.Settings.ACTION_ADD_ACCOUNT)
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        addAccountIntent.putExtra(android.provider.Settings.EXTRA_ACCOUNT_TYPES, new String[]{"com.google"});
        currentActivity.startActivityForResult(addAccountIntent, ADD_GOOGLE_ACCOUNT_TO_DEVICE_REQUEST_CODE);
    }

    private void sendSubscriptionCancellation() {
        if (currentActivity != null) {
            if (!TextUtils.isEmpty(appPreference.getActiveSubscriptionSku())) {
                SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
                subscriptionRequest.setPlatform(currentActivity.getString(R.string.app_cms_subscription_platform_key));
                subscriptionRequest.setSiteId(Utils.getProperty("SiteId", currentActivity));
                subscriptionRequest.setSubscription(currentActivity.getString(R.string.app_cms_subscription_key));
                subscriptionRequest.setCurrencyCode(appPreference.getActiveSubscriptionCurrency());
                subscriptionRequest.setPlanIdentifier(appPreference.getActiveSubscriptionSku());
                subscriptionRequest.setPlanId(appPreference.getActiveSubscriptionId());
                subscriptionRequest.setUserId(appPreference.getLoggedInUser());
                subscriptionRequest.setReceipt(appPreference.getActiveSubscriptionReceipt());

                //Log.d(TAG, "Subscription request: " + gson.toJson(subscriptionRequest, SubscriptionRequest.class));

                try {
                    //Log.v("authtoken", getAuthToken());
                    showLoader();
                    appCMSSubscriptionPlanCall.call(
                            currentActivity.getString(R.string.app_cms_cancel_subscription_api_url,
                                    appCMSMain.getApiBaseUrl(),
                                    appCMSMain.getInternalName(),
                                    currentActivity.getString(R.string.app_cms_subscription_platform_key)),
                            R.string.app_cms_subscription_plan_cancel_key,
                            subscriptionRequest,
                            true,
                            apikey,
                            getAuthToken(),
                            result -> {
                                if (result != null) {
                                    appPreference.setIsUserSubscribed(false);
                                }
                            },
                            appCMSSubscriptionPlanResults -> {
                                if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                                    AppsFlyerUtils.subscriptionEvent(currentActivity,
                                            false,
                                            appPreference.getAppsFlyerKey(),
                                            appPreference.getActiveSubscriptionPrice(),
                                            subscriptionRequest.getPlanId(),
                                            subscriptionRequest.getCurrencyCode(),
                                            appPreference.getLoggedInUser());
                                }

                                //Subscription Cancel Firebase Log Event
                                firebaseAnalytics.cancelSubscriptionEvent(appPreference.getActiveSubscriptionId(), appPreference.getActiveSubscriptionPlanName(),
                                        appPreference.getActiveSubscriptionCurrency(), appPreference.getActiveSubscriptionPrice());

                                if (appCMSSubscriptionPlanResults != null && appCMSSubscriptionPlanResults.isUnsubscribed()) {
                                    appPreference.clearSubscriptionDetails();
                                    appPreference.setIsUserSubscribed(false);
                                    setUserSubscriptionInfo(null);
                                    setUserSubscriptionPlanResult(null);
                                }

                                if (currentActivity instanceof AppCMSPageActivity) {
                                    ((AppCMSPageActivity) currentActivity).setSubscribeBtnOnHeader();
                                }

                                sendCloseOthersAction(null, true, false);
                                refreshSubscriptionData(this::sendRefreshPageAction, true);

                            },
                            currentUserPlan -> {
                                //
                            }, errorResponse -> {

                            });
                } catch (IOException e) {
                    //Log.e(TAG, "Failed to update user subscription status");
                }


            }
            sendSubscriptionCancleEvent();
        }
    }

    private void initiateSubscriptionCancellation() {
        if (currentActivity != null) {
            if (!TextUtils.isEmpty(appPreference.getActiveSubscriptionCountryCode()) &&
                    appCMSMain != null &&
                    appCMSMain.getPaymentProviders() != null &&
                    appCMSMain.getPaymentProviders().getCcav() != null &&
                    !TextUtils.isEmpty(appCMSMain.getPaymentProviders().getCcav().getCountry()) &&
                    appCMSMain.getPaymentProviders().getCcav().getCountry().equalsIgnoreCase(countryCode)) {
                showDialog(DialogType.CANCEL_SUBSCRIPTION, getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.subscription_cancel_dialog_message)),
                        true, this::sendSubscriptionCancellation,
                        null, null);
            } else {
                String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                if (!TextUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId()) ||
                        (!TextUtils.isEmpty(paymentProcessor) &&
                                (paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) ||
                                        paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly))))) {
                    Intent googlePlayStoreCancelIntent = new Intent(Intent.ACTION_VIEW,
                            Uri.parse(currentActivity.getString(R.string.google_play_store_subscriptions_url)));
                    currentActivity.startActivity(googlePlayStoreCancelIntent);
                } else {
                    if ("CCAvenue".equalsIgnoreCase(paymentProcessor) || currentActivity.getString(R.string.robi).equalsIgnoreCase(paymentProcessor)) {
                        showDialog(DialogType.CANCEL_SUBSCRIPTION, getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.subscription_cancel_dialog_message)),
                                true, this::sendSubscriptionCancellation,
                                null, null);
                    }
                }
            }
        }
    }

    public void onOrientationChange(boolean landscape) {
        for (Action1<Boolean> onOrientationChangeHandler : onOrientationChangeHandlers) {
            Observable.just(landscape).subscribe(onOrientationChangeHandler);
        }
    }

    public void restrictPortraitOnly() {
        if (currentActivity != null) {
            try {
                currentActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void rotateToLandscape() {
        if (currentActivity != null) {
            /**
             * due to api issue if targetSdkVersion is >=27 then sometime illegal argument exception (only fullscreen activities can request orientation error)occur
             * Handled this for these cases
             */
            try {
                currentActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            }
        }
    }

    public void restrictLandscapeOnly() {
        if (currentActivity != null) {
            try {
                currentActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            }
        }
    }

    public void unrestrictPortraitOnly() {
        if (currentActivity != null) {
            try {
                currentActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean isFromEntitlementAPI = false;

    public void getAppCMSSignedURL(String filmId,
                                   Action1<AppCMSSignedURLResult> readyAction) {
        if (currentContext != null && !isFromEntitlementAPI) {
            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(), () -> {
                    String url = currentContext.getString(R.string.app_cms_signed_url_api_url,
                            appCMSMain.getApiBaseUrl(),
                            filmId,
                            appCMSMain.getInternalName());
                    GetAppCMSSignedURLAsyncTask.Params params = new GetAppCMSSignedURLAsyncTask.Params.Builder()
                            .authToken(getAuthToken())
                            .xApiKey(apikey)
                            .url(url)
                            .build();

                    try {
                        new GetAppCMSSignedURLAsyncTask(appCMSSignedURLCall, readyAction).execute(params);
                    } catch (Exception e) {
                    }
                });
            } else {
                String url = currentContext.getString(R.string.app_cms_signed_url_api_url,
                        appCMSMain.getApiBaseUrl(),
                        filmId,
                        appCMSMain.getInternalName());
                GetAppCMSSignedURLAsyncTask.Params params = new GetAppCMSSignedURLAsyncTask.Params.Builder()
                        .authToken(getAuthToken())
                        .xApiKey(apikey)
                        .url(url)
                        .build();
                try {
                    new GetAppCMSSignedURLAsyncTask(appCMSSignedURLCall, readyAction).execute(params);
                } catch (Exception e) {
                }
            }
        }
    }

    public void clearPageAPIData(Action0 onRefreshFinished, boolean sendRefreshPageDataAction) {
        if (isNetworkConnected()) {
            cancelInternalEvents();
            showLoadingDialog(true);
            try {
                getPageViewLruCache().evictAll();
                getPageAPILruCache().evictAll();
            } catch (Exception e) {
                //
            }

            new GetAppCMSAPIAsyncTask(appCMSPageAPICall, null).deleteAll(() -> {
                if (currentActivity != null && sendRefreshPageDataAction) {
                    Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_DATA_ACTION);
                    refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(refreshPageDataActionIntent);
                }

                if (onRefreshFinished != null) {
//                        if (platformType.equals(PlatformType.ANDROID)) {
//                            showLoadingDialog(false);
//                        }
                    onRefreshFinished.call();
                }
            });

        } else {
            if (onRefreshFinished != null) {
                onRefreshFinished.call();
            }
        }
    }

    public void clearSinglePageAPIData(Action0 onRefreshFinished, boolean sendRefreshPageDataAction, String pageId) {
        if (isNetworkConnected()) {
            cancelInternalEvents();
            showLoadingDialog(true);
            try {
                getPageViewLruCache().remove(pageId + BaseView.isLandscape(getCurrentActivity()));
                getPageAPILruCache().remove(pageId);
            } catch (Exception e) {
                //
            }

            new GetAppCMSAPIAsyncTask(appCMSPageAPICall, null).deleteFile(() -> {
                if (currentActivity != null && sendRefreshPageDataAction) {
                    Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_DATA_ACTION);
                    refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(refreshPageDataActionIntent);
                }

                if (onRefreshFinished != null) {
                    onRefreshFinished.call();
                }
            }, pageId);

        } else {
            if (onRefreshFinished != null) {
                onRefreshFinished.call();
            }
        }
    }

    public void updateWatchlistImage(View view, String tag, AppCMSUIKeyType componentKey) {
        if (componentKey != null && componentKey == AppCMSUIKeyType.TEXT_VIEW_SAVE) {
            TextView addToSave = view.findViewById(R.id.save);
            if (tag.equals(currentActivity.getString(R.string.tag_full_heart))) {
                addToSave.setText(localisedStrings.getRemoveFromWatchlistText());
            } else {
                addToSave.setText(localisedStrings.getAddToWatchlistText());
            }
        } else if (tag.equals(currentActivity.getString(R.string.tag_full_heart))) {
            view.setTag(currentActivity.getString(R.string.tag_full_heart));
            view.setBackground(ContextCompat.getDrawable(currentActivity, R.drawable.ic_heart));
        } else {
            view.setTag(currentActivity.getString(R.string.tag_empty_heart));
            view.setBackground(ContextCompat.getDrawable(currentActivity, R.drawable.ic_heart_outline));
        }
    }

    public void countLikes(final String videoID,
                           final Action1<Likes> resultAction1) {
        final String url = currentActivity.getString(R.string.app_cms_like_count_api_url,
                appCMSMain.getApiBaseUrl(),
                videoID,
                appCMSMain.getInternalName());

        appCMSAddToWatchlistCall.countLike(url, getAuthToken(), apikey, resultAction1);

    }

    public void userLikeStatus(final ContentDatum data,
                               final Action1<LikeResult> resultAction1) {
        final String url = currentActivity.getString(R.string.app_cms_like_status_api_url,
                appCMSMain.getApiBaseUrl(),
                getLoggedInUser(),
                appCMSMain.getInternalName(),
                data.getGist().getId(),
                data.getGist().getContentType());

        appCMSAddToWatchlistCall.callLikeStatus(url, getAuthToken(), apikey, resultAction1);

    }

    public void userLikeAdd(final ContentDatum data,
                            final Action1<LikeResult> resultAction1) {
        final String url = currentActivity.getString(R.string.app_cms_like_post_api_url,
                appCMSMain.getApiBaseUrl(),
                getLoggedInUser(),
                appCMSMain.getInternalName(),
                data.getGist().getId(),
                data.getGist().getContentType());
        LikeRequest request = new LikeRequest();
        request.setContentId(data.getGist().getId());
        request.setContentType(data.getGist().getContentType());
        request.setTitle(data.getGist().getTitle());

        appCMSAddToWatchlistCall.callAddLike(url, getAuthToken(), apikey, request, resultAction1);

    }

    public void userUnlike(final ContentDatum data,
                           final Action1<LikeResult> resultAction1) {
        final String url = currentActivity.getString(R.string.app_cms_like_delete_api_url,
                appCMSMain.getApiBaseUrl(),
                data.getGist().getId(),
                appCMSMain.getInternalName(),
                getLoggedInUser());

        appCMSAddToWatchlistCall.deleteLike(url, getAuthToken(), apikey, resultAction1);

    }

    public void editWatchlist(final ContentDatum contentDatum,
                              final Action1<AppCMSAddToWatchlistResult> resultAction1,
                              boolean add,
                              boolean showToast,
                              Module moduleAPI) {
        if (!isNetworkConnected()) {
            if (!isUserSubscribed()) {
                showDialog(AppCMSPresenter.DialogType.NETWORK, null, false,
                        this::launchBlankPage,
                        null, null);
                return;
            }
            navigateToDownloadPage(appPreference.getDownloadPageId());
            return;
        }

        String originalObjectId = contentDatum.getGist().getOriginalObjectId();
        if (originalObjectId == null) {
            originalObjectId = contentDatum.getGist().getId();
        }

        final String url = currentActivity.getString(R.string.app_cms_edit_watchlist_api_url,
                appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName(),
                appPreference.getLoggedInUser(),
                originalObjectId,
                getLanguageParamForAPICall());

        //Firebase Successful Login Check on WatchList Add and Remove
        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_in));

        try {
            AddToWatchlistRequest request = new AddToWatchlistRequest();
            request.setUserId(appPreference.getLoggedInUser());
            /*if (contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_video))) {
                request.setContentType(currentActivity.getString(R.string.add_to_watchlist_content_type_video));
            }
            if (contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_series)) ||
                    contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_show))) {
                request.setContentType(currentActivity.getString(R.string.content_type_show).toLowerCase());
            }*/
            request.setContentType(contentDatum.getGist().getContentType());
            request.setPosition(1L);
            if (add) {
                request.setContentId(originalObjectId);
                request.setContentIds(originalObjectId);

                if (!temporaryWatchlist.contains(originalObjectId)) {
                    temporaryWatchlist.add(originalObjectId);
                }

            } else {
                request.setContentIds(originalObjectId);
                request.setContentId(originalObjectId);

                temporaryWatchlist.remove(originalObjectId);
            }


            appCMSAddToWatchlistCall.call(url, getAuthToken(), apikey,
                    addToWatchlistResult -> {
                        try {
                            if (addToWatchlistResult != null) {
                                Observable.just(addToWatchlistResult)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(resultAction1);
                                if (showToast) {
                                    if (add) {
                                        String addedToWatchlist = getLanguageResourcesFile().getUIresource(currentActivity.getResources().getString(R.string.added_to_watchlist));
                                        if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getAddedToWatchlistLabel() != null) {
                                            addedToWatchlist = moduleAPI.getMetadataMap().getAddedToWatchlistLabel();
                                        } else {
                                            addedToWatchlist = localisedStrings.getAddToWatchlistText();
                                        }
                                        displayCustomToast(addedToWatchlist);
                                    } else {
                                        String removedFromWatchlist = getLanguageResourcesFile().getUIresource(currentActivity.getResources().getString(R.string.removed_from_watchlist));
                                        if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getRemoveFromWatchlistCTA() != null) {
                                            removedFromWatchlist = moduleAPI.getMetadataMap().getRemoveFromWatchlistCTA();
                                        } else {
                                            removedFromWatchlist = localisedStrings.getRemoveFromWatchlistText();
                                        }
                                        displayCustomToast(removedFromWatchlist);
                                    }
                                }
                                populateFilmsInUserWatchlist();
                            } else {

                                if (add) {
                                    String failedToAddToWatchlist = getLanguageResourcesFile().getUIresource(currentActivity.getResources().getString(R.string.failed_to_add_to_watchlist));
                                    if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getFailedToAddToWatchlist() != null) {
                                        failedToAddToWatchlist = moduleAPI.getMetadataMap().getFailedToAddToWatchlist();
                                    } else {
                                        failedToAddToWatchlist = localisedStrings.getFailedToAddToWatchlistText();
                                    }
                                    displayCustomToast(failedToAddToWatchlist);
                                } else {
                                    String failedToRemovedFromWatchlist = getLanguageResourcesFile().getUIresource(currentActivity.getResources().getString(R.string.failed_to_remove_from_watchlist));
                                    if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getFailedToRemoveFromWatchlist() != null) {
                                        failedToRemovedFromWatchlist = moduleAPI.getMetadataMap().getFailedToRemoveFromWatchlist();
                                    } else {
                                        failedToRemovedFromWatchlist = localisedStrings.getFailedToRemoveFromWatchlistText();
                                    }
                                    displayCustomToast(failedToRemovedFromWatchlist);
                                }

                            }
                            stopLoader();
                        } catch (Exception e) {
                            //Log.e(TAG, "addToWatchlistContent: " + e.toString());
                        }
                    }, request, add);
        } catch (Exception e) {
            //Log.e(TAG, "Error editing watchlist: " + e.getMessage());
        }
    }

    public void editWatchlist(MetadataMap metadataMap, final ContentDatum contentDatum,
                              final Action1<AppCMSAddToWatchlistResult> resultAction1,
                              boolean add,
                              boolean showToast,
                              View view,
                              AppCMSUIKeyType componentKey) {
        if (!isNetworkConnected()) {
            if (!isUserSubscribed()) {
                showDialog(AppCMSPresenter.DialogType.NETWORK, null, false,
                        this::launchBlankPage,
                        null, null);
                return;
            }
            navigateToDownloadPage(appPreference.getDownloadPageId());
            return;
        }

        String originalObjectId = contentDatum.getGist().getOriginalObjectId();
        if (originalObjectId == null) {
            originalObjectId = contentDatum.getGist().getId();
        }
        String url;
        if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
            if (add) {
                url = currentActivity.getString(R.string.app_cms_edit_follows_api_url,
                        appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        appPreference.getLoggedInUser(),
                        originalObjectId);
            } else {
                url = currentActivity.getString(R.string.app_cms_remove_follows_api_url,
                        appCMSMain.getApiBaseUrl(),
                        originalObjectId,
                        appCMSMain.getInternalName(),
                        appPreference.getLoggedInUser());
            }

        } else {
            url = currentActivity.getString(R.string.app_cms_edit_watchlist_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    appPreference.getLoggedInUser(),
                    originalObjectId,
                    getLanguageParamForAPICall());
        }


        //Firebase Successful Login Check on WatchList Add and Remove
        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_in));

        try {
            AddToWatchlistRequest request = new AddToWatchlistRequest();
            request.setUserId(appPreference.getLoggedInUser());
            /*if (contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_video))) {
                request.setContentType(currentActivity.getString(R.string.add_to_watchlist_content_type_video));
            }
            if (contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_series)) ||
                    contentDatum.getGist().getContentType().contains(currentActivity.getString(R.string.content_type_show))) {
                request.setContentType(currentActivity.getString(R.string.content_type_show).toLowerCase());
            }*/
            request.setContentType(contentDatum.getGist().getContentType());
            request.setPosition(1L);
            request.setContentId(originalObjectId);
            if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
                if (add) {
                    if (!temporaryFollowlist.contains(originalObjectId)) {
                        temporaryFollowlist.add(originalObjectId);
                    }
                } else {
                    temporaryFollowlist.remove(originalObjectId);
                }
            } else {
                if (add) {
                    if (!temporaryWatchlist.contains(originalObjectId)) {
                        temporaryWatchlist.add(originalObjectId);
                    }
                } else {
                    temporaryWatchlist.remove(originalObjectId);
                }
            }


            appCMSAddToWatchlistCall.call(url, getAuthToken(), apikey,
                    addToWatchlistResult -> {
                        try {
                            if (addToWatchlistResult != null) {
                                Observable.just(addToWatchlistResult)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(resultAction1);
                                if (showToast) {
                                    if (add) {
                                        if (view != null) {
                                            updateWatchlistImage(view, currentActivity.getString(R.string.tag_full_heart), componentKey);
                                        }
                                        if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
                                            if (metadataMap != null && metadataMap.getAddedToBookmarksLabel() != null)
                                                displayCustomToast(metadataMap.getAddedToBookmarksLabel());
                                            else
                                                displayCustomToast(localisedStrings.getAddedToWatchlistLabelText());
                                        } else {
                                            displayCustomToast(localisedStrings.getAddedToWatchlistLabelText());
                                        }
                                    } else {
                                        if (view != null) {
                                            updateWatchlistImage(view, currentActivity.getString(R.string.tag_empty_heart), componentKey);
                                        }
                                        if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
                                            if (metadataMap != null && metadataMap.getRemovedFromBookmarks() != null)
                                                displayCustomToast(metadataMap.getRemovedFromBookmarks());
                                            else
                                                displayCustomToast(localisedStrings.getRemovedFromWatchlistText());

                                        } else {
                                            displayCustomToast(localisedStrings.getRemovedFromWatchlistText());
                                        }
                                    }
                                }
                                populateFilmsInUserWatchlist();
                            } else {

                                if (add) {
                                    if (view != null) {
                                        updateWatchlistImage(view, currentActivity.getString(R.string.tag_empty_heart), componentKey);
                                    }
                                    if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
                                        if (metadataMap != null && metadataMap.getFailedToAddToBookmarks() != null)
                                            displayCustomToast(metadataMap.getFailedToAddToBookmarks());
                                        else
                                            displayCustomToast(getLanguageResourcesFile().getStringValue(currentActivity.getResources().getString(R.string.failed_to_add_to_follow), followPage != null ? followPage.getPageName() : "Page!"));
                                    } else {
                                        displayCustomToast(localisedStrings.getFailedToAddToWatchlistText());
                                    }
                                } else {
                                    if (view != null) {
                                        updateWatchlistImage(view, currentActivity.getString(R.string.tag_full_heart), componentKey);
                                    }
                                    if (componentKey == AppCMSUIKeyType.PAGE_VIDEO_DETAIL_FAVOURITE_BUTTON_KEY) {
                                        if (metadataMap != null && metadataMap.getFailedToRemoveFromBookmarks() != null)
                                            displayCustomToast(metadataMap.getFailedToRemoveFromBookmarks());
                                        else
                                            displayCustomToast(getLanguageResourcesFile().getStringValue(currentActivity.getResources().getString(R.string.failed_to_remove_from_follow), followPage != null ? followPage.getPageName() : "Page!"));
                                    } else {
                                        displayCustomToast(localisedStrings.getFailedToRemoveFromWatchlistText());
                                    }
                                }

                            }
                            stopLoader();
                        } catch (Exception e) {
                            Log.e(TAG, "addToWatchlistContent: " + e);
                        }
                    }, request, add);
        } catch (Exception e) {
            //Log.e(TAG, "Error editing watchlist: " + e.getMessage());
        }
    }

    private void displayCustomToast(String toastMessage) {
        LayoutInflater inflater = currentActivity.getLayoutInflater();
        View layout = inflater.inflate(R.layout.custom_toast_layout,
                currentActivity.findViewById(R.id.custom_toast_layout_root));

        TextView customToastMessage = layout.findViewById(R.id.custom_toast_message);

        customToastMessage.setText(getLanguageResourcesFile().getUIresource(toastMessage));

        customToast = new Toast(currentActivity.getApplicationContext());
        customToast.setDuration(Toast.LENGTH_SHORT);
        customToast.setView(layout);
        customToast.setGravity(Gravity.FILL | Gravity.CENTER_VERTICAL, 0, 0);
        customToast.show();

    }

    public void cancelCustomToast() {
        if (customToast != null) {
            customToast.cancel();
        }
    }

    public void reStartDownloadedFile(String filmId, final Action1<UserVideoDownloadStatus> resultAction1,
                                      final ImageButton downloadStatus, int radiusDifference) {

        reStartDownload(filmId, resultAction1);
        updateDownloadingStatus(filmId, downloadStatus, this, resultAction1, appPreference.getLoggedInUser(), true, radiusDifference, appPreference.getLoggedInUser());


    }

    public synchronized void reStartDownload(String filmId, final Action1<UserVideoDownloadStatus> resultAction1) {
        realmController = RealmController.with(currentActivity);
        String userId = appPreference.getLoggedInUser();
        DownloadVideoRealm downloadVideoRealm = realmController.getDownloadByIdBelongstoUser(filmId, userId);
        if (downloadVideoRealm == null) {
            //System.out.println("  updated rows ar downloadVideoRealm null ");
            return;
        }
        try {


            DownloadStatus status = downloadVideoRealm.getDownloadStatus();
            int id = (int) downloadVideoRealm.getVideoId_DM();
            String mediaURL = downloadVideoRealm.getVideoWebURL();
            //boolean isValidURL = isValidURL(mediaURL);
            //System.out.println(" : " + id + " : " + status + " updated rows are =:- " + mediaURL);
            Gist gist = new Gist();
            gist.setId(downloadVideoRealm.getVideoId());
            ContentDatum contentDatum = new ContentDatum();
            contentDatum.setGist(gist);
            videoEntitlementDownload(contentDatum, new Action1<ContentDatum>() {
                @Override
                public void call(ContentDatum entitlementContentDatum) {
                    if (entitlementContentDatum != null && entitlementContentDatum.getGist() != null && entitlementContentDatum.getGist().getId() != null) {
                        String downloadURL = getDownloadURL(entitlementContentDatum);
                        try {
                            DownloadManager.Request downloadRequest = new DownloadManager.Request(Uri.parse(downloadURL.replace(" ", "%20")))
                                    .setTitle(entitlementContentDatum.getGist().getTitle())
                                    .setDescription(entitlementContentDatum.getGist().getDescription())
                                    .setAllowedOverRoaming(true)
                                    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                                    .setVisibleInDownloadsUi(false)
                                    .setShowRunningNotification(true);
                            long idDownload = getDownloadManager().enqueue(downloadRequest);
                            currentActivity.runOnUiThread(() -> {
                                DownloadVideoRealm editObj = realmController.getRealm()
                                        .copyFromRealm(realmController.getDownloadByIdBelongstoUser(downloadVideoRealm.getVideoId(), userId));
                                editObj.setVideoId_DM(idDownload);
                                editObj.setVideoWebURL(downloadURL);
                                editObj.setDownloadStatus(DownloadStatus.STATUS_RUNNING);
                                realmController.updateDownload(editObj);
                                appCMSUserDownloadVideoStatusCall.call(filmId, AppCMSPresenter.this, resultAction1,
                                        appPreference.getLoggedInUser());

                            });
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void removeDownloadedFile(String filmId, final Action1<UserVideoDownloadStatus> resultAction1) {
        removeDownloadedFile(filmId);
        appCMSUserDownloadVideoStatusCall.call(filmId, this, resultAction1, appPreference.getLoggedInUser());
    }

    @SuppressWarnings("ConstantConditions")
    private void removeDownloadedFile(String filmId) {
        realmController = RealmController.with(currentActivity);
        List<DownloadVideoRealm> downloadVideoRealmList = realmController.getDownloadsById(filmId);
        if (downloadVideoRealmList == null && downloadVideoRealmList.get(0) == null) {
            //
        } else {
            DownloadVideoRealm downloadVideoRealm = null;
            for (DownloadVideoRealm downloadVideoRealm1 : downloadVideoRealmList) {
                if (downloadVideoRealm1.getUserId().trim().equalsIgnoreCase(appPreference.getLoggedInUser().trim())) {
                    downloadVideoRealm = downloadVideoRealm1;
                }
            }
            if (downloadVideoRealm == null) {
                return;
            }
            /*else if (downloadVideoRealm != null && downloadVideoRealmList.size() >= 1) {
                realmController.removeFromDB(downloadVideoRealm, deleteCCFileActionListener);
                return;
            }*/
            downloadManager.remove(downloadVideoRealm.getVideoId_DM());
            downloadManager.remove(downloadVideoRealm.getVideoThumbId_DM());
            downloadManager.remove(downloadVideoRealm.getPosterThumbId_DM());
            downloadManager.remove(downloadVideoRealm.getSubtitlesId_DM());
            realmController.removeFromDB(downloadVideoRealm, deleteCCFileActionListener);
        }
    }

    public boolean isDownloadOfflineInProgress() {
        HashMap<String, Download> offlineDownloads = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getAllOfflineDownloads();
        Iterator hmIterator = offlineDownloads.entrySet().iterator();
        try {
            while (hmIterator.hasNext()) {
                Map.Entry mapElement = (Map.Entry) hmIterator.next();
                Download download = ((Download) mapElement.getValue());
                if (download.state == Download.STATE_DOWNLOADING || download.state == Download.STATE_QUEUED) {
                    return true;
                }
            }
        } catch (Exception e) {
        }
        return false;
    }

    private void removeDownloadAndLogout() {
        realmController = RealmController.with(currentActivity);
        Intent pageLoadingActionIntent = new Intent(AppCMSPresenter.PRESENTER_PAGE_LOADING_ACTION);
        pageLoadingActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        getCurrentActivity().sendBroadcast(pageLoadingActionIntent);
        for (DownloadVideoRealm downloadVideoRealm :
                realmController.getAllUnfinishedDownloades(appPreference.getLoggedInUser())) {
            removeDownloadedFile(downloadVideoRealm.getVideoId());
        }

        try {
            HashMap<String, Download> offlineDownloads = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getAllOfflineDownloads();
            Iterator hmIterator = offlineDownloads.entrySet().iterator();
            try {
                while (hmIterator.hasNext()) {
                    Map.Entry mapElement = (Map.Entry) hmIterator.next();
                    Download download = ((Download) mapElement.getValue());
                    if (download.state == Download.STATE_DOWNLOADING || download.state == Download.STATE_QUEUED) {
                        DownloadService.sendRemoveDownload(currentContext, OfflineDownloadService.class, download.request.id, /* foreground= */ false);
                    }
                }
            } catch (Exception e) {
            }
        } catch (Exception e) {
        }
        cancelInternalEvents();
        logout();
    }

    public NavigationPrimary findLanguage() {

        for (int i = 0; i < navigation.getNavigationPrimary().size(); i++) {
            String navigationTitleEN = getNavigationTitleForEN(navigation.getNavigationPrimary().get(i).getLocalizationMap());
            if (navigation.getNavigationPrimary().get(i).getDisplayedPath().toLowerCase().contains("Language".toLowerCase()) ||
                    navigation.getNavigationPrimary().get(i).getDisplayedPath().toLowerCase().contains("Language Settings".toLowerCase()) ||
                    navigationTitleEN != null && navigationTitleEN.toLowerCase().contains("LANGUAGE".toLowerCase())) {
                return navigation.getNavigationPrimary().get(i);
            }
        }
        return null;
    }

    public void showLanguageScreen(String pageID, String pageTitle) {

        if (getLanguageArrayList() == null || 0 == getLanguageArrayList().size()) {
            return;
        }
        if (navigationPages.get(pageID) == null) {
            getLanguageSettingPage(pageID, pageTitle);
        } else {
            AppCMSPageAPI apiData = new AppCMSPageAPI();
            List<Module> moduleList = new ArrayList<>();
            Module module = new Module();

            List<ContentDatum> contentData = new ArrayList<>();
            ContentDatum contentDatumLocal = new ContentDatum();

            List<Language> languages = getLanguageArrayList();

            contentDatumLocal.setLanguages(languages);

            contentData.add(contentDatumLocal);
            module.setContentData(contentData);

            moduleList.add(module);
            apiData.setModules(moduleList);

            launchDownloadQualityActivity(getAppCMSDownloadQualityBinder(currentActivity,
                    navigationPages.get(pageID),
                    apiData,
                    pageID,
                    pageTitle,
                    pageTitle,
                    loadFromFile,
                    true,
                    true,
                    false,
                    null, null));
        }
    }

    private void getLanguageSettingPage(String pageID, String pageTitle) {
        showLoader();
        MetaPage metaPage = pageIdToMetaPageMap.get(pageID);
        if (metaPage != null) {
            getAppCMSPage(createPageUiUrl(metaPage),
                    appCMSPageUIResult -> {
                        stopLoader();
                        if (appCMSPageUIResult != null) {
                            navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                            String action = pageNameToActionMap.get(metaPage.getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, appCMSPageUIResult);
                            }
                            showLanguageScreen(pageID, pageTitle);

                        }
                    },
                    loadFromFile,
                    false);
        }
    }

    /**
     * This function will be called in two cases
     * 1) When 1st time downloading start
     * 2) From settings option any time
     *
     * @param entitlementContentDatum pass null from setting screen button / This value could be usefull
     *                                in future we are going to implement the MPEG rendition quality
     *                                dynamically.
     * @param resultAction1           pass null from setting screen button
     */
    public void showDownloadQualityScreen(final ContentDatum entitlementContentDatum,
                                          final Action1<UserVideoDownloadStatus> resultAction1) {
        try {
            downloadContentDatumAfterPermissionGranted = null;
            downloadResultActionAfterPermissionGranted = null;

            //Send Firebase Analytics when user is subscribed and user is Logged In
            sendFirebaseLoginSubscribeSuccess();
            if (!hasWriteExternalStoragePermission()) {
                requestDownloadQualityScreen = true;
                askForPermissionToDownloadToExternalStorage(true,
                        entitlementContentDatum,
                        resultAction1);
            } else {
                if (navigationPages.get(downloadQualityPage.getPageId()) == null) {
                    showLoader();
                    MetaPage metaPage = pageIdToMetaPageMap.get(downloadQualityPage.getPageId());
                    if (metaPage != null) {
                        getAppCMSPage(createPageUiUrl(metaPage),
                                appCMSPageUIResult -> {
                                    stopLoader();
                                    if (appCMSPageUIResult != null) {
                                        navigationPages.put(downloadQualityPage.getPageId(), appCMSPageUIResult);
                                        String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                        if (action != null && actionToPageMap.containsKey(action)) {
                                            actionToPageMap.put(action, appCMSPageUIResult);
                                        }
                                        showDownloadQualityScreen(entitlementContentDatum, resultAction1);
                                    }
                                },
                                loadFromFile,
                                false);
                    }
                } else {
                    if (getPageAPILruCache().get(downloadQualityPage.getPageId()) == null) {
                        showLoader();
                        String apiUrl = getApiUrl(true,
                                false,
                                false,
                                false,
                                null,
                                appCMSMain.getApiBaseUrl(),
                                pageIdToPageAPIUrlMap.get(downloadQualityPage.getPageId()),
                                appCMSMain.getInternalName(),
                                downloadQualityPage.getPageId(),
                                false);
                        getPageIdContent(apiUrl, downloadQualityPage.getPageId(), null, false, false, new AppCMSPageAPIAction(false,
                                false,
                                false,
                                navigationPages.get(downloadQualityPage.getPageId()),
                                null,
                                getPageId(navigationPages.get(downloadQualityPage.getPageId())),
                                null,
                                null,
                                false,
                                false,
                                null) {
                            @Override
                            public void call(AppCMSPageAPI appCMSPageAPI) {
                                stopLoader();
                                Module module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(navigationPages.get(downloadQualityPage.getPageId()).getModuleList(), getCurrentContext().getString(R.string.ui_block_download_settings_01)), appCMSPageAPI);
                                AppCMSPageAPI apiData = new AppCMSPageAPI();
                                List<Module> moduleList = new ArrayList<>();
                                appPreference.getUserDownloadQualityPref();
                                if (module == null) {
                                    module = new Module();
                                }
                                List<ContentDatum> contentData = module.getContentData();
                                if (contentData == null)
                                    contentData = new ArrayList<>();
                                ContentDatum contentDatumLocal = new ContentDatum();
                                StreamingInfo streamingInfo = new StreamingInfo();
                                VideoAssets videoAssets = new VideoAssets();
                                List<Mpeg> mpegs = new ArrayList<>();

                                String[] renditionValueArray = new String[]{localisedStrings.getDownloadHighText(), localisedStrings.getDowloadMediumText(), localisedStrings.getDownloadLowText()};

                                for (String renditionValue : renditionValueArray) {
                                    Mpeg mpeg = new Mpeg();
                                    mpeg.setRenditionValue(renditionValue);
                                    mpegs.add(mpeg);
                                }
                                videoAssets.setMpeg(mpegs);
                                streamingInfo.setVideoAssets(videoAssets);
                                contentDatumLocal.setStreamingInfo(streamingInfo);
                                contentData.add(contentDatumLocal);
                                module.setContentData(contentData);
                                moduleList.add(module);
                                apiData.setModules(moduleList);
                                getPageAPILruCache().put(downloadQualityPage.getPageId(), apiData);
                                launchDownloadQualityActivity(getAppCMSDownloadQualityBinder(currentActivity,
                                        navigationPages.get(downloadQualityPage.getPageId()),
                                        getPageAPILruCache().get(downloadQualityPage.getPageId()),
                                        downloadQualityPage.getPageId(),
                                        downloadQualityPage.getPageFunction(),
                                        downloadQualityPage.getPageFunction(),
                                        loadFromFile,
                                        true,
                                        true,
                                        false,
                                        entitlementContentDatum, resultAction1));
                            }
                        });
                    } else {
                        launchDownloadQualityActivity(getAppCMSDownloadQualityBinder(currentActivity,
                                navigationPages.get(downloadQualityPage.getPageId()),
                                getPageAPILruCache().get(downloadQualityPage.getPageId()),
                                downloadQualityPage.getPageId(),
                                downloadQualityPage.getPageFunction(),
                                downloadQualityPage.getPageFunction(),
                                loadFromFile,
                                true,
                                true,
                                false,
                                entitlementContentDatum, resultAction1));
                    }
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "Failed to display Download Quality Screen");
            e.printStackTrace();
        }
    }

    /**
     * Implementation of download manager gives us facility of Async downloading of multiple video
     * Its pre built feature of the download manager
     * <p>
     * <ul>
     * <li>Implementing pause download will require custominzation in download process </li>
     * <li>Same goes for resume download </li>
     * </ul>
     * <p>
     * Videos will be stored in Downloads folder under our app dir by this way our apps video
     * will not be visible to other media app
     * <p>
     * In Future development we may try to add feature like encryption of the video.
     *
     * @param contentDatum
     * @param resultAction1 development this is need to change in Enum as we may perform options Add/Pause/Resume/Delete from here onwards
     */
    public synchronized void editDownloadFromPlaylist(final ContentDatum contentDatum,
                                                      final Action1<UserVideoDownloadStatus> resultAction1,
                                                      boolean isFromPlaylistDownload) {
        if (!appPreference.getDownloadOverCellularEnabled() && appPreference.getActiveNetworkType() == ConnectivityManager.TYPE_MOBILE) {
            stopDownloadProgressDialog();
            showDialog(DialogType.DOWNLOAD_VIA_MOBILE_DISABLED,
                    localisedStrings.getCellularDisableText(),
                    false,
                    null,
                    null, null);
            return;
        }

        downloadContentDatumAfterPermissionGranted = null;
        downloadResultActionAfterPermissionGranted = null;

        //Send Firebase Analytics when user is subscribed and user is Logged In
        sendFirebaseLoginSubscribeSuccess();

        if (!hasWriteExternalStoragePermission()) {
            requestDownloadQualityScreen = false;
            askForPermissionToDownloadToExternalStorage(true,
                    contentDatum,
                    resultAction1);
        } else if (!FileUtils.isMemorySpaceAvailable(currentActivity, appPreference)) {
            stopDownloadProgressDialog();
            showDialog(DialogType.DOWNLOAD_FAILED, localisedStrings.getDownloadSpaceText(), false, null, null, null);
        } else {
            // Uncomment to allow for Pause/Resume
/*            if (isVideoDownloadRunning(contentDatum)) {
                if (!pauseDownload(contentDatum)) {
                    Log.e(TAG, "Failed to pause download");
                }
                return;
            } else if (isVideoDownloadPaused(contentDatum)) {
                if (!resumeDownload(contentDatum)) {
                    Log.e(TAG, "Failed to resume download");
                }
            }*/
            String downloadURL = "";

            if (contentDatum.getGist() != null &&
                    contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().toLowerCase().contains(currentActivity.getString(R.string.media_type_audio).toLowerCase()) &&
                    contentDatum.getGist().getContentType() != null &&
                    contentDatum.getGist().getContentType().toLowerCase().contains(currentActivity.getString(R.string.content_type_audio).toLowerCase())) {
                downloadURL = contentDatum.getStreamingInfo().getAudioAssets().getMp3().getUrl();
            } else {
                downloadURL = getDownloadURL(contentDatum);
            }
            new AsyncTask<String, Void, Long>() {
                String downloadURL = "";

                @Override
                protected Long doInBackground(String... strings) {
                    long file_size = 0L;
                    try {
                        downloadURL = strings[0];

                        URL url = new URL(downloadURL);
                        URLConnection urlConnection = url.openConnection();
                        urlConnection.connect();
                        //file_size =urlConnection.getContentLength();  // some of the video url length value go over the max limit of int for 720p  rendition
                        file_size = Long.parseLong(urlConnection.getHeaderField("content-length"));
                        file_size = ((file_size / 1000) / 1000);

                    } catch (Exception e) {
                        Log.e(TAG, "Error trying to download: " + e.getMessage());
                    }
                    return file_size;
                }

                @Override
                protected void onPostExecute(Long aLong) {
                    super.onPostExecute(aLong);
                    long file_size = aLong;

                    if (isVideoDownloadedByUser(contentDatum.getGist().getId())) {
                        if (!isFromPlaylistDownload) {
                            showToast(localisedStrings.getAlreadyDownloadedText(contentDatum.getGist().getTitle()), Toast.LENGTH_LONG);
                            stopDownloadProgressDialog();
                        }
                    } else if (isVideoDownloadedByOtherUser(contentDatum.getGist().getId())) {
                        stopDownloadProgressDialog();
                        createLocalCopyForUser(contentDatum, resultAction1);
                    } else if (FileUtils.getMegabytesAvailable(currentActivity, appPreference.getUserDownloadLocationPref()) > file_size) {
                        try {
                            if (contentDatum.getGist() != null &&
                                    contentDatum.getGist().getMediaType() != null &&
                                    contentDatum.getGist().getMediaType().toLowerCase().contains(currentActivity.getString(R.string.media_type_audio).toLowerCase()) &&
                                    contentDatum.getGist().getContentType() != null &&
                                    contentDatum.getGist().getContentType().toLowerCase().contains(currentActivity.getString(R.string.content_type_audio).toLowerCase())) {
                                downloadMediaFile(contentDatum, downloadURL, 0, isFromPlaylistDownload);
                                appCMSUserDownloadVideoStatusCall.call(contentDatum.getGist().getId(), AppCMSPresenter.this,
                                        resultAction1, appPreference.getLoggedInUser());

                            } else {
                                startDownload(contentDatum,
                                        resultAction1, isFromPlaylistDownload, null);
                            }

//                        startNextDownload = false;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        stopDownloadProgressDialog();
                        currentActivity.runOnUiThread(() -> showDialog(DialogType.DOWNLOAD_FAILED, localisedStrings.getDownloadSpaceText(), false, null, null, null));
                    }
                }
            }.execute(downloadURL);


        }
    }

    public ContentDatum handleTagData(ContentDatum contentDatum) {
        List<Tag> tags = contentDatum.getTags();
        String durationAndCategory = "";
        String brandAndTitle = "";
        if (tags != null) {

            for (int i = 0; i < tags.size(); i++) {
                if (tags.get(i) != null &&
                        tags.get(i).getTagType() != null &&
                        tags.get(i).getTitle() != null) {
                    if (tags.get(i).getTagType().equals("classDuration")) {
                        durationAndCategory = tags.get(i).getTitle().replaceAll("\\s+", "").replaceAll("min", "M").replaceAll("MIN", "M");
                        if (!durationAndCategory.equalsIgnoreCase("0M") && durationAndCategory.length() != 0)
                            durationAndCategory = durationAndCategory + " • " + contentDatum.getGist().getPrimaryCategory().getTitle();
                    }
                    if (durationAndCategory.length() == 0 && contentDatum.getGist().getPrimaryCategory() != null && contentDatum.getGist().getPrimaryCategory().getTitle() != null)
                        durationAndCategory = contentDatum.getGist().getPrimaryCategory().getTitle();
                    if (tags.get(i).getTagType().equals("brand")) {
                        brandAndTitle = tags.get(i).getTitle();
                    }
                }
            }
        }
        contentDatum.getGist().setDurationCategory(durationAndCategory);
        if (contentDatum.getGist().getPersons() != null
                && contentDatum.getGist().getPersons().size() > 0
                && contentDatum.getGist().getPersons().get(0) != null
                && contentDatum.getGist().getPersons().get(0).getTitle() != null) {
            if (brandAndTitle.length() > 0)
                brandAndTitle = brandAndTitle + " with " + contentDatum.getGist().getPersons().get(0).getTitle();
        }
        contentDatum.getGist().setInstructorTitle(brandAndTitle);
        return contentDatum;
    }

    @WorkerThread
    public synchronized void editDownload(final ContentDatum entitledContentDatum, final ContentDatum contentDatum,
                                          final Action1<UserVideoDownloadStatus> resultAction1,
                                          Action1<Boolean> downloadNotProcessedAction, View view) {
        if (!appPreference.getDownloadOverCellularEnabled() && appPreference.getActiveNetworkType() == ConnectivityManager.TYPE_MOBILE) {
            showDialog(DialogType.DOWNLOAD_VIA_MOBILE_DISABLED,
                    localisedStrings.getCellularDisableText(),
                    false,
                    () -> downloadNotProcessedAction.call(false),
                    null, null);
            return;
        }
        setShowDatum(contentDatum);

        downloadContentDatumAfterPermissionGranted = null;
        downloadResultActionAfterPermissionGranted = null;

        //Send Firebase Analytics when user is subscribed and user is Logged In
        sendFirebaseLoginSubscribeSuccess();
        if (isNewsTemplate() && contentDatum != null && contentDatum.getStreamingInfo() == null && entitledContentDatum != null && entitledContentDatum.getStreamingInfo() != null) {
            contentDatum.setStreamingInfo(entitledContentDatum.getStreamingInfo());
        }

        if (!hasWriteExternalStoragePermission()) {
            requestDownloadQualityScreen = false;
            askForPermissionToDownloadToExternalStorage(true,
                    contentDatum,
                    resultAction1);
        } else if (!FileUtils.isMemorySpaceAvailable(currentActivity, appPreference)) {
            stopDownloadProgressDialog();
            showDialog(DialogType.DOWNLOAD_FAILED, localisedStrings.getDownloadSpaceText(), false, null, null, null);
        } else {
            showDownloadProgressDialog();
            try {
                getMediaDownloadUrl(entitledContentDatum, contentDatum, new Action1<String>() {
                    @Override
                    public void call(String downloadUrl) {
                        getFileToBeDownloadedSize(downloadUrl, new Action1<Long>() {
                            @Override
                            public void call(Long fileSize) {
                                new Thread() {
                                    @Override
                                    public void run() {
                                        super.run();
                                        if (isVideoDownloadedByUser(contentDatum.getGist().getId())) {
                                            stopDownloadProgressDialog();
                                            showToast(localisedStrings.getAlreadyDownloadedText(contentDatum.getGist().getTitle()), Toast.LENGTH_LONG);
                                        } else if (isVideoDownloadedByOtherUser(contentDatum.getGist().getId())) {
                                            createLocalCopyForUser(contentDatum, resultAction1);
                                            stopDownloadProgressDialog();
                                        } else if (FileUtils.getMegabytesAvailable(currentActivity, appPreference.getUserDownloadLocationPref()) > fileSize) {
                                            try {
                                                setUserAbleToDownload(true);
                                                if (view != null)
                                                    updateDownloadView(view);
                                                if (contentDatum.getGist() != null &&
                                                        contentDatum.getGist().getMediaType() != null &&
                                                        contentDatum.getGist().getMediaType().toLowerCase().contains(currentContext.getString(R.string.media_type_audio).toLowerCase()) &&
                                                        contentDatum.getGist().getContentType() != null &&
                                                        contentDatum.getGist().getContentType().toLowerCase().contains(currentContext.getString(R.string.content_type_audio).toLowerCase())) {
                                                    downloadMediaFile(contentDatum, downloadUrl, 0, false);
                                                    appCMSUserDownloadVideoStatusCall.call(contentDatum.getGist().getId(), AppCMSPresenter.this,
                                                            resultAction1, appPreference.getLoggedInUser());
                                                } else {
                                                    downloadAutoPlayPage(contentDatum);
                                                    startDownload(contentDatum,
                                                            resultAction1, false, downloadNotProcessedAction);
                                                }
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                        } else {
                                            stopDownloadProgressDialog();
                                            currentActivity.runOnUiThread(() -> showDialog(DialogType.DOWNLOAD_FAILED, localisedStrings.getDownloadSpaceText(), false, null, null, null));
                                        }
                                    }
                                }.start();

                            }
                        });
                    }
                });
            } catch (Exception e) {
                Log.e(TAG, "Error trying to download: " + e.getMessage());
            }
        }
    }

    public void getMediaDownloadUrl(final ContentDatum entitledContentDatum, ContentDatum contentDatum,
                                    Action1<String> mediaURL) {
        if (contentDatum.getGist() != null &&
                contentDatum.getGist().getMediaType() != null &&
                contentDatum.getGist().getMediaType().toLowerCase().contains(currentContext.getString(R.string.media_type_audio).toLowerCase()) &&
                contentDatum.getGist().getContentType() != null &&
                contentDatum.getGist().getContentType().toLowerCase().contains(currentContext.getString(R.string.content_type_audio).toLowerCase()) &&
                contentDatum.getStreamingInfo() != null &&
                contentDatum.getStreamingInfo().getAudioAssets() != null) {
            mediaURL.call(contentDatum.getStreamingInfo().getAudioAssets().getMp3().getUrl());
        } else {
            String downloadUrl = getDownloadURL(entitledContentDatum);
            if (downloadUrl != null)
                mediaURL.call(downloadUrl);
            else {
                stopLoader();
                stopDownloadProgressDialog();
                showDialog(AppCMSPresenter.DialogType.VIDEO_NOT_AVAILABLE,
                        localisedStrings.getDownloadUnavailableMsg(),
                        false,
                        null,
                        null, null);
            }
            /*showLoader();
            refreshVideoData(contentDatum.getGist().getId(), updateContentDatum -> {
                stopLoader();
                if (updateContentDatum != null &&
                        updateContentDatum.getGist() != null &&
                        updateContentDatum.getGist().getId() != null) {
                    mediaURL.call(getDownloadURL(updateContentDatum));
                }
            }, null, false, false, null);*/
        }
    }

    public void getFileToBeDownloadedSize(String downloadUrl, Action1<Long> fileSize) {
        try {
            URL url = new URL(downloadUrl);
            URLConnection urlConnection = url.openConnection();
            urlConnection.connect();
            long[] file_size = {0L};
            //file_size =urlConnection.getContentLength();  // some of the video url length value go over the max limit of int for 720p  rendition
            file_size[0] = Long.parseLong(urlConnection.getHeaderField("content-length"));
            file_size[0] = ((file_size[0] / 1000) / 1000);
            fileSize.call(file_size[0]);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean resumeDownload(ContentDatum contentDatum) {
        if (currentContext != null &&
                contentDatum != null &&
                contentDatum.getGist() != null &&
                !TextUtils.isEmpty(contentDatum.getGist().getTitle())) {
            ContentValues pauseDownload = new ContentValues();
            pauseDownload.put("control", 0);

            int updatedRows = 0;
            try {
                updatedRows = currentContext.getContentResolver().update(Uri.parse("content://downloads/my_downloads"),
                        pauseDownload,
                        "title=?",
                        new String[]{contentDatum.getGist().getTitle()});
            } catch (Exception e) {
                Log.e(TAG, "Failed to update control for downloading video");
            }

            return 0 < updatedRows;
        }
        return false;
    }

    private boolean pauseDownload(ContentDatum contentDatum) {
        if (currentContext != null &&
                contentDatum != null &&
                contentDatum.getGist() != null &&
                !TextUtils.isEmpty(contentDatum.getGist().getTitle())) {
            ContentValues pauseDownload = new ContentValues();
            pauseDownload.put("control", 1);

            int updatedRows = 0;

            try {
                updatedRows = currentContext.getContentResolver().update(Uri.parse("content://downloads/my_downloads"),
                        pauseDownload,
                        "title=?",
                        new String[]{contentDatum.getGist().getTitle()});
            } catch (Exception e) {
                Log.e(TAG, "Failed to update control for downloading video");
            }
            return 0 < updatedRows;
        }
        return false;
    }

    private int getVideoDownloadStatus(ContentDatum contentDatum) {
        if (contentDatum != null && contentDatum.getGist() != null) {
            Cursor c = null;
            try {

                realmController = RealmController.with(currentActivity);
                DownloadManager.Query query = new DownloadManager.Query();
                long videoId = realmController.getDownloadByIdBelongstoUser(contentDatum.getGist().getId(),
                        appPreference.getLoggedInUser()).getVideoId_DM();
                query.setFilterById(videoId);
                c = downloadManager.query(query);
                if (c != null && c.moveToFirst()) {
                    return c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));
                }
            } catch (Exception e) {

            } finally {
                if (c != null) {
                    c.close();
                }
            }
        }
        return DownloadManager.STATUS_PENDING;
    }

    private boolean isVideoDownloadRunning(ContentDatum contentDatum) {
        return getVideoDownloadStatus(contentDatum) ==
                DownloadManager.STATUS_RUNNING;
    }

    private boolean isVideoDownloadPaused(ContentDatum contentDatum) {
        return getVideoDownloadStatus(contentDatum) ==
                DownloadManager.STATUS_PAUSED;
    }

    private void createLocalCopyForUser(ContentDatum contentDatum,
                                        Action1<UserVideoDownloadStatus> resultAction1) {
        currentActivity.runOnUiThread(() -> {
            showToast(localisedStrings.getAlreadyDownloadedOtherUserText(contentDatum.getGist().getTitle()), Toast.LENGTH_LONG);
            realmController = RealmController.with(currentActivity);
            DownloadVideoRealm videoDownloaded = getVideoDownloadedByOtherUser(contentDatum.getGist().getId());
            DownloadVideoRealm downloadVideoRealm = videoDownloaded.createCopy();
            try {
                downloadVideoRealm.setVideoIdDB(getStreamingId(videoDownloaded.getVideoTitle()));
            } catch (Exception e) {
                //Log.e(TAG, e.getMessage());
                downloadVideoRealm.setVideoIdDB(videoDownloaded.getVideoId() + getCurrentTimeStamp());
            }
            downloadVideoRealm.setWatchedTime(contentDatum.getGist().getWatchedTime());
            downloadVideoRealm.setUserId(appPreference.getLoggedInUser());
            realmController.addDownload(downloadVideoRealm);
            appCMSUserDownloadVideoStatusCall.call(videoDownloaded.getVideoId(), this,
                    resultAction1, appPreference.getLoggedInUser());
        });
    }

    private void createLocalEntry(long enqueueId,
                                  long thumbEnqueueId,
                                  long posterEnqueueId,
                                  long ccEnqueueId,
                                  final ContentDatum contentDatum,
                                  String downloadURL) {
        DownloadVideoRealm downloadVideoRealm = new DownloadVideoRealm();
        String artist = "";
        String director = "";
        String album_year = "";
        if (contentDatum != null && contentDatum.getGist() != null) {
            downloadVideoRealm.setVideoThumbId_DM(thumbEnqueueId);
            downloadVideoRealm.setPosterThumbId_DM(posterEnqueueId);
            downloadVideoRealm.setVideoId_DM(enqueueId);
            if (contentDatum.getGist().getPrimaryCategory() != null && contentDatum.getGist().getPrimaryCategory().getTitle() != null)
                downloadVideoRealm.setGenre(contentDatum.getGist().getPrimaryCategory().getTitle());
            if (contentDatum.getGist().getId() != null) {
               /* String videoId = contentDatum.getGist().getOriginalObjectId();
                if(videoId == null) {
                    videoId = contentDatum.getGist().getId();
                }*/
                downloadVideoRealm.setVideoId(contentDatum.getGist().getId());
//                downloadVideoRealm.setVideoImageUrl(getPngPosterPath(contentDatum.getGist().getId()));
//                downloadVideoRealm.setPosterFileURL(getPngPosterPath(contentDatum.getGist().getId()));
                downloadVideoRealm.setVideoImageUrl(downloadedMediaLocalURI(thumbEnqueueId));
                downloadVideoRealm.setPosterFileURL(downloadedMediaLocalURI(posterEnqueueId));
            }
            if (contentDatum.getGist().getTitle() != null) {
                downloadVideoRealm.setVideoTitle(contentDatum.getGist().getTitle());
            }


            if (contentDatum.getCreditBlocks() != null && contentDatum.getCreditBlocks().size() > 0) {

                artist = getArtistNameFromCreditBlocks(contentDatum.getCreditBlocks());
                director = getDirectorNameFromCreditBlocks(contentDatum.getCreditBlocks());
                downloadVideoRealm.setArtistName(artist);
                downloadVideoRealm.setDirectorName(director);

            }
            if (contentDatum.getGist().getYear() != null) {
                album_year = contentDatum.getGist().getYear();
                downloadVideoRealm.setSongYear(album_year);
            }
            if (contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().equalsIgnoreCase(currentContext.getResources().getString(R.string.media_type_audio))) {
                downloadVideoRealm.setVideoDescription(artist);
            } else if (contentDatum.getGist().getDescription() != null) {
                downloadVideoRealm.setVideoDescription(contentDatum.getGist().getDescription());
            }
            try {
                if (!TextUtils.isEmpty(downloadVideoRealm.getVideoTitle())) {
                    downloadVideoRealm.setVideoIdDB(getStreamingId(downloadVideoRealm.getVideoTitle()));
                } else if (!TextUtils.isEmpty(contentDatum.getGist().getId())) {
                    downloadVideoRealm.setVideoIdDB(contentDatum.getGist().getId() + getCurrentTimeStamp());
                }
            } catch (Exception e) {
                //Log.e(TAG, e.getMessage());
                downloadVideoRealm.setVideoIdDB(downloadVideoRealm.getVideoId() + getCurrentTimeStamp());
            }

            downloadVideoRealm.setLocalURI(downloadedMediaLocalURI(enqueueId));

            if (ccEnqueueId != 0 && contentDatum.getGist().getId() != null) {
                downloadVideoRealm.setSubtitlesId_DM(ccEnqueueId);
                downloadVideoRealm.setSubtitlesFileURL(getClosedCaptionsPath(contentDatum.getGist().getId()));
            }
            if (contentDatum.getGist().getVideoImageUrl() != null) {
                downloadVideoRealm.setVideoFileURL(contentDatum.getGist().getVideoImageUrl()); //This change has been done due to making thumb image available at time of videos are downloading.
            }
            if (contentDatum.getPlanMonetizationModel() != null)
                downloadVideoRealm.setPlanMonetizationModel(contentDatum.getPlanMonetizationModel());
            else {
                if (contentDatum.getSubscriptionPlans() != null && contentDatum.getSubscriptionPlans().size() > 0) {
                    if (contentTypeChecker.isContentTVOD(contentDatum.getSubscriptionPlans()))
                        downloadVideoRealm.setPlanMonetizationModel(currentContext.getString(R.string.pricing_model_TVOD));
                    if (contentTypeChecker.isContentSVOD(contentDatum.getSubscriptionPlans()))
                        downloadVideoRealm.setPlanMonetizationModel(currentContext.getString(R.string.pricing_model_SVOD));
                    if (contentTypeChecker.isContentAVOD(contentDatum.getSubscriptionPlans()))
                        downloadVideoRealm.setPlanMonetizationModel(currentContext.getString(R.string.pricing_model_AVOD));
                    if (contentTypeChecker.isContentFree(contentDatum.getSubscriptionPlans()))
                        downloadVideoRealm.setPlanMonetizationModel(currentContext.getString(R.string.pricing_model_FREE));
                    if (contentTypeChecker.isContentTVE(contentDatum.getSubscriptionPlans()))
                        downloadVideoRealm.setPlanMonetizationModel(currentContext.getString(R.string.pricing_model_TVE));
                }
            }
            downloadVideoRealm.setPlayListName(contentDatum.getPlayListName());
            downloadVideoRealm.setVideoWebURL(downloadURL);
            downloadVideoRealm.setDownloadDate(System.currentTimeMillis());
            downloadVideoRealm.setVideoDuration(contentDatum.getGist().getRuntime());
            downloadVideoRealm.setWatchedTime(contentDatum.getGist().getWatchedTime());
            downloadVideoRealm.setContentType(contentDatum.getGist().getContentType());
            downloadVideoRealm.setMediaType(contentDatum.getGist().getMediaType());
//            downloadVideoRealm.setTransactionEndDate(1535816891000L);
            downloadVideoRealm.setRentStartWatchTime(0l);
            downloadVideoRealm.setRentStartTimeSyncedWithServer(false);
            if (contentDatum.getGist().getTransactionEndDate() > 0) {
                downloadVideoRealm.setTransactionEndDate(contentDatum.getGist().getTransactionEndDate());

            } else if (contentDatum.getGist().getTransactionDateEpoch() > 0) {
                downloadVideoRealm.setTransactionEndDate(contentDatum.getGist().getTransactionDateEpoch());

            }
            downloadVideoRealm.setRentalPeriod(contentDatum.getGist().getRentalPeriod());

            downloadVideoRealm.setSubscriptionType(contentDatum.getGist().getPurchaseType());
            downloadVideoRealm.setDurationCategory(contentDatum.getGist().getDurationCategory());
            downloadVideoRealm.setInstructorTitle(contentDatum.getGist().getInstructorTitle());

            downloadVideoRealm.setPermalink(contentDatum.getGist().getPermalink());
            downloadVideoRealm.setDownloadStatus(DownloadStatus.STATUS_PENDING);
            downloadVideoRealm.setUserId(appPreference.getLoggedInUser());
            if (contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().contains(getCurrentContext().getResources().getString(R.string.media_type_episode))) {
                downloadVideoRealm.setEpisodeNum(getShowDatum().getGist().getEpisodeNum());
                downloadVideoRealm.setShowName(getShowDatum().getGist().getShowName());
                downloadVideoRealm.setSeasonNum(getShowDatum().getGist().getSeasonNum());
            }
            if (contentDatum.getGist().getMediaType() != null && contentDatum.getGist().getMediaType().toLowerCase().contains(currentActivity.getString(R.string.media_type_episode).toLowerCase())) {
                downloadVideoRealm.setShowTitle(contentDatum.getSeriesName());
            }

            downloadVideoRealm.setParentalRating(contentDatum.getParentalRating());
        }
        try {
            sendGaEventForDownloadedContent(downloadVideoRealm);
        } catch (Exception e) {
            e.printStackTrace();
        }
        realmController.addDownload(downloadVideoRealm);

    }

    private void clearSubscriptionPlans() {
        if (realmController != null) {
            try {
                realmController.deleteSubscriptionPlans();
            } catch (Exception e) {

            }
        }
    }

    private void createSubscriptionPlan(SubscriptionPlan subscriptionPlan) {
        if (realmController != null) {
            try {
                realmController.addSubscriptionPlan(subscriptionPlan);
            } catch (Exception e) {

            }
        }
    }

    @SuppressWarnings("unused")
    public List<SubscriptionPlan> getExistingSubscriptionPlans() {
        List<SubscriptionPlan> subscriptionPlans = new ArrayList<>();
        if (realmController != null) {
            try {
                RealmResults<SubscriptionPlan> subscriptionPlanRealmResults = realmController.getAllSubscriptionPlans();
                subscriptionPlans.addAll(subscriptionPlanRealmResults);
            } catch (Exception e) {

            }
        }
        return subscriptionPlans;
    }

    /**
     * Created separate method for initiating downloading images as I was facing trouble in
     * initiating tow downloads in same method
     * <p>
     * By this way our Image will store in app dir under "thumbs" folder and it will not be visible
     * to the other apps
     *
     * @param downloadURL
     * @param filename
     */
    private long downloadVideoImage(String downloadURL, String filename) {

        long enqueueId = 0L;
        try {

            DownloadManager.Request downloadRequest = new DownloadManager.Request(Uri.parse(downloadURL))
                    .setTitle(filename)
                    .setDescription(filename)
                    .setAllowedOverRoaming(true)
                    .setVisibleInDownloadsUi(false)
                    .setShowRunningNotification(false);


//
            if (appPreference.getUserDownloadLocationPref()) {
                downloadRequest.setDestinationUri(Uri.fromFile(new File(FileUtils.getSDCardPath(currentActivity, "thumbs"),
                        filename + MEDIA_SURFIX_JPG)));
            } else {
                downloadRequest.setDestinationInExternalFilesDir(currentActivity, "thumbs",
                        filename + MEDIA_SURFIX_JPG);
            }
            enqueueId = downloadManager.enqueue(downloadRequest);


        } catch (Exception e) {
            //Log.e(TAG, "Error downloading video image " + downloadURL + ": " + e.getMessage());
        }

        return enqueueId;
    }

    /**
     * Created separate method for initiating downloading images as I was facing trouble in
     * initiating tow downloads in same method
     * <p>
     * By this way our Image will store in app dir under "thumbs" folder and it will not be visible
     * to the other apps
     *
     * @param downloadURL
     * @param filename
     */
    private long downloadPosterImage(String downloadURL, String filename) {

        long enqueueId = 0L;
        try {

            DownloadManager.Request downloadRequest = new DownloadManager.Request(Uri.parse(downloadURL))
                    .setTitle(filename)
                    .setDescription(filename)
                    .setAllowedOverRoaming(true)
                    .setVisibleInDownloadsUi(false)
                    .setShowRunningNotification(false);

            if (appPreference.getUserDownloadLocationPref()) {
                downloadRequest.setDestinationUri(Uri.fromFile(new File(FileUtils.getSDCardPath(currentActivity, "posters"),
                        filename + MEDIA_SURFIX_JPG)));
            } else {
                downloadRequest.setDestinationInExternalFilesDir(currentActivity, "posters",
                        filename + MEDIA_SURFIX_JPG);
            }

            enqueueId = downloadManager.enqueue(downloadRequest);


        } catch (Exception e) {
            //Log.e(TAG, "Error downloading poster image for download " + downloadURL + ": " + e.getMessage());
        }

        return enqueueId;
    }

    private long downloadVideoSubtitles(DownloadClosedCaptionRealm downloadClosedCaptionRealm) {

        long enqueueId = 0L;
        try {
            DownloadManager.Request downloadRequest = new DownloadManager.Request(Uri.parse(downloadClosedCaptionRealm.getUrl()))
                    .setTitle(downloadClosedCaptionRealm.getGistId())
                    .setDescription(downloadClosedCaptionRealm.getGistId())
                    .setAllowedOverRoaming(true)
                    .setVisibleInDownloadsUi(false)
                    .setShowRunningNotification(false);

            String fileName = downloadClosedCaptionRealm.getUrl().substring(downloadClosedCaptionRealm.getUrl().lastIndexOf("/") + 1);

            if (appPreference.getUserDownloadLocationPref()) {
                downloadRequest.setDestinationUri(Uri.fromFile(new File(FileUtils.getSDCardPath(currentActivity, "closedCaptions"),
                        fileName)));
            } else {
                downloadRequest.setDestinationInExternalFilesDir(currentActivity, "closedCaptions",
                        fileName);
            }

            fileName = currentActivity.getFilesDir().getAbsolutePath() + File.separator + "closedCaptions" + File.separator + fileName;

            enqueueId = downloadManager.enqueue(downloadRequest);

            downloadClosedCaptionRealm.setCcFileEnqueueId(enqueueId);
            // downloadClosedCaptionRealm.setUrl(downloadedMediaLocalURI(enqueueId));
            realmController.addDownloadedCCFile(downloadClosedCaptionRealm);

        } catch (Exception e) {
            Log.e(TAG, "Error downloading video subtitles for download " + downloadClosedCaptionRealm.getUrl() + ": " + e.getMessage());
        }

        return enqueueId;
    }

    public String downloadedMediaLocalURI(long enqueueId) {
        String uriLocal = currentActivity.getString(R.string.download_file_prefix);
        DownloadManager.Query query = new DownloadManager.Query();
        query.setFilterById(enqueueId);
        Cursor cursor = downloadManager.query(query);
        if (cursor != null) {
            if (enqueueId != 0L && cursor.moveToFirst()) {
                uriLocal = cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI));
            }
            cursor.close();
        }
        return uriLocal == null ? "data" : uriLocal;
    }


    public boolean isDownloadUnfinished() {
        if (getRealmController() != null) {
            try {
                List<DownloadVideoRealm> unFinishedVideoList = getRealmController().getAllUnfinishedDownloades(appPreference.getLoggedInUser());
                return unFinishedVideoList != null && !unFinishedVideoList.isEmpty();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    @SuppressWarnings("unused")
    public AppCMSStreamingInfoCall getAppCMSStreamingInfoCall() {
        return appCMSStreamingInfoCall;
    }

    public String getStreamingInfoURL(String filmId) {

        return currentActivity.getString(R.string.app_cms_streaminginfo_api_url,
                appCMSMain.getApiBaseUrl(),
                filmId,
                appCMSMain.getInternalName());
    }

    public String getOfflineDownloadedFileSize(Download download) {
        return getDownloadedFileSize(download.contentLength);
    }

    public String getDownloadedFileSize(String filmId) {

        if (realmController != null) {
            try {
                DownloadVideoRealm downloadVideoRealm = realmController.getDownloadById(filmId);
                if (downloadVideoRealm == null)
                    return "";
                return getDownloadedFileSize(downloadVideoRealm.getVideoSize());
            } catch (Exception e) {

            }
        }
        return "";
    }

    @UiThread
    public DownloadStatus getVideoDownloadStatus(String videoId) {
        if (realmController != null) {
            try {
                DownloadVideoRealm downloadVideoRealm = realmController.getDownloadByIdBelongstoUser(videoId,
                        appPreference.getLoggedInUser());
                if (downloadVideoRealm != null &&
                        downloadVideoRealm.getVideoId().equalsIgnoreCase(videoId)) {
                    return downloadVideoRealm.getDownloadStatus();
                }
            } catch (Exception e) {

            }
        }
        return DownloadStatus.STATUS_PENDING;
    }

    @UiThread
    public boolean isVideoDownloaded(String videoId) {
        try {
            if (realmController == null)
                this.realmController = RealmController.with(currentActivity);

            DownloadVideoRealm downloadVideoRealm = realmController.getDownloadByIdBelongstoUser(videoId,
                    appPreference.getLoggedInUser());
            return downloadVideoRealm != null &&
                    downloadVideoRealm.getVideoId().equalsIgnoreCase(videoId) &&
                    (downloadVideoRealm.getDownloadStatus() == DownloadStatus.STATUS_COMPLETED ||
                            downloadVideoRealm.getDownloadStatus() == DownloadStatus.STATUS_SUCCESSFUL);
        } catch (Exception e) {
            return false;
        }
    }

    @UiThread
    public boolean isOfflineVideoDownloaded(String videoId) {
        try {
            Download offlineVideo = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getDowloadedVideoObject(getCurrentPlayingVideo());
            if (offlineVideo != null && offlineVideo.state == Download.STATE_COMPLETED) {
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            return false;
        }
    }

    @UiThread
    public boolean isVideoDownloading(String videoId) {
        if (realmController != null) {
            try {
                DownloadVideoRealm downloadVideoRealm = realmController.getDownloadByIdBelongstoUser(videoId,
                        appPreference.getLoggedInUser());
                return downloadVideoRealm != null &&
                        downloadVideoRealm.getVideoId().equalsIgnoreCase(videoId) &&
                        (downloadVideoRealm.getDownloadStatus() == DownloadStatus.STATUS_RUNNING ||
                                downloadVideoRealm.getDownloadStatus() == DownloadStatus.STATUS_PENDING ||
                                downloadVideoRealm.getDownloadStatus() == DownloadStatus.STATUS_PAUSED);
            } catch (Exception e) {

            }
        }
        return false;
    }

    @UiThread
    private boolean isVideoDownloadedByUser(String videoId) {
        if (realmController != null) {
            try {
                DownloadVideoRealm downloadVideoRealm = realmController.getDownloadByIdBelongstoUser(videoId,
                        appPreference.getLoggedInUser());
                return downloadVideoRealm != null && downloadVideoRealm.getVideoId().equalsIgnoreCase(videoId);
            } catch (Exception e) {

            }
        }
        return false;
    }

    @UiThread
    private boolean isVideoDownloadedByOtherUser(String videoId) {
        if (realmController != null) {
            try {
                DownloadVideoRealm downloadVideoRealm = realmController.getDownloadById(videoId);
                return downloadVideoRealm != null && downloadVideoRealm.getVideoId().equalsIgnoreCase(videoId);
            } catch (Exception e) {

            }
        }
        return false;
    }

    @UiThread
    private DownloadVideoRealm getVideoDownloadedByOtherUser(String videoId) {
        if (realmController != null) {
            try {
                return realmController.getDownloadById(videoId);
            } catch (Exception e) {

            }
        }
        return null;
    }

    @UiThread
    private DownloadVideoRealm getVideoDownloadedByDMID(long dm_id) {
        if (realmController != null) {
            try {
                return realmController.getDownloadByDMId(dm_id);
            } catch (Exception e) {

            }
        }
        return null;
    }

    public String getDownloadedFileSize(long size) {
        String fileSize;
        DecimalFormat dec = new DecimalFormat("0");

        long sizeKB = (size / 1024);
        double megaByte = sizeKB / 1024.0;
        double gigaByte = sizeKB / 1048576.0;
        double teraByte = sizeKB / 1073741824.0;

        if (teraByte > 1) {
            fileSize = dec.format(teraByte).concat(" TB");
        } else if (gigaByte > 1) {
            fileSize = dec.format(gigaByte).concat(" GB");
        } else if (megaByte > 1) {
            fileSize = dec.format(megaByte).concat(" MB");
        } else {
            fileSize = dec.format(sizeKB).concat(" KB");
        }

        return fileSize;
    }

    @SuppressWarnings("unused")
    public synchronized int downloadedPercentage(long videoId) {
        int downloadPercent = 0;
        DownloadManager.Query query = new DownloadManager.Query();
        query.setFilterById(videoId);
        Cursor c = downloadManager.query(query);
        if (c.moveToFirst()) {
            downloaded = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));
            long totalSize = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES));
            long downloaded = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));
            downloadPercent = (int) (downloaded * 100.0 / totalSize + 0.5);
        }

        c.close();
        return downloadPercent;
    }

    public void startNextDownload() {
        if (downloadQueueThread != null) {
            if (!downloadQueueThread.running()) {
                downloadQueueThread.start();
            }
            downloadQueueThread.setStartNextDownload();
        }
    }

    private synchronized void startDownload(ContentDatum contentDatum,
                                            Action1<UserVideoDownloadStatus> resultAction1, boolean isFromPlaylistDownload,
                                            Action1<Boolean> downloadNotProcessedAction) {
        videoEntitlementDownload(contentDatum, new Action1<ContentDatum>() {
            @Override
            public void call(ContentDatum updateContentDatum) {
                if (updateContentDatum != null &&
                        updateContentDatum.getGist() != null &&
                        updateContentDatum.getGist().getId() != null) {

                    boolean isContentPurchased = appPreference.getUserPurchases() != null && !TextUtils.isEmpty(appPreference.getUserPurchases())
                            && (contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getGist().getId())
                            || (updateContentDatum.getSeasonId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getSeasonId()))
                            || (updateContentDatum.getSeriesId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getSeriesId())));

                    if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getTransactionDateEpoch() > 0) {
                        String endDate = "";
                        Date date = new Date(contentDatum.getGist().getTransactionDateEpoch());
                        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                        endDate = df2.format(date);
                        updateContentDatum.getGist().setTransactionEndDate(endDate);
                    } else if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getTransactionEndDate() > 0) {
                        String endDate = "";
                        Date date = new Date(contentDatum.getGist().getTransactionEndDate());
                        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                        endDate = df2.format(date);
                        updateContentDatum.getGist().setTransactionEndDate(endDate);
                    } else if (isContentPurchased) {
                        long rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getGist().getId());
                        if (rentExpiry == 0 && updateContentDatum.getSeasonId() != null)
                            rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getSeasonId());
                        if (rentExpiry == 0 && updateContentDatum.getSeriesId() != null)
                            rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getSeriesId());

                        if (rentExpiry > 0) {
                            String endDate = "";
                            Date date = new Date(rentExpiry);
                            SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                            endDate = df2.format(date);
                            updateContentDatum.getGist().setTransactionEndDate(endDate);
                            updateContentDatum.getGist().setPurchaseType("RENT");
                        }
                    }
                    if (updateContentDatum.getSubscriptionPlans() != null && contentTypeChecker.isContentFree(updateContentDatum.getSubscriptionPlans())
                            && updateContentDatum.getSubscriptionPlans().get(0).getPlanMonetizationModel() != null)
                        updateContentDatum.setPlanMonetizationModel(updateContentDatum.getSubscriptionPlans().get(0).getPlanMonetizationModel());
                    if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getRentalPeriod() > 0) {
                        updateContentDatum.getGist().setRentalPeriod(contentDatum.getGist().getRentalPeriod());
                    }
                    if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getRentStartTime() > 0) {
                        updateContentDatum.getGist().setRentStartTime(contentDatum.getGist().getRentStartTime());
                    }

                    if (updateContentDatum.getGist().getGenre() == null)
                        updateContentDatum.getGist().setPrimaryCategory(contentDatum.getGist().getPrimaryCategory());
                    if (contentDatum.getSeriesName() != null)
                        updateContentDatum.setSeriesName(contentDatum.getSeriesName());
                    if (updateContentDatum.getCreditBlocks() == null)
                        if (contentDatum.getCreditBlocks() != null)
                            updateContentDatum.setCreditBlocks(contentDatum.getCreditBlocks());
                    downloadURLParsing(updateContentDatum, resultAction1, isFromPlaylistDownload);

               /* TODO bellow code to be remove once Entitlement API will work fine for every case
                getAppCMSSignedURL(updateContentDatum.getGist().getId(), appCMSSignedURLResult -> currentActivity.runOnUiThread(() -> {
                    if (appCMSSignedURLResult != null) {
                        downloadURLParsing(updateContentDatum, resultAction1,isFromPlaylistDownload);
                    }
                }));
                //*/
                }
            }
        });
    }

    private void downloadURLParsing(final ContentDatum updateContentDatum, Action1<
            UserVideoDownloadStatus> resultAction1, boolean isFromPlaylistDownload) {
        try {

            long enqueueId;

            if (updateContentDatum.getStreamingInfo() == null) { // This will handle the case if we get video streaming info null at Video detail page.

                String url = getStreamingInfoURL(updateContentDatum.getGist().getId());
                GetAppCMSStreamingInfoAsyncTask.Params param = new GetAppCMSStreamingInfoAsyncTask.Params.Builder()
                        .url(url)
                        .authToken(getAuthToken())
                        .xApiKey(apikey)
                        .build();

                new GetAppCMSStreamingInfoAsyncTask(appCMSStreamingInfoCall, appCMSStreamingInfo -> {
                    if (appCMSStreamingInfo != null) {
                        updateContentDatum.setStreamingInfo(appCMSStreamingInfo.getStreamingInfo());
                        enqueueDownloadContent(updateContentDatum, isFromPlaylistDownload);
                    } else {
                        showDialog(DialogType.STREAMING_INFO_MISSING, null, false, null, null, null);
                        return;
                    }
                }).execute(param);


            } else {
                enqueueDownloadContent(updateContentDatum, isFromPlaylistDownload);
            }

        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
            showDialog(DialogType.DOWNLOAD_INCOMPLETE, e.getMessage(), false, null, null, null);
        } finally {
            appCMSUserDownloadVideoStatusCall.call(updateContentDatum.getGist().getId(), this,
                    resultAction1, appPreference.getLoggedInUser());
        }
    }

    private void enqueueDownloadContent(ContentDatum updateContentDatum, boolean isFromPlaylistDownload) {

        String downloadURL;
        long ccEnqueueId = 0L;

        downloadURL = getDownloadURL(updateContentDatum);

        downloadMediaFile(updateContentDatum, downloadURL, ccEnqueueId, isFromPlaylistDownload);

        if (updateContentDatum.getContentDetails() != null &&
                updateContentDatum.getContentDetails().getClosedCaptions() != null &&
                !updateContentDatum.getContentDetails().getClosedCaptions().isEmpty() &&
                updateContentDatum.getContentDetails().getClosedCaptions().get(0).getUrl() != null) {
            for (ClosedCaptions cc : updateContentDatum.getContentDetails()
                    .getClosedCaptions()) {

                if ("SRT".equalsIgnoreCase(cc.getFormat())) {
                    DownloadClosedCaptionRealm downloadClosedCaptionRealm = Utils.convertClosedCaptionToDownloadClosedCaption(cc, updateContentDatum.getGist().getId());
                    downloadVideoSubtitles(downloadClosedCaptionRealm);
                }
            }
        }
    }

    private Action1<List<Long>> deleteCCFileActionListener = dataList -> {
        for (Long enqueId : dataList)
            downloadManager.remove(enqueId);
    };

    private synchronized void downloadMediaFile(ContentDatum contentDatum, String downloadURL,
                                                long ccEnqueueId, boolean isFromPlaylistDownload) {
        if (!isVideoDownloadedByOtherUser(contentDatum.getGist().getId())) {
            String mediaPrefix = MEDIA_SURFIX_MP4;
            if (contentDatum.getGist() != null &&
                    contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().toLowerCase().contains(currentContext.getString(R.string.media_type_audio).toLowerCase()) &&
                    contentDatum.getGist().getContentType() != null &&
                    contentDatum.getGist().getContentType().toLowerCase().contains(currentContext.getString(R.string.content_type_audio).toLowerCase())) {
                mediaPrefix = MEDIA_SURFIX_MP3;
            }
            // cancelDownloadIconTimerTask(contentDatum.getGist().getId());


            DownloadManager.Request downloadRequest = new DownloadManager.Request(Uri.parse(downloadURL.replace(" ", "%20")))
                    .setTitle(contentDatum.getGist().getTitle())
                    .setDescription(contentDatum.getGist().getDescription())
                    .setAllowedOverRoaming(true)
                    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                    .setVisibleInDownloadsUi(false)
                    .setShowRunningNotification(true);

            if (appPreference.getUserDownloadLocationPref()) {
                downloadRequest.setDestinationUri(Uri.fromFile(new File(FileUtils.getSDCardPath(currentActivity, Environment.DIRECTORY_DOWNLOADS),
                        contentDatum.getGist().getId() + mediaPrefix)));
            } else {
                downloadRequest.setDestinationInExternalFilesDir(currentActivity, Environment.DIRECTORY_DOWNLOADS,
                        contentDatum.getGist().getId() + mediaPrefix);
            }
            sendDownloadStartEvent(contentDatum);
            long enqueueId = downloadManager.enqueue(downloadRequest);
            long thumbEnqueueId;
            long posterEnqueueId;
            if (contentDatum.getGist() != null &&
                    contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().toLowerCase().contains(currentContext.getString(R.string.media_type_audio).toLowerCase()) &&
                    contentDatum.getGist().getContentType() != null &&
                    contentDatum.getGist().getContentType().toLowerCase().contains(currentContext.getString(R.string.content_type_audio).toLowerCase())) {
                String audioImageUrl = null;
                if (contentDatum.getGist().getImageGist().get_16x9() != null) {
                    audioImageUrl = contentDatum.getGist().getImageGist().get_16x9();
                }
                thumbEnqueueId = downloadVideoImage(audioImageUrl,
                        contentDatum.getGist().getId());
                String audioPlayerImage = null;
                if (contentDatum.getGist().getImageGist().get_1x1() != null) {
                    audioPlayerImage = contentDatum.getGist().getImageGist().get_1x1();
                }
                posterEnqueueId = downloadPosterImage(audioPlayerImage,
                        contentDatum.getGist().getId());
            } else {
                thumbEnqueueId = downloadVideoImage(contentDatum.getGist().getVideoImageUrl(),
                        contentDatum.getGist().getId());
                posterEnqueueId = downloadPosterImage(contentDatum.getGist().getPosterImageUrl(),
                        contentDatum.getGist().getId());
            }
            contentDatum = handleTagData(contentDatum);
            /*currentActivity.runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    View downloadButton = currentActivity.findViewById(R.id.downloadButton);
                    if (downloadButton != null && downloadButton instanceof TextView)
                        ((TextView) downloadButton).setText(localisedStrings.getDownloadingLabelText());
                }
            });*/
            final ContentDatum contentDatum1 = contentDatum;
            /*
             * Inserting data in realm data object
             */
            createLocalEntry(
                    enqueueId,
                    thumbEnqueueId,
                    posterEnqueueId,
                    ccEnqueueId,
                    contentDatum,
                    downloadURL);
            if (!isFromPlaylistDownload) {
                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                    sendRefreshPageAction();
                    stopDownloadProgressDialog();
                }, 3000);
                showToast(localisedStrings.getDownloadStartedText(contentDatum1.getGist().getTitle()), Toast.LENGTH_LONG);
            } else {
                stopDownloadProgressDialog();
            }

        }
        /**
         * Can use bellow code in future if we need to show message to user for
         * multiple downloading action detection.
         */
        /*
        else {
            showToast(
                    currentActivity.getString(R.string.app_cms_download_multi_event_detected_message_message,
                            contentDatum.getGist().getTitle()), Toast.LENGTH_LONG);
        }*/
    }

    @SuppressWarnings("unused")
    public void checkDownloadCurrentStatus(String filmId, final Action1<UserVideoDownloadStatus> responseAction) {
        appCMSUserDownloadVideoStatusCall
                .call(filmId, this, responseAction, appPreference.getLoggedInUser());
    }

    public void notifyDownloadHasCompleted() {
        if (currentActivity != null) {
            Intent notifiyDownloadHasCompleted = new Intent(PRESENTER_UPDATE_LISTS_ACTION);
            notifiyDownloadHasCompleted.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(notifiyDownloadHasCompleted);
        }
    }

    @UiThread
    public synchronized void updateDownloadingStatus(String filmId, final View updateView,
                                                     AppCMSPresenter presenter,
                                                     final Action1<UserVideoDownloadStatus> responseAction,
                                                     String userId, boolean isFromDownload,
                                                     int radiusDifference,
                                                     String id) {
        if (!isFromDownload) {
            cancelDownloadIconTimerTask(filmId);
        }
        try {
            /*
             * Timer code can be optimize with RxJava code
             */
            runUpdateDownloadIconTimer = true;
            Timer updateDownloadIconTimer = new Timer();
            long videoId = realmController.getDownloadByIdBelongstoUser(filmId, appPreference.getLoggedInUser()).getVideoId_DM();


            TimerTask downloadTimerTask = findDownloadTimerTask(videoId, filmId, id);


            if (updateView instanceof ImageView) {
                if (downloadTimerTask == null ||
                        ((DownloadTimerTask) downloadTimerTask).cancelled) {
                    if (downloadTimerTask != null) {
                        downloadProgressTimerList.remove(downloadTimerTask);
                    }
                    downloadTimerTask = new DownloadTimerTask(filmId,
                            videoId,
                            runOnUiThreadAction -> {
                                currentActivity.runOnUiThread(runOnUiThreadAction::call);
                            },
                            BaseView.isTablet(currentActivity),
                            this,
                            ((ImageView) updateView),
                            responseAction,
                            updateDownloadIconTimer,
                            radiusDifference,
                            id);
                }
                ((DownloadTimerTask) downloadTimerTask).imageView = (ImageView) updateView;

                if (!((DownloadTimerTask) downloadTimerTask).running) {
                    updateDownloadIconTimer.schedule(downloadTimerTask, 0, 3000);
                }
            } else if (updateView instanceof TextView) {
                if (downloadTimerTask == null ||
                        ((DownloadTimerTaskTextUpdate) downloadTimerTask).cancelled) {
                    if (downloadTimerTask != null) {
                        downloadProgressTimerList.remove(downloadTimerTask);
                    }
                    downloadTimerTask = new DownloadTimerTaskTextUpdate(filmId,
                            videoId,
                            runOnUiThreadAction -> {
                                currentActivity.runOnUiThread(runOnUiThreadAction::call);
                            },
                            this,
                            ((TextView) updateView),
                            responseAction);
                }
                ((DownloadTimerTaskTextUpdate) downloadTimerTask).textView = (TextView) updateView;

                if (!((DownloadTimerTaskTextUpdate) downloadTimerTask).running) {
                    updateDownloadIconTimer.schedule(downloadTimerTask, 0, 3000);
                }
            } else if (updateView instanceof DownloadComponent) {
                if (downloadTimerTask == null ||
                        ((DownloadTimerTaskDownloadComponent) downloadTimerTask).cancelled) {
                    if (downloadTimerTask != null) {
                        downloadProgressTimerList.remove(downloadTimerTask);
                    }
                    downloadTimerTask = new DownloadTimerTaskDownloadComponent(filmId,
                            videoId,
                            runOnUiThreadAction -> {
                                currentActivity.runOnUiThread(runOnUiThreadAction::call);
                            },
                            BaseView.isTablet(currentActivity),
                            this,
                            ((DownloadComponent) updateView),
                            responseAction,
                            updateDownloadIconTimer,
                            id);
                }

                ((DownloadTimerTaskDownloadComponent) downloadTimerTask).mDownloadComponent = (DownloadComponent) updateView;

                if (!((DownloadTimerTaskDownloadComponent) downloadTimerTask).running) {
                    updateDownloadIconTimer.schedule(downloadTimerTask, 0, 3000);
                }
            }
            downloadProgressTimerList.add(downloadTimerTask);


        } catch (Exception e) {
            Log.e(TAG, "Error updating download status: " + e.getMessage());
        }
    }

    public TimerTask findDownloadTimerTask(long videoId,
                                           String filmId,
                                           String id) {
        if (downloadTaskRunning(filmId)) {
            if (downloadProgressTimerList != null &&
                    !downloadProgressTimerList.isEmpty()) {
                for (TimerTask downloadProgressTask : downloadProgressTimerList) {
                    if (downloadProgressTask instanceof DownloadTimerTask) {
                        if (((DownloadTimerTask) downloadProgressTask).videoId == videoId &&
                                !TextUtils.isEmpty(id) &&
                                id.equals(((DownloadTimerTask) downloadProgressTask).id)) {
                            return downloadProgressTask;
                        }
                    } else if (downloadProgressTask instanceof DownloadTimerTaskDownloadComponent) {

                        if (((DownloadTimerTaskDownloadComponent) downloadProgressTask).videoId == videoId &&
                                !TextUtils.isEmpty(id) &&
                                id.equals(((DownloadTimerTaskDownloadComponent) downloadProgressTask).id)) {
                            return downloadProgressTask;
                        }
                    }
                }
            }
        }

        return null;
    }

    public void updateDownloadTimerTask(String filmId,
                                        String id,
                                        ImageView downloadStatusIcon) {
        if (downloadTaskRunning(filmId)) {
            if (filmId != null &&
                    downloadProgressTimerList != null &&
                    !downloadProgressTimerList.isEmpty()) {
                for (TimerTask downloadProgressTask : downloadProgressTimerList) {
                    if (downloadProgressTask instanceof DownloadTimerTask) {
                        if (((DownloadTimerTask) downloadProgressTask).filmIdLocal.equals(filmId) &&
                                !TextUtils.isEmpty(id) &&
                                id.equals(((DownloadTimerTask) downloadProgressTask).id)) {
                            ((DownloadTimerTask) downloadProgressTask).imageView = downloadStatusIcon;
                            try {
                                new Thread(downloadProgressTask).run();
                            } catch (Exception e) {
                                Log.e(TAG, "Failed to re-run download progress task for film: " +
                                        filmId);
                            }
                        }
                    } else if (downloadProgressTask instanceof DownloadTimerTaskDownloadComponent) {


                        if (((DownloadTimerTaskDownloadComponent) downloadProgressTask).filmIdLocal.equals(filmId) &&
                                !TextUtils.isEmpty(id) &&
                                id.equals(((DownloadTimerTaskDownloadComponent) downloadProgressTask).id)) {
                            //((DownloadTimerTaskDownloadComponent) downloadProgressTask).mDownloadComponent.getImageButtonDownloadStatus() = downloadStatusIcon;
                            try {
                                new Thread(downloadProgressTask).run();
                            } catch (Exception e) {
                                Log.e(TAG, "Failed to re-run download progress task for film: " +
                                        filmId);
                            }
                        }
                    }
                }
            }
        }
    }

    public boolean downloadTaskRunning(String filmId) {
        if (filmId != null &&
                downloadProgressTimerList != null &&
                !downloadProgressTimerList.isEmpty()) {
            for (TimerTask downloadProgressTask : downloadProgressTimerList) {
                if (downloadProgressTask instanceof DownloadTimerTask) {
                    if (((DownloadTimerTask) downloadProgressTask).filmIdLocal.equals(filmId)) {
                        return true;
                    }
                } else if (downloadProgressTask instanceof DownloadTimerTaskDownloadComponent) {

                    if (((DownloadTimerTaskDownloadComponent) downloadProgressTask).filmIdLocal.equals(filmId)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public void cancelDownloadIconTimerTask(String filmId) {
       /* if (updateDownloadIconTimer != null) {
            runUpdateDownloadIconTimer = false;
            updateDownloadIconTimer.cancel();
            updateDownloadIconTimer.purge();
        }*/
        if (downloadProgressTimerList != null && !downloadProgressTimerList.isEmpty()) {
            int indexToDelete = -1;
            for (int i = 0; i < downloadProgressTimerList.size() && indexToDelete == -1; i++) {
                TimerTask downloadTimerTask = downloadProgressTimerList.get(i);
                if (downloadTimerTask instanceof DownloadTimerTask) {
                    if (filmId == null || ((DownloadTimerTask) downloadTimerTask).filmIdLocal.equals(filmId)) {
                        ((DownloadTimerTask) downloadTimerTask).timer.cancel();
                        ((DownloadTimerTask) downloadTimerTask).timer.purge();
                        indexToDelete = i;
                    }
                } else if (downloadTimerTask instanceof DownloadTimerTaskDownloadComponent) {
                    if (filmId == null || ((DownloadTimerTaskDownloadComponent) downloadTimerTask).filmIdLocal.equals(filmId)) {
                        ((DownloadTimerTaskDownloadComponent) downloadTimerTask).timer.cancel();
                        ((DownloadTimerTaskDownloadComponent) downloadTimerTask).timer.purge();
                        indexToDelete = i;
                    }
                }
            }
            if (filmId == null) {
                downloadProgressTimerList.clear();
            } else if (indexToDelete != -1) {
                downloadProgressTimerList.remove(indexToDelete);
            }
        }
    }

    public void editHistory(final String filmId, final String seriesId,
                            final Action1<AppCMSDeleteHistoryResult> resultAction1, boolean post) {
       /* final String url = currentActivity.getString(R.string.app_cms_edit_history_api_url,
                appCMSMain.getApiBaseUrl(),
                appPreference.getLoggedInUser(),
                appCMSMain.getInternalName(),
                filmId,
                getLanguageParamForAPICall());*/
        final String url = currentActivity.getString(R.string.app_cms_edit_history_api_url,
                appCMSMain.getApiBaseUrl(),
                getLoggedInUser(),
                filmId,
                appCMSMain.getInternalName(),
                getLanguageParamForAPICall());
        Log.i(TAG, "editHistory : " + url);

        try {
            /*DeleteHistoryRequest request = new DeleteHistoryRequest();
            request.setUserId(appPreference.getLoggedInUser());
            request.setContentType(currentActivity.getString(R.string.delete_history_content_type_video));
            request.setPosition(1L);
            request.setSeriesId(seriesId);
            if (post) {
                request.setContentId(filmId);
            } else {
                request.setContentIds(filmId);
            }

            appCMSDeleteHistoryCall.call(url, getAuthToken(), apikey,
                    appCMSDeleteHistoryResult -> {
                        try {
                            Observable.just(appCMSDeleteHistoryResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(resultAction1);
                            userHistoryData.remove(filmId);
                        } catch (Exception e) {
                            //Log.e(TAG, "Error deleting history: " + e.getMessage());
                        } finally {
                            sendUpdateHistoryAction();
                        }
                    }, request, post);*/

            appCMSDeleteHistoryCall.delete(url, getAuthToken(), apikey, appCMSDeleteHistoryResults -> {
                try {
                    Observable.just(appCMSDeleteHistoryResults)
                            .onErrorResumeNext(throwable -> Observable.empty())
                            .subscribe(resultAction1);
                    if (userHistoryData.containsKey(filmId)) {
                        userHistoryData.remove(filmId);
                    }
                } catch (Exception e) {
                    //Log.e(TAG, "Error deleting history: " + e.getMessage());
                } finally {
                    sendUpdateHistoryAction();
                }
            });
        } catch (Exception e) {
            //Log.e(TAG, "Error editing history for " + filmId + ": " + e.getMessage());
        }
    }

    private void progressDialogInit() {
        progressDialogDeleteDownload = new ProgressDialog(currentActivity);
        progressDialogDeleteDownload.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        progressDialogDeleteDownload.setMessage("Running backup. Do not unplug drive");
        progressDialogDeleteDownload.setIndeterminate(true);
        progressDialogDeleteDownload.setCancelable(false);
        progressDialogDeleteDownload.show();

    }

    public void removeDeleteProgress() {
        if (progressDialogDeleteDownload != null) {
//            progressDialogDeleteDownload.dismiss();
//            progressDialogDeleteDownload.cancel();
//            progressDialogDeleteDownload=null;
        }
    }

    public void removeAllOfflineDownloads() {
        DownloadService.sendRemoveAllDownloads(currentContext, OfflineDownloadService.class,/* foreground= */ false);
    }

    public void clearDownload(final Action1<UserVideoDownloadStatus> resultAction1, Boolean deleteAllFiles, Module moduleAPI) {
        realmController = RealmController.with(currentActivity);
        String contentType = currentContext.getString(R.string.content_type_video);
        String deleteMsg = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_all_video_download_items_message));
        if (moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getStrDeleteAllContentFromDownloadAlertMessage() != null)
            deleteMsg = moduleAPI.getMetadataMap().getStrDeleteAllContentFromDownloadAlertMessage();


        final String content = contentType;
        String dialogTitle = null;
        if (moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getStrDeleteDownloadAlertTitle() != null)
            dialogTitle = moduleAPI.getMetadataMap().getStrDeleteDownloadAlertTitle();
        showDialog(DialogType.DELETE_ALL_DOWNLOAD_ITEMS,
                deleteMsg,
                true, () -> {
                    if (deleteAllFiles) {
                        showLoader();
                        if (realmController != null) {
                            for (DownloadVideoRealm downloadVideoRealm :
                                    realmController.getDownloadesByUserId(appPreference.getLoggedInUser())) {
                                removeDownloadedFile(downloadVideoRealm.getVideoId());
                            }
                        }
                        //Removing All Offline Downloads by .EXO DOWNLOADS
                        removeAllOfflineDownloads();
                    } else {
                        for (DownloadVideoRealm downloadVideoRealm :
                                realmController.getDownloadsByUserIdAndMedia(appPreference.getLoggedInUser(), content)) {
                            removeDownloadedFile(downloadVideoRealm.getVideoId());
                        }
                    }
                    appCMSUserDownloadVideoStatusCall.call("", this,
                            resultAction1, appPreference.getLoggedInUser());
                    cancelDownloadIconTimerTask(null);
                },
                () -> {
                    showLoadingDialog(false);
                }, dialogTitle);
    }

    public void clearWatchlist(final Action1<AppCMSAddToWatchlistResult> resultAction1, Module moduleAPI) {
        try {
            String dialogTitle = "";
            if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getkStrDeleteWatchlistAlertTitle() != null)
                dialogTitle = moduleAPI.getMetadataMap().getkStrDeleteWatchlistAlertTitle();
            String dialogMsg = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_all_watchlist_items_message));
            if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getkStrDeleteAllVideosFromWatchlistAlertMessage() != null)
                dialogMsg = moduleAPI.getMetadataMap().getkStrDeleteAllVideosFromWatchlistAlertMessage();

            showDialog(DialogType.DELETE_ALL_WATCHLIST_ITEMS,
                    dialogMsg,
                    true,
                    () -> makeClearWatchlistRequest(resultAction1),
                    () -> {
                        showLoadingDialog(false);
                    }, dialogTitle);
        } catch (Exception e) {
            //Log.e(TAG, "clearWatchlistContent: " + e.toString());
        }
    }

    public void makeClearWatchlistRequest(Action1<AppCMSAddToWatchlistResult> resultAction1) {
        final String url = currentActivity.getString(R.string.app_cms_clear_watchlist_api_url,
                appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName(),
                appPreference.getLoggedInUser());

        try {
            AddToWatchlistRequest request = new AddToWatchlistRequest();
            request.setUserId(appPreference.getLoggedInUser());
            request.setContentType(currentActivity.getString(R.string.add_to_watchlist_content_type_video));
            request.setPosition(1L);
            appCMSAddToWatchlistCall.call(url, getAuthToken(), apikey,
                    addToWatchlistResult -> {
                        try {
                            populateFilmsInUserWatchlist();
                            Observable.just(addToWatchlistResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(resultAction1);
                            temporaryWatchlist.clear();
                        } catch (Exception e) {
                            //Log.e(TAG, "Error deleting all watchlist items: " + e.getMessage());
                        }
                    }, request, false);
        } catch (Exception e) {
            //Log.e(TAG, "Error clearing watchlist: " + e.getMessage());
            //Log.e(TAG, "clearWatchlistContent: " + e.toString());
        }
    }


    public boolean downloadsAvailableForApp() {
        if (appCMSMain != null &&
                appCMSMain.getFeatures() != null
                && getPlatformType() == PlatformType.ANDROID) {
            return appCMSMain.getFeatures().isMobileAppDownloads();
        }
        return false;
    }

    public List<ContentDatum> getDownloadedMedia(String mediaType) {
        List<ContentDatum> contentData = new ArrayList<>();
        for (DownloadVideoRealm downloadVideoRealm : realmController.getDownloadsByUserIdAndMedia(appPreference.getLoggedInUser(), mediaType)) {
            contentData.add(downloadVideoRealm.convertToContentDatum(appPreference.getLoggedInUser()));
        }
        return contentData;
    }

    public void navigateToDownloadPage(String pageId) {
        appPreference.setPlayingVideo(false);
        setDownlistScreenCache(null);
        if (currentActivity != null && !TextUtils.isEmpty(pageId) && downloadsAvailableForApp()) {
            for (Fragment fragment : currentActivity.getSupportFragmentManager().getFragments()) {
                if (fragment instanceof AppCMSMoreFragment) {
                    ((AppCMSMoreFragment) fragment).sendDismissAction();
                }
            }
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                    navigateToDownloadPage(pageId);
                                }
                            },
                            !isNetworkConnected(),
                            false);
                }
            } else {
                String apiUrl = getApiUrl(true,
                        false,
                        false,
                        false,
                        null,
                        appCMSMain.getApiBaseUrl(),
                        downloadPage.getPageAPI(),
                        appCMSMain.getInternalName(),
                        downloadPage.getPageId(),
                        false);
                getPageIdContent(apiUrl,
                        downloadPage.getPageId(),
                        null,
                        false,
                        false, new AppCMSPageAPIAction(false,
                                false,
                                false,
                                appCMSPageUI,
                                downloadPage.getPageId(),
                                downloadPage.getPageId(),
                                downloadPage.getPageName(),
                                downloadPage.getPageId(),
                                false, false, null) {
                            @Override
                            public void call(AppCMSPageAPI appCMSPageAPI) {
                                if (getCurrentActivity() == null)
                                    return;
                                ModuleList moduleListApi = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_downloads_01));
                                if (moduleListApi == null) {
                                    moduleListApi = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_downloads_02));
                                    if (moduleListApi == null) {
                                        moduleListApi = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_downloads_03));
                                    }
                                }

                                Module module = matchModuleAPIToModuleUI(moduleListApi, appCMSPageAPI);
                                if (module == null)
                                    module = new Module();
                                realmController = RealmController.with(currentActivity);
                                if (appCMSPageAPI == null)
                                    appCMSPageAPI = new AppCMSPageAPI();
                                appCMSPageAPI.setId(pageId);

                                List<Module> moduleList = new ArrayList<>();
                                Settings settings = new Settings();
                                settings.setHideDate(true);
                                settings.setHideTitle(false);
                                settings.setLazyLoad(false);
                                List<ContentDatum> contentData = new ArrayList<>();
                                List<ContentDatum> contentDataFilter = new ArrayList<>();
                                try {
                                    for (DownloadVideoRealm downloadVideoRealm : realmController.getDownloadesByUserId(appPreference.getLoggedInUser())) {
                                        contentData.add(downloadVideoRealm.convertToContentDatum(appPreference.getLoggedInUser()));
                                        contentDataFilter.add(downloadVideoRealm.convertToContentDatum(appPreference.getLoggedInUser()));
                                    }
                                    //Appending to Downnloads List. Appending Downloads.
                                    HashMap<String, Download> offlineDownloads = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getAllOfflineDownloads();
                                    Iterator hmIterator = offlineDownloads.entrySet().iterator();
                                    while (hmIterator.hasNext()) {
                                        Map.Entry mapElement = (Map.Entry) hmIterator.next();
                                        Download download = ((Download) mapElement.getValue());
                                        if (download.state == Download.STATE_COMPLETED || download.state == Download.STATE_DOWNLOADING || download.state == Download.STATE_QUEUED) {
                                            OfflineVideoData offlineVideoData = deserialize(download.request.data);
                                            if ((offlineVideoData.getUserId()).equalsIgnoreCase(appPreference.getLoggedInUser())) {
                                                contentData.add(offlineVideoData.convertToContentDatum(appPreference.getLoggedInUser()));
                                                contentDataFilter.add(offlineVideoData.convertToContentDatum(appPreference.getLoggedInUser()));
                                            }
                                        }
                                    }
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                                for (int i = 0; i < contentDataFilter.size(); i++) {
                                    float rentalPeriod = 0;
                                    long expirationDate = 0;
                                    long stratTime = 0;
                                    if (contentDataFilter.get(i).getGist().getTransactionEndDate() > 0) {
                                        if (!appCMSMain.isMonetizationModelEnabled())
                                            expirationDate = contentDataFilter.get(i).getGist().getTransactionEndDate() * 1000L;
                                        else {
                                            expirationDate = contentDataFilter.get(i).getGist().getTransactionEndDate();
                                            if (!contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), contentDataFilter.get(i).getGist().getId())) {
                                                expirationDate = Calendar.getInstance().getTimeInMillis();
                                            }
                                        }
                                    } else if (contentDataFilter.get(i).getGist().getRentalPeriod() > 0 && contentDataFilter.get(i).getGist().getRentStartTime() > 0) {
                                        stratTime = contentDataFilter.get(i).getGist().getRentStartTime();
                                        rentalPeriod = contentDataFilter.get(i).getGist().getRentalPeriod();
                                        //convert rentalPeriod hours into ms and then add to start time
                                        long rentPeriodinMs = (long) (rentalPeriod * 60 * 1000 * 1000);
                                        expirationDate = CommonUtils.addHourToMs(stratTime, rentalPeriod);//stratTime+rentPeriodinMs;
                                    }
                                    long remainingTime = CommonUtils.getTimeIntervalForEvent(expirationDate, "EEE MMM dd HH:mm:ss");
                                    if (appCMSMain.isMonetizationModelEnabled() && contentDataFilter.get(i).getPlanMonetizationModel() != null && contentDataFilter.get(i).getPlanMonetizationModel().equalsIgnoreCase(currentContext.getString(R.string.pricing_model_TVOD))
                                            && contentDataFilter.get(i).getGist().getPurchaseType() != null && contentDataFilter.get(i).getGist().getPurchaseType().equalsIgnoreCase("RENT")) {
                                        if (expirationDate > 0 && remainingTime < 0) {
                                            removeDownloadedFile(contentDataFilter.get(i).getGist().getId(),
                                                    userVideoDownloadStatus -> {
                                                    });
                                            contentData.remove(0);
                                        }
                                    } else {
                                        if ((!contentDataFilter.get(i).getGist().isFree() && contentDataFilter.get(i).getPricing() != null &&
                                                contentDataFilter.get(i).getPricing().getType() != null &&
                                                ((contentDataFilter.get(i).getPricing().getType().equalsIgnoreCase(getCurrentContext().getString(R.string.PURCHASE_TYPE_TVOD))
                                                        || contentDataFilter.get(i).getPricing().getType().equalsIgnoreCase(getCurrentContext().getString(R.string.PURCHASE_TYPE_PPV))) ||
                                                        (contentDataFilter.get(i).getPricing().getType().equalsIgnoreCase(getCurrentContext().getString(R.string.PURCHASE_TYPE_SVOD_TVOD))
                                                                || contentDataFilter.get(i).getPricing().getType().equalsIgnoreCase(getCurrentContext().getString(R.string.PURCHASE_TYPE_SVOD_PPV)))
                                                )) ||
                                                (contentDataFilter.get(i).getGist() != null && contentDataFilter.get(i).getGist().getPurchaseType() != null
                                                        && (contentDataFilter.get(i).getGist().getPurchaseType().equalsIgnoreCase("Rent")
                                                        || contentDataFilter.get(i).getGist().getPurchaseType().equalsIgnoreCase("PURCHASE")))) {
                                            if (expirationDate > 0 && remainingTime < 0) {
                                                removeDownloadedFile(contentDataFilter.get(i).getGist().getId(),
                                                        userVideoDownloadStatus -> {
                                                        });
                                                contentData.remove(0);
                                            }
                                        }
                                    }

                                }

                                module.setContentData(contentData);
                                module.setTitle(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_page_download_title)));
                                moduleList.add(module);
                                appCMSPageAPI.setModules(moduleList);

                                cancelInternalEvents();
                                pushActionInternalEvents(pageId
                                        + BaseView.isLandscape(currentActivity));
                                navigationPageData.put(pageId, appCMSPageAPI);

                                boolean loadingHistory = false;
                                if (isUserLoggedIn()) {
                                    for (Module module1 : appCMSPageAPI.getModules()) {
                                        if (jsonValueKeyMap.get(module1.getModuleType()) ==
                                                AppCMSUIKeyType.PAGE_API_HISTORY_MODULE_KEY) {

                                            cancelInternalEvents();
                                            pushActionInternalEvents(pageId
                                                    + BaseView.isLandscape(currentActivity));
                                            navigationPageData.put(pageId, appCMSPageAPI);
                                            if (launchActivity) {
                                                launchPageActivity(currentActivity,
                                                        appCMSPageUI,
                                                        appCMSPageAPI,
                                                        pageId,
                                                        pageTitle,
                                                        pageTitle,
                                                        pageIdToPageFunctionMap.get(pageId),
                                                        loadFromFile,
                                                        false,
                                                        false,
                                                        false,
                                                        false,
                                                        null,
                                                        ExtraScreenType.NONE);
                                            } else {
                                                Bundle args = getPageActivityBundle(currentActivity,
                                                        appCMSPageUI,
                                                        appCMSPageAPI,
                                                        pageId,
                                                        pageTitle,
                                                        pageTitle,
                                                        pageIdToPageFunctionMap.get(pageId),
                                                        loadFromFile,
                                                        false,
                                                        false,
                                                        false,
                                                        false,
                                                        null,
                                                        ExtraScreenType.NONE,
                                                        null,
                                                        false, null);
                                                if (args != null) {
                                                    Intent updatePageIntent =
                                                            new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                                                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                            args);
                                                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                    currentActivity.sendBroadcast(updatePageIntent);
                                                    dismissOpenDialogs(null);
                                                }
                                            }

                                            stopLoader();
                                        }
                                    }
                                }

                                if (!loadingHistory) {
                                    if (launchActivity) {
                                        launchPageActivity(currentActivity,
                                                appCMSPageUI,
                                                appCMSPageAPI,
                                                pageId,
                                                pageTitle,
                                                pageId,
                                                pageTitle,
                                                loadFromFile,
                                                false,
                                                false,
                                                false,
                                                false,
                                                null,
                                                ExtraScreenType.NONE);
                                    } else {
                                        Bundle args = getPageActivityBundle(currentActivity,
                                                appCMSPageUI,
                                                appCMSPageAPI,
                                                pageId,
                                                pageTitle,
                                                pageId,
                                                pageTitle,
                                                loadFromFile,
                                                false,
                                                false,
                                                false,
                                                false,
                                                null,
                                                ExtraScreenType.NONE,
                                                null,
                                                false, null);

                                        if (args != null) {
                                            Intent downloadPageIntent =
                                                    new Intent(AppCMSPresenter
                                                            .PRESENTER_NAVIGATE_ACTION);
                                            downloadPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                                            downloadPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                            currentActivity.sendBroadcast(downloadPageIntent);
                                        }
                                    }
                                }
                            }
                        });
            }
        }
    }

    public void launchUpgradeAppActivity() {
        if (platformType == PlatformType.ANDROID
                && !cancelAllLoads) {
            try {
//                Intent upgradeIntent = new Intent(currentActivity, AppCMSUpgradeActivity.class);
//                currentActivity.startActivity(upgradeIntent);
            } catch (Exception e) {
                //Log.e(TAG, "DialogType launching Mobile DialogType Activity");
            }
        } else if (platformType == PlatformType.TV) {
            try {
                //
            } catch (Exception e) {
                //Log.e(TAG, "DialogType launching TV DialogType Activity");
            }
        }
    }

    private SemVer getInstalledAppSemVer() {
        SemVer semVer = null;
        if (currentActivity != null) {
            String currentApplicationVersion = currentActivity.getString(R.string.app_cms_app_version);
            semVer = getSemVer(currentApplicationVersion);
        }
        return semVer;
    }

    private SemVer getSemVer(String applicationVersion) {
        SemVer semVer = new SemVer();
        semVer.parse(applicationVersion);
        return semVer;
    }

    public boolean isAppUpgradeAvailable() {
        try {
            SemVer installAppSemVer = getInstalledAppSemVer();
            SemVer latestAppSemVer = new SemVer();
            String latest = null;
            if (getPlatformType().equals(PlatformType.ANDROID)) {
                if (appCMSMain.getAppVersions().getAndroidAppVersion() != null) {
                    latest = appCMSMain.getAppVersions().getAndroidAppVersion().getLatest();
                }
            } else if (Utils.isFireTVDevice(getCurrentContext())) {
                if (appCMSMain.getAppVersions().getFireTVAppVersion() != null) {
                    latest = appCMSMain.getAppVersions().getFireTVAppVersion().getLatest();
                }
            } else /*Android TV*/ {
                if (appCMSMain.getAppVersions().getAndroidTVAppVersion() != null) {
                    latest = appCMSMain.getAppVersions().getAndroidTVAppVersion().getLatest();
                }
            }
            if (latest != null) {
                latestAppSemVer.parse(latest);

                if (installAppSemVer.major > latestAppSemVer.major) {
                    return false;
                }

                return !(installAppSemVer.major == latestAppSemVer.major &&
                        installAppSemVer.minor > latestAppSemVer.minor) &&
                        !(installAppSemVer.major == latestAppSemVer.major && installAppSemVer.minor == latestAppSemVer.minor
                                && installAppSemVer.patch >= latestAppSemVer.patch);
            }

        } catch (Exception e) {
            //Log.e(TAG, "Error attempting to retrieve app version");
        }

        return false;
    }

    public boolean isAppBelowMinVersion() {
        boolean isBellowMinVersion = false;
        try {
            SemVer installAppSemVer = getInstalledAppSemVer();
            SemVer minAppSemVer = new SemVer();
            String minimum = null;
            if (getPlatformType().equals(PlatformType.ANDROID)) {
                if (appCMSMain.getAppVersions().getAndroidAppVersion() != null) {
                    minimum = appCMSMain.getAppVersions().getAndroidAppVersion().getMinimum();
                }
            } else if (Utils.isFireTVDevice(getCurrentContext())) {
                if (appCMSMain.getAppVersions().getFireTVAppVersion() != null) {
                    minimum = appCMSMain.getAppVersions().getFireTVAppVersion().getMinimum();
                }
            } else /*Android TV*/ {
                if (appCMSMain.getAppVersions().getAndroidTVAppVersion() != null) {
                    minimum = appCMSMain.getAppVersions().getAndroidTVAppVersion().getMinimum();
                }
            }
            if (minimum != null) {
                minAppSemVer.parse(minimum);
                if (installAppSemVer.major > minAppSemVer.major) {
                    return false;
                }

                isBellowMinVersion = (!(installAppSemVer.major == minAppSemVer.major &&
                        installAppSemVer.minor > minAppSemVer.minor) &&
                        !(installAppSemVer.major == minAppSemVer.major && installAppSemVer.minor == minAppSemVer.minor
                                && installAppSemVer.patch >= minAppSemVer.patch));
            }

        } catch (Exception e) {
            isBellowMinVersion = false;
            //Log.e(TAG, "Error attempting to retrieve app version");
        }

        return isBellowMinVersion;
    }

    @SuppressWarnings("unused")
    public void retrieveCurrentAppVersion() {
        if (currentActivity != null) {
            try {
                Observable
                        .fromCallable(() -> {
                            String currentAppVersion = "";
                            try {
                                currentAppVersion = Jsoup.connect("https://play.google.com/store/apps/details?id=" +
                                        currentActivity.getPackageName() +
                                        "&hl=en")
                                        .timeout(30000)
                                        .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                                        .referrer("http://www.google.com")
                                        .get()
                                        .select("div[itemprop=softwareVersion]")
                                        .first()
                                        .ownText();
                            } catch (Exception e) {
                                //Log.e(TAG, "Failed to receive ");
                            }
                            return currentAppVersion;
                        })
                        .subscribeOn(Schedulers.io())
                        .observeOn(RxJavaInterop.toV1Scheduler(AndroidSchedulers.mainThread()))
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe((result) -> Observable.just(result)
                                .onErrorResumeNext(throwable -> Observable.empty())
                                .subscribe(this::setGooglePlayAppStoreVersion));
            } catch (Exception e) {
                //Log.e(TAG, "Failed to refresh app version: " + e.getMessage());
            }
        }
    }

    public void clearHistory(
            final Action1<AppCMSDeleteHistoryResult> resultAction1, Module moduleAPI) {
        try {
            String dialogTitle = "";
            if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getkStrDeleteHistoryAlertTitle() != null)
                dialogTitle = moduleAPI.getMetadataMap().getkStrDeleteHistoryAlertTitle();
            String dialogMsg = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_all_history_items_message));
            if (moduleAPI != null && moduleAPI.getMetadataMap() != null && moduleAPI.getMetadataMap().getkStrDeleteAllVideosFromHistoryAlertMessage() != null)
                dialogMsg = moduleAPI.getMetadataMap().getkStrDeleteAllVideosFromHistoryAlertMessage();
            showDialog(DialogType.DELETE_ALL_HISTORY_ITEMS,
                    dialogMsg,
                    true,
                    () -> makeClearHistoryRequest(resultAction1),
                    () -> {
                        showLoadingDialog(false);
                    }, dialogTitle);
        } catch (Exception e) {
            //Log.e(TAG, "clearHistoryContent: " + e.toString());
        }
    }

    public void makeClearHistoryRequest
            (Action1<AppCMSDeleteHistoryResult> resultAction1) {
        /*final String url = currentActivity.getString(R.string.app_cms_clear_history_api_url,
                appCMSMain.getApiBaseUrl(),
                appPreference.getLoggedInUser(),
                appCMSMain.getInternalName());*/
        final String url = currentActivity.getString(R.string.app_cms_clear_history_api_url,
                appCMSMain.getApiBaseUrl(), appCMSMain.getInternalName());
        Log.i(TAG, "makeClearHistoryRequest : " + url);

        try {
            /*DeleteHistoryRequest request = new DeleteHistoryRequest();
            request.setUserId(appPreference.getLoggedInUser());
            request.setContentType(currentActivity.getString(R.string.delete_history_content_type_video));
            request.setPosition(1L);
            appCMSDeleteHistoryCall.call(url, getAuthToken(), apikey,
                    appCMSDeleteHistoryResult -> {
                        try {
                            sendUpdateHistoryAction();
                            Observable.just(appCMSDeleteHistoryResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(resultAction1);
                            userHistoryData.clear();
                        } catch (Exception e) {
                            //Log.e(TAG, "Error deleting all history items: " + e.getMessage());
                        }
                    }, request, false);*/
            appCMSDeleteHistoryCall.delete(url, getAuthToken(), apikey,
                    appCMSDeleteHistoryResult -> {
                        try {
                            sendUpdateHistoryAction();
                            Observable.just(appCMSDeleteHistoryResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(resultAction1);
                            userHistoryData.clear();
                        } catch (Exception e) {
                            //Log.e(TAG, "Error deleting all history items: " + e.getMessage());
                        }
                    });

        } catch (Exception e) {
            //Log.e(TAG, "Error clearing history: " + e.getMessage());
            //Log.e(TAG, "clearHistoryContent: " + e.toString());
        }
    }

    public void sendUpdateWatchListAction() {
        Intent updateWatchlistIntent = new Intent(PRESENTER_UPDATE_WATCHLIST_ACTION);
        currentActivity.sendBroadcast(updateWatchlistIntent);
    }

    public void getWatchlistData(
            final Action1<AppCMSWatchlistResult> appCMSWatchlistResultAction, boolean isWatchlistPage) {
        if (currentActivity != null) {
            MetaPage watchlistMetaPage = null;
            if (!isWatchlistPage) {
                watchlistMetaPage = followPage;
            } else {

                actionTypeToMetaPageMap.get(AppCMSActionType.WATCHLIST_PAGE);
                if (watchlistMetaPage == null) {
                    watchlistMetaPage = watchlistPage;
                }
            }

            if (watchlistMetaPage == null || TextUtils.isEmpty(watchlistMetaPage.getPageAPI()))
                return;

            final MetaPage page = watchlistMetaPage;

            AppCMSPageUI appCMSPageUI = navigationPages.get(watchlistMetaPage.getPageId());
            String apiUrl = getApiUrl(true,
                    false,
                    false,
                    false,
                    null,
                    appCMSMain.getApiBaseUrl(),
                    watchlistMetaPage.getPageAPI(),
                    appCMSMain.getInternalName(),
                    watchlistMetaPage.getPageId(),
                    false);
            getPageIdContent(apiUrl,
                    watchlistMetaPage.getPageId(),
                    null,
                    false,
                    false, new AppCMSPageAPIAction(false,
                            false,
                            false,
                            appCMSPageUI,
                            watchlistMetaPage.getPageId(),
                            watchlistMetaPage.getPageId(),
                            watchlistMetaPage.getPageName(),
                            watchlistMetaPage.getPageId(),
                            false, false, null) {
                        @Override
                        public void call(AppCMSPageAPI appCMSPageAPI) {
                            ModuleList moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_01));
                            if (moduleList == null) {
                                moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_02));
                                if (moduleList == null) {
                                    moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_03));
                                    if (moduleList == null) {
                                        moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_04));
                                    }
                                }
                            }

                            Module module = matchModuleAPIToModuleUI(moduleList, appCMSPageAPI);
                            getWatchlistPageContent(appCMSMain.getApiBaseUrl(),
                                    appCMSMain.getInternalName(),
                                    new AppCMSWatchlistAPIAction(true,
                                            false,
                                            true,
                                            appCMSPageUI,
                                            page.getPageId(),
                                            page.getPageId(),
                                            page.getPageFunction(),
                                            page.getPageId(),
                                            null) {
                                        @Override
                                        public void call(AppCMSWatchlistResult appCMSWatchlistResult) {
                                            if (appCMSWatchlistResult != null) {
                                                if (module != null)
                                                    appCMSWatchlistResult.setMetadataMap(module.getMetadataMap());
                                                Observable.just(appCMSWatchlistResult)
                                                        .onErrorResumeNext(throwable -> Observable.empty())
                                                        .subscribe(appCMSWatchlistResultAction);
                                            } else {
                                                Observable.just((AppCMSWatchlistResult) null)
                                                        .onErrorResumeNext(throwable -> Observable.empty())
                                                        .subscribe(appCMSWatchlistResultAction);
                                            }
                                        }
                                    });
                        }
                    });
        }
    }

    public void getFollowingData(
            final Action1<AppCMSWatchlistResult> appCMSWatchlistResultAction) {
        if (currentActivity != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(followPage.getPageId());
            getWatchlistPageContent(appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    new AppCMSWatchlistAPIAction(true,
                            false,
                            true,
                            appCMSPageUI,
                            followPage.getPageId(),
                            followPage.getPageId(),
                            followPage.getPageFunction(),
                            followPage.getPageId(),
                            null) {
                        @Override
                        public void call(AppCMSWatchlistResult appCMSWatchlistResult) {
                            if (appCMSWatchlistResult != null) {
                                Observable.just(appCMSWatchlistResult)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(appCMSWatchlistResultAction);
                            } else {
                                Observable.just((AppCMSWatchlistResult) null)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(appCMSWatchlistResultAction);
                            }
                        }
                    });
        }
    }

    public void getPlaylistRefreshData(
            final Action1<AppCMSPlaylistResult> appCMSPlaylistResultAction, String playlistId) {
        if (currentActivity != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(playlistPage.getPageId());

            MetaPage metaPage = pageIdToMetaPageMap.get(playlistPage.getPageId());

            getPlaylistPageContent(appCMSMain.getApiBaseUrlCached(),
                    appCMSMain.getInternalName(),
                    playlistId, new AppCMSPlaylistAPIAction(false,
                            false,
                            false,
                            appCMSPageUI,
                            metaPage.getPageId(),
                            metaPage.getPageId(),
                            metaPage.getPageFunction() != null ? metaPage.getPageFunction() : metaPage.getPageName(),
                            metaPage.getPageId(),
                            false, null) {
                        @Override
                        public void call(AppCMSPlaylistResult appCMSPlaylistResult) {
                            if (appCMSPlaylistResult != null) {
                                Observable.just(appCMSPlaylistResult)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(appCMSPlaylistResultAction);
                            } else {
                                Observable.just((AppCMSPlaylistResult) null)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(appCMSPlaylistResultAction);
                            }
                        }
                    });
        }
    }

    public void getEventsPageRefreshData(
            final Action1<AppCMSPageAPI> appCmsPageApiAction, String permaLink) {


        if (currentActivity != null && !TextUtils.isEmpty(permaLink) && eventPage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(eventPage.getPageId());


            String baseUrl = appCMSMain.getApiBaseUrl();
            String endPoint = pageIdToPageAPIUrlMap.get(eventPage.getPageId());
            String siteId = appCMSMain.getInternalName();
            String apiUrl = getApiUrl(false,
                    false,
                    false,
                    false,
                    null,
                    baseUrl,
                    endPoint,
                    siteId,
                    permaLink,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled());
            getPageIdContent(apiUrl,
                    permaLink,
                    null,
                    appCMSPageUI != null &&
                            appCMSPageUI.getCaching() != null &&
                            !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                            appCMSPageUI.getCaching().isEnabled(),
                    false,
                    new AppCMSPageAPIAction(true,
                            true,
                            true,
                            appCMSPageUI,
                            "",
                            getPageId(appCMSPageUI),
                            "",
                            permaLink,
                            false,
                            false,
                            null) {

                        final AppCMSPageAPIAction appCMSPageAPIAction = this;

                        @Override
                        public void call(final AppCMSPageAPI appCMSPageAPI) {
                            if (appCMSPageAPI != null) {
                                navigationPageData.put(this.pageId, appCMSPageAPI);

                                String dataId = "";
                                cancelInternalEvents();
                                pushActionInternalEvents(this.action
                                        + BaseView.isLandscape(currentActivity));
                                for (int i = 0; i < appCMSPageAPI.getModules().size(); i++) {
                                    if (appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase("EventDetailModule")) {
                                        dataId = appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getDataId();
                                        break;
                                    }
                                }
                                getEventsArchieve(
                                        dataId,
                                        new AppCMSEventArchieveAPIAction(true,
                                                false,
                                                true,
                                                appCMSPageUI,
                                                "",
                                                eventPage.getPageId(),
                                                eventPage.getPageFunction(),
                                                "",
                                                false, null) {

                                            @Override
                                            public void call(AppCMSEventArchieveResult appCMSEventResult) {
                                                if (appCMSEventResult != null) {

                                                    Module module = null;
                                                    if (appCMSEventResult != null) {
                                                        pageApi = appCMSEventResult.convertToAppCMSPageModule(appCMSPageAPI);
                                                    }

                                                } else {
                                                    pageApi = appCMSPageAPI;

                                                }

                                                if (pageApi != null) {
                                                    Observable.just(pageApi)
                                                            .onErrorResumeNext(throwable -> Observable.empty())
                                                            .subscribe(appCmsPageApiAction);
                                                } else {
                                                    Observable.just((AppCMSPageAPI) null)
                                                            .onErrorResumeNext(throwable -> Observable.empty())
                                                            .subscribe(appCmsPageApiAction);
                                                }
                                            }
                                        });

                            } else {
                                stopLoader();
                            }
                            loadingPage = false;
                        }
                    });
//            }

        }


    }

    public void getScheduleRefreshData(
            final Action1<List<AppCMSScheduleResult>> appCMSScheduleResultAction) {
        if (currentActivity != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(schedulePage.getPageId());

            MetaPage metaPage = pageIdToMetaPageMap.get(schedulePage.getPageId());


            getSchedulePageContent(appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    metaPage.getPageId(), new AppCMSAPIAction<AppCMSScheduleResult>(true,
                            false,
                            true,
                            appCMSPageUI,
                            metaPage.getPageId(),
                            metaPage.getPageId(),
                            metaPage.getPageFunction() != null ? metaPage.getPageFunction() : metaPage.getPageName(),
                            metaPage.getPageId(),
                            false, null) {
                        @Override
                        public void call(List<AppCMSScheduleResult> appCMSScheduleResult) {
                            if (appCMSScheduleResult != null) {
                                Observable.just(appCMSScheduleResult)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(appCMSScheduleResultAction);
                            } else {
                                Observable.just((AppCMSScheduleResult) null)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe((Observer<? super AppCMSScheduleResult>) appCMSScheduleResultAction);
                            }
                        }
                    });
        }
    }

    public void getRosterRefreshData(
            final Action1<List<AppCMSRosterResult>> appCMSRosterResultAction) {
        if (currentActivity != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(rosterPage.getPageId());

            MetaPage metaPage = pageIdToMetaPageMap.get(rosterPage.getPageId());

            {
                getRosterPage(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        metaPage.getPageId(), new AppCMSAPIAction<AppCMSRosterResult>(true,
                                false,
                                true,
                                appCMSPageUI,
                                metaPage.getPageId(),
                                metaPage.getPageId(),
                                metaPage.getPageFunction() != null ? metaPage.getPageFunction() : metaPage.getPageName(),
                                metaPage.getPageId(),
                                false, null) {
                            @Override
                            public void call(List<AppCMSRosterResult> appCMSRosterResult) {
                                if (appCMSRosterResult != null) {
                                    Observable.just(appCMSRosterResult)
                                            .onErrorResumeNext(throwable -> Observable.empty())
                                            .subscribe(appCMSRosterResultAction);
                                } else {
                                    Observable.just((AppCMSScheduleResult) null)
                                            .onErrorResumeNext(throwable -> Observable.empty())
                                            .subscribe((Observer<? super AppCMSScheduleResult>) appCMSRosterResultAction);
                                }
                            }
                        });
            }


        }
    }

    public void getLibraryRefreshData(
            final Action1<AppCMSLibraryResult> appCMSRosterResultAction) {
        if (currentActivity != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(libraryPage.getPageId());

            MetaPage metaPage = pageIdToMetaPageMap.get(libraryPage.getPageId());

            {
                getLibraryPage(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        new AppCMSLibraryAPIAction<AppCMSLibraryResult>(true,
                                false,
                                true,
                                appCMSPageUI,
                                metaPage.getPageId(),
                                metaPage.getPageId(),
                                metaPage.getPageFunction(),
                                metaPage.getPageId(),
                                false, null) {
                            @Override
                            public void call(AppCMSLibraryResult appCMSLibraryResultResult) {
                                if (appCMSLibraryResultResult != null) {
                                    Observable.just(appCMSLibraryResultResult)
                                            .onErrorResumeNext(throwable -> Observable.empty())
                                            .subscribe(appCMSRosterResultAction);
                                } else {
                                    Observable.just((AppCMSScheduleResult) null)
                                            .onErrorResumeNext(throwable -> Observable.empty())
                                            .subscribe((Observer<? super AppCMSScheduleResult>) appCMSRosterResultAction);
                                }
                            }
                        });
            }


        }
    }

    public void navigateToExpandedDetailPage(String title, List<ContentDatum> rowDataList, int clickedItemPos) {

        AppCMSPageUI appCMSPageUI = new AppCMSPageUI();
        ModuleList moduleList = new ModuleList();
        moduleList.setId("expanded_detail");
        moduleList.setBlockName("expanded01");
        moduleList.setView("expanded_detail_view");
        moduleList.setType("expanded01");
        ArrayList<ModuleList> list = new ArrayList<>();
        list.add(moduleList);
        appCMSPageUI.setModuleList(list);
        AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
        appCMSPageAPI.setId("expanded_detail");
        Module module = new Module();
        module.setTitle(title);
        module.setId("expanded_detail");
        module.setItemPosition(clickedItemPos);
        module.setContentData(rowDataList);
        List<Module> moduleList1 = new ArrayList<>();
        moduleList1.add(module);
        appCMSPageAPI.setModules(moduleList1);
        String id = rowDataList.get(clickedItemPos).getGist().getId() != null ?
                rowDataList.get(clickedItemPos).getGist().getId() :
                rowDataList.get(clickedItemPos).getGist().getTitle();
        Bundle args = getPageActivityBundle(currentActivity,
                appCMSPageUI,
                appCMSPageAPI,
                id,
                rowDataList.get(clickedItemPos).getGist().getTitle(),
                rowDataList.get(clickedItemPos).getGist().getId(),
                "Expanded View",
                loadFromFile,
                true,
                false,
                true,
                false,
                Uri.EMPTY,
                ExtraScreenType.NONE,
                null,
                false, null);
        if (args != null) {
            Intent updatePageIntent =
                    new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                    args);
            currentActivity.sendBroadcast(updatePageIntent);
            setNavItemToCurrentAction(currentActivity);
        }
    }

    public void navigateToSubNavigationPage(String pageId,
                                            String title,
                                            String url,
                                            NavigationPrimary primary,
                                            List<NavigationPrimary> items,
                                            List<ContentDatum> dataList, boolean launchActivity) {
        AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
        if (title != null && title.toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.app_cms_settings_page_tag))
                || (primary != null && primary.getDisplayedPath() != null && primary.getDisplayedPath().contains(currentContext.getString(R.string.app_cms_pagename_my_account_screen_key))) ||
                (primary != null && primary.getDisplayedPath() != null && primary.getDisplayedPath().contains(currentContext.getString(R.string.page_account_settings)))) {
            if (null != subNavPage) {
                appCMSPageUI = navigationPages.get(subNavPage.getPageId());
                if (appCMSPageUI != null && (appCMSPageUI.getModuleList() == null || appCMSPageUI.getModuleList().size() == 0)) {
                    appCMSPageUI = new AppCMSPageUI();
                    ModuleList moduleList = new ModuleList();
                    moduleList.setBlockName("subNav01");
                    moduleList.setType("AC SubNav 01");
                    moduleList.setView("AC SubNav 01");
                    moduleList.setId("Setting");
                    ArrayList<ModuleList> moduleListArrayList = new ArrayList<ModuleList>();
                    moduleListArrayList.add(moduleList);
                    appCMSPageUI.setModuleList(moduleListArrayList);
                } else {
                    appCMSPageUI = new AppCMSPageUI();
                    ModuleList moduleList = new ModuleList();
                    moduleList.setBlockName("subNav01");
                    moduleList.setType("AC SubNav 01");
                    moduleList.setView("AC SubNav 01");
                    moduleList.setId("Setting");
                    ArrayList<ModuleList> moduleListArrayList = new ArrayList<ModuleList>();
                    moduleListArrayList.add(moduleList);
                    appCMSPageUI.setModuleList(moduleListArrayList);
                }
            } else {
                appCMSPageUI = new AppCMSPageUI();
                ModuleList moduleList = new ModuleList();
                moduleList.setBlockName("subNav01");
                moduleList.setType("AC SubNav 01");
                moduleList.setView("AC SubNav 01");
                moduleList.setId("Setting");
                ArrayList<ModuleList> moduleListArrayList = new ArrayList<ModuleList>();
                moduleListArrayList.add(moduleList);
                appCMSPageUI.setModuleList(moduleListArrayList);
            }
        }
        if (appCMSPageUI == null) {
            if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                        title, null,
                        null, launchActivity, pageId, SUB_NAV_RETRY_ACTION);
                retryCallBinder.setPageId(pageId);
                retryCallBinder.setPrimary(primary);
                retryCallBinder.setItems(items);
                Bundle bundle = new Bundle();
                bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.is_tos_dialog_page_key), false);
                bundle.putBoolean(currentActivity.getString(R.string.is_login_dialog_page_key), false);
                bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(args);
                return;
            }
            MetaPage metaPage = pageIdToMetaPageMap.get(pageId);

            if (title.contains("Setting")) {
                metaPage = subNavPage;
            }

            if (metaPage != null) {
                MetaPage finalMetaPage = metaPage;
                getAppCMSPage(createPageUiUrl(metaPage),
                        appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null && finalMetaPage.getPageId() != null) {
                                navigationPages.put(finalMetaPage.getPageId(), appCMSPageUIResult);
                                String action = pageNameToActionMap.get(finalMetaPage.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUIResult);
                                }
                                navigateToSubNavigationPage(pageId, title, url, primary, items, dataList, launchActivity);
                            }
                        },
                        loadFromFile,
                        false);
            }
        } else {
            AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
            Module module = new Module();
            module.setId(currentActivity.getString(R.string.blank_string));
            if (null != appCMSPageUI && null != appCMSPageUI.getModuleList()
                    && appCMSPageUI.getModuleList().size() > 0) {
                module.setId(appCMSPageUI.getModuleList().get(0).getId());
                module.setTitle(title);
            }
            ArrayList<Module> moduleList = new ArrayList<>();
            moduleList.add(module);
            appCMSPageAPI.setModules(moduleList);
            appCMSPageAPI.setId(pageId);
            appCMSPageAPI.setTitle(title);
            module.setContentData(dataList);

            if (module.getContentData() == null) {
                ArrayList<ContentDatum> data = new ArrayList<>();
                for (NavigationPrimary navigationPrimary : items) {
                    data.add(navigationPrimary.convertToContentDatum(this));
                }
                module.setContentData(data);
            }

            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageId,
                    title,
                    pageId,
                    pageIdToPageFunctionMap.get(pageId),
                    loadFromFile,
                    true,
                    false,
                    true,
                    false,
                    Uri.EMPTY,
                    ExtraScreenType.NONE,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                currentActivity.sendBroadcast(updatePageIntent);
                setNavItemToCurrentAction(currentActivity);
            }
        }
    }


    public void navigateToWatchlistPage(String pageId, String pageTitle, String url,
                                        boolean navbarPresent, boolean appbarPresent,
                                        boolean showParentalGateView) {

        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            setDownlistScreenCache(null);
            if (appCMSPageUI == null) {
                if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                    RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                            pageTitle, null,
                            null, false, null, WATCHLIST_RETRY_ACTION);
                    retryCallBinder.setPageId(pageId);
                    Bundle bundle = new Bundle();
                    bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                    bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                    Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                    args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                    args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(args);
                    return;
                }

                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToWatchlistPage(pageId, pageTitle, url, navbarPresent, appbarPresent, showParentalGateView);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                    RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                            pageTitle, null,
                            null, false, null, WATCHLIST_RETRY_ACTION);
                    retryCallBinder.setPageId(pageId);
                    Bundle bundle = new Bundle();
                    bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                    bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                    Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                    args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                    args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(args);
                    return;
                }
                String apiUrl = getApiUrl(true,
                        false,
                        false,
                        false,
                        null,
                        appCMSMain.getApiBaseUrl(),
                        watchlistPage.getPageAPI(),
                        appCMSMain.getInternalName(),
                        pageId,
                        false);

                getPageIdContent(apiUrl,
                        pageId,
                        null,
                        false,
                        false, new AppCMSPageAPIAction(appbarPresent,
                                false,
                                navbarPresent,
                                appCMSPageUI,
                                pageId,
                                pageId,
                                pageTitle,
                                pageId,
                                false, false, null) {
                            @Override
                            public void call(AppCMSPageAPI appCMSPageAPI) {
                                ModuleList moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_01));
                                if (moduleList == null) {
                                    moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_02));
                                    if (moduleList == null) {
                                        moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_03));
                                        if (moduleList == null) {
                                            moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_watchlist_04));
                                        }
                                    }
                                }

                                Module moduleW = matchModuleAPIToModuleUI(moduleList, appCMSPageAPI);
                                getWatchlistPageContent(appCMSMain.getApiBaseUrl(),
                                        appCMSMain.getInternalName(),
                                        new AppCMSWatchlistAPIAction(appbarPresent,
                                                false,
                                                navbarPresent,
                                                appCMSPageUI,
                                                pageId,
                                                pageId,
                                                pageTitle,
                                                pageId,
                                                null) {
                                            @Override
                                            public void call(AppCMSWatchlistResult appCMSWatchlistResult) {
                                                cancelInternalEvents();
                                                pushActionInternalEvents(this.pageId
                                                        + BaseView.isLandscape(currentActivity));

                                                AppCMSPageAPI pageAPI;
                                                if (appCMSWatchlistResult != null && appCMSWatchlistResult.getRecords() != null) {
                                                    if (moduleW != null)
                                                        appCMSWatchlistResult.setMetadataMap(moduleW.getMetadataMap());
                                                    pageAPI = appCMSWatchlistResult.convertToAppCMSPageAPI(this.pageId, isPromoValidationRequired());
                                                } else {
                                                    pageAPI = new AppCMSPageAPI();
                                                    pageAPI.setId(this.pageId);
                                                    List<String> moduleIds = new ArrayList<>();
                                                    List<Module> apiModules = new ArrayList<>();
                                                    for (ModuleList module : appCMSPageUI.getModuleList()) {
                                                        Module module1 = new Module();
                                                        module1.setId(module.getId());
                                                        if (moduleW != null)
                                                            module1.setMetadataMap(moduleW.getMetadataMap());
                                                        apiModules.add(module1);
                                                        moduleIds.add(module.getId());
                                                    }
                                                    pageAPI.setModuleIds(moduleIds);
                                                    pageAPI.setModules(apiModules);
                                                }
                                                navigationPageData.put(this.pageId, pageAPI);
                                                Bundle args = getPageActivityBundle(currentActivity,
                                                        this.appCMSPageUI,
                                                        pageAPI,
                                                        this.pageId,
                                                        this.pageTitle,
                                                        this.pagePath,
                                                        pageIdToPageFunctionMap.get(this.pageId),
                                                        loadFromFile,
                                                        this.appbarPresent,
                                                        this.fullscreenEnabled,
                                                        this.navbarPresent,
                                                        false,
                                                        null,
                                                        ExtraScreenType.NONE,
                                                        null,
                                                        showParentalGateView, null);
                                                if (args != null) {
                                                    Intent watchlistPageIntent =
                                                            new Intent(AppCMSPresenter
                                                                    .PRESENTER_NAVIGATE_ACTION);
                                                    watchlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                            args);
                                                    watchlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                    currentActivity.sendBroadcast(watchlistPageIntent);
                                                }
                                                stopLoader();
                                            }
                                        });
                            }
                        });
            }
        }
    }

    private void downloadAutoPlayPage(ContentDatum contentDatum) {
        try {
            String mediaType = contentDatum.getMediaType() == null ? contentDatum.getGist().getContentType() : contentDatum.getMediaType();
            String pageId = getAutoplayPageId(mediaType);
            final AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                stopLoader();
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(pageId, appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                }
                            },
                            loadFromFile,
                            false);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Method launches the autoplay screen
     *
     * @param pageId    pageId to get the Page UI from navigationPages
     * @param pageTitle pageTitle
     * @param url       url of the API which gets the VideoDetails
     * @param binder    binder to share data
     * @param action1
     */
    private void navigateToAutoplayPage(final String pageId,
                                        final String pageTitle,
                                        String url,
                                        final AppCMSVideoPageBinder binder, Action1<Object> action1) {
        if (currentActivity != null && getPlatformType() == PlatformType.ANDROID) {
            final AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            if (appCMSPageUI == null) {
                showLoader();
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                stopLoader();
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(pageId, appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                    navigateToAutoplayPage(pageId, pageTitle, url, binder, action1);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                if (!binder.isOffline()) {
                    launchMobileAutoplayActivity(pageId, pageTitle, url, binder, action1, appCMSPageUI);
                } else {
                    AppCMSPageAPI pageAPI = null;
                    if (appCMSPageUI != null && appCMSPageUI.getModuleList() != null
                            && appCMSPageUI.getModuleList().size() > 0
                            && getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_autoplay_04)) != null)
                        pageAPI = binder.getContentData().convertToAppCMSPageAPI(
                                currentActivity.getString(R.string.app_cms_page_autoplay_module_key_04));
                    else
                        pageAPI = binder.getContentData().convertToAppCMSPageAPI(
                                currentActivity.getString(R.string.app_cms_page_autoplay_module_key_01));

                    if (pageAPI != null) {
                        launchAutoplayActivity(currentActivity,
                                appCMSPageUI,
                                pageAPI,
                                pageId,
                                pageTitle,
                                pageIdToPageFunctionMap.get(pageId),
                                loadFromFile,
                                false,
                                true,
                                false,
                                false,
                                binder, action1);
                    }
                }
            }
        } else if (currentActivity != null && getPlatformType() == PlatformType.TV) {
            launchTVAutoplayActivity(pageTitle, url, binder, action1);
        }
    }


    public void launchMobileAutoplayActivity(String pageId, String pageTitle, String url,
                                             AppCMSVideoPageBinder binder, Action1<Object> action1,
                                             AppCMSPageUI appCMSPageUI) {
        GetAppCMSContentDetailTask.Params params =
                new GetAppCMSContentDetailTask.Params.Builder().url(url)
                        .authToken(getAuthToken())
                        .apiKey(apikey).build();
        new GetAppCMSContentDetailTask(appCMSContentDetailCall,
                appCMSContentDetail -> {
                    try {
                        if (appCMSContentDetail != null) {
                            Module moduleApi = null;
                            if (binder.getContentData().getModuleApi() != null)
                                moduleApi = binder.getContentData().getModuleApi();
                            binder.setContentData(appCMSContentDetail.convertToContentDatum(moduleApi));

                            AppCMSPageAPI pageAPI = null;
                            for (ModuleList moduleList :
                                    appCMSPageUI.getModuleList()) {
                                if (moduleList.getType().equals(currentActivity
                                        .getString(R.string.app_cms_page_autoplay_module_key_01)) ||
                                        moduleList.getType().equals(currentActivity
                                                .getString(R.string.app_cms_page_autoplay_module_key_02)) ||
                                        moduleList.getType().equals(currentActivity
                                                .getString(R.string.app_cms_page_autoplay_module_key_03)) ||
                                        moduleList.getType().equals(currentActivity
                                                .getString(R.string.app_cms_page_autoplay_module_key_04)) ||
                                        moduleList.getType().equals(currentActivity
                                                .getString(R.string.app_cms_page_autoplay_landscape_module_key_01)) ||
                                        moduleList.getType().equals(currentActivity
                                                .getString(R.string.app_cms_page_autoplay_portrait_module_key_01))) {
                                    pageAPI = appCMSContentDetail.convertToAppCMSPageAPI(pageId,
                                            moduleList.getType(), binder.getContentData().getModuleApi());
                                    break;
                                }
                            }
                            if (pageAPI != null) {
                                launchAutoplayActivity(currentActivity,
                                        appCMSPageUI,
                                        pageAPI,
                                        pageId,
                                        pageTitle,
                                        pageIdToPageFunctionMap.get(pageId),
                                        loadFromFile,
                                        false,
                                        true,
                                        false,
                                        false,
                                        binder,
                                        action1);
                            }
                        } else {
                            //Log.e(TAG, "API issue in VideoDetail call");
                            if (platformType == PlatformType.TV) {
                                action1.call(null);
                            }
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving video details: " + e.getMessage());
                        if (platformType == PlatformType.TV) {
                            action1.call(null);
                        }
                    }
                }).execute(params);
    }

    public void launchTVAutoplayActivity(String pageTitle, String url,
                                         AppCMSVideoPageBinder binder, Action1<Object> action1) {

        GetAppCMSContentDetailTask.Params params =
                new GetAppCMSContentDetailTask.Params.Builder().url(url)
                        .authToken(getAuthToken())
                        .apiKey(apikey).build();
        new GetAppCMSContentDetailTask(appCMSContentDetailCall,
                appCMSContentDetail -> {
                    try {
                        if (appCMSContentDetail != null) {
                            ContentDatum contentData = appCMSContentDetail.convertToContentDatum(null);
                            contentData.setSeason(binder.getContentData().getSeason());
                            if (binder.getContentData().getModuleApi() != null)
                                contentData.setModuleApi(binder.getContentData().getModuleApi());
                            binder.setContentData(contentData);
                            final AppCMSPageAPI[] pageAPI = {null};

                            String autoplayPageId = getAutoplayPageId(binder.getContentData().getGist().getMediaType());
                            final AppCMSPageUI[] appCMSPageUI = {navigationPages.get(autoplayPageId)};

                            if (null == appCMSPageUI[0]) {
                                MetaPage metaPage = pageIdToMetaPageMap.get(autoplayPageId);
                                if (metaPage != null) {
                                    getAppCMSPage(createPageUiUrl(metaPage),
                                            appCMSPageUIResult -> {
                                                stopLoader();
                                                if (appCMSPageUIResult != null) {
                                                    appCMSPageUI[0] = appCMSPageUIResult;
                                                    navigationPages.put(autoplayPageId, appCMSPageUIResult);
                                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                                    if (action != null && actionToPageMap.containsKey(action)) {
                                                        actionToPageMap.put(action, appCMSPageUIResult);
                                                    }
                                                    for (ModuleList moduleList : appCMSPageUI[0].getModuleList()) {
                                                        if (AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_01.equals(jsonValueKeyMap.get(moduleList.getType())) ||
                                                                AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_02.equals(jsonValueKeyMap.get(moduleList.getType())) ||
                                                                AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_03.equals(jsonValueKeyMap.get(moduleList.getType())) ||
                                                                AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_04.equals(jsonValueKeyMap.get(moduleList.getType())) ||
                                                                AppCMSUIKeyType.PAGE_AUTOPLAY_LANDSCAPE_MODULE_KEY.equals(jsonValueKeyMap.get(moduleList.getType())) ||
                                                                AppCMSUIKeyType.PAGE_AUTOPLAY_PORTRAIT_MODULE_KEY.equals(jsonValueKeyMap.get(moduleList.getType()))) {
                                                            pageAPI[0] = appCMSContentDetail.convertToAppCMSPageAPI(autoplayPageId,
                                                                    moduleList.getType(), null);
                                                            break;
                                                        }
                                                    }
                                                    if (pageAPI[0] != null) {
                                                        Bundle args = getAutoplayActivityBundle(
                                                                currentActivity,
                                                                appCMSPageUI[0],
                                                                pageAPI[0],
                                                                autoplayPageId,
                                                                pageTitle,
                                                                pageIdToPageFunctionMap.get(autoplayPageId),
                                                                loadFromFile,
                                                                appbarPresent,
                                                                false,
                                                                navbarPresent,
                                                                false,
                                                                binder);
                                                        Intent autoplayPageIntent =
                                                                new Intent(AppCMSPresenter
                                                                        .PRESENTER_OPEN_AUTOPLAY_SCREEN);
                                                        autoplayPageIntent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), args);
                                                        autoplayPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                        currentActivity.sendBroadcast(autoplayPageIntent);
                                                    }
                                                }
                                            },
                                            loadFromFile,
                                            false);
                                }
                            } else {
                                for (ModuleList moduleList : appCMSPageUI[0].getModuleList()) {
                                    if (jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_01) ||
                                            jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_02) ||
                                            jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_03) ||
                                            jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_MODULE_KEY_04) ||
                                            jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_LANDSCAPE_MODULE_KEY) ||
                                            jsonValueKeyMap.get(moduleList.getType()).equals(AppCMSUIKeyType.PAGE_AUTOPLAY_PORTRAIT_MODULE_KEY)) {
                                        pageAPI[0] = appCMSContentDetail.convertToAppCMSPageAPI(autoplayPageId,
                                                moduleList.getType(), null);
                                        break;
                                    }
                                }
                                if (pageAPI[0] != null) {
                                    Bundle args = getAutoplayActivityBundle(
                                            currentActivity,
                                            appCMSPageUI[0],
                                            pageAPI[0],
                                            autoplayPageId,
                                            pageTitle,
                                            pageIdToPageFunctionMap.get(autoplayPageId),
                                            loadFromFile,
                                            appbarPresent,
                                            false,
                                            navbarPresent,
                                            false,
                                            binder);
                                    Intent autoplayPageIntent =
                                            new Intent(AppCMSPresenter.PRESENTER_OPEN_AUTOPLAY_SCREEN);
                                    autoplayPageIntent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), args);
                                    autoplayPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                    currentActivity.sendBroadcast(autoplayPageIntent);
                                } else {
                                    if (platformType == PlatformType.TV) {
                                        action1.call(null);
                                    }
                                }
                            }
                        } else {
                            //Log.e(TAG, "API issue in VideoDetail call");
                            if (platformType == PlatformType.TV) {
                                action1.call("server_error");
                            }
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving video details: " + e.getMessage());
                        if (platformType == PlatformType.TV) {
                            action1.call(null);
                        }
                    }
                }).execute(params);
    }

    private void getAudioContent(final String apiBaseUrl,
                                 final String siteId,
                                 String pageId,
                                 final AppCMSAudioDetailAPIAction audiDetail) {
        if (currentContext != null) {
            try {
                appCMSAudioDetailCall.call(
                        currentContext.getString(R.string.app_cms_audio_detail_api_url,
                                apiBaseUrl,
                                siteId,
                                pageId),
                        apikey, getAuthToken(),
                        audiDetail);
            } catch (IOException e) {
            }
        }
    }

    static <T> T createRetrofitService(final Class<T> clazz, final String endPoint) {
        final Retrofit restAdapter = new Retrofit.Builder().baseUrl(endPoint)
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        T service = restAdapter.create(clazz);
        return service;
    }

    private void getAudioContentAsy(final String apiBaseUrl,
                                    final String siteId,
                                    String pageId,
                                    final AppCMSAudioDetailAPIAction audiDetail) {
        if (currentContext != null) {
            try {
                String url = currentContext.getString(R.string.app_cms_audio_detail_api_url,
                        apiBaseUrl,
                        siteId,
                        pageId);
                AppCMSAudioDetailRest appCMSAudioDetailCallPlaylist = createRetrofitService(AppCMSAudioDetailRest.class, apiBaseUrl);
                Map<String, String> authTokenMap = new HashMap<>();
                authTokenMap.put("x-api-key", apikey);
                authTokenMap.put("Authorization", getAuthToken());

                appCMSAudioDetailCallPlaylist.getPlayList(siteId, pageId, authTokenMap).subscribeOn(Schedulers.io()).observeOn(RxJavaInterop.toV1Scheduler(AndroidSchedulers.mainThread())).subscribe(new Subscriber<AppCMSAudioDetailResult>() {
                    @Override
                    public void onCompleted() {
                        Log.d("TAG", "Complete");
                    }

                    @Override
                    public void onError(Throwable e) {
                        audiDetail.call(null);
                    }

                    @Override
                    public void onNext(AppCMSAudioDetailResult appCMSAudioDetailResult) {
                        Observable.just(appCMSAudioDetailResult).subscribe(audiDetail);
                    }
                });
            } catch (Exception e) {
                Log.e("TAG", "Print Exception :" + e.getMessage());
            }
        }

    }

    public AudioPlaylistHelper.IPlaybackCall getCallBackPlaylistHelper() {
        return callBackPlaylistHelper;
    }


    public void getAudioDetailPlaylist(String audioId, long mCurrentPlayerPosition,
                                       AudioPlaylistHelper.IPlaybackCall callBackPlaylistHelper
            , boolean isPlayerScreenOpen, Boolean playAudio, int tryCount,
                                       AppCMSAudioDetailAPIAction appCMSAudioDetailAPIAction) {
        if (!isNetworkConnected()) {
            int count = tryCount;
            openDownloadScreenForNetworkError(false,
                    () -> getAudioDetail(audioId, mCurrentPlayerPosition, callBackPlaylistHelper, isPlayerScreenOpen,
                            playAudio, count, appCMSAudioDetailAPIAction));
            return;
        }

        tryCount++;
        this.callBackPlaylistHelper = callBackPlaylistHelper;
        int finalTryCount = tryCount;
        AudioServiceHelper.getAudioInstance().createAndConnectWithMediaBrowserService();
        getAudioContentAsy(appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName(),
                audioId,
                new AppCMSAudioDetailAPIAction(false,
                        false,
                        false,
                        null,
                        audioId,
                        audioId,
                        null,
                        audioId,
                        false, null) {
                    @Override
                    public void call(AppCMSAudioDetailResult appCMSAudioDetailResult) {

                        if (appCMSAudioDetailResult != null) {
                            AppCMSPageAPI audioApiDetail = appCMSAudioDetailResult.convertToAppCMSPageAPI(this.pageId);
                            /*check to play audio*/
                            if (playAudio) {
                                sendGaEvent(currentContext.getResources().getString(R.string.play_audio_action),
                                        currentContext.getResources().getString(R.string.play_audio_category), appCMSAudioDetailResult.getGist().getId());
                                AudioPlaylistHelper.getInstance().createMediaMetaDataForAudioItem(appCMSAudioDetailResult);
                                PlaybackManager.setCurrentMediaData(AudioPlaylistHelper.getInstance().getMetadata(appCMSAudioDetailResult.getId()));
                                AudioPlaylistHelper.getInstance().setCurrentAudioPLayingData(audioApiDetail.getModules().get(0).getContentData().get(0));
                                if (callBackPlaylistHelper != null) {
                                    callBackPlaylistHelper.onPlaybackStart(AudioPlaylistHelper.getInstance().getMediaMetaDataItem(appCMSAudioDetailResult.getId()), mCurrentPlayerPosition);
                                } else if (currentActivity != null) {
                                    AudioPlaylistHelper.getInstance().onMediaItemSelected(AudioPlaylistHelper.getInstance().getMediaMetaDataItem(appCMSAudioDetailResult.getId()), mCurrentPlayerPosition);
                                }
                            } else {
                                if (appCMSAudioDetailAPIAction != null) {
                                    appCMSAudioDetailAPIAction.call(appCMSAudioDetailResult);
                                }
                            }
                            if (isPlayerScreenOpen && currentActivity != null) {
                                try {
                                    GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
                                    int resultCode = apiAvailability.isGooglePlayServicesAvailable(currentActivity);
                                    if (resultCode == ConnectionResult.SUCCESS) {
                                        Intent intent = new Intent(currentActivity, AppCMSPlayAudioActivity.class);
                                        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                                        MediaControllerCompat controller = MediaControllerCompat.getMediaController(currentActivity);
                                        if (controller != null) {
                                            MediaMetadataCompat metadata = controller.getMetadata();
                                            if (metadata != null) {
                                                intent.putExtra(EXTRA_CURRENT_MEDIA_DESCRIPTION, metadata);
                                            }
                                        }
                                        currentActivity.startActivity(intent);
                                    } else {

                                        int PLAY_SERVICES_RESOLUTION_REQUEST = 1001;
                                        if (apiAvailability.isUserResolvableError(resultCode)) {
                                            if (BuildConfig.FLAVOR.equalsIgnoreCase(AppCMSPresenter.MOBILE_BUILD_VARIENT)) {
                                                apiAvailability.getErrorDialog(currentActivity, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)
                                                        .show();
                                            }
                                        } /*else {
                                        Log.i(TAG, "This device is not supported.");
                                        Toast.makeText(currentActivity, "This device is not supported.", Toast.LENGTH_SHORT).show();
                                    }*/
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }

                        } else {
                            if (finalTryCount < 3) {
                                getAudioDetailPlaylist(audioId, mCurrentPlayerPosition, callBackPlaylistHelper, isPlayerScreenOpen, playAudio, finalTryCount, appCMSAudioDetailAPIAction);
                            } else {
                                appCMSAudioDetailAPIAction.call(appCMSAudioDetailResult);

                            }
                        }

                        if (currentActivity != null) {

                            //stopLoader();
                        }
                    }
                });
    }


    public void getAudioDetail(String audioId, long mCurrentPlayerPosition,
                               AudioPlaylistHelper.IPlaybackCall callBackPlaylistHelper
            , boolean isPlayerScreenOpen, Boolean playAudio, int tryCount,
                               AppCMSAudioDetailAPIAction appCMSAudioDetailAPIAction) {
        try {
            GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
            int resultCode = apiAvailability.isGooglePlayServicesAvailable(getCurrentActiveContext());
            if (resultCode != ConnectionResult.SUCCESS) {

                int PLAY_SERVICES_RESOLUTION_REQUEST = 1001;
                if (apiAvailability.isUserResolvableError(resultCode)) {
                    if (BuildConfig.FLAVOR.contains(AppCMSPresenter.MOBILE_BUILD_VARIENT)) {
                        apiAvailability.getErrorDialog((Activity) getCurrentActiveContext(), resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)
                                .show();
                    }
                }/* else {
                Log.i(TAG, "This device is not supported.");
                Toast.makeText(getCurrentActiveContext(), "This device is not supported.", Toast.LENGTH_SHORT).show();
            }*/
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        if (!isNetworkConnected()) {
            int count = tryCount;
            openDownloadScreenForNetworkError(false,
                    () -> getAudioDetail(audioId, mCurrentPlayerPosition, callBackPlaylistHelper, isPlayerScreenOpen,
                            playAudio, count, appCMSAudioDetailAPIAction));
            return;
        }
        if (currentActivity != null) {
            showLoader();
        }
        AudioServiceHelper.getAudioInstance().createAndConnectWithMediaBrowserService();
        tryCount++;
        this.callBackPlaylistHelper = callBackPlaylistHelper;
        int finalTryCount = tryCount;
        getAudioContent(appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName(),
                audioId,
                new AppCMSAudioDetailAPIAction(false,
                        false,
                        false,
                        null,
                        audioId,
                        audioId,
                        null,
                        audioId,
                        false, null) {
                    @Override
                    public void call(AppCMSAudioDetailResult appCMSAudioDetailResult) {

                        if (appCMSAudioDetailResult != null) {
                            AppCMSPageAPI audioApiDetail = appCMSAudioDetailResult.convertToAppCMSPageAPI(this.pageId);
                            /*check to play audio*/
                            if (playAudio) {
                                sendGaEvent(currentContext.getResources().getString(R.string.play_audio_action),
                                        currentContext.getResources().getString(R.string.play_audio_category), appCMSAudioDetailResult.getGist().getId());
                                AudioPlaylistHelper.getInstance().createMediaMetaDataForAudioItem(appCMSAudioDetailResult);
                                PlaybackManager.setCurrentMediaData(AudioPlaylistHelper.getInstance().getMetadata(appCMSAudioDetailResult.getId()));
                                AudioPlaylistHelper.getInstance().setCurrentAudioPLayingData(audioApiDetail.getModules().get(0).getContentData().get(0));
                                if (callBackPlaylistHelper != null) {
                                    callBackPlaylistHelper.onPlaybackStart(AudioPlaylistHelper.getInstance().getMediaMetaDataItem(appCMSAudioDetailResult.getId()), mCurrentPlayerPosition);
                                } else if (currentActivity != null) {
                                    AudioPlaylistHelper.getInstance().onMediaItemSelected(AudioPlaylistHelper.getInstance().getMediaMetaDataItem(appCMSAudioDetailResult.getId()), mCurrentPlayerPosition);
                                }
                            } else {
                                if (appCMSAudioDetailAPIAction != null) {
                                    appCMSAudioDetailAPIAction.call(appCMSAudioDetailResult);
                                }
                            }
                            if (isPlayerScreenOpen && currentActivity != null) {
                                try {
                                    GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
                                    int resultCode = apiAvailability.isGooglePlayServicesAvailable(currentActivity);
                                    if (resultCode == ConnectionResult.SUCCESS) {
                                        Intent intent = new Intent(currentActivity, AppCMSPlayAudioActivity.class);
                                        intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
                                        MediaControllerCompat controller = MediaControllerCompat.getMediaController(currentActivity);
                                        if (controller != null) {
                                            MediaMetadataCompat metadata = AudioPlaylistHelper.getInstance().getMetadata(appCMSAudioDetailResult.getGist().getId());//controller.getMetadata();
                                            if (metadata != null) {
                                                intent.putExtra(EXTRA_CURRENT_MEDIA_DESCRIPTION,
                                                        metadata);
                                            }
                                        }
                                        currentActivity.startActivity(intent);
                                    } else {
                                        int PLAY_SERVICES_RESOLUTION_REQUEST = 1001;
                                        if (apiAvailability.isUserResolvableError(resultCode)) {
                                            if (BuildConfig.FLAVOR.equalsIgnoreCase(AppCMSPresenter.MOBILE_BUILD_VARIENT)) {
                                                apiAvailability.getErrorDialog(currentActivity, resultCode, PLAY_SERVICES_RESOLUTION_REQUEST)
                                                        .show();
                                            }
                                        }/* else {
                                        Log.i(TAG, "This device is not supported.");
                                        Toast.makeText(currentActivity, "This device is not supported.", Toast.LENGTH_SHORT).show();
                                    }*/
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }

                        } else {
                            if (finalTryCount < 3) {
                                getAudioDetail(audioId, mCurrentPlayerPosition, callBackPlaylistHelper, isPlayerScreenOpen, playAudio, finalTryCount, appCMSAudioDetailAPIAction);
                            }
                        }

                        if (currentActivity != null) {

                            stopLoader();
                        }
                    }
                });
    }

    public void navigateToPlaylistPage(String playlistId) {
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(false,
                    () -> navigateToPlaylistPage(playlistId));
            return;
        }

        if (currentActivity != null && !TextUtils.isEmpty(playlistId) && playlistPage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(playlistPage.getPageId());

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(playlistPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToPlaylistPage(playlistId);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getPlaylistPageContent(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        playlistId, new AppCMSPlaylistAPIAction(false,
                                false,
                                false,
                                appCMSPageUI,
                                playlistPage.getPageId(),
                                playlistPage.getPageId(),
                                playlistPage.getPageFunction(),
                                playlistPage.getPageId(),
                                false, null) {
                            @Override
                            public void call(AppCMSPlaylistResult appCMSPlaylistResult) {
                                // if (appCMSPlaylistResult != null) {
                                setPlayListData(appCMSPlaylistResult, this);
                                //  }
                            }
                        });
            }
        }
    }

    public void getUserProfileData(Action1<AppCMSPageAPI> pageAPIAction1) {
        String url = currentActivity.getString(R.string.api_url_user_me_description,
                appCMSMain.getApiBaseUrl(),
                getLoggedInUser(),
                appCMSMain.getInternalName());

        appCMSUserIdentityCall.getUserDescription(url, getAuthToken(), apikey, new Action1<UserDescriptionResponse>() {
            @Override
            public void call(UserDescriptionResponse userDescriptionResponse) {
                if (userDescriptionResponse != null) {
                    AppCMSPageAPI pageAPI = userDescriptionResponse.convertToAppCMSPageAPI(editProfilePage.getPageId(), userDescriptionResponse);
                    pageAPIAction1.call(pageAPI);
                } else
                    pageAPIAction1.call(null);
            }
        });
    }

    public void submitProfile(UserDescriptionResponse
                                      userDescription) {
        showLoader();
        String url = currentActivity.getString(R.string.api_url_user_me_description,
                appCMSMain.getApiBaseUrl(),
                getLoggedInUser(),
                appCMSMain.getInternalName());

        appCMSUserIdentityCall.submitUserProfile(url, getAuthToken(), apikey, userDescription, new Action1<UserDescriptionResponse>() {
            @Override
            public void call(UserDescriptionResponse s) {
                stopLoader();
            }
        });
    }

    public void navigateToEditProfilePage() {
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(false,
                    () -> navigateToEditProfilePage());
            return;
        }

        if (currentActivity != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(editProfilePage.getPageId());

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(editProfilePage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(metaPage.getPageUI(),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToEditProfilePage();
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getUserProfileData(new Action1<AppCMSPageAPI>() {
                    @Override
                    public void call(AppCMSPageAPI appCMSPageAPI) {
                        Bundle args = getPageActivityBundle(currentActivity,
                                appCMSPageUI,
                                appCMSPageAPI,
                                editProfilePage.getPageId(),
                                editProfilePage.getPageName(),
                                editProfilePage.getPageId(),
                                editProfilePage.getPageName(),
                                loadFromFile,
                                false,
                                false,
                                false,
                                false,
                                null,
                                ExtraScreenType.NONE,
                                null,
                                false, null);
                        if (args != null) {
                            Intent playlistPageIntent =
                                    new Intent(AppCMSPresenter
                                            .PRESENTER_NAVIGATE_ACTION);
                            playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key),
                                    currentActivity.getPackageName());
                            playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                    args);
                            currentActivity.sendBroadcast(playlistPageIntent);
                        }
                        stopLoader();
                    }
                });

            }
        }
    }

    public void navigateToFilterPage(String pageId) {

        if (pageId == null) {
            pageId = filterPage.getPageId();
        }
        final String pid = pageId;
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(false,
                    () -> navigateToFilterPage(pid));
            return;
        }


        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            showLoader();
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(metaPage.getPageUI(),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToFilterPage(pid);
                                }
                            },
                            loadFromFile, false);
                }
            } else {
                AppCMSPageAPI filterResult = navigationPageData.get(pageId);
                if (filterResult == null) {
                    showLoader();
                    final String personUrl = currentContext.getString(R.string.app_cms_search_api_v2_url_person,
                            getAppCMSMain().getApiBaseUrl(),
                            getAppCMSMain().getSite(),
                            "person",
                            "firstName",
                            "ASC",
                            getLanguageParamForAPICall());
                    try {
                        appCMSSearchCall.callFilterForPerson(personUrl, getApiKey(), getAuthToken(), new Action1<List<Person>>() {
                            @Override
                            public void call(List<Person> persons) {
                                showLoader();
                                final String categoryUrl = currentContext.getString(R.string.app_cms_search_api_filter_category,
                                        getAppCMSMain().getApiBaseUrl(),
                                        getAppCMSMain().getSite(),
                                        getLanguageParamForAPICall());
                                appCMSSearchCall.callFilterForCategory(categoryUrl, getApiKey(), getAuthToken(), new Action1<CategorySearchFilter>() {
                                    @Override
                                    public void call(CategorySearchFilter categorySearchFilter) {
                                        final String equipmentUrl = currentContext.getString(R.string.app_cms_search_api_filter_equipment,
                                                getAppCMSMain().getApiBaseUrl(),
                                                getAppCMSMain().getSite(),
                                                getLanguageParamForAPICall());
                                        appCMSSearchCall.callFilterForEquipment(equipmentUrl, getApiKey(), getAuthToken(), new Action1<List<Tag>>() {
                                            @Override
                                            public void call(List<Tag> tags) {
                                                showLoader();
                                                AppCMSPageAPI appCMSPageAPI = appCMSSearchCall.convertToPageAPI(pid, persons, categorySearchFilter, tags, currentContext);
                                                navigationPageData.put(pid, appCMSPageAPI);
                                                navigateToFilterPage(pid);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                cancelInternalEvents();
                pushActionInternalEvents(pageId
                        + BaseView.isLandscape(currentActivity));
                final StringBuffer screenName = new StringBuffer();
                                           /* if (!TextUtils.isEmpty(pageIdToPageNameMap.get(pageId))) {
                                                screenName.append(this.pageTitle);
                                            }*/
                Bundle args = getPageActivityBundle(currentActivity,
                        appCMSPageUI,
                        filterResult,
                        pageId,
                        null,
                        null,
                        screenName.toString(),
                        loadFromFile,
                        false,
                        false,
                        false,
                        false,
                        null,
                        ExtraScreenType.NONE,
                        null,
                        false, null);
                if (args != null) {
                    Intent pageIntent =
                            new Intent(AppCMSPresenter
                                    .PRESENTER_NAVIGATE_ACTION);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(pageIntent);
                }
            }
        }
    }

    public void navigateToResetPasswordPage() {
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(false,
                    this::navigateToResetPasswordPage);
            return;
        }

        if (currentActivity != null && !TextUtils.isEmpty(resetPasswordPage.getPageId())) {
            showLoader();
            AppCMSPageUI appCMSPageUI = navigationPages.get(resetPasswordPage.getPageId());
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(resetPasswordPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(metaPage.getPageUI(),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToResetPasswordPage();
                                }
                            },
                            loadFromFile, false);
                }
            } else {
                AppCMSPageAPI appCMSPageAPI = navigationPageData.get(loginPage.getPageId());
                cancelInternalEvents();
                pushActionInternalEvents(resetPasswordPage.getPageId()
                        + BaseView.isLandscape(currentActivity));
                Bundle args = getPageActivityBundle(currentActivity,
                        appCMSPageUI,
                        appCMSPageAPI,
                        resetPasswordPage.getPageId(),
                        null,
                        null,
                        resetPasswordPage.getPageName(),
                        loadFromFile,
                        false,
                        false,
                        false,
                        false,
                        null,
                        ExtraScreenType.NONE,
                        null,
                        false, null);
                if (args != null) {
                    Intent pageIntent =
                            new Intent(AppCMSPresenter
                                    .PRESENTER_NAVIGATE_ACTION);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(pageIntent);
                }
            }
        }
    }

    public void navigateToRosterPage(String pageId, String pageTitle,
                                     boolean launchActivity) {
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(launchActivity,
                    () -> navigateToRosterPage(pageId, pageTitle, launchActivity));
            return;
        }

        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToRosterPage(pageId, pageTitle, launchActivity);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getRosterPage(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        pageId, new AppCMSAPIAction<AppCMSRosterResult>(true,
                                false,
                                true,
                                appCMSPageUI,
                                pageId,
                                pageId,
                                pageTitle,
                                pageId,
                                launchActivity, null) {
                            @Override
                            public void call(List<AppCMSRosterResult> appCMSRosterResult) {
                                if (appCMSRosterResult != null) {
                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.pageId
                                            + BaseView.isLandscape(currentActivity));


                                    AppCMSPageAPI pageAPI = null;
                                    if (appCMSRosterResult != null) {
                                        pageAPI = convertRosterDataToAppCMSPageAPI(pageId, appCMSRosterResult);

                                        //pageAPI = appCMSScheduleResult.get(0).convertToAppCMSPageAPI(schedulePage.getPageId());
                                    }
                                    navigationPageData.put(this.pageId, pageAPI);

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(pageId))) {
                                        screenName.append(this.pageTitle);
                                    }

                                    Bundle args = getPageActivityBundle(currentActivity,
                                            this.appCMSPageUI,
                                            pageAPI,
                                            this.pageId,
                                            this.pageTitle,
                                            this.pagePath,
                                            screenName.toString(),
                                            loadFromFile,
                                            this.appbarPresent,
                                            this.fullscreenEnabled,
                                            this.navbarPresent,
                                            false,
                                            null,
                                            ExtraScreenType.NONE,
                                            null,
                                            false, null);
                                    if (args != null) {
                                        Intent pageIntent =
                                                new Intent(AppCMSPresenter
                                                        .PRESENTER_NAVIGATE_ACTION);

                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                args);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(pageIntent);
                                    }
                                    stopLoader();
                                } else {
                                    stopLoader();
                                    //showEntitlementDialog(DialogType.ARTICLE_API_RESPONSE_ERROR, null);
                                }
                            }
                        });
            }
        }
    }

    public List<ContentDatum> filterData(Module libraryResults, String filterType) {
        List<ContentDatum> filteredList = new ArrayList<>();
        List<ContentDatum> getContentData = libraryResults.getContentData();
        switch (filterType) {
            case "shows":
                for (int i = 0; i < getContentData.size(); i++) {
                    if (getContentData.get(i).getGist() != null
                            && getContentData.get(i).getGist().getContentType() != null
                            && (getContentData.get(i).getGist().getContentType().equalsIgnoreCase(currentContext.getString(R.string.content_type_series))
                            || getContentData.get(i).getGist().getContentType().equalsIgnoreCase(currentContext.getString(R.string.content_type_season))
                            || getContentData.get(i).getGist().getContentType().equalsIgnoreCase(currentContext.getString(R.string.content_type_show)))) {
                        filteredList.add(getContentData.get(i));
                    }
                }
                break;
            case "bundle":
                for (int i = 0; i < getContentData.size(); i++) {
                    if (getContentData.get(i).getGist() != null
                            && getContentData.get(i).getGist().getContentType() != null
                            && getContentData.get(i).getGist().getContentType().equalsIgnoreCase(currentContext.getString(R.string.content_type_bundle))) {
                        filteredList.add(getContentData.get(i));
                    }
                }
                break;
            default:
                for (int i = 0; i < getContentData.size(); i++) {
                    if (getContentData.get(i).getGist() != null
                            && getContentData.get(i).getGist().getContentType() != null) {
                        filteredList.add(getContentData.get(i));
                    }
                }
                break;
        }
        return filteredList;
    }

    public List<ContentDatum> libraryAllData = new ArrayList<>();


    public void navigateToLibraryPage(String pageId, String pageTitle,
                                      boolean launchActivity, boolean showParentalGateView) {

        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(launchActivity,
                    () -> navigateToLibraryPage(pageId, pageTitle, launchActivity, showParentalGateView));
            return;
        }

        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToLibraryPage(pageId, pageTitle, launchActivity, showParentalGateView);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getLibraryPage(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(), new AppCMSLibraryAPIAction<AppCMSLibraryResult>(true,
                                false,
                                true,
                                appCMSPageUI,
                                pageId,
                                pageId,
                                pageTitle,
                                pageId,
                                launchActivity, null) {
                            @Override
                            public void call(AppCMSLibraryResult appCMSLibraryResult) {


                                if (appCMSLibraryResult != null) {
                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.pageId
                                            + BaseView.isLandscape(currentActivity));

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(pageId))) {
                                        screenName.append(this.pageTitle);
                                    }

                                    AppCMSPageAPI pageAPI;

                                    if (appCMSLibraryResult != null) {
                                        pageAPI = appCMSLibraryResult.convertToAppCMSPageAPI(this.pageId, getAppCMSMain().isMonetizationModelEnabled());
                                    } else {
                                        pageAPI = new AppCMSPageAPI();
                                        pageAPI.setId(this.pageId);
                                        List<String> moduleIds = new ArrayList<>();
                                        List<Module> apiModules = new ArrayList<>();
                                        for (ModuleList module : appCMSPageUI.getModuleList()) {
                                            Module module1 = new Module();
                                            module1.setId(module.getId());
                                            apiModules.add(module1);
                                            moduleIds.add(module.getId());
                                        }
                                        pageAPI.setModuleIds(moduleIds);
                                        pageAPI.setModules(apiModules);
                                    }

                                    if (platformType.equals(PlatformType.TV)) {
                                        showLoadingDialog(true);
                                        libraryAllData = pageAPI.getModules().get(0).getContentData();
                                        Intent libraryIntent = new Intent(LIBRARY_DATA);
                                        Bundle bundle = getPageActivityBundle(
                                                currentActivity,
                                                navigationPages.get(pageId),
                                                navigationPageData.get(pageId),
                                                pageId,
                                                pageTitle,
                                                pageIdToPageFunctionMap.get(pageId),
                                                pageTitle, false, false, false, false,
                                                false, Uri.EMPTY, ExtraScreenType.NONE,
                                                null,
                                                false, null
                                        );
                                        libraryIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), bundle);
                                        libraryIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(libraryIntent);
                                        return;
                                    }

                                    navigationPageData.put(this.pageId, pageAPI);
                                    Bundle args = getPageActivityBundle(currentActivity,
                                            this.appCMSPageUI,
                                            pageAPI,
                                            this.pageId,
                                            this.pageTitle,
                                            this.pagePath,
                                            screenName.toString(),
                                            loadFromFile,
                                            false,
                                            this.fullscreenEnabled,
                                            this.navbarPresent,
                                            false,
                                            null,
                                            ExtraScreenType.NONE,
                                            null,
                                            false, null);
                                    if (args != null) {
                                        Intent pageIntent =
                                                new Intent(AppCMSPresenter
                                                        .PRESENTER_NAVIGATE_ACTION);

                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                args);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(pageIntent);
                                    }
                                    stopLoader();
                                } else {
                                    stopLoader();
                                }
                            }
                        });
            }
        }
    }


    public AppCMSPageAPI convertRosterDataToAppCMSPageAPI(String Id, List<AppCMSRosterResult> appCMSRosterResult) {
        AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
        Module module = new Module();
        List<ContentDatum> data = new ArrayList<>();

        if (appCMSRosterResult != null && appCMSRosterResult.get(0) != null && appCMSRosterResult.get(0).getTeams() != null) {
            for (Team team : appCMSRosterResult.get(0).getTeams()) {

                List<ContentDatum> dataPlayer = new ArrayList<>();

                for (Players players : team.getPlayers()) {
                    ContentDatum contentDatum = new ContentDatum();
                    contentDatum.setPlayersData(players);
                    dataPlayer.add(contentDatum);
                }
                team.setContentDataPlayers(dataPlayer);
                ContentDatum contentDatum = new ContentDatum();
                contentDatum.setTeam(team);
                data.add(contentDatum);
            }
        }

        module.setContentData(data);
        appCMSPageAPI.setId(Id);
        List<Module> moduleList = new ArrayList<>();
        moduleList.add(module);
        appCMSPageAPI.setTitle(appCMSRosterResult.get(0).getName());
        appCMSPageAPI.setModules(moduleList);

        return appCMSPageAPI;
    }

    public void navigateToTeamDetailPage(String pageId, String pageTitle,
                                         boolean launchActivity) {
        if (!isNetworkConnected()) {
            openDownloadScreenForNetworkError(launchActivity,
                    () -> navigateToTeamDetailPage(pageId, pageTitle, launchActivity));
            return;
        }
        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
//
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToTeamDetailPage(pageId, pageTitle, launchActivity);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getTeamRoasterContent(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        pageId, new AppCMSRoasterAPIAction(false,
                                false,
                                true,
                                appCMSPageUI,
                                "",
                                pageId,
                                pageTitle,
                                "",
                                launchActivity, null) {
                            @Override
                            public void call(AppCMSTeamRoasterResult appCMSTeamRoasterResult) {
                                if (appCMSTeamRoasterResult != null) {
//                                    setPlayListData(appCMSPlaylistResult, this);

//                                    AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
                                    AppCMSPageUI appCMSPageUI = new GsonBuilder().create().fromJson(
                                            loadJsonFromAssets(currentContext, "game_detail.json"),
                                            AppCMSPageUI.class);

                                    jsonValueKeyMap.put("AC playerState 01", AppCMSUIKeyType.PAGE_FIGHT_SUMMARY_MODULE_KEY);
                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.pageId
                                            + BaseView.isLandscape(currentActivity));

//                                    String playlistId = appCMSPlaylistResult.getId();
                                    AppCMSPageAPI pageAPI;
                                    if (appCMSTeamRoasterResult != null) {
                                        pageAPI = appCMSTeamRoasterResult.convertToAppCMSPageAPI(this.pageId);
                                    } else {
                                        pageAPI = new AppCMSPageAPI();
                                        pageAPI.setId(this.pageId);
                                        List<String> moduleIds = new ArrayList<>();
                                        List<Module> apiModules = new ArrayList<>();
                                        for (ModuleList module : appCMSPageUI.getModuleList()) {
                                            Module module1 = new Module();
                                            module1.setId(module.getId());
                                            apiModules.add(module1);
                                            moduleIds.add(module.getId());
                                        }
                                        pageAPI.setModuleIds(moduleIds);
                                        pageAPI.setModules(apiModules);
                                    }
                                    navigationPages.put(this.pageId, appCMSPageUI);
                                    navigationPageData.put(this.pageId, pageAPI);

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(this.pageId))) {
                                        screenName.append(this.pageTitle);
                                    }
                                    screenName.append(currentActivity.getString(R.string.app_cms_template_page_separator));
                                    if (pageAPI.getModules() != null && pageAPI.getModules().get(0) != null &&
                                            pageAPI.getModules().get(0).getContentData() != null
                                            && pageAPI.getModules().get(0).getContentData().get(0) != null &&
                                            pageAPI.getModules().get(0).getContentData().get(0).getGist() != null &&
                                            pageAPI.getModules().get(0).getContentData().get(0).getGist().getTitle() != null) {
                                        screenName.append(pageAPI.getModules().get(0).getContentData().get(0).getGist().getTitle());

                                    }


                                    {
                                        Bundle args = getPageActivityBundle(currentActivity,
                                                appCMSPageUI,
                                                pageAPI,
                                                this.pageId,
                                                this.pageTitle,
                                                "",
                                                screenName.toString(),
                                                loadFromFile,
                                                this.appbarPresent,
                                                this.fullscreenEnabled,
                                                this.navbarPresent,
                                                false,
                                                null,
                                                ExtraScreenType.NONE,
                                                null,
                                                false,
                                                null);
                                        if (args != null) {
                                            Intent playlistPageIntent =
                                                    new Intent(AppCMSPresenter
                                                            .PRESENTER_NAVIGATE_ACTION);
                                            playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key),
                                                    currentActivity.getPackageName());
                                            playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                    args);
                                            currentActivity.sendBroadcast(playlistPageIntent);
                                        }
                                    }
                                    stopLoader();
                                }
                            }
                        });


//                getEventsArchieve(appCMSMain.getApiBaseUrl(),
//                        appCMSMain.getInternalName(),
//                        pageId, new Action1<AppCMSEventArchieveResult>() {
//
//                            @Override
//                            public void call(AppCMSEventArchieveResult appCMSTeamRoasterResult) {
//                                if (appCMSTeamRoasterResult != null) {
//                                }
//                            }
//                        });
            }
        }
    }

    public void navigatePlayListPageWithPreLoadData(AppCMSPlaylistResult
                                                            appCMSPlaylistResultData) {
        AppCMSPageUI appCMSPageUI = navigationPages.get(playlistPage.getPageId());
        String pageId = appCMSPlaylistResultData.getId();
        String pageTitle = appCMSPlaylistResultData.getGist().getTitle();
        AppCMSPlaylistAPIAction playlistApiAction = new AppCMSPlaylistAPIAction(false,
                false,
                false,
                appCMSPageUI,
                pageId,
                pageId,
                pageTitle,
                pageId,
                false, null) {
            @Override
            public void call(AppCMSPlaylistResult appCMSPlaylistResult) {
                setPlayListData(appCMSPlaylistResult, this);
            }
        };
        playlistApiAction.call(appCMSPlaylistResultData);

    }

    public void setPlayListData(AppCMSPlaylistResult
                                        appCMSPlaylistResult, AppCMSPlaylistAPIAction appCMSPlaylistAPIAction) {
        AppCMSPageUI appCMSPageUI = navigationPages.get(playlistPage.getPageId());

        //on browsingany play list .set this playlist in temporaray listing of playlist .so that it could not effect on currently playing listing
        if (appCMSPlaylistResult != null && appCMSPlaylistResult.getAudioList() != null && appCMSPlaylistResult.getAudioList().size() > 0) {
//            AudioPlaylistHelper.getInstance().setCurrentPlaylistId(appCMSPlaylistResult.getId());
//                                AudioPlaylistHelper.getInstance().setTempPlaylist(MusicLibrary.createPlaylistByIDList(appCMSPlaylistResult.getAudioList()));
            AudioPlaylistHelper.getInstance().setTempPlaylistData(appCMSPlaylistResult);
        }

        cancelInternalEvents();
        pushActionInternalEvents(appCMSPlaylistAPIAction.pageId
                + BaseView.isLandscape(currentActivity));

        String playlistId = playlistPage.getPageId();//appCMSPlaylistResult.getId();
        AppCMSPageAPI pageAPI;
        if (appCMSPlaylistResult != null) {
            pageAPI = appCMSPlaylistResult.convertToAppCMSPageAPI(appCMSPlaylistAPIAction.pageId);
        } else if (getPageAPILruCache().get(appCMSPlaylistAPIAction.pageId) != null) {
            pageAPI = getPageAPILruCache().get(appCMSPlaylistAPIAction.pageId);
        } else {
            pageAPI = new AppCMSPageAPI();
            pageAPI.setId(appCMSPlaylistAPIAction.pageId);
            List<String> moduleIds = new ArrayList<>();
            List<Module> apiModules = new ArrayList<>();
            for (ModuleList module : appCMSPageUI.getModuleList()) {
                Module module1 = new Module();
                module1.setId(module.getId());
                apiModules.add(module1);
                moduleIds.add(module.getId());
            }
            pageAPI.setModuleIds(moduleIds);
            pageAPI.setModules(apiModules);
        }
        navigationPages.put(appCMSPlaylistAPIAction.pageId, appCMSPageUI);
        navigationPageData.put(appCMSPlaylistAPIAction.pageId, pageAPI);

        final StringBuffer screenName = new StringBuffer();
        if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(appCMSPlaylistAPIAction.pageId))) {
            screenName.append(appCMSPlaylistAPIAction.pageTitle);
        }
        screenName.append(currentActivity.getString(R.string.app_cms_template_page_separator));
        if (pageAPI.getModules() != null && pageAPI.getModules().get(0) != null &&
                pageAPI.getModules().get(0).getContentData() != null
                && pageAPI.getModules().get(0).getContentData().get(0) != null &&
                pageAPI.getModules().get(0).getContentData().get(0).getGist() != null &&
                pageAPI.getModules().get(0).getContentData().get(0).getGist().getTitle() != null) {
            screenName.append(pageAPI.getModules().get(0).getContentData().get(0).getGist().getTitle());

        }

        if (appCMSPlaylistAPIAction.launchActivity) {
            launchPageActivity(currentActivity,
                    appCMSPlaylistAPIAction.appCMSPageUI,
                    pageAPI,
                    appCMSPlaylistAPIAction.pageId,
                    appCMSPlaylistAPIAction.pageTitle,
                    playlistId,
                    screenName.toString(),
                    loadFromFile,
                    appCMSPlaylistAPIAction.appbarPresent,
                    appCMSPlaylistAPIAction.fullscreenEnabled,
                    appCMSPlaylistAPIAction.navbarPresent,
                    false,
                    appCMSPlaylistAPIAction.searchQuery,
                    ExtraScreenType.NONE);
        } else {
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPlaylistAPIAction.appCMSPageUI,
                    pageAPI,
                    appCMSPlaylistAPIAction.pageId,
                    appCMSPlaylistAPIAction.pageTitle,
                    playlistId,
                    screenName.toString(),
                    loadFromFile,
                    appCMSPlaylistAPIAction.appbarPresent,
                    appCMSPlaylistAPIAction.fullscreenEnabled,
                    appCMSPlaylistAPIAction.navbarPresent,
                    false,
                    null,
                    ExtraScreenType.NONE,
                    null,
                    false,
                    null);
            if (args != null) {
                Intent playlistPageIntent =
                        new Intent(AppCMSPresenter
                                .PRESENTER_NAVIGATE_ACTION);
                playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key),
                        currentActivity.getPackageName());
                playlistPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                currentActivity.sendBroadcast(playlistPageIntent);
            }
        }
        stopLoader();
    }

    private void getWatchlistPageContent(final String apiBaseUrl, final String siteId, final AppCMSWatchlistAPIAction watchlist) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        appCMSWatchlistCall.call(
                                currentActivity.getString(R.string.app_cms_watchlist_api_url,
                                        apiBaseUrl,
                                        siteId,
                                        appPreference.getLoggedInUser(),
                                        getLanguageParamForAPICall()),
                                getAuthToken(),
                                apikey,
                                watchlist);
                    } catch (IOException e) {
                        //Log.e(TAG, "getWatchlistPageContent: " + e.toString());
                    }
                });
            } else {
                try {
                    appCMSWatchlistCall.call(
                            currentActivity.getString(R.string.app_cms_watchlist_api_url,
                                    apiBaseUrl,
                                    siteId,
                                    appPreference.getLoggedInUser(),
                                    getLanguageParamForAPICall()),
                            getAuthToken(),
                            apikey,
                            watchlist);
                } catch (IOException e) {
                    //Log.e(TAG, "getWatchlistPageContent: " + e.toString());
                }
            }
        }
    }

    private void getTeamStandingContent(final String apiBaseUrl,
                                        final String siteId,
                                        String pageId,
                                        final AppCMSStandingtAPIAction standingApiAction) {
        if (currentActivity != null) {
            try {
                appCMSTeamStadingtCall.call(
                        currentActivity.getString(R.string.app_cms_team_standing_api_url),
                        apikey,
                        standingApiAction);
            } catch (IOException e) {
            }
        }
    }

    private void getTeamRoasterContent(final String apiBaseUrl,
                                       final String siteId,
                                       String pageId,
                                       final AppCMSRoasterAPIAction standingApiAction) {
        if (currentActivity != null) {
            try {
                appCMSTeamRoasterCall.call(
                        currentActivity.getString(R.string.app_cms_team_roaster_api_url, "53006", "15140"),
                        currentActivity.getString(R.string.app_cms_team_pointstreak_apikey),
                        standingApiAction);
            } catch (IOException e) {
            }
        }
    }

    private void getEventsArchieve(final String eventId, final Action1<AppCMSEventArchieveResult> eventApiAction) {
        if (currentActivity != null) {
            try {
                appCMSEventArchieveCall.call(
                        currentActivity.getString(R.string.app_cms_event_archieve_api_url, currentActivity.getString(R.string.app_cms_team_pointstreak_apikey), eventId),
                        currentActivity.getString(R.string.app_cms_team_pointstreak_apikey),
                        eventApiAction);
            } catch (IOException e) {
            }
        }
    }


    public void setSelectedFightId(int fightId) {
        this.fightSelectId = fightId;
    }

    public int getSelectedFightId() {
        return fightSelectId;
    }

    public void setSelectedSchedulePosition(int position) {
        this.selectedSchedulePosition = position;
    }

    public int getSelectedSchedulePosition() {
        return selectedSchedulePosition;
    }

    private void getPlaylistPageContent(final String apiBaseUrl,
                                        final String siteId,
                                        String pageId,
                                        final AppCMSPlaylistAPIAction playlist) {
        if (currentActivity != null) {
            try {
                appCMSPlaylistCall.call(
                        currentActivity.getString(R.string.app_cms_playlist_api_url,
                                apiBaseUrl,
                                pageId,
                                siteId
                        ),
                        apikey, getAuthToken(),
                        playlist);
            } catch (IOException e) {
            }
        }
    }

    public void getHistoryData(final Action1<AppCMSHistoryResult> appCMSHistoryResultAction) {
        if (currentActivity != null) {
            MetaPage historyMetaPage = actionTypeToMetaPageMap.get(AppCMSActionType.HISTORY_PAGE);
            if (historyMetaPage == null) return;
            AppCMSPageUI appCMSPageUI = navigationPages.get(historyMetaPage.getPageId());
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(historyMetaPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                    getHistoryData(appCMSHistoryResultAction);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                try {
                    String apiUrl = getApiUrl(true,
                            false,
                            false,
                            false,
                            null,
                            appCMSMain.getApiBaseUrl(),
                            historyPage.getPageAPI(),
                            appCMSMain.getInternalName(),
                            historyMetaPage.getPageId(),
                            false);
                    getPageIdContent(apiUrl,
                            historyMetaPage.getPageId(),
                            null,
                            false,
                            false, new AppCMSPageAPIAction(false,
                                    false,
                                    false,
                                    appCMSPageUI,
                                    historyMetaPage.getPageId(),
                                    historyMetaPage.getPageId(),
                                    historyMetaPage.getPageName(),
                                    historyMetaPage.getPageId(),
                                    false, false, null) {
                                @Override
                                public void call(AppCMSPageAPI appCMSPageAPI) {
                                    ModuleList moduleList = null;
                                    if (appCMSPageUI != null && appCMSPageUI.getModuleList() != null && getCurrentActivity() != null) {
                                        moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_01));
                                        if (moduleList == null) {
                                            moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_02));
                                            if (moduleList == null) {
                                                moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_04));
                                            }
                                        }
                                    }
                                    Module module = matchModuleAPIToModuleUI(moduleList, appCMSPageAPI);
                                    getHistoryPageContent(appCMSMain.getApiBaseUrl(),
                                            appCMSMain.getInternalName(),
                                            new AppCMSHistoryAPIAction(true,
                                                    false,
                                                    true,
                                                    appCMSPageUI,
                                                    historyMetaPage.getPageId(),
                                                    historyMetaPage.getPageId(),
                                                    historyMetaPage.getPageFunction(),
                                                    historyMetaPage.getPageId(),
                                                    false,
                                                    null) {
                                                @Override
                                                public void call(AppCMSHistoryResult appCMSHistoryResult) {
                                                    if (appCMSHistoryResult != null) {
                                                        if (module != null)
                                                            appCMSHistoryResult.setMetadataMap(module.getMetadataMap());
                                                        Observable.just(appCMSHistoryResult)
                                                                .onErrorResumeNext(throwable -> Observable.empty())
                                                                .subscribe(appCMSHistoryResultAction);
                                                        if (appCMSHistoryResult != null
                                                                && appCMSHistoryResult.getRecords() != null
                                                                && appCMSHistoryResult.getRecords().size() > 3) {
                                                            for (int i = 0; i < appCMSHistoryResult.getRecords().size(); i++) {
                                                                if (appCMSHistoryResult.getRecords().get(i).getContentResponse() != null &&
                                                                        appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist() != null &&
                                                                        appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist().getPrimaryCategory() != null &&
                                                                        appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist().getPrimaryCategory().getTitle() != null)
                                                                    if (platformType.equals(PlatformType.ANDROID)) {
                                                                        sendUAAboutCategory(appPreference.getLoggedInUser(), appCMSHistoryResult.getRecords().get(i).getContentResponse().getGist().getPrimaryCategory().getTitle());
                                                                    }
                                                            }
                                                        }
                                                    } else {
                                                        Observable.just((AppCMSHistoryResult) null)
                                                                .onErrorResumeNext(throwable -> Observable.empty())
                                                                .subscribe(appCMSHistoryResultAction);
                                                    }
                                                }
                                            });
                                }
                            });


                } catch (Exception e) {
                    Observable.just((AppCMSHistoryResult) null)
                            .onErrorResumeNext(throwable -> Observable.empty())
                            .subscribe(appCMSHistoryResultAction);
                }
            }

        }
    }

    public void navigateToHistoryPage(String pageId, String pageTitle, String url,
                                      boolean launchActivity, boolean showParentalGateView) {

        if (currentActivity != null && !TextUtils.isEmpty(pageId)) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            setDownlistScreenCache(null);
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                    navigateToHistoryPage(pageId, pageTitle, url, launchActivity, false);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {

                if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                    RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                            pageTitle, null,
                            null, false, null, HISTORY_RETRY_ACTION);
                    retryCallBinder.setPageId(pageId);
                    Bundle bundle = new Bundle();
                    bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                    bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                    Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                    args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                    args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(args);
                    return;
                }
                String apiUrl = getApiUrl(true,
                        false,
                        false,
                        false,
                        null,
                        appCMSMain.getApiBaseUrl(),
                        historyPage.getPageAPI(),
                        appCMSMain.getInternalName(),
                        pageId,
                        false);
                getPageIdContent(apiUrl,
                        pageId,
                        null,
                        false,
                        false,
                        new AppCMSPageAPIAction(false,
                                false,
                                false,
                                appCMSPageUI,
                                pageId,
                                pageId,
                                pageTitle,
                                pageId,
                                launchActivity, false, null) {
                            @Override
                            public void call(final AppCMSPageAPI appCMSPageAPI) {
                                ModuleList moduleList = null;
                                if (appCMSPageUI != null && appCMSPageUI.getModuleList() != null) {
                                    moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_01));
                                    if (moduleList == null) {
                                        moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_02));
                                        if (moduleList == null) {
                                            moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_history_04));
                                        }
                                    }
                                }
                                Module moduleH = matchModuleAPIToModuleUI(moduleList, appCMSPageAPI);
                                getHistoryPageContent(appCMSMain.getApiBaseUrl(),
                                        appCMSMain.getInternalName(),
                                        new AppCMSHistoryAPIAction(false,
                                                false,
                                                false,
                                                appCMSPageUI,
                                                pageId,
                                                pageId,
                                                pageTitle,
                                                pageId,
                                                launchActivity, null) {
                                            @Override
                                            public void call(AppCMSHistoryResult appCMSHistoryResult) {
                                                cancelInternalEvents();
                                                pushActionInternalEvents(this.pageId + BaseView.isLandscape(currentActivity));

                                                AppCMSPageAPI pageAPI;
                                                if (appCMSHistoryResult != null &&
                                                        appCMSHistoryResult.getRecords() != null) {
                                                    if (moduleH != null)
                                                        appCMSHistoryResult.setMetadataMap(moduleH.getMetadataMap());
                                                    pageAPI = appCMSHistoryResult.convertToAppCMSPageAPI(this.pageId, isPromoValidationRequired());
                                                } else {
                                                    pageAPI = new AppCMSPageAPI();
                                                    pageAPI.setId(this.pageId);

                                                    List<String> moduleIds = new ArrayList<>();
                                                    List<Module> apiModules = new ArrayList<>();
                                                    for (ModuleList module : appCMSPageUI.getModuleList()) {
                                                        Module module1 = new Module();
                                                        module1.setId(module.getId());
                                                        if (moduleH != null)
                                                            module1.setMetadataMap(moduleH.getMetadataMap());
                                                        apiModules.add(module1);
                                                        moduleIds.add(module.getId());
                                                    }
                                                    pageAPI.setModuleIds(moduleIds);
                                                    pageAPI.setModules(apiModules);
                                                }

                                                navigationPageData.put(this.pageId, pageAPI);

                                                if (this.launchActivity) {
                                                    launchPageActivity(currentActivity,
                                                            this.appCMSPageUI,
                                                            pageAPI,
                                                            this.pageId,
                                                            this.pageTitle,
                                                            this.pagePath,
                                                            pageIdToPageFunctionMap.get(this.pageId),
                                                            loadFromFile,
                                                            this.appbarPresent,
                                                            this.fullscreenEnabled,
                                                            this.navbarPresent,
                                                            false,
                                                            this.searchQuery,
                                                            ExtraScreenType.NONE);
                                                } else {
                                                    Bundle args = getPageActivityBundle(currentActivity,
                                                            this.appCMSPageUI,
                                                            pageAPI,
                                                            this.pageId,
                                                            this.pageTitle,
                                                            this.pagePath,
                                                            pageIdToPageFunctionMap.get(this.pageId),
                                                            loadFromFile,
                                                            this.appbarPresent,
                                                            this.fullscreenEnabled,
                                                            this.navbarPresent,
                                                            false,
                                                            null,
                                                            ExtraScreenType.NONE,
                                                            null,
                                                            false,
                                                            null);

                                                    if (args != null) {
                                                        Intent historyPageIntent =
                                                                new Intent(AppCMSPresenter
                                                                        .PRESENTER_NAVIGATE_ACTION);
                                                        historyPageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                                args);
                                                        historyPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                        currentActivity.sendBroadcast(historyPageIntent);
                                                    }
                                                }
                                                stopLoader();
                                            }
                                        });
                            }
                        });

            }
        }
    }

    public void getConceptDataFromCategory(String browseCategory, Action1<List<Person>> conceptAction) {
        String conceptUrl = currentContext.getString(R.string.app_cms_search_api_v2_browse_list,
                getAppCMSMain().getApiBaseUrl(),
                getAppCMSMain().getSite(),
                "category",
                "updateDate",
                browseCategory,
                getLanguageParamForAPICall(), "series");
        if (browseCategory == null)
            conceptUrl = currentContext.getString(R.string.app_cms_search_api_v2_browse_all_list,
                    getAppCMSMain().getApiBaseUrl(),
                    getAppCMSMain().getSite(),
                    "updateDate",
                    getLanguageParamForAPICall(), "series");
        appCMSSearchCall.callFilterForPerson(conceptUrl, getApiKey(), getAuthToken(), new Action1<List<Person>>() {
            @Override
            public void call(List<Person> persons) {
                conceptAction.call(persons);
            }
        });
    }

    private void getClassDataFromCategory(String browseCategory, Action1<List<Person>> classAction) {
        String classUrl = currentContext.getString(R.string.app_cms_search_api_v2_browse_list,
                getAppCMSMain().getApiBaseUrl(),
                getAppCMSMain().getSite(),
                "category",
                "updateDate",
                browseCategory,
                getLanguageParamForAPICall(), "vodOnly");
        if (browseCategory == null)
            classUrl = currentContext.getString(R.string.app_cms_search_api_v2_browse_all_list,
                    getAppCMSMain().getApiBaseUrl(),
                    getAppCMSMain().getSite(),
                    "updateDate",
                    getLanguageParamForAPICall(), "vodOnly");
        appCMSSearchCall.callFilterForPerson(classUrl, getApiKey(), getAuthToken(), new Action1<List<Person>>() {
            @Override
            public void call(List<Person> classes) {
                classAction.call(classes);
            }
        });
    }

    public void getBrowseFilteredClasses(String filterParams, Action1<List<Person>> classCount) {
        String classUrl = currentContext.getString(R.string.app_cms_browse_filter_classes_api_url,
                getAppCMSMain().getApiBaseUrl(),
                getAppCMSMain().getSite()) + filterParams;
        showLoader();
        Log.e("q", "" + classUrl);
        appCMSSearchCall.callFilterForPerson(classUrl, getApiKey(), getAuthToken(), new Action1<List<Person>>() {
            @Override
            public void call(List<Person> classes) {
                stopLoader();
                classCount.call(classes);
            }
        });
    }

    public List<FilterGroupsModel> getBrowseFilterContent() {
        return browseFilterContent;
    }

    public void setBrowseFilterContent(List<FilterGroupsModel> browseFilterContent) {
        this.browseFilterContent = browseFilterContent;
    }

    List<FilterGroupsModel> browseFilterContent;

    public void getClassDataFromEpisode(String episodeId, Action1<AppCMSSearchRelatedEpisode> classAction) {
        String classUrl = currentContext.getString(R.string.app_cms_search_api_v2_vod_related_episode_list,
                getAppCMSMain().getApiBaseUrl(),
                getAppCMSMain().getSite(),
                episodeId,
                getLanguageParamForAPICall());
        appCMSSearchCall.callFilterForEpisodeClass(classUrl, getApiKey(), getAuthToken(), new Action1<AppCMSSearchRelatedEpisode>() {
            @Override
            public void call(AppCMSSearchRelatedEpisode appCMSSearchRelatedEpisode) {
                classAction.call(appCMSSearchRelatedEpisode);
            }
        });
    }

    public void getBrowseCategoryFromApi(Action1<CategorySearchFilter> categories) {
        final String categoryUrl = currentContext.getString(R.string.app_cms_search_api_filter_category,
                getAppCMSMain().getApiBaseUrl(),
                getAppCMSMain().getSite(),
                getLanguageParamForAPICall());
        appCMSSearchCall.callFilterForCategory(categoryUrl, getApiKey(), getAuthToken(), new Action1<CategorySearchFilter>() {
            @Override
            public void call(CategorySearchFilter categorySearchFilter) {
                categories.call(categorySearchFilter);
            }
        });
    }

    public String getBrowseCategory() {
        return browseCategory;
    }

    public void setBrowseCategory(String browseCategory) {
        this.browseCategory = browseCategory;
    }

    private String browseCategory = null;

    public void navigateToBrowsePage(String browseCategory, Action1<AppCMSPageAPI> dataAction) {
        setBrowseCategory(browseCategory);
        String url = "";
        if (currentActivity != null && browseByGenrePage != null && !TextUtils.isEmpty(browseByGenrePage.getPageId())) {
            String pageId = browseByGenrePage.getPageId();
            String pageTitle = browseByGenrePage.getPageName();
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            setDownlistScreenCache(null);
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(metaPage.getPageUI(),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToBrowsePage(getBrowseCategory(), null);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                    RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                            pageTitle, null,
                            null, false, null, HISTORY_RETRY_ACTION);
                    retryCallBinder.setPageId(pageId);
                    Bundle bundle = new Bundle();
                    bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                    bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                    Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                    args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                    args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(args);
                    return;
                }
                showLoader();
                getBrowseCategoryFromApi(new Action1<CategorySearchFilter>() {
                    @Override
                    public void call(CategorySearchFilter categorySearchFilter) {

                        if (categorySearchFilter != null) {
                            cancelInternalEvents();
                            String selectedPosition = categorySearchFilter.getPosition(getBrowseCategory());
                            setBrowseCategorySelection(selectedPosition);
                            if (selectedPosition == null) {
                                setBrowseCategory(null);
                            }

                            categorySearchFilter.getPosition(getBrowseCategory());
                            getConceptDataFromCategory(getBrowseCategory(), new Action1<List<Person>>() {
                                @Override
                                public void call(List<Person> persons) {
                                    getClassDataFromCategory(getBrowseCategory(), new Action1<List<Person>>() {
                                        @Override
                                        public void call(List<Person> classes) {
                                            AppCMSPageAPI appCMSPageAPI = categorySearchFilter.convertToAppCMSPageAPI(persons, classes);

                                            navigationPageData.put(pageId, appCMSPageAPI);
                                            stopLoader();
                                            if (dataAction != null) {
                                                dataAction.call(appCMSPageAPI);
                                            } else {
                                                Bundle args = getPageActivityBundle(currentActivity,
                                                        appCMSPageUI,
                                                        appCMSPageAPI,
                                                        pageId,
                                                        pageTitle,
                                                        "",
                                                        pageIdToPageFunctionMap.get(pageId),
                                                        loadFromFile,
                                                        true,
                                                        false,
                                                        true,
                                                        false,
                                                        null,
                                                        ExtraScreenType.NONE,
                                                        null,
                                                        false,
                                                        null);
                                                if (args != null) {
                                                    Intent browsePageIntent =
                                                            new Intent(AppCMSPresenter
                                                                    .PRESENTER_NAVIGATE_ACTION);
                                                    browsePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                            args);
                                                    browsePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                    currentActivity.sendBroadcast(browsePageIntent);
                                                }
                                            }
                                        }
                                    });
                                }
                            });
                        }

                    }
                });
            }
        }
    }

    public void navigateToBrowseWithFilterClassesPage(String browseCategory, List<Person> classes) {
        String pageId = browseByGenrePage.getPageId();
        String pageTitle = browseByGenrePage.getPageName();
        String url = "";
        if (currentActivity != null && !TextUtils.isEmpty(browseByGenrePage.getPageId())) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            setDownlistScreenCache(null);
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(metaPage.getPageUI(),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToBrowsePage(browseCategory, null);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                showLoader();
                final String categoryUrl = currentContext.getString(R.string.app_cms_search_api_filter_category,
                        getAppCMSMain().getApiBaseUrl(),
                        getAppCMSMain().getSite(),
                        getLanguageParamForAPICall());
                appCMSSearchCall.callFilterForCategory(categoryUrl, getApiKey(), getAuthToken(), new Action1<CategorySearchFilter>() {
                    @Override
                    public void call(CategorySearchFilter categorySearchFilter) {
                        cancelInternalEvents();
                        showLoader();
                        getConceptDataFromCategory(browseCategory, new Action1<List<Person>>() {
                            @Override
                            public void call(List<Person> persons) {

                                AppCMSPageAPI appCMSPageAPI = categorySearchFilter.convertToAppCMSPageAPI(persons, classes);
                                navigationPageData.put(pageId, appCMSPageAPI);
                                stopLoader();
                                Bundle args = getPageActivityBundle(currentActivity,
                                        appCMSPageUI,
                                        appCMSPageAPI,
                                        pageId,
                                        pageTitle,
                                        "",
                                        pageIdToPageFunctionMap.get(pageId),
                                        loadFromFile,
                                        true,
                                        true,
                                        true,
                                        false,
                                        null,
                                        ExtraScreenType.NONE,
                                        null,
                                        false,
                                        null);
                                if (args != null) {
                                    Intent browsePageIntent =
                                            new Intent(AppCMSPresenter
                                                    .PRESENTER_NAVIGATE_ACTION);
                                    browsePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                            args);
                                    browsePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                    currentActivity.sendBroadcast(browsePageIntent);
                                }

                            }
                        });
                    }
                });
            }
        }
    }


    private void getHistoryPageContent(final String apiBaseUrl,
                                       final String siteiD,
                                       final AppCMSHistoryAPIAction history) {
        if (!getAppCMSMain().getFeatures().getWatchedHistory().isEnabled()) {
            history.call(null);
            return;
        }

        String userId = isUserLoggedIn() ? getLoggedInUser() : CommonUtils.getUserIdFromAuthToken(appPreference.getAnonymousUserToken());
        Log.i(TAG, "getHistoryPageContent : " + currentActivity.getString(R.string.app_cms_history_api_url,
                apiBaseUrl, userId, siteiD,
                "25", "1", getLanguageParamForAPICall()));
        if (shouldRefreshAuthToken()) {
            callRefreshIdentity(() -> {
                try {
                    appCMSHistoryCall.call(currentActivity.getString(R.string.app_cms_history_api_url,
                            apiBaseUrl, userId, siteiD,
                            "25", "1", getLanguageParamForAPICall()),
                            getAuthToken(), apikey,
                            history);
                } catch (IOException | NullPointerException e) {
                    //Log.e(TAG, "getHistoryPageContent: " + e.toString());
                }
            });
        } else {
            try {
                       /* appCMSHistoryCall.call(currentActivity.getString(R.string.app_cms_history_api_url,
                                apiBaseUrl, appPreference.getLoggedInUser(), siteiD,
                                appPreference.getLoggedInUser(), getLanguageParamForAPICall()),
                                getAuthToken(), apikey,
                                history);*/
                appCMSHistoryCall.call(currentActivity.getString(R.string.app_cms_history_api_url,
                        apiBaseUrl, userId, siteiD,
                        "25", "1", getLanguageParamForAPICall()),
                        getAuthToken(), apikey,
                        history);
            } catch (Exception e) {
                //Log.e(TAG, "getHistoryPageContent: " + e.toString());
            }

        }
    }

    public void getLastWatchedSeriesData(final String seriesId, Action1<List<SeriesHistory>> action) {
        if (shouldRefreshAuthToken()) {
            callRefreshIdentity(() -> {
                try {
                    appCMSHistoryCall.callSeries(currentActivity.getString(R.string.app_cms_series_history_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appPreference.getLoggedInUser(),
                            appCMSMain.getInternalName(),
                            appPreference.getLoggedInUser(),
                            getLanguageParamForAPICall(),
                            seriesId),
                            getAuthToken(), apikey,
                            action);
                } catch (IOException | NullPointerException e) {
                    //Log.e(TAG, "getHistoryPageContent: " + e.toString());
                }
            });
        } else {
            try {
                appCMSHistoryCall.callSeries(currentActivity.getString(R.string.app_cms_series_history_api_url,
                        appCMSMain.getApiBaseUrl(),
                        appPreference.getLoggedInUser(),
                        appCMSMain.getInternalName(),
                        appPreference.getLoggedInUser(),
                        getLanguageParamForAPICall(),
                        seriesId),
                        getAuthToken(), apikey,
                        action);
            } catch (Exception e) {
                //Log.e(TAG, "getHistoryPageContent: " + e.toString());
            }

        }
    }

    public void fetchSubscriptionPlansById(String planId, final Consumer<List<ContentDatum>> subscriptionPlans, boolean visiblePlan) {
        showLoader();
        if (planId != null) {
            String deviceType = currentContext.getString(R.string.app_cms_subscription_platform_key);
            if (platformType == PlatformType.TV)
                deviceType = currentContext.getString(R.string.app_cms_subscription_tv_platform_key);
            String storeCountryCode = this.storeCountryCode;
            if (platformType == PlatformType.ANDROID)
                storeCountryCode = CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode());
            String planUrl = currentActivity.getString(R.string.app_cms_subscription_plan_all_api_url, appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(), deviceType, visiblePlan, storeCountryCode);
            if (!planId.contains(currentActivity.getString(R.string.svodAll)))
                planUrl = currentActivity.getString(R.string.app_cms_subscription_plan_by_id_api_url, appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(), planId, deviceType, visiblePlan, storeCountryCode);
            if (appPreference.getLoggedInUser() != null) {
                planUrl = currentActivity.getString(R.string.app_cms_subscription_plan_all_api_userid_url, appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(), appPreference.getLoggedInUser(), deviceType, visiblePlan, storeCountryCode);
                if (!planId.contains(currentActivity.getString(R.string.svodAll)))
                    planUrl = currentActivity.getString(R.string.app_cms_subscription_plan_by_id_api_userid_url, appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(), appPreference.getLoggedInUser(), planId, deviceType, visiblePlan, storeCountryCode);
            }
            appCMSSubscriptionPlanCall.fetchSubscriptionPlans(planUrl, apikey, getAuthToken(), new Consumer<List<ContentDatum>>() {
                @Override
                public void accept(List<ContentDatum> contentData) throws Throwable {
                    stopLoader();
                    subscriptionPlans.accept(contentData);
                }
            });
        }
    }

    public void navigateToContentSubscription(List<ContentDatum> subscriptionPlans) {
        showLoader();
        AppCMSPageUI appCMSPageUI = navigationPages.get(subscriptionPage.getPageId());
        AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
        if (appCMSPageUI == null) {
            MetaPage metaPage = pageIdToMetaPageMap.get(subscriptionPage.getPageId());
            if (metaPage != null) {
                getAppCMSPage(createPageUiUrl(metaPage),
                        appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUIResult);
                                }
                                navigateToContentSubscription(subscriptionPlans);
                            }
                        },
                        loadFromFile,
                        false);
            }
        } else {
            refreshPageAPIData(appCMSPageUI, subscriptionPage.getPageId(), null, appCMSPageAPI1 -> {
                Module moduleW = null;
                if (appCMSPageAPI1 != null) {
                    ModuleList moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_selectplan_06));
                    if (moduleList == null) {
                        moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_selectplan_03));
                        if (moduleList == null) {
                            moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_selectplan_04));
                            if (moduleList == null) {
                                moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_selectplan_02));
                                if (moduleList == null) {
                                    moduleList = getRelatedModuleForBlock(appCMSPageUI.getModuleList(), getCurrentActivity().getString(R.string.ui_block_selectplan_01));
                                }
                            }
                        }
                    }
                    if (moduleList != null) {
                        moduleW = matchModuleAPIToModuleUI(moduleList, appCMSPageAPI1);
                    }
                }


                appCMSPageAPI.setId(subscriptionPage.getPageId());
                firebaseAnalytics.beginCheckoutEvent();
                List<ContentDatum> plans = new ArrayList<>();
                if (subscriptionPlans != null && subscriptionPlans.size() > 0) {
                    for (int i = 0; i < subscriptionPlans.size(); i++) {
                        if (subscriptionPlans.get(i) != null && subscriptionPlans.get(i).getPlanMonetizationModel() != null
                                && (subscriptionPlans.get(i).getPlanMonetizationModel().equalsIgnoreCase(currentActivity.getString(R.string.pricing_model_SVOD))))
                            plans.add(subscriptionPlans.get(i));
                    }
                }

                if (plans.size() > 0 && moduleW != null) {
                    moduleW.setContentData(plans);
                    for (int i = 0; i < appCMSPageAPI1.getModules().size(); i++) {
                        if (appCMSPageAPI1.getModules().get(i).getId().equalsIgnoreCase(moduleW.getId()))
                            appCMSPageAPI1.getModules().set(i, moduleW);
                    }
                    for (int i = 0; i < appCMSPageUI.getModuleList().size(); i++) {
                        ModuleList module = appCMSPageUI.getModuleList().get(i);
                        String block = module.getBlockName();
                        if (block.equalsIgnoreCase(currentActivity.getString(R.string.ui_block_selectplan_02)) ||
                                block.equalsIgnoreCase(currentActivity.getString(R.string.ui_block_selectplan_03)) ||
                                block.equalsIgnoreCase(currentActivity.getString(R.string.ui_block_selectplan_04)) ||
                                block.equalsIgnoreCase(currentActivity.getString(R.string.ui_block_selectplan_06)) ||
                                block.equalsIgnoreCase(currentActivity.getString(R.string.ui_block_selectplan_01))) {
                            Module moduleInfo = new Module();
                            moduleInfo.setId(module.getId());
                            moduleInfo.setContentData(plans);
                            if (moduleW != null) {
                                if (moduleW.getMetadataMap() != null)
                                    moduleInfo.setMetadataMap(moduleW.getMetadataMap());
                                if (moduleW.getTitle() != null)
                                    moduleInfo.setTitle(moduleW.getTitle());
                                if (moduleW.getDescription() != null)
                                    moduleInfo.setDescription(moduleW.getDescription());
                            }
                            List<Module> moduleList = new ArrayList<>();
                            moduleList.add(moduleInfo);
                            appCMSPageAPI.setModules(moduleList);
                        }
                    }
                    if (platformType.equals(PlatformType.ANDROID)) {
                        Bundle args = getPageActivityBundle(currentActivity,
                                appCMSPageUI,
                                appCMSPageAPI1,
                                subscriptionPage.getPageId(),
                                subscriptionPage.getPageName(),
                                subscriptionPage.getPageId(),
                                pageIdToPageFunctionMap.get(subscriptionPage.getPageId()),
                                loadFromFile,
                                true,
                                false,
                                false,
                                false,
                                null,
                                ExtraScreenType.NONE,
                                null,
                                false,
                                null);
                        if (args != null) {
                            Intent updatePageIntent =
                                    new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                    args);
                            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                            currentActivity.sendBroadcast(updatePageIntent);
                            dismissOpenDialogs(null);
                        }
                    } else {
                        populateTVPage(appCMSPageAPI, appCMSPageUI, subscriptionPage.getPageId(),
                                false, subscriptionPage.getPageName(), true,
                                false, subscriptionPage.getPageId(), false, false);
                    }
                }
            });


        }
    }

    public void navigateToSubscriptionPlansPage(boolean loginFromNavPage) {
        if (isShowDialogForWebPurchase()) {
            showWebPurchaseDialog();
        } else {
            if (subscriptionPage != null && subscriptionPage.getPageId() != null) {
                getPageAPILruCache().remove(subscriptionPage.getPageId());
            }
            this.loginFromNavPage = loginFromNavPage;
            if (subscriptionPage != null) {
                launchType = LaunchType.SUBSCRIBE;
                boolean launchSuccess = navigateToPage(subscriptionPage.getPageId(),
                        subscriptionPage.getPageFunction(),
                        createPageUiUrl(subscriptionPage),
                        false,
                        true,
                        false,
                        false,
                        false,
                        deeplinkSearchQuery);
                sendPlanEvent();

            /*
              send events when click on plan page
             */
                firebaseAnalytics.beginCheckoutEvent();
                setSelectedSubscriptionPlan(true);
                if (!launchSuccess) {
                    //Log.e(TAG, "Failed to launch page: " + subscriptionPage.getPageFunction());
                    launchBlankPage();
                }
            }
        }

    }

    public void getSubscriptionFlowPageContent(Action1<AppCMSPageAPI> readyAction) {
        if (currentActivity != null && subscriptionFlowPage != null && !TextUtils.isEmpty(subscriptionFlowPage.getPageId())) {
            showLoadingDialog(true);
            String pageId = subscriptionFlowPage.getPageId();
            getPageViewLruCache().remove(pageId);
            getPageIdContent(getApiUrl(true, false, false, false, null,
                    appCMSMain.getApiBaseUrl(), pageIdToPageAPIUrlMap.get(pageId), appCMSMain.getInternalName(), pageId,
                    false), pageId, null, false, false, readyAction);
        }
    }

    public boolean isSelectedSubscriptionPlan() {
        return selectedSubscriptionPlan;
    }

    public void setSelectedSubscriptionPlan(boolean selectedSubscriptionPlan) {
        this.selectedSubscriptionPlan = selectedSubscriptionPlan;
    }

    public void checkForExistingSubscription(boolean showErrorDialogIfSubscriptionExists) {
        BillingHelper.getInstance(this).onRestorePurchase(showErrorDialogIfSubscriptionExists, appPreference);
    }

    public void checkForExistingSubscription(boolean showErrorDialogIfSubscriptionExists,
                                             String receipt,
                                             String purchaseToken,
                                             String subscriptionPeriod) {

        //Log.d(TAG, "Checking for existing Google Play subscription");

        if (!isNetworkConnected()) {
            return;
        }

        if (!isUserSubscribed()) {
            appPreference.setActiveSubscriptionPrice(null);
            appPreference.setActiveSubscriptionPriceCurrencyCode(null);
            appPreference.setActiveSubscriptionPlanCycle(null);
            appPreference.setActiveSubscriptionPlanCyclePeriodMultiplier(0);
            appPreference.setActiveSubscriptionId(null);
            appPreference.setActiveSubscriptionSku(null);
            appPreference.setActiveSubscriptionCountryCode(null);
            appPreference.setActiveSubscriptionPlanName(null);
            appPreference.setActiveSubscriptionReceipt(null);
            appPreference.setActiveSubscriptionTitle(null);
        }

        if (currentActivity != null) {
            Bundle activeSubs;
            try {
                if (receipt != null && !receipt.isEmpty()) {
                    boolean subscriptionExpired = false;
                    boolean subscriptionAutoRenewing = false;

                    try {
//                                Log.d(TAG, "Examining existing subscription data -: "+subscribedItemList.get(i));
                        InAppPurchaseData inAppPurchaseData = gson.fromJson(receipt,
                                InAppPurchaseData.class);


                        subscriptionExpired = existingSubscriptionExpired(inAppPurchaseData, subscriptionPeriod);
                        appPreference.setExistingGooglePlaySubscriptionId(inAppPurchaseData.getProductId());
                        appPreference.setExistingGooglePlaySubscriptionPurchaseToken(inAppPurchaseData.getPurchaseToken());

                        if (inAppPurchaseData.isAutoRenewing()) {
                            subscriptionAutoRenewing = true;
                        }

                        if (inAppPurchaseData.isAutoRenewing() || !subscriptionExpired) {
                            if (TextUtils.isEmpty(skuToPurchase) || skuToPurchase.equals(inAppPurchaseData.getProductId())) {
                                appPreference.setActiveSubscriptionReceipt(receipt);
                                //Log.d(TAG, "Restoring purchase for SKU: " + skuToPurchase);
                            } else {
                                appPreference.setActiveSubscriptionReceipt(null);
                                if (!TextUtils.isEmpty(skuToPurchase)) {
                                    //Log.d(TAG, "Making purchase for another subscription: " + skuToPurchase);
                                }
                            }
                            //Log.d(TAG, "Set active subscription: " + inAppPurchaseData.getProductId());

                            //Log.d(TAG, "Making restore purchase call with token: " + inAppPurchaseData.getPurchaseToken());
                            String restorePurchaseUrl = currentContext.getString(R.string.app_cms_restore_purchase_api_url,
                                    appCMSMain.getApiBaseUrl(),
                                    appCMSMain.getInternalName(),
                                    getDeviceId(),
                                    CommonUtils.getDeviceName());
                            try {
                                if (showErrorDialogIfSubscriptionExists) {
                                    showLoadingDialog(true);
                                    showToast(localisedStrings.getCheckExistingSubscriptionText(), Toast.LENGTH_SHORT);

                                }
                                final String restoreSubscriptionReceipt = receipt;
                                appCMSRestorePurchaseCall.call(apikey,
                                        restorePurchaseUrl,
                                        inAppPurchaseData.getPurchaseToken(),
                                        appCMSMain.getInternalName(),
                                        (signInResponse) -> {
                                            if (showErrorDialogIfSubscriptionExists) {
                                                showLoadingDialog(false);
                                            }
                                            //Log.d(TAG, "Retrieved restore purchase call");
                                            if (signInResponse == null || !TextUtils.isEmpty(signInResponse.getMessage())) {
                                                if (showErrorDialogIfSubscriptionExists) {
                                                    showToast(localisedStrings.getExistingSubscriptionDoesNotExistText(), Toast.LENGTH_SHORT);
                                                }
                                                //Log.d(TAG, "SignIn response is null or error response is non empty");
                                                if (!isUserLoggedIn()) {
                                                    if (signInResponse != null) {
                                                        //Log.e(TAG, "Received restore purchase call error: " + signInResponse.getMessage());
                                                    }
                                                    if (showErrorDialogIfSubscriptionExists) {
                                                        showEntitlementDialog(DialogType.EXISTING_SUBSCRIPTION,
                                                                () -> {
                                                                    appPreference.setRestoreSubscriptionReceipt(restoreSubscriptionReceipt);
                                                                    sendCloseOthersAction(null, true, false);
                                                                    launchType = LaunchType.LOGIN_AND_SIGNUP;
                                                                    navigateToLoginPage(loginFromNavPage);
                                                                }, null);
                                                    }
                                                } else {
                                                    appPreference.setRestoreSubscriptionReceipt(restoreSubscriptionReceipt);
                                                    if (!purchaseFromRestore) {
                                                        initiateItemPurchase(true);
                                                    }
                                                }
                                            } else {
                                                //Log.d(TAG, "Received a valid signin response");
                                                if (isUserLoggedIn()) {
                                                    //Log.d(TAG, "User is logged in");
                                                    if (!TextUtils.isEmpty(appPreference.getLoggedInUser()) &&
                                                            !TextUtils.isEmpty(signInResponse.getUserId()) &&
                                                            signInResponse.getUserId().equals(appPreference.getLoggedInUser())) {

                                                        //Log.d(TAG, "User ID: " + signInResponse.getUserId());
                                                        appPreference.setRefreshToken(signInResponse.getRefreshToken());
                                                        appPreference.setAuthToken(signInResponse.getAuthorizationToken());
                                                        setLoggedInUser(signInResponse.getUserId());
                                                        appPreference.setLoggedInUserName(signInResponse.getName());
                                                        appPreference.setLoggedInUserEmail(signInResponse.getEmail());
                                                        appPreference.setIsUserSubscribed(signInResponse.isSubscribed());
                                                        appPreference.setUserAuthProviderName(signInResponse.getProvider());

                                                        refreshSubscriptionData(() -> {

                                                        }, true);
                                                    } else if (showErrorDialogIfSubscriptionExists) {
                                                        showEntitlementDialog(DialogType.EXISTING_SUBSCRIPTION_LOGOUT,
                                                                this::logout, null);
                                                    }
                                                } else {
                                                    //Log.d(TAG, "User is logged out");
                                                    if (showErrorDialogIfSubscriptionExists) {
                                                        appPreference.setRefreshToken(signInResponse.getRefreshToken());
                                                        appPreference.setAuthToken(signInResponse.getAuthorizationToken());
                                                        setLoggedInUser(signInResponse.getUserId());
                                                        firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
                                                        appPreference.setLoggedInUserName(signInResponse.getName());
                                                        appPreference.setLoggedInUserEmail(signInResponse.getEmail());
                                                        appPreference.setIsUserSubscribed(signInResponse.isSubscribed());
                                                        appPreference.setUserAuthProviderName(signInResponse.getProvider());

                                                        refreshSubscriptionData(() -> {

                                                        }, true);

                                                        if (showErrorDialogIfSubscriptionExists) {
                                                            StringBuilder loggingInWithUserSb =
                                                                    new StringBuilder();
                                                            loggingInWithUserSb.append(localisedStrings.getExistingUserLoginText());
                                                            loggingInWithUserSb.append(" ");
                                                            loggingInWithUserSb.append(signInResponse.getEmail());
                                                            showToast(loggingInWithUserSb.toString(), Toast.LENGTH_SHORT);
                                                            finalizeLogin(false,
                                                                    signInResponse.isSubscribed(),
                                                                    false,
                                                                    false);
                                                            showLoadingDialog(true);
                                                        }
                                                    }
                                                }
                                            }
                                        });
                            } catch (Exception e) {
                                //Log.d(TAG, "Error making restore purchase request: " + e.getMessage());
                                if (showErrorDialogIfSubscriptionExists) {
                                    showEntitlementDialog(DialogType.EXISTING_SUBSCRIPTION,
                                            () -> {
                                                sendCloseOthersAction(null, true, false);
                                                navigateToLoginPage(loginFromNavPage);
                                            }, null);
                                }
                            }
                        } else {
                            appPreference.setActiveSubscriptionReceipt(null);
                        }

                    } catch (Exception e) {
                        //Log.e(TAG, "Error parsing Google Play subscription data: " + e.toString());
                    }
                    //}

                    appPreference.setExistingGooglePlaySubscriptionSuspended(subscriptionExpired);

                    Log.v("--Urban Airship", "subscription expied");

                    if (platformType.equals(PlatformType.ANDROID)) {
                        sendUAAboutLapsedUser(appPreference.getLoggedInUser());
                    }

                } else if (isUserLoggedIn()) {
                    refreshSubscriptionData(() -> {

                    }, true);
                }

            } catch (Exception e) {
                //Log.e(TAG, "Failed to purchase item with sku: "
//                        + getActiveSubscriptionSku());
            }
        }
    }

    private boolean existingSubscriptionExpired(InAppPurchaseData inAppPurchaseData,
                                                String subscriptionPeriod) {
        try {
            Instant subscribedPurchaseTimeInstant = Instant.ofEpochMilli(inAppPurchaseData.getPurchaseTime());
            Instant nowTimeInstant = Instant.now();
            ZonedDateTime subscribedPurchaseTime = ZonedDateTime.ofInstant(subscribedPurchaseTimeInstant, ZoneId.systemDefault());
            ZonedDateTime nowTime = ZonedDateTime.ofInstant(nowTimeInstant, ZoneId.systemDefault());
            ZonedDateTime subscriptionPeriodTime = ZonedDateTime.ofInstant(subscribedPurchaseTimeInstant, ZoneId.systemDefault());
            final String SUBS_PERIOD_REGEX = "P(([0-9]+)[yY])?(([0-9]+)[mM])?(([0-9]+)[wW])?(([0-9]+)[dD])?";
            if (subscriptionPeriod.matches(SUBS_PERIOD_REGEX)) {
                Matcher subscriptionPeriodMatcher = Pattern.compile(SUBS_PERIOD_REGEX).matcher(subscriptionPeriod);
                if (subscriptionPeriodMatcher.find()) {
                    if (subscriptionPeriodMatcher.group(2) != null) {
                        subscriptionPeriodTime = subscriptionPeriodTime.plus(Long.parseLong(subscriptionPeriodMatcher.group(2)),
                                ChronoUnit.YEARS);
                    }
                    if (subscriptionPeriodMatcher.group(4) != null) {
                        subscriptionPeriodTime = subscriptionPeriodTime.plus(Long.parseLong(subscriptionPeriodMatcher.group(4)),
                                ChronoUnit.MONTHS);
                    }
                    if (subscriptionPeriodMatcher.group(6) != null) {
                        subscriptionPeriodTime = subscriptionPeriodTime.plus(Long.parseLong(subscriptionPeriodMatcher.group(6)),
                                ChronoUnit.WEEKS);
                    }
                    if (subscriptionPeriodMatcher.group(8) != null) {
                        subscriptionPeriodTime = subscriptionPeriodTime.plus(Long.parseLong(subscriptionPeriodMatcher.group(8)),
                                ChronoUnit.DAYS);
                    }
                }

                while (subscriptionPeriodTime.toEpochSecond() < nowTime.toEpochSecond() - subscribedPurchaseTime.toEpochSecond()) {
                    subscribedPurchaseTime = subscribedPurchaseTime.plus(subscribedPurchaseTime.toEpochSecond(),
                            ChronoUnit.SECONDS);
                }

                Duration betweenSubscribedTimeAndExpirationTime =
                        Duration.between(subscribedPurchaseTime, subscriptionPeriodTime);

                Duration betweenSubscribedTimeAndNowTime =
                        Duration.between(subscribedPurchaseTime, nowTime);

                return betweenSubscribedTimeAndExpirationTime.compareTo(betweenSubscribedTimeAndNowTime) < 0;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error parsing end date: " + e.getMessage());
        }
        return false;
    }

    public void navigateToHomePage(boolean forceDownload) {
        if (homePage != null) {
            if (platformType == PlatformType.ANDROID) {
                restartInternalEvents();
                navigateToPage(homePage.getPageId(),
                        homePage.getPageFunction(),
                        createPageUiUrl(homePage),
                        false,
                        true,
                        false,
                        true,
                        true,
                        deeplinkSearchQuery);
            } else if (platformType == PlatformType.TV) {
                getPlayerLruCache().evictAll();
                navigateToTVPage(
                        homePage.getPageId(),
                        homePage.getPageFunction(),
                        createPageUiUrl(homePage),
                        true,
                        deeplinkSearchQuery,
                        forceDownload,
                        false,
                        false,
                        false,
                        false,
                        false);

            }
        }
    }

    public void navigateToContactUsPage() {
        if (platformType == PlatformType.ANDROID) {
            NavigationFooter navigationFooter = null;
            for (NavigationFooter navFooter : getNavigation().getNavigationFooter()) {
                String pageFn = getPageFunctionValue(navFooter.getPageId(), navFooter.getTitle());
                if (pageFn.equalsIgnoreCase(currentContext.getString(R.string.contact_us)) ||
                        pageFn.contains(currentContext.getString(R.string.contact_us)) ||
                        pageFn.contains(currentContext.getString(R.string.contact_us_roku)) ||
                        pageFn.contains(currentContext.getString(R.string.contact_us)) ||
                        pageFn.equalsIgnoreCase(currentContext.getString(R.string.support))) {
                    navigationFooter = navFooter;
                    break;
                }
            }

            if (navigationFooter != null) {
                String contactUsEmail = navigationFooter.getDisplayedPath().contains("mailto:") ?
                        navigationFooter.getDisplayedPath().substring(7) : "";
                if ((contactUsEmail == null || TextUtils.isEmpty(contactUsEmail)) && getAppCMSMain().getCustomerService() != null
                        && getAppCMSMain().getCustomerService().getEmail() != null)
                    contactUsEmail = getAppCMSMain().getCustomerService().getEmail();
                Intent intent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                        "mailto", contactUsEmail, null));
                getCurrentActivity().startActivity(Intent.createChooser(intent, navigationFooter.getTitle()));
            } else if (contactUsPage != null && !TextUtils.isEmpty(contactUsPage.getPageId())) {
                navigateToPage(contactUsPage.getPageId(),
                        contactUsPage.getPageFunction(),
                        createPageUiUrl(contactUsPage),
                        false,
                        true,
                        false,
                        true,
                        true,
                        null);
            } else {
                if (getAppCMSMain().getCustomerService() != null
                        && getAppCMSMain().getCustomerService().getEmail() != null) {
                    String contactUsEmail = getAppCMSMain().getCustomerService().getEmail();
                    Intent intent = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(
                            "mailto", contactUsEmail, null));
                    getCurrentActivity().startActivity(Intent.createChooser(intent, getLocalisedStrings().getContactUsLabel()));
                }
            }
        }
    }

    public void navigateToLoginPage(boolean loginFromNavPage) {
        this.loginFromNavPage = loginFromNavPage;
        isSubscritionUpated = false;
        isHintPickerOpen = false;
        boolean launchSuccess;
        if (loginPage != null) {

            if (checkQuery) {
                checkQuery = false;
                deeplinkSearchQuery = null;
            }
            launchSuccess = navigateToPage(loginPage.getPageId(),
                    loginPage.getPageFunction(),
                    createPageUiUrl(loginPage),
                    false,
                    true,
                    false,
                    false,
                    false,
                    deeplinkSearchQuery);

            if (!launchSuccess) {
                //Log.e(TAG, "Failed to launch page: " + loginPage.getPageFunction());
                launchBlankPage();
            }
            setSelectedSubscriptionPlan(false);
        }
    }

    public void navigateToSearchPage(boolean navbarPresent, boolean appbarPresent) {
        if (searchPage != null) {
            boolean launchSuccess = navigateToPage(searchPage.getPageId(),
                    searchPage.getPageFunction(),
                    createPageUiUrl(searchPage),
                    false,
                    appbarPresent,
                    false,
                    navbarPresent,
                    false,
                    deeplinkSearchQuery);
            if (!launchSuccess) {
                launchBlankPage();
            }
        }
    }

    public boolean checkForExistingSubscription(boolean showDialog, Action1<String> action1) {
        showLoader();
        if (amazonUserId != null && amazonUserId.length() > 0) {
            String restorePurchaseUrl = currentContext.getString(R.string.app_cms_amazon_restore_purchase_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName());
            appCMSRestorePurchaseCall.restoreAmazonPurchase(apikey, getAuthToken(), restorePurchaseUrl, amazonUserId, "fire_tv",
                    appCMSMain.getInternalName(), new Action1<RestoreAmazonPurchase>() {
                        @Override
                        public void call(RestoreAmazonPurchase signInResponse) {
                            if (signInResponse != null && signInResponse.getSubscriptionStatus() != null
                                    && signInResponse.getSubscriptionStatus().equalsIgnoreCase(currentContext.getString(R.string.subscription_status_completed)) && showDialog) {
                                Intent args = new Intent(AppCMSPresenter.RESTORE_PURCHASE_DIALOG);
                                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                args.putExtra(currentActivity.getString(R.string.app_cms_email_id_label), signInResponse.getEmail());
                                currentActivity.sendBroadcast(args);
                                action1.call("Registered");
                            } else {
                                action1.call("NotRegistered");
                            }
                            stopLoader();
                        }
                    });
        } else {
            action1.call("NotRegistered");
            stopLoader();
        }
        return false;

    }

    public void navigateToSignUpPage(boolean isFromLoginDialog) {
        if (signupPage != null) {
            navigateToTVPage(signupPage.getPageId(),
                    signupPage.getPageFunction(),
                    createPageUiUrl(signupPage),
                    false,
                    Uri.EMPTY,
                    false,
                    false,
                    isFromLoginDialog, false, false, false);
        }
    }

    public void resetPassword(final String email, String dialogTitle, MetadataMap metadataMap) {
        if (currentActivity != null) {

            if (platformType == PlatformType.TV && !isNetworkConnected()) {
                //open error dialog.
                RetryCallBinder retryCallBinder = getRetryCallBinder(null, null,
                        email, null,
                        null, false,
                        null, RESET_PASSWORD_RETRY
                );
                Bundle bundle = new Bundle();
                bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(args);
                return;
            }

            String url = currentActivity.getString(R.string.app_cms_forgot_password_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName());
            appCMSResetPasswordCall.call(url,
                    email,
                    apikey,
                    getAuthToken(),
                    forgotPasswordResponse -> {
                        try {
                            if (forgotPasswordResponse != null
                                    && TextUtils.isEmpty(forgotPasswordResponse.getError())) {
                                Log.d(TAG, "Successfully reset password for email: " + email);

                                if (platformType == PlatformType.TV) {
                                    openTVErrorDialog(
                                            getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_reset_password_success_description)),
                                            getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_forgot_password_title)), true);
                                } else {
                                    String msg = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_reset_password_success_description));
                                    if (metadataMap != null && metadataMap.getForgotPasswordSuccess() != null)
                                        msg = metadataMap.getForgotPasswordSuccess();
                                    showDialog(DialogType.RESET_PASSWORD,
                                            msg,
                                            false,
                                            null,
                                            null, dialogTitle);
                                }
                            } else if (forgotPasswordResponse != null) {
                                Log.e(TAG, "Failed to reset password for email: " + email);
                                String error = forgotPasswordResponse.getError();
                                if (metadataMap == null &&
                                        getModuleApi() != null && getModuleApi().getMetadataMap() != null &&
                                        convertClassToMap(getModuleApi().getMetadataMap()).get(forgotPasswordResponse.getCode()) != null) {
                                    stopLoader();
                                    error = (String) convertClassToMap(getModuleApi().getMetadataMap()).get(forgotPasswordResponse.getCode());
                                }
                                if (metadataMap != null && convertClassToMap(metadataMap).get(forgotPasswordResponse.getCode()) != null)
                                    error = (String) convertClassToMap(metadataMap).get(forgotPasswordResponse.getCode());
                                if (platformType == PlatformType.TV) {
                                    openTVErrorDialog(forgotPasswordResponse.getError(),
                                            getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_forgot_password_title)), false);
                                } else {
                                    showDialog(DialogType.RESET_PASSWORD,
                                            error,
                                            false,
                                            null,
                                            null, dialogTitle);
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error resetting password: " + e.getMessage());
                        }
                    });
        }
    }

    public void resetPassword(final String email, Action0 callback) {
        if (currentActivity != null) {

            if (platformType == PlatformType.TV && !isNetworkConnected()) {
                //open error dialog.
                RetryCallBinder retryCallBinder = getRetryCallBinder(null, null,
                        email, null,
                        null, false,
                        null, RESET_PASSWORD_RETRY
                );
                Bundle bundle = new Bundle();
                bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(args);
                return;
            }

            String url = currentActivity.getString(R.string.app_cms_forgot_password_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName());
            appCMSResetPasswordCall.call(url,
                    email,
                    apikey,
                    getAuthToken(),
                    forgotPasswordResponse -> {
                        try {
                            String forgotPasswordDilogTitle = "";
                            if (moduleApi != null && moduleApi.getMetadataMap() != null
                                    && moduleApi.getMetadataMap().getForgotPasswordCtaText() != null) {
                                forgotPasswordDilogTitle = moduleApi.getMetadataMap().getForgotPasswordCtaText();
                            }
                            if (TextUtils.isEmpty(forgotPasswordDilogTitle)) {
                                forgotPasswordDilogTitle = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_forgot_password_title));
                            }
                            if (forgotPasswordResponse != null
                                    && TextUtils.isEmpty(forgotPasswordResponse.getError())) {
                                Log.d(TAG, "Successfully reset password for email: " + email);

                                if (platformType == PlatformType.TV) {
                                    String message = "";
                                    if (getModuleApi() != null && moduleApi.getMetadataMap() != null) {
                                        message = (String) convertClassToMap(getModuleApi().getMetadataMap()).get(forgotPasswordResponse.getCode());
                                    }
                                    if (forgotPasswordResponse.isEmailSent()) {
                                        if (getModuleApi() != null
                                                && moduleApi.getMetadataMap() != null
                                                && moduleApi.getMetadataMap().getForgotPasswordSuccess() != null) {
                                            message = moduleApi.getMetadataMap().getForgotPasswordSuccess();
                                        }
                                    }
                                    if (TextUtils.isEmpty(message))
                                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_reset_password_success_description));

                                    openTVErrorDialog(
                                            message,
                                            forgotPasswordDilogTitle, true);
                                    if (callback != null) {
                                        callback.call();
                                    }
                                }
                            } else if (forgotPasswordResponse != null) {
                                Log.e(TAG, "Failed to reset password for email: " + email);
                                if (platformType == PlatformType.TV) {
                                    String message = "";
                                    if (getModuleApi() != null && moduleApi.getMetadataMap() != null) {
                                        message = (String) convertClassToMap(getModuleApi().getMetadataMap()).get(forgotPasswordResponse.getCode());
                                    }
                                    if (TextUtils.isEmpty(message))
                                        message = forgotPasswordResponse.getError();
                                    openTVErrorDialog(message,
                                            forgotPasswordDilogTitle, false);
                                } else {
                                    showDialog(DialogType.RESET_PASSWORD,
                                            forgotPasswordResponse.getError(),
                                            false,
                                            null,
                                            null,
                                            null);
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error resetting password: " + e.getMessage());
                        }
                    });
        }
    }

    /**
     * this dialog is use for showing a message with OK button in case of TV.
     *
     * @param message
     * @param headerTitle
     * @param shouldNavigateToLogin
     */
    public void openTVErrorDialog(String message, String headerTitle,
                                  boolean shouldNavigateToLogin) {
        try {
            Bundle bundle = new Bundle();
            bundle.putBoolean(currentActivity.getString(R.string.retry_key), false);
            bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), false);
            bundle.putString(currentActivity.getString(R.string.tv_dialog_msg_key), message);
            bundle.putString(currentActivity.getString(R.string.tv_dialog_header_key), headerTitle != null ? headerTitle.toUpperCase() : null);
            bundle.putBoolean(currentActivity.getString(R.string.shouldNavigateToLogin), shouldNavigateToLogin);

            Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
            args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(args);
        } catch (Exception e) {
            //Log.e(TAG, "DialogType launching TV DialogType Activity");
        }
    }

    public void openTVEntitlementDialog(String message, String headerTitle,
                                        boolean shouldNavigateToLogin, String contentType, ContentDatum contentDatum) {
        Bundle bundle = new Bundle();
        bundle.putBoolean(currentActivity.getString(R.string.retry_key), false);
        bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), false);
        bundle.putString(currentActivity.getString(R.string.tv_dialog_msg_key), message);
        bundle.putString(currentActivity.getString(R.string.tv_dialog_header_key), headerTitle != null ?
                headerTitle.toUpperCase() : null
        );
        bundle.putBoolean(currentActivity.getString(R.string.shouldNavigateToLogin), shouldNavigateToLogin);

        Intent args = new Intent(AppCMSPresenter.SUBSCRIPTION_DIALOG);
        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
        args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        args.putExtra(currentActivity.getString(R.string.tv_dialog_content_type_key), contentType);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_content_datum), contentDatum);
        /*CommonUtils.contentDatum = contentDatum;*/
        currentActivity.sendBroadcast(args);
    }

    public void openTVMaxSimultaneousStreamDialog(String message) {
        Bundle bundle = new Bundle();
        bundle.putString(currentActivity.getString(R.string.tv_dialog_msg_key), message);
        Intent args = new Intent(AppCMSPresenter.MAX_SIMULTANEOUS_STREAM_DIALOG);
        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
        currentActivity.sendBroadcast(args);
    }

    public void getUserData(Action1<UserIdentity> userIdentityAction) {
        if (currentActivity != null) {
            if (isUserLoggedIn()) {
                callRefreshIdentity(() -> {
                    try {
                        String url = currentActivity.getString(R.string.app_cms_user_identity_api_url,
                                appCMSMain.getApiBaseUrl(),
                                appCMSMain.getInternalName());
                        appCMSUserIdentityCall.callGet(url,
                                getAuthToken(), apikey,
                                userIdentity -> {
                                    try {
                                        setUserIdentityData(userIdentity);
                                        if (userIdentityAction != null)
                                            userIdentityAction.call(userIdentity);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                });
                    } catch (Exception ignored) {
                    }
                });
            }
        }
    }

    private void setUserIdentityData(UserIdentity userIdentity) {
        if (userIdentity != null) {
            setLoggedInUser(userIdentity.getUserId());
            appPreference.setLoggedInUserEmail(userIdentity.getEmail());
            appPreference.setLoggedInUserName(userIdentity.getName());
            appPreference.setIsUserSubscribed(userIdentity.isSubscribed());
            appPreference.setWhatsappChecked(userIdentity.isWhatsAppConsent());
            appPreference.setEmailConsentChecked(userIdentity.isEmailConsent());
            if (!userIdentity.isSubscribed()) {
                appPreference.setActiveSubscriptionProcessor(null);
                appPreference.setActiveSubscriptionPaymentOperator(null);
            }
            appPreference.setUserPurchases(userIdentity.getUserPurchases());
            appPreference.setUserPassword(userIdentity.isPasswordEnabled());
            appPreference.setLoggedInUserPhone(userIdentity.getPhoneNumber() != null ? userIdentity.getPhoneNumber() : (userIdentity.getPhone() != null ? userIdentity.getPhone().getNumber() : null));
            appPreference.setUserAuthProviderName(userIdentity.getProvider());
            appPreference.setParentalPin(userIdentity.getParentalPin());
            appPreference.setParentalControlsEnable(userIdentity.isParentalControlEnable());
            appPreference.setParentalRating(userIdentity.getParentalRating());
            appPreference.setUserAuthProviderName(userIdentity.getProvider());
            appPreference.setTvProviderLogo(userIdentity.getIdpLogo());
            appPreference.setTvProviderName(userIdentity.getTvProviderName());

            // Here check isDevcieActivated
            if (isCleverTapAvailable && appPreference.isDeviceActivated() && platformType == PlatformType.TV) {
                appPreference.setDeviceActivated(false);
                senduserProfileEvent();
                new Handler().postDelayed(cleverTapSDK::sendDeviceActivatedEvent, 3000);
            }

            if (userIdentity.getSubscription() != null && userIdentity.getSubscription().getSubscriptionInfo() != null) {
                AppCMSUserSubscriptionPlanInfoResult subscriptionInfo = userIdentity.getSubscription().getSubscriptionInfo();
                setUserSubscriptionInfo(subscriptionInfo);
                appPreference.setActiveSubscriptionStatus(subscriptionInfo.getSubscriptionStatus());
                if (userIdentity.getUserSubscribedplan() != null && userIdentity.getUserSubscribedplan().getPlanDetails() != null && userIdentity.getUserSubscribedplan().getPlanDetails().size() > 0 && userIdentity.getUserSubscribedplan().getPlanDetails().get(0).getDescription() != null) {
                    appPreference.setExistingSubscriptionPlanDescription(userIdentity.getUserSubscribedplan().getPlanDetails().get(0).getDescription());
                } else {
                    if (userIdentity.getUserSubscribedplan() != null && userIdentity.getUserSubscribedplan().getDescription() != null)
                        appPreference.setExistingSubscriptionPlanDescription(userIdentity.getUserSubscribedplan().getDescription());
                    else
                        appPreference.setExistingSubscriptionPlanDescription("NA");
                }
                if (!userIdentity.isSubscribed() &&
                        (subscriptionInfo.getSubscriptionStatus().toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.subscription_status_suspended)) ||
                                subscriptionInfo.getSubscriptionStatus().toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.subscription_status_cancelled)))) {
                    appPreference.setChurnedUser(true);
                }
                // if (subscriptionInfo.getSubscriptionEndDate() != null && isSubscriptionCompleted()) {
                appPreference.setActiveSubscriptionPlatform(subscriptionInfo.getPlatform());
                appPreference.setActiveSubscriptionSku(subscriptionInfo.getIdentifier());
                appPreference.setActiveSubscriptionCountryCode(subscriptionInfo.getCountryCode());
                appPreference.setActiveSubscriptionId(subscriptionInfo.getId());
                appPreference.setActiveSubscriptionProcessor(subscriptionInfo.getPaymentHandler());
                appPreference.setActiveSubscriptionPaymentOperator(subscriptionInfo.getPaymentOperator());
                appPreference.setActiveSubscriptionEndDate(subscriptionInfo.getSubscriptionEndDate());
                appPreference.setActiveSubscriptionStartDate(subscriptionInfo.getSubscriptionStartDate());

                if (userIdentity.getUserSubscribedplan() != null) {
                    MonetizationPlan userSubscribedplan = userIdentity.getUserSubscribedplan();
                    if (userSubscribedplan.getFeatureSetting() != null) {
                        FeatureSetting featureSetting = userSubscribedplan.getFeatureSetting();
                        appPreference.setUserAllowedCasting(featureSetting.isBeamingAllowed());
                        appPreference.setUserAllowedDownload(featureSetting.isDownloadAllowed());
                        appPreference.setUserAllowedHDStreaming(featureSetting.isHdStreaming());
                        if (featureSetting.getAllowedDevices() != null) {
                            for (int i = 0; i < featureSetting.getAllowedDevices().size(); i++) {
                                String allowedDevice = featureSetting.getAllowedDevices().get(i);
                                if (platformType == PlatformType.ANDROID) {
                                    if (allowedDevice.toLowerCase().equalsIgnoreCase("android".toLowerCase())) {
                                        appPreference.setAndroidPlayAllowed(true);
                                        break;
                                    } else {
                                        appPreference.setAndroidPlayAllowed(false);
                                    }
                                }
                                if (platformType == PlatformType.TV) {
                                    if (allowedDevice.toLowerCase().equalsIgnoreCase("fireTv".toLowerCase()) ||
                                            allowedDevice.toLowerCase().equalsIgnoreCase("androidTv".toLowerCase())) {
                                        appPreference.setFiretvPlayAllowed(true);
                                        break;
                                    } else {
                                        appPreference.setFiretvPlayAllowed(false);
                                    }
                                }
                            }
                        }
                    } else {
                        if (isUserLoggedInByTVProvider()) {
                            appPreference.setUserAllowedHDStreaming(true);
                        }
                    }
                    appPreference.setActiveSubscriptionPlanName(userSubscribedplan.getName());
                    appPreference.setActiveSubscriptionPlanCycle(userSubscribedplan.getRenewalCycleType());
                    appPreference.setActiveSubscriptionPlanCyclePeriodMultiplier(userSubscribedplan.getRenewalCyclePeriodMultiplier());

                    if (userSubscribedplan.getPlanDetails() != null) {
                        for (PlanDetail planDetail : userSubscribedplan.getPlanDetails()) {
                            if (userSubscribedplan.getPlanDetails().size() > 0) {
                                appPreference.setActiveSubscriptionPrice(String.valueOf(planDetail.getRecurringPaymentAmount()));
                                appPreference.setUserSubscriptionPlanTitle(planDetail.getTitle());
                                appPreference.setActiveSubscriptionPriceCurrencyCode(planDetail.getRecurringPaymentCurrencyCode());
                                if (planDetail.getTitle() != null)
                                    appPreference.setActiveSubscriptionPlanName(planDetail.getTitle());
                            } else if (!TextUtils.isEmpty(planDetail.getRecurringPaymentCurrencyCode()) &&
                                    planDetail.getCountryCode().equalsIgnoreCase(countryCode)) {
                                appPreference.setActiveSubscriptionPrice(String.valueOf(planDetail.getRecurringPaymentAmount()));
                                appPreference.setUserSubscriptionPlanTitle(planDetail.getTitle());
                                appPreference.setActiveSubscriptionPriceCurrencyCode(planDetail.getRecurringPaymentCurrencyCode());
                            }
                        }
                    }
                }
                //}
            } else {
                appPreference.clearSubscriptionDetails();
            }

            sendUserProfileEvent();
        }
    }

    @SuppressWarnings("ConstantConditions")
    public void updateUserProfile(final String username,
                                  final String email,
                                  final String password,
                                  final Action1<UserIdentity> userIdentityAction, Module module) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    updateProfile(username, email, password, userIdentityAction, module);
                });
            } else {
                updateProfile(username, email, password, userIdentityAction, module);
            }
        }
    }

    private void updateProfile(final String username,
                               final String email,
                               final String password,
                               final Action1<UserIdentity> userIdentityAction, Module module) {
        try {
            String url = currentActivity.getString(R.string.app_cms_user_identity_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName());
            UserIdentity userIdentity = new UserIdentity();
            userIdentity.setName(username);
            userIdentity.setEmail(email);
            userIdentity.setId(appPreference.getLoggedInUser());
            userIdentity.setPassword(password);
            showLoader();
            appCMSUserIdentityCall.callPost(url,
                    getAuthToken(), apikey,
                    userIdentity,
                    userIdentityResult -> {
                        sendCloseOthersAction(null, true, false);
                        stopLoader();
                        try {
                            if (userIdentityResult != null) {
                                appPreference.setLoggedInUserName(userIdentityResult.getName());
                                appPreference.setLoggedInUserEmail(userIdentityResult.getEmail());
                                appPreference.setAuthToken(userIdentityResult.getAuthorizationToken());
                                appPreference.setRefreshToken(userIdentityResult.getRefreshToken());
                            }
                            sendRefreshPageAction();
                            userIdentityAction.call(userIdentityResult);
                            senduserProfileEvent();
                        } catch (Exception e) {
                            //Log.e(TAG, "Error get user identity data: " + e.getMessage());
                        }
                    }, errorBody -> {
                        stopLoader();
                        try {
                            UserIdentity userIdentityError = gson.fromJson(errorBody.string(),
                                    UserIdentity.class);
                            if (convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()) != null)
                                showToast((String) convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()), Toast.LENGTH_LONG);
                            else if (userIdentityError.getError() != null)
                                showToast(userIdentityError.getError(), Toast.LENGTH_LONG);
                            //Log.e(TAG, "Invalid JSON object: " + e.toString());
                        } catch (Exception e) {
                            //Log.e(TAG, "Error parsing user identity error: " + e.getMessage());
                        }
                    });
        } catch (Exception e) {
            //Log.e(TAG, "Error refreshing identity: " + e.getMessage());
        }
    }

    public void addPassword(final String password, Module module) {
        String url = currentActivity.getString(R.string.app_cms_change_password_api_url,
                appCMSMain.getApiBaseUrl(), appCMSMain.getInternalName());
        if (!isNetworkConnected()) {
            showDialog(DialogType.NETWORK, null, false, null, null, null);
            return;
        }
        UserIdentityPassword userIdentityPassword = new UserIdentityPassword();
        userIdentityPassword.setNewPassword(password);
        userIdentityPassword.setAddPassword(true);
        showLoader();
        appCMSUserIdentityCall.addPassword(url,
                getAuthToken(), apikey, userIdentityPassword,
                userIdentityPasswordResult -> {
                    stopLoader();
                    try {
                        if (userIdentityPasswordResult != null && userIdentityPasswordResult.isPasswordUpdated()) {
                            if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getPasswordUpdateSuccessMessage() != null)
                                showToast(module.getMetadataMap().getPasswordUpdateSuccessMessage(), Toast.LENGTH_LONG);
                            else
                                showToast(currentActivity.getString(R.string.password_changed_successfully), Toast.LENGTH_LONG);
                            sendCloseOthersAction(null, true, false);
                            appPreference.setUserPassword(true);
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving user password reset result: " + e.getMessage());
                    }
                }, errorBody -> {
                    stopLoader();
                    try {
                        UserIdentityPassword userIdentityError = gson.fromJson(errorBody.string(),
                                UserIdentityPassword.class);
                        if (module != null && module.getMetadataMap() != null
                                && userIdentityError.getCode() != null
                                && convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()) != null) {
                            showToast((String) convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()), Toast.LENGTH_LONG);
                        } else {
                            showToast(userIdentityError.getError(), Toast.LENGTH_LONG);
                        }
                        //Log.e(TAG, "Invalid JSON object: " + e.toString());
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving user password result: " + e.getMessage());
                    }
                });
    }

    public void updateUserPassword(final String oldPassword, final String newPassword,
                                   Module module, Action1<Boolean> resultAction) {
        String url = currentActivity.getString(R.string.app_cms_change_password_api_url,
                appCMSMain.getApiBaseUrl(), appCMSMain.getInternalName());
        if (!isNetworkConnected()) {
            showDialog(DialogType.NETWORK, null, false, null, null, null);
            return;
        }
        UserIdentityPassword userIdentityPassword = new UserIdentityPassword();
        userIdentityPassword.setResetToken(getAuthToken());
        userIdentityPassword.setOldPassword(oldPassword);
        userIdentityPassword.setNewPassword(newPassword);
        showLoader();
        appCMSUserIdentityCall.passwordPost(url,
                getAuthToken(), apikey, userIdentityPassword,
                userIdentityPasswordResult -> {
                    stopLoader();
                    try {
                        if (userIdentityPasswordResult != null && userIdentityPasswordResult.isPasswordUpdated()) {
                            if (module != null && module.getMetadataMap() != null && module.getMetadataMap().getPasswordUpdateSuccessMessage() != null)
                                showToast(module.getMetadataMap().getPasswordUpdateSuccessMessage(), Toast.LENGTH_LONG);
                            else
                                showToast(currentActivity.getString(R.string.password_changed_successfully), Toast.LENGTH_LONG);
                            sendCloseOthersAction(null, true, false);
                            resultAction.call(true);
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving user password reset result: " + e.getMessage());
                    }
                }, errorBody -> {
                    stopLoader();
                    try {
                        UserIdentityPassword userIdentityError = gson.fromJson(errorBody.string(),
                                UserIdentityPassword.class);
                        if (module != null && module.getMetadataMap() != null
                                && userIdentityError.getCode() != null
                                && convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()) != null) {
                            showToast((String) convertClassToMap(module.getMetadataMap()).get(userIdentityError.getCode()), Toast.LENGTH_LONG);
                        } else {
                            showToast(userIdentityError.getError(), Toast.LENGTH_LONG);
                        }
                        //Log.e(TAG, "Invalid JSON object: " + e.toString());
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving user password result: " + e.getMessage());
                    }
                });
    }

    public void showSoftKeyboard(View view) {
        if (currentActivity != null) {
            if (view != null) {
                InputMethodManager imm =
                        (InputMethodManager) currentActivity.getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,
                            InputMethodManager.HIDE_IMPLICIT_ONLY);
                }
            }
        }
    }

    public void closeSoftKeyboard() {
        if (currentActivity != null) {
            View view = currentActivity.getCurrentFocus();
            if (view != null) {
                InputMethodManager imm =
                        (InputMethodManager) currentActivity.getSystemService(Context.INPUT_METHOD_SERVICE);
                if (imm != null) {
                    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                }
            }
        }

    }

    @SuppressWarnings("ConstantConditions")
    public void closeSoftKeyboardNoView() {
        if (currentActivity != null) {
            InputMethodManager imm = (InputMethodManager) currentActivity.getSystemService(Activity.INPUT_METHOD_SERVICE);
            imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);
        }
    }

    public void scrollUpWhenSoftKeyboardIsVisible() {
        if (currentActivity != null) {
            currentActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
        }
    }

    public void initiateAfterLoginAction() {
        if (afterLoginAction != null && shouldLaunchLoginAction) {
            afterLoginAction.call();
            afterLoginAction = null;
            shouldLaunchLoginAction = false;
        }
    }


    public boolean navigateToDisplayPage(String pageId,
                                         String pageTitle,
                                         String url,
                                         boolean launchActivity,
                                         boolean appbarPresent,
                                         boolean fullscreenEnabled,
                                         boolean navbarPresent,
                                         boolean sendCloseAction,
                                         final Uri searchQuery, List<NavigationPrimary> items) {
        //ViewCreator.clearPlayerView();

        boolean result = false;
        if (currentActivity instanceof AppCMSPlayAudioActivity) {
            setCancelAllLoads(false);
        }
        if (currentActivity != null && !TextUtils.isEmpty(pageId) && !cancelAllLoads) {

            if (launched) {
                refreshPages(null, false, 0, 0);
            }

            if (isUserLoggedIn()) {
                refreshUserSubscriptionData(() -> {
                }, false);
                populateFilmsInUserWatchlist();
            }
            loadingPage = true;
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);

            if (appCMSPageUI != null) {
                showLoader();

                AppCMSPageAPI appCMSPageAPI = null;

                AppCMSPageAPI appCMSPageAPISeason = new AppCMSPageAPI();
                Module module = new Module();
                module.setId(currentActivity.getString(R.string.blank_string));
                if (null != appCMSPageUI.getModuleList()
                        && appCMSPageUI.getModuleList().size() > 0) {
                    module.setId(appCMSPageUI.getModuleList().get(0).getId());
                    module.setTitle(pageTitle);
                }
                ArrayList<Module> moduleList = new ArrayList<>();
                moduleList.add(module);
                appCMSPageAPISeason.setModules(moduleList);
                appCMSPageAPISeason.setId(pageId);
                appCMSPageAPISeason.setTitle(pageTitle);
                ArrayList<ContentDatum> data = new ArrayList<>();
                for (NavigationPrimary navigationPrimary : items) {
                    data.add(navigationPrimary.convertToContentDatum(this));
                }
                module.setContentData(data);
                appCMSPageAPI = appCMSPageAPISeason;
                pushActionInternalEvents(pageId
                        + BaseView.isLandscape(currentActivity));

                if (launchActivity) {
                    launchPageActivity(currentActivity,
                            appCMSPageUI,
                            appCMSPageAPI,
                            pageId,
                            pageTitle,
                            pageId,
                            pageIdToPageFunctionMap.get(pageId),
                            loadFromFile,
                            appbarPresent,
                            fullscreenEnabled,
                            navbarPresent,
                            sendCloseAction,
                            searchQuery,
                            ExtraScreenType.NONE);

                    launched = true;
                } else {
                    Bundle args = getPageActivityBundle(currentActivity,
                            appCMSPageUI,
                            appCMSPageAPI,
                            pageId,
                            pageTitle,
                            pageId,
                            pageIdToPageFunctionMap.get(pageId),
                            loadFromFile,
                            appbarPresent,
                            fullscreenEnabled,
                            navbarPresent,
                            sendCloseAction,
                            searchQuery,
                            ExtraScreenType.NONE,
                            null,
                            false,
                            null);
                    if (args != null) {
                        Intent updatePageIntent =
                                new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                args);
                        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                        currentActivity.sendBroadcast(updatePageIntent);
                        dismissOpenDialogs(null);
                    }

                    launched = true;
                }

                if (appCMSPageAPI == null) {
                    showLoadingDialog(true);
                    refreshPageAPIData(appCMSPageUI, pageId, null, appCMSPageAPI1 -> {
                        loadingPage = false;
                        try {
                            getPageAPILruCache().put(pageId, appCMSPageAPI1);
                        } catch (Exception e) {

                        }
                        cancelInternalEvents();
                        restartInternalEvents();
                        navigationPageData.put(pageId, appCMSPageAPI1);
                        if (currentActivity != null) {
                            Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_DATA_ACTION);
                            refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                            currentActivity.sendBroadcast(refreshPageDataActionIntent);
                        }
                        Log.w(TAG, "Sent PRESENTER_REFRESH_PAGE_DATA_ACTION");
                    });
                } else {
                    loadingPage = false;
                    cancelInternalEvents();
                    navigationPageData.put(pageId, appCMSPageAPI);
                }

            } else {
                showLoader();


                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                stopLoader();
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(pageId, appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }

                                    navigateToDisplayPage(pageId,
                                            pageTitle,
                                            url,
                                            launchActivity,
                                            appbarPresent,
                                            fullscreenEnabled,
                                            navbarPresent,
                                            sendCloseAction,
                                            searchQuery, items);
                                }
                            },
                            loadFromFile,
                            false);
                }
            }
        } else if (isNetworkConnected() &&
                currentActivity != null &&
                !TextUtils.isEmpty(url) &&
                url.contains(currentActivity.getString(
                        R.string.app_cms_page_navigation_contact_us_key))) {
            //Firebase Event when contact us screen is opened.
            firebaseAnalytics.screenViewEvent(currentContext.getString(R.string.value_contact_us_screen));
            if (isFacebookSdkAvailable) {
                SemVer installAppSemVer = getInstalledAppSemVer();
                facebookAnalytics.sendContactUsEvent(currentContext.getString(R.string.value_contact_us_screen), installAppSemVer.original);
            }

        } else if (!cancelAllLoads && !isNetworkConnected()) {
            showDialog(DialogType.NETWORK, null, false, null, null, null);
        } else if (!cancelAllLoads) {
            if (launched) {
                //Log.d(TAG, "Resetting page navigation to previous tab");
                setNavItemToCurrentAction(currentActivity);
            } else {
                launchBlankPage();
            }
        } else {
            showLoadingDialog(false);
        }
        return result;
    }


    public boolean navigateToPage(String pageId,
                                  String pageTitle,
                                  String url,
                                  boolean launchActivity,
                                  boolean appbarPresent,
                                  boolean fullscreenEnabled,
                                  boolean navbarPresent,
                                  boolean sendCloseAction,
                                  final Uri searchQuery) {
        //ViewCreator.clearPlayerView();

        boolean result = false;
        if (currentActivity instanceof AppCMSPlayAudioActivity) {
            setCancelAllLoads(false);
        }
        if (currentActivity != null && !TextUtils.isEmpty(pageId) && !cancelAllLoads) {

            if (launched) {
                refreshPages(null, false, 0, 0);
            }

            if (isUserLoggedIn()) {
                // refreshUserSubscriptionData(() -> { }, false);
                populateFilmsInUserWatchlist();
            }

            loadingPage = true;
            //Log.d(TAG, "Launching page " + pageTitle + ": " + pageId);
            //Log.d(TAG, "Search query (optional): " + searchQuery);
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);

            if (appCMSPageUI != null) {
                showLoader();

                AppCMSPageAPI appCMSPageAPI = null;
                if (platformType == PlatformType.ANDROID && getPageAPILruCache().get(pageId) != null)
                    appCMSPageAPI = getPageAPILruCache().get(pageId);
                ExtraScreenType extaExtraScreenType = ExtraScreenType.NONE;

                for (int i = 0; i < appCMSPageUI.getModuleList().size(); i++) {
                    ModuleList moduleList = appCMSPageUI.getModuleList().get(i);
                    if (moduleList.getBlockName() != null && moduleList.getBlockName().equalsIgnoreCase(currentActivity.getString(R.string.ui_block_authentication_17))) {
                        extaExtraScreenType = ExtraScreenType.GENERIC_LOGIN_SIGNUP;
                        break;
                    }
                    if (moduleList.getBlockName() != null && moduleList.getBlockName().equalsIgnoreCase(currentActivity.getString(R.string.ui_block_user_management_04))) {
                        extaExtraScreenType = ExtraScreenType.USER_PROFILE_SETTINGS;
                        break;
                    }
                    if (moduleList.getBlockName().equalsIgnoreCase(currentActivity.getString(R.string.ui_block_refer_and_earn_01))) {
                        extaExtraScreenType = ExtraScreenType.GET_SOCIAL;
                        break;
                    }
                }
                pushActionInternalEvents(pageId + BaseView.isLandscape(currentActivity));
                if (launchActivity) {
                    launchPageActivity(currentActivity,
                            appCMSPageUI,
                            appCMSPageAPI,
                            pageId,
                            pageTitle,
                            pageId,
                            pageIdToPageFunctionMap.get(pageId),
                            loadFromFile,
                            appbarPresent,
                            fullscreenEnabled,
                            navbarPresent,
                            sendCloseAction,
                            searchQuery,
                            extaExtraScreenType);

                    launched = true;
                } else {
                    Bundle args = getPageActivityBundle(currentActivity,
                            appCMSPageUI,
                            appCMSPageAPI,
                            pageId,
                            pageTitle,
                            pageId,
                            pageIdToPageFunctionMap.get(pageId),
                            loadFromFile,
                            appbarPresent,
                            fullscreenEnabled,
                            navbarPresent,
                            sendCloseAction,
                            searchQuery,
                            extaExtraScreenType,
                            null,
                            false,
                            null);
                    if (args != null) {
                        Intent updatePageIntent =
                                new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                args);
                        updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                        currentActivity.sendBroadcast(updatePageIntent);
                        dismissOpenDialogs(null);
                    }

                    launched = true;
                    result = true;
                }

                if (appCMSPageAPI == null) {
                    showLoadingDialog(true);
                    refreshPageAPIData(appCMSPageUI, pageId, null, appCMSPageAPI1 -> {
                        if (appCMSPageAPI1 != null) {
                            loadingPage = false;
                            if (!isViewReferralPage(pageId)) {
                                navigationPageData.put(pageId, appCMSPageAPI1);
                                getPageAPILruCache().put(pageId, appCMSPageAPI1);
                            }
                            cancelInternalEvents();
                            restartInternalEvents();
                            if (isViewReferralPage(pageId)) {
                                if (isCleverTapAvailable)
                                    cleverTapSDK.sendEventViewPlans(currentActivity.getString(R.string.app_cms_action_referralPlans1_key));
                                for (int i = 0; i < appCMSPageAPI1.getModules().size(); i++) {
                                    Module module = appCMSPageAPI1.getModules().get(i);
                                    if (module.getModuleType().equalsIgnoreCase("ViewPlanModule")) {
                                        if (appCMSPageAPI1.getModules().get(i).getMetadataMap() != null) {
                                            int finalI = i;
                                            showLoader();
                                            fetchSubscriptionPlansById(appCMSPageAPI1.getModules().get(i).getMetadataMap().getPlans(), contentData -> {
                                                stopLoader();
                                                if (contentData != null) {
                                                    appCMSPageAPI1.getModules().get(finalI).setContentData(contentData);
                                                    if (currentActivity != null) {
                                                        Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_DATA_ACTION);
                                                        refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                                        currentActivity.sendBroadcast(refreshPageDataActionIntent);
                                                    }
                                                }
                                            }, false);
                                        }
                                    }
                                }

                            } else {
                                if (currentActivity != null) {
                                    Intent refreshPageDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_DATA_ACTION);
                                    refreshPageDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                    currentActivity.sendBroadcast(refreshPageDataActionIntent);
                                }
                            }
                        }
                    });
                } else {
                    loadingPage = false;
                    cancelInternalEvents();
                    navigationPageData.put(pageId, appCMSPageAPI);
                }
            } else {
                showLoader();
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                stopLoader();
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(pageId, appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action))
                                        actionToPageMap.put(action, appCMSPageUIResult);

                                    navigateToPage(pageId,
                                            pageTitle,
                                            url,
                                            launchActivity,
                                            appbarPresent,
                                            fullscreenEnabled,
                                            navbarPresent,
                                            sendCloseAction,
                                            searchQuery);
                                }
                            },
                            loadFromFile,
                            false);
                }
            }
        } else if (isNetworkConnected() &&
                currentActivity != null &&
                !TextUtils.isEmpty(url) &&
                url.contains(currentActivity.getString(
                        R.string.app_cms_page_navigation_contact_us_key))) {
            firebaseAnalytics.screenViewEvent(currentContext.getString(R.string.value_contact_us_screen));
            if (isFacebookSdkAvailable) {
                SemVer installAppSemVer = getInstalledAppSemVer();
                facebookAnalytics.sendContactUsEvent(currentContext.getString(R.string.value_contact_us_screen), installAppSemVer.original);
            }

        } else if (!cancelAllLoads && !isNetworkConnected()) {
            showDialog(DialogType.NETWORK, null, false, null, null, null);
        } else if (!cancelAllLoads) {
            if (launched) {
                setNavItemToCurrentAction(currentActivity);
            } else {
                launchBlankPage();
            }
        } else {
            showLoadingDialog(false);
        }
        return result;
    }

    /**
     * For navigation TOS page with holding email/pwd from signup screen
     *
     * @param email
     * @param password
     */
    public void navigatToTOSPage(String email, String password) {
        setTempEmail(email);
        setTempPassword(password);
        if (tosPage != null) {
            navigateToPage(tosPage.getPageId(),
                    tosPage.getPageFunction(),
                    "",
                    false,
                    false,
                    false,
                    false,
                    false,
                    null);
        }
    }

    String tempEmail = "";
    String tempPassword = "";

    public String getTempEmail() {
        return tempEmail;
    }

    public void setTempEmail(String email) {
        this.tempEmail = email;
    }

    public String getTempPassword() {
        return tempPassword;
    }

    public void setTempPassword(String password) {
        this.tempPassword = password;
    }

    /**
     * Navigation Privacy Policy page with holding temp email/pwd from signup screen
     *
     * @param email
     * @param password
     */
    public void navigateToPrivacyPolicy(String email, String password) {
        setTempEmail(email);
        setTempPassword(password);
        if (privacyPolicyPage != null) {
            navigateToPage(privacyPolicyPage.getPageId(),
                    privacyPolicyPage.getPageFunction(),
                    "",
                    false,
                    false,
                    false,
                    false,
                    false,
                    null);
        }
    }

    public void sendRefreshPageAction() {
        if (currentActivity != null) {
            Intent refreshPageIntent = new Intent(AppCMSPresenter.PRESENTER_REFRESH_PAGE_ACTION);
            refreshPageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(refreshPageIntent);
        }
    }

    public boolean sendCloseAutoplayAction(String pageName,
                                           boolean closeSelf,
                                           boolean closeOnePage) {
        boolean result = false;
        if (currentActivity != null) {
            Intent closeOthersIntent = new Intent(AppCMSPresenter.PRESENTER_CLOSE_AUTOPLAY_SCREEN);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.close_self_key),
                    closeSelf);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.close_one_page_key),
                    closeOnePage);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.app_cms_closing_page_name),
                    pageName);
            currentActivity.sendBroadcast(closeOthersIntent);
            result = true;
        }
        return result;
    }

    public boolean sendCloseOthersAction(String pageName,
                                         boolean closeSelf,
                                         boolean closeOnePage) {
        boolean result = false;
        if (currentActivity != null) {
            Intent closeOthersIntent = new Intent(AppCMSPresenter.PRESENTER_CLOSE_SCREEN_ACTION);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.close_self_key),
                    closeSelf);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.close_one_page_key),
                    closeOnePage);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.app_cms_closing_page_name),
                    pageName);
            closeOthersIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(closeOthersIntent);
            result = true;
        }
        return result;
    }


    public void sendKeepScreenOnAction() {
        if (currentActivity != null) {
            Intent keepScreenOnAction = new Intent(AppCMSPresenter.PRESENTER_KEEP_SCREEN_ON_ACTION);
            keepScreenOnAction.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(keepScreenOnAction);
        }
    }

    public void sendClearKeepScreenOnAction() {
        if (currentActivity != null) {
            Intent clearKeepScreenOnAction = new Intent(AppCMSPresenter.PRESENTER_CLEAR_KEEP_SCREEN_ON_ACTION);
            clearKeepScreenOnAction.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(clearKeepScreenOnAction);
        }
    }

    public void sendChromecastDisconnectedAction() {
        if (currentActivity != null) {
            Intent chromecastDisconnected = new Intent(AppCMSPresenter.PRESENTER_CHROMECAST_DISCONNECTED_ACTION);
            chromecastDisconnected.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(chromecastDisconnected);
        }
    }

    Boolean isFromDeeplink = false;

    public boolean sendDeepLinkAction(Uri deeplinkUri) {
        boolean result = false;
        if (currentActivity != null) {
            this.isFromDeeplink = true;
            Intent deeplinkIntent = new Intent(AppCMSPresenter.PRESENTER_DEEPLINK_ACTION);
            deeplinkIntent.putExtra(currentActivity.getString(R.string.deeplink_uri_extra_key), deeplinkUri.toString());
            deeplinkIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(deeplinkIntent);
            result = true;
        }
        return result;
    }

    public boolean sendOpenBrowserLinkAction(Uri deeplinkUri) {
        boolean result = false;
        if (currentActivity != null) {
            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    Intent openBrowserIntent = new Intent(AppCMSPresenter.PRESENTER_OPEN_BROWSER_ACTION);
                    openBrowserIntent.putExtra(currentActivity.getString(R.string.openBrowser_uri_extra_key), deeplinkUri.toString());
                    openBrowserIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(openBrowserIntent);
                }
            }, 5000);

            result = true;
        }
        return result;
    }

    public void sendStopLoadingPageAction(boolean showNetworkErrorDialog,
                                          Action0 retryAction) {
        if (currentActivity != null) {
            stopLoader();
            if (!isNetworkConnected() && showNetworkErrorDialog) { // Fix of SVFA-1918
                openDownloadScreenForNetworkError(false, retryAction);
                // fix of SVFA-1435 for build #1.0.35
            }
        }
    }

    public void sendBroadcastToHandleMiniPlayer(boolean isEnableMiniPlayer) {
        if (getAppCMSMain().getFeatures() != null && getAppCMSMain().getFeatures().isEnableMiniPlayer()) {
            Intent updatePageIntent =
                    new Intent(AppCMSPresenter.PRESENTER_TRAY_UPDATE_ON_ACTION);
            updatePageIntent.putExtra(currentContext.getString(R.string.app_cms_bundle_key), isEnableMiniPlayer);
            currentContext.sendBroadcast(updatePageIntent);
        }
    }

    private void launchErrorActivity(PlatformType platformType, String message,
                                     boolean showHeader) {
        if (platformType == PlatformType.ANDROID) {
            try {
                if (!cancelLoad && !cancelAllLoads) {
                    Intent errorIntent = new Intent(currentActivity, AppCMSErrorActivity.class);
                    if (message != null && !TextUtils.isEmpty(message)) {
                        errorIntent.putExtra("error_message", message);
                    }
                    currentActivity.startActivity(errorIntent);
                }
            } catch (Exception e) {
                //Log.e(TAG, "DialogType launching Mobile DialogType Activity");
            }
        } else if (platformType == PlatformType.TV) {
            try {
                Bundle bundle = new Bundle();
                bundle.putBoolean(currentActivity.getString(R.string.retry_key), false);
                bundle.putBoolean(currentActivity.getString(R.string.show_header), showHeader);
                if (message != null && !TextUtils.isEmpty(message)) {
                    bundle.putString("error_message", message);
                }

                Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(args);
            } catch (Exception e) {
                //Log.e(TAG, "DialogType launching TV DialogType Activity");
            }
        }
    }

    public void getPagesContent(List<String> modules, Action1<AppCMSPageAPI> readyAction) {
        if (currentActivity != null && modules != null && !modules.isEmpty()) {
            int modulesLength = modules.size();
            StringBuilder modulesParamsSb = new StringBuilder();

            for (int i = 0; i < modulesLength; i++) {
                modulesParamsSb.append(modules.get(i));
                if (i < modulesLength - 1) {
                    modulesParamsSb.append(",");
                }
            }

            String url = currentActivity.getString(R.string.app_cms_pages_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    modulesParamsSb.toString());

            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(),
                        () -> {
                            try {
                                GetAppCMSAPIAsyncTask.Params params = new GetAppCMSAPIAsyncTask.Params.Builder()
                                        .urlWithContent(url)
                                        .authToken(getAuthToken())
                                        .build();
                                new GetAppCMSAPIAsyncTask(appCMSPageAPICall,
                                        readyAction)
                                        .executeWithModules(params);
                            } catch (Exception e) {
                                //Log.e(TAG, "Error retrieving page ID content: " + e.getMessage());
                                showDialog(DialogType.NETWORK, null, false, null, null, null);
                            }
                        });
            } else {
                GetAppCMSAPIAsyncTask.Params params = new GetAppCMSAPIAsyncTask.Params.Builder()
                        .urlWithContent(url)
                        .authToken(getAuthToken())
                        .build();
                new GetAppCMSAPIAsyncTask(appCMSPageAPICall, readyAction).executeWithModules(params);
            }
        }
    }

    public String getRefreshToken() {
        if (appPreference != null) {
            return appPreference.getRefreshToken();
        }
        return null;
    }

    public void getPageIdContent(String urlWithContent,
                                 String pageId,
                                 List<String> modules,
                                 boolean usedCachedAPI,
                                 boolean isCategoryPage,
                                 Action1<AppCMSPageAPI> readyAction) {
        if (appCMSPageAPICall == null ||
                appCMSStreamingInfoCall == null ||
                appCMSVideoDetailCall == null) {
            AppCMSAPIComponent appCMSAPIComponent = DaggerAppCMSAPIComponent.builder()
                    .appCMSAPIModule(new AppCMSAPIModule(currentActivity,
                            appCMSMain.getApiBaseUrl(),
                            apikey))
                    .build();
            appCMSPageAPICall = appCMSAPIComponent.appCMSPageAPICall();
            appCMSStreamingInfoCall = appCMSAPIComponent.appCMSStreamingInfoCall();
            appCMSVideoDetailCall = appCMSAPIComponent.appCMSVideoDetailCall();
            urbanAirshipEventPresenter = appCMSAPIComponent.urbanAirshipEventPresenter();
            uaNamedUserEventCall = appCMSAPIComponent.uaNamedUserEventCall();
            appCMSGetSyncCodeApiCall = appCMSAPIComponent.appCmsGetSyncCodeAPICall();
            appCmsSyncDeviceCodeAPICall = appCMSAPIComponent.appCmsSyncDeviceCodeAPICall();
            appCMSContentDetailCall = appCMSAPIComponent.appCMSContentDetailCall();
            appCMSShowDetailCall = appCMSAPIComponent.appCMSShowDetailCall();


        }

        AppCMSPageAPI appCMSPageAPI = null;
        if (platformType == PlatformType.ANDROID
                && pageIdToPageFunctionMap != null
                && pageIdToPageFunctionMap.get(pageId) != null
                && TextUtils.isEmpty(pageIdToPageFunctionMap.get(pageId))
                && !pageIdToPageFunctionMap.get(pageId).equalsIgnoreCase(getCurrentActivity().getString(R.string.app_cms_page_subscription_page_name_key))) {
            try {
                appCMSPageAPI = getPageAPILruCache().get(pageId);
            } catch (Exception e) {
                appCMSPageAPI = null;
            }
        }
        if (platformType == PlatformType.ANDROID) {
            try {
                if (!isCategoryPage)
                    appCMSPageAPI = getPageAPILruCache().get(pageId);
            } catch (Exception e) {
                appCMSPageAPI = null;
            }
        }
        if (isNetworkConnected() && appCMSPageAPI == null && pageId != null) {
            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(),
                        () -> {
                            try {
                                String authToken = getAuthToken();
                                try {
                                    if ((!isUserLoggedIn() && usedCachedAPI)) {
                                        authToken = getCachedUserToken();
                                    }
                                } catch (Exception e) {

                                }
                                GetAppCMSAPIAsyncTask.Params params = new GetAppCMSAPIAsyncTask.Params.Builder()
                                        .context(currentContext)
                                        .urlWithContent(urlWithContent)
                                        .authToken(authToken)
                                        .pageId(pageId)
                                        .loadFromFile(platformType != PlatformType.TV && !isViewPlanPage(pageId) && !isCategoryPage && appCMSMain.shouldLoadFromFile())
                                        .modules(modules)
                                        .appCMSPageAPILruCache(getPageAPILruCache())
                                        .build();
                                new GetAppCMSAPIAsyncTask(appCMSPageAPICall,
                                        readyAction)
                                        .execute(params);
                            } catch (Exception e) {
                                //Log.e(TAG, "Error retrieving page ID content: " + e.getMessage());
                                showDialog(DialogType.NETWORK, null, false, null, null, null);
                            }
                        });
            } else {
                String authToken = getAuthToken();
                try {
                    if (authToken != null && !isUserLoggedIn() && usedCachedAPI) {
                        authToken = getCachedUserToken();
                    }
                } catch (Exception e) {

                }
                GetAppCMSAPIAsyncTask.Params params = new GetAppCMSAPIAsyncTask.Params.Builder()
                        .context(currentContext)
                        .urlWithContent(urlWithContent)
                        .authToken(authToken)
                        .pageId(pageId)
                        .loadFromFile(platformType != PlatformType.TV && !isViewPlanPage(pageId) && !isCategoryPage && appCMSMain.shouldLoadFromFile())
                        .modules(modules)
                        .appCMSPageAPILruCache(getPageAPILruCache())
                        .build();
                new GetAppCMSAPIAsyncTask(appCMSPageAPICall, readyAction)
                        .execute(params);
            }
        } else {
            if (readyAction != null) {
                Observable.just(appCMSPageAPI)
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe(readyAction);
            }
        }
    }

    private boolean referralPlanPurchase;

    public boolean isReferralPlanPurchase() {
        return referralPlanPurchase;
    }

    public void setReferralPlanPurchase(boolean referralPlanPurchase) {
        this.referralPlanPurchase = referralPlanPurchase;
    }


    public boolean isViewPlanPage(String pageId) {
        if (subscriptionPage != null)
            return subscriptionPage.getPageId().equalsIgnoreCase(pageId);
        if (currentActivity != null) {
            String pageName = pageIdToPageFunctionMap.get(pageId);
            return (!TextUtils.isEmpty(pageName) &&
                    (pageName.startsWith(currentActivity.getString(R.string.app_cms_page_subscription_page_name_key)) || pageName.equalsIgnoreCase(currentActivity.getString(R.string.app_cms_page_subscription_page_name_key))));
        }
        return false;
    }

    public boolean isViewReferralPage(String pageId) {
        if (currentActivity != null) {
            String pageName = pageIdToPageFunctionMap.get(pageId);

            return (!TextUtils.isEmpty(pageName) &&
                    (pageName.equals(currentActivity.getString(R.string.app_cms_action_referralPlans_key)) || pageName.equalsIgnoreCase(currentActivity.getString(R.string.app_cms_action_referralPlans1_key))));

        }
        return false;
    }

    public MetaPage getViewPlanPage() {
        String viewPlanPageId = navigation.getSettings().getPrimaryCta().getPageId();
        return pageIdToMetaPageMap.get(viewPlanPageId);
    }

    public MetaPage getAccountSettingsPage() {
        return accountSettingsPage;
    }

    public boolean isDownloadPage(String pageId) {
        if (currentActivity != null) {
            return (downloadPage != null &&
                    !TextUtils.isEmpty(pageId) &&
                    pageId.equals(downloadPage.getPageId()));
        }
        return false;
    }

    public boolean isShowPage(String pageId) {
        if (currentActivity != null) {
            String pageName = pageIdToPageFunctionMap.get(pageId);
            return (!TextUtils.isEmpty(pageName) &&
                    pageName.equals(currentActivity.getString(R.string.app_cms_page_show_page_name_key)));
        }
        return false;
    }

    public void getPlanData() {
        if (appPreference.getPlay_Store_Country_Code() == null) {
            String apiUrl = currentContext.getString(R.string.app_cms_page_api_view_plans_url,
                    appCMSMain.getApiBaseUrl(),
                    currentContext.getString(R.string.content_pages),
                    appCMSMain.getInternalName(),
                    currentContext.getString(R.string.app_cms_subscription_platform_key),
                    getLanguageParamForAPICall());
            apiUrl = apiUrl + "&countryCode=US" + "&store_countryCode=" + "US";
            getPlanDatafromAPI(apiUrl, appCMSPageAPI -> {
                if (appCMSPageAPI != null && TextUtils.isEmpty(CommonUtils.Play_Store_Country_Code)) {
                    for (Module module : appCMSPageAPI.getModules()) {
                        if (module.getModuleType().equalsIgnoreCase("viewplanModule")) {
                            if (module.getContentData() != null && module.getContentData().size() > 0) {
                                BillingHelper.getInstance(this).getSubsSKUDetail(module.getContentData().get(0).getIdentifier(), skuDetails -> {
                                    if (skuDetails != null) {
                                        CommonUtils.getAvailableCurrencies(skuDetails.getPriceCurrencyCode());
                                        if (appPreference.getPlay_Store_Country_Code() == null) {
                                            appPreference.setPlay_Store_Country_Code(CommonUtils.Play_Store_Country_Code);
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
            });
        }
    }

    public void getPlanDatafromAPI(String urlWithContent, Action1<AppCMSPageAPI> readyAction) {
        try {
            String pageId = subscriptionPage != null ? subscriptionPage.getPageId() : "";
            GetAppCMSAPIAsyncTask.Params params = new GetAppCMSAPIAsyncTask.Params.Builder()
                    .context(currentContext)
                    .urlWithContent(urlWithContent)
                    .authToken(getAuthToken())
                    .loadFromFile(false)
                    .pageId(pageId)
                    .appCMSPageAPILruCache(getPageAPILruCache())
                    .build();
            new GetAppCMSAPIAsyncTask(appCMSPageAPICall,
                    readyAction)
                    .execute(params);
        } catch (Exception e) {
        }
    }

    public MetaPage getSearchPage() {
        return searchPage;
    }

    public boolean isCategoryPage(String pageId) {
        if (currentActivity != null) {
            String pageName = pageIdToPageFunctionMap.get(pageId);
            return (!TextUtils.isEmpty(pageName) &&
                    pageName.equals(currentActivity.getString(R.string.app_cms_see_all_category_name_key)));
        }
        return false;
    }

    public boolean isJusPayPaymentPage(String pageId) {
        if (currentActivity != null && juspayPaymentPage != null && !TextUtils.isEmpty(juspayPaymentPage.getPageAPI())) {
            return juspayPaymentPage.getPageId().equalsIgnoreCase(pageId);
        }
        return false;
    }

    public boolean isCastEnable() {
        if (getAppCMSMain() != null && getAppCMSMain().getFeatures() != null
                && getAppCMSMain().getFeatures().isCasting() && !BuildConfig.FLAVOR.equalsIgnoreCase(KINDLE_BUILD_VARIENT)) {
            return true;
        }
        return false;
    }

    public boolean isCastConnected() {
        try {
            return CastServiceProvider.getInstance(getCurrentActivity()).isCastingConnected();
        } catch (Exception e) {
            return false;
        }
    }


    public String getPageIdToPageAPIUrl(String pageId) {
        return pageIdToPageAPIUrlMap.get(pageId);
    }

    public String getPageNameToPageAPIUrl(String pageName) {
        return actionToPageAPIUrlMap.get(pageNameToActionMap.get(pageName));
    }

    public boolean isUserLoggedIn() {
        return appPreference.getLoggedInUser() != null;
    }

    public boolean isUserLoggedInByTVProvider() {
        return appPreference.getTVEUserId() != null;
    }

    public boolean isUserSubscribed() {
        return appPreference.getIsUserSubscribed() && appPreference.getActiveSubscriptionPlanName() != null;
    }

    public boolean isTVEUserSubscribed() {
        return getDifferenceDays(new Date(appPreference.getTVEUserLoggedInTime()), new Date()) <= 30;
    }

    public boolean isFloodLightSend() {
        return appPreference.getFloodLightStatus();
    }

    private String getClosedCaptionsPath(String fileName) {
        return currentActivity.getFilesDir().getAbsolutePath() + File.separator
                + "closedCaptions" + File.separator + fileName + MEDIA_SUFFIX_SRT;
    }

    private String getPngPosterPath(String fileName) {
        return currentActivity.getFilesDir().getAbsolutePath() + File.separator
                + Environment.DIRECTORY_PICTURES + File.separator + fileName + MEDIA_SURFIX_PNG;
    }

    @SuppressWarnings("unused")
    public String getJpgPosterPath(String fileName) {
        return getBaseDownloadDir() + fileName + MEDIA_SURFIX_JPG;
    }

    @SuppressWarnings("unused")
    public String getMP4VideoPath(String fileName) {
        return getBaseDownloadDir() + fileName + MEDIA_SURFIX_MP4;
    }

    private String getBaseDownloadDir() {
        return currentActivity.getFilesDir().getAbsolutePath() + File.separator
                + Environment.DIRECTORY_DOWNLOADS + File.separator;
    }

    @SuppressWarnings("unused")
    public String getBaseImageDir() {
        return currentActivity.getFilesDir().getAbsolutePath() + File.separator
                + Environment.DIRECTORY_PICTURES + File.separator;
    }

    public String getGooglePlayAppStoreVersion() {
        if (appCMSMain != null &&
                appCMSMain.getAppVersions() != null &&
                appCMSMain.getAppVersions().getAndroidAppVersion() != null &&
                !TextUtils.isEmpty(appCMSMain.getAppVersions().getAndroidAppVersion().getLatest())) {
            return appCMSMain.getAppVersions().getAndroidAppVersion().getLatest();
        }

        if (currentContext != null) {
            appPreference.getGooglePlayAppStoreVersion();
        }
        return null;
    }

    private void setGooglePlayAppStoreVersion(String googlePlayAppStoreVersion) {
        appPreference.setGooglePlayAppStoreVersion(googlePlayAppStoreVersion);
    }

    public String getLoggedInUser() {
        return appPreference.getLoggedInUser();
    }


    public String getDownloadPageId() {
        return appPreference.getDownloadPageId();
    }

    public void setDownloadOverCellularEnabled(boolean downloadOverCellularEnabled) {
        appPreference.setDownloadOverCellularEnabled(downloadOverCellularEnabled);
    }

    public boolean getDownloadOverCellularEnabled() {
        return appPreference.getDownloadOverCellularEnabled();
    }

    public int getActiveNetworkType() {
        return appPreference.getActiveNetworkType();
    }

    public boolean isWaitingFor3rdPartyLogin() {
        return isWaitingFor3rdPartyLogin();
    }

    private void setLoggedInUser(String userId) {
        //Set the user Id when user is successfully logged_in
        firebaseAnalytics.analyticsUserId(userId);
        appPreference.setLoggedInUser(userId);
    }

    private String getCachedUserToken() {
        if (getAppCMSMain() != null &&
                getAppCMSMain().getCachedAPIToken() != null && !TextUtils.isEmpty(getAppCMSMain().getCachedAPIToken())) {
            cachedAPIUserToken = getAppCMSMain().getCachedAPIToken();
        } else {
            cachedAPIUserToken = appPreference.getAnonymousUserToken();
        }
        return cachedAPIUserToken;
    }

    public boolean isPreferredStorageLocationSDCard() {
        return appPreference.isPreferredStorageLocationSDCard();
    }

    @SuppressWarnings("UnusedReturnValue")
    public boolean setPreferredStorageLocationSDCard(boolean downloadPref) {
        return appPreference.setPreferredStorageLocationSDCard(downloadPref);
    }

    public boolean getUserDownloadLocationPref() {
        return appPreference.getUserDownloadLocationPref();
    }

    @SuppressWarnings("UnusedReturnValue")
    public boolean setUserDownloadLocationPref(boolean downloadPref) {
        return appPreference.setUserDownloadLocationPref(downloadPref);
    }

    public boolean isDownloadQualityScreenShowBefore() {
        return appPreference.isDownloadQualityScreenShowBefore();
    }

    public String getUserDownloadQualityPref() {
        return appPreference.getUserDownloadQualityPref();
    }

    public boolean getClosedCaptionPreference() {
        return appPreference.getClosedCaptionPreference();
    }

    public void setClosedCaptionPreference(boolean isClosedCaptionOn) {
        appPreference.setClosedCaptionPreference(isClosedCaptionOn);
    }

    public void setLivePlayerPreference(boolean isLive) {
        appPreference.setLivePlayerPreference(isLive);
    }

    public boolean getLivePlayerPreference() {
        return appPreference.getLivePlayerPreference();
    }

    public boolean getAudioShuffledPreference() {
        return appPreference.getAudioShuffledPreference();
    }

    public String getLoggedInUserName() {
        return appPreference.getLoggedInUserName();
    }

    public String getLoggedInPhone() {
        return appPreference.getLoggedInUserPhone();
    }

    public String getUserAuthProviderName() {
        return appPreference.getUserAuthProviderName();
    }

    public String getLoggedInUserEmail() {
        return appPreference.getLoggedInUserEmail();
    }

    public String getAuthToken() {
        return getAuthToken(0);
    }

    public String getAuthToken(final int reTryCount) {
        if (isNetworkConnected()) {
            if (isUserLoggedIn()) {
                if (appPreference.getAuthToken() == null) {
                    refreshIdentity(appPreference.getRefreshToken(), new Action0() {
                        @Override
                        public void call() {
                            appPreference.clearOldAuthAndRefreshToken();
                            if (reTryCount < 6) {
                                getAuthToken(reTryCount + 1);
                            }
                        }
                    });
                } else {
                    if (shouldRefreshAuthToken()) {
                        refreshIdentity(appPreference.getRefreshToken(), new Action0() {
                            @Override
                            public void call() {
                                if (reTryCount < 6) {
                                    getAuthToken(reTryCount + 1);
                                }
                            }
                        });
                    } else {
                        return appPreference.getAuthToken();
                    }
                }
            } else {
                if (appPreference.getAnonymousUserToken() != null)
                    return appPreference.getAnonymousUserToken();
                else {
                    signinAnonymousUser();
                }
            }
        }
        return null;
    }

    public void setMiniPLayerVisibility(boolean previewStatus) {
        appPreference.setMiniPLayerVisibility(previewStatus);
    }

    public DownloadManager getDownloadManager() {
        return downloadManager;
    }

    public RealmController getRealmController() {
        return realmController;
    }

    public FirebaseAnalytics getmFireBaseAnalytics() {
        return mFireBaseAnalytics;
    }

    public void setmFireBaseAnalytics(FirebaseAnalytics mFireBaseAnalytics) {
        this.mFireBaseAnalytics = mFireBaseAnalytics;
    }

    public String getFacebookAccessToken() {
        return appPreference.getFacebookAccessToken();
    }

    public String getGoogleAccessToken() {
        return appPreference.getGoogleAccessToken();
    }

    public void sendAppsFlyerFilmViewingEvent(String primaryCategory, String filmId) {
        if (currentContext != null) {
            AppsFlyerUtils.filmViewingEvent(currentContext, primaryCategory, filmId, this);
        }
    }

    public void showNoNetworkConnectivityToast() {
        if (currentContext != null && currentActivity != null) {
//            String toastText = getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.no_network_connectivity_message));
            displayCustomToast(localisedStrings.getInternetConnectionMsg());
        }
    }

    @SuppressWarnings("UnusedReturnValue")
    public boolean setNetworkConnected(boolean networkConnected, String pageId) {
        if (currentContext != null) {
            if (networkConnected) {
                sendOfflineBeaconMessage();
                if (getAppCMSMain() != null && !getAppCMSMain().isMonetizationModelEnabled()) {
                    updateAllOfflineRentStartTime();
                    updateAllOfflineWatchTime();
                }
            }

            String downloadPageId = appPreference.getDownloadPageId();
            boolean onDownloadPage = false;
            if (!TextUtils.isEmpty(downloadPageId)) {
                onDownloadPage = downloadPageId.equals(pageId);
            }
            if (!networkConnected &&
                    (downloadInProgress || !onDownloadPage) &&
                    downloadsAvailableForApp() && isUserLoggedIn()) {
                navigateToDownloadPage(appPreference.getDownloadPageId());
            } else if (!appPreference.getNetworkConnectedState() &&
                    networkConnected &&
                    !appPreference.getPlayingVideo()) {
                closeSoftKeyboard();
                navigateToHomePage(true);
                cancelAlertDialog();
            } else if (!networkConnected && /*!downloadsAvailableForApp()*/ !onDownloadPage) {
                // Because we do not have Download functionality in App. So we navigate to Error Page Screen.
                showDialog(DialogType.NETWORK, null, true,
                        () -> {
                            launched = true;
                            launchBlankPage();
                            //sendStopLoadingPageAction(false, null);
                            showNoNetworkConnectivityToast();
                            showNetworkConnectivity = false;
                        },
                        () -> {
                            ((Activity) currentContext).finish();
                        }, null);
            }
            return appPreference.setNetworkConnected(networkConnected);
        }
        return false;
    }

    @SuppressWarnings("UnusedReturnValue")
    public boolean setFacebookAccessToken(final String facebookAccessToken,
                                          final String facebookUserId,
                                          final String username,
                                          final String email,
                                          boolean forceSubscribed,
                                          boolean refreshSubscriptionData) {
        checkForExistingSubscription(false);

        if (currentActivity != null) {
            String url = currentActivity.getString(R.string.app_cms_facebook_login_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    getDeviceId(),
                    CommonUtils.getDeviceName());
            /**
             * Adding Apps flyer conversations for tracking campaigning of install source
             */
            if (getAppsFlyerConversionData() != null) {
                url = url + createConversionDataQuery();
            }
            appCMSFacebookLoginCall.call(url,
                    facebookAccessToken,
                    facebookUserId,
                    apikey,
                    getAuthToken(),
                    facebookLoginResponse -> {
                        waithingFor3rdPartyLogin = false;
                        if (facebookLoginResponse != null) {
                            if (!TextUtils.isEmpty(facebookLoginResponse.getErrorCode()) || !TextUtils.isEmpty(facebookLoginResponse.getError())) {
                                String loginText = localisedStrings.getSignInText();
                                try {
                                    if (getModuleApi() != null && getModuleApi().getMetadataMap() != null && convertClassToMap(getModuleApi().getMetadataMap()).get(facebookLoginResponse.getErrorCode()) != null)
                                        showDialog(DialogType.SIGNIN, (String) convertClassToMap(getModuleApi().getMetadataMap()).get(facebookLoginResponse.getErrorCode()), false, null, null, loginText);
                                    else
                                        showDialog(DialogType.SIGNIN, facebookLoginResponse.getError(), false, null, null, loginText);
                                } catch (Exception e) {
                                    showDialog(DialogType.SIGNIN, facebookLoginResponse.getError(), false, null, null, loginText);
                                }
                                stopLoader();
                            } else {
                                appPreference.setAuthToken(facebookLoginResponse.getAuthorizationToken());
                                appPreference.setRefreshToken(facebookLoginResponse.getRefreshToken());
                                setLoggedInUser(facebookLoginResponse.getUserId());
                                appPreference.setLoggedInUserName(username);
                                appPreference.setLoggedInUserEmail(facebookLoginResponse.getEmail() != null ? facebookLoginResponse.getEmail() : email);
                                appPreference.setFacebookUserId(facebookUserId);
                                appPreference.setUserAuthProviderName(currentActivity.getString(R.string.facebook_auth_provider_name_key));
                                appPreference.setLoginType(currentActivity.getString(R.string.login_type_facebook));
                                //Log.d(TAG, "checkForExistingSubscription()");

                                if (launchType == LaunchType.SUBSCRIBE ||
                                        launchType == LaunchType.INIT_SIGNUP) {
                                    this.facebookAccessToken = facebookAccessToken;
                                    this.facebookUserId = facebookUserId;
                                    this.facebookUsername = username;
                                    this.facebookEmail = email;
                                }
                                appPreference.setRegistrationType("facebook");
                                if (!facebookLoginResponse.isExistingUser()
                                        && !TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                                    AppsFlyerUtils.registrationEvent(this, currentContext, facebookLoginResponse.getUserId(), appPreference.getAppsFlyerKey());
                                    AppsFlyerUtils.setEventRegistrationComplete(AppCMSPresenter.this);
                                }
                                senduserProfileEvent();

                                if (getCurrentAction() != null && getCurrentAction() == AppCMSActionType.LOGIN_FACEBOOK) {
                                    sendLoginEvent("facebook");
                                    if (isMobileUpdateRequired(this, facebookLoginResponse.getPhoneNumber()) && platformType == PlatformType.ANDROID) {
                                        phoneObjectRequest.setMetadataMap(getModuleApi().getMetadataMap());
                                        openMobileUpdationScreen();
                                    }
                                }

                                if (getCurrentAction() != null && getCurrentAction() == AppCMSActionType.SIGNUP_FACEBOOK)
                                    sendSignUpEvent("facebook");

                                GetSocialHelper.onLoginSuccess(appPreference);


                                finalizeLogin(forceSubscribed,
                                        facebookLoginResponse.isSubscribed(),
                                        launchType == LaunchType.INIT_SIGNUP ||
                                                launchType == LaunchType.SUBSCRIBE ||
                                                !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt()),
                                        refreshSubscriptionData);
                            }
                        }
                    });
        }

        if (currentContext != null) {
            appPreference.setFacebookAccessToken(facebookAccessToken);
        }
        return false;
    }

    @SuppressWarnings("UnusedReturnValue")
    public boolean setGoogleAccessToken(final String googleAccessToken,
                                        final String googleUserId,
                                        final String googleUsername,
                                        final String googleEmail,
                                        boolean forceSubscribed,
                                        boolean refreshSubscriptionData) {
        checkForExistingSubscription(false);

        if (googleAccessToken != null) {
            String url = currentActivity.getString(R.string.app_cms_google_login_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    getDeviceId(),
                    CommonUtils.getDeviceName());

            appCMSGoogleLoginCall.call(url, googleAccessToken, apikey, getAuthToken(),
                    googleLoginResponse -> {
                        try {
                            if (googleLoginResponse != null) {
                                if (!TextUtils.isEmpty(googleLoginResponse.getMessage()) || !TextUtils.isEmpty(googleLoginResponse.getError())) {
                                    String loginText = localisedStrings.getSignInText();
                                    try {
                                        if (getModuleApi() != null && getModuleApi().getMetadataMap() != null && convertClassToMap(getModuleApi().getMetadataMap()).get(googleLoginResponse.getErrorCode()) != null)
                                            showDialog(DialogType.SIGNIN, (String) convertClassToMap(getModuleApi().getMetadataMap()).get(googleLoginResponse.getErrorCode()), false, null, null, loginText);
                                        else
                                            showDialog(DialogType.SIGNIN, googleLoginResponse.getError(), false, null, null, loginText);
                                    } catch (Exception e) {
                                        showDialog(DialogType.SIGNIN, googleLoginResponse.getError(), false, null, null, loginText);
                                    }
                                    stopLoader();
                                } else {
                                    appPreference.setAuthToken(googleLoginResponse.getAuthorizationToken());
                                    appPreference.setRefreshToken(googleLoginResponse.getRefreshToken());
                                    setLoggedInUser(googleLoginResponse.getUserId());
                                    appPreference.setLoggedInUserName(googleUsername);
                                    appPreference.setLoggedInUserEmail(googleEmail);
                                    appPreference.setGoogleUserId(googleUserId);
                                    appPreference.setUserAuthProviderName(currentActivity.getString(R.string.google_auth_provider_name_key));
                                    appPreference.setLoginType(currentActivity.getString(R.string.login_type_google));

                                    if (launchType == LaunchType.SUBSCRIBE || launchType == LaunchType.V2_SUBSCRIPTION_FLOW) {
                                        this.googleAccessToken = googleAccessToken;
                                        this.googleUserId = googleUserId;
                                        this.googleUsername = googleUsername;
                                        this.googleEmail = googleEmail;
                                    }
                                    senduserProfileEvent();
                                    appPreference.setRegistrationType("google");

                                    if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                                        AppsFlyerUtils.setEventRegistrationComplete(AppCMSPresenter.this);
                                    }

                                    if (getCurrentAction() != null && getCurrentAction() == AppCMSActionType.LOGIN_GOOGLE) {
                                        sendLoginEvent("google");
                                        if (isMobileUpdateRequired(this, googleLoginResponse.getPhoneNumber()) && platformType == PlatformType.ANDROID) {
                                            phoneObjectRequest.setMetadataMap(getModuleApi().getMetadataMap());
                                            openMobileUpdationScreen();
                                        }
                                    }
                                    if (getCurrentAction() != null && getCurrentAction() == AppCMSActionType.SIGNUP_GOOGLE)
                                        sendSignUpEvent("google");
                                    waithingFor3rdPartyLogin = false;

                                    GetSocialHelper.onLoginSuccess(appPreference);

                                    finalizeLogin(forceSubscribed,
                                            googleLoginResponse.isSubscribed(),
                                            launchType == LaunchType.INIT_SIGNUP ||
                                                    launchType == LaunchType.SUBSCRIBE ||
                                                    launchType == LaunchType.V2_SUBSCRIPTION_FLOW ||
                                                    !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt()),
                                            refreshSubscriptionData);
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error getting Google Access Token login information: " + e.getMessage());
                        }
                    });
        }
        appPreference.setGoogleAccessToken(googleAccessToken);
        return true;
    }

    public boolean getAutoplayEnabledUserPref(@NonNull Context context) {
        //if (platformType.equals(PlatformType.ANDROID)) {
        if (!isAutoPlayEnable()) {
            return false;
        }
        //}
        return appPreference.getAutoplayEnabledUserPref();
    }

    public void setAutoplayEnabledUserPref(boolean isAutoplayEnabled) {
        appPreference.setAutoplayEnabledUserPref(isAutoplayEnabled);
    }

    public boolean getAutoplayDefaultValueChangedPref(@NonNull Context context) {
        return appPreference.getAutoplayDefaultValueChangedPref();
    }

    public void setAutoplayDefaultValueChangedPref(boolean isDefaultValueChanged) {
        appPreference.setAutoplayDefaultValueChangedPref(isDefaultValueChanged);
    }

    private double parseActiveSubscriptionPrice() {
        try {
            String activeSubscriptionPrice = appPreference.getActiveSubscriptionPrice();
            if (!TextUtils.isEmpty(activeSubscriptionPrice)) {
                return NumberFormat.getNumberInstance().parse(activeSubscriptionPrice).doubleValue();
            }

        } catch (NumberFormatException | ParseException | NullPointerException e) {
            //Log.e(TAG, "Error parsing price from Google Play subscription data: " + e.toString());
        }
        return 0.0;
    }

    public String[] next7Days() {
        SimpleDateFormat format = new SimpleDateFormat("EEEE");
        Calendar date = Calendar.getInstance();
        String[] calendarDays = new String[30];

        for (int i = 0; i < 30; i++) {
            calendarDays[i] = format.format(date.getTime());
            date.add(Calendar.DAY_OF_WEEK, 1);
        }
        return calendarDays;
    }

    public String[] next7DaysMonth() {
        SimpleDateFormat format = new SimpleDateFormat("MMMM");
        Calendar date = Calendar.getInstance();
        String[] calendarDays = new String[30];

        for (int i = 0; i < 30; i++) {
            calendarDays[i] = format.format(date.getTime());
            date.add(Calendar.DAY_OF_WEEK, 1);
        }
        return calendarDays;
    }

    public String millisToDate(long millis) {
        if (millis <= 0) {
            return "0";
        } else {
            Calendar calendar = Calendar.getInstance();
            calendar.setTimeInMillis(millis);
            int mYear = calendar.get(Calendar.YEAR);
            int mMonth = calendar.get(Calendar.MONTH);
            int mDay = calendar.get(Calendar.DAY_OF_MONTH);
            return mMonth + "/" + mDay + "/" + (mYear % 100);
        }
    }


    public long getTimeLeftToStartEvent(long scheduleStartTimestamp) {

        return (scheduleStartTimestamp - System.currentTimeMillis());
    }

    public long getTimeLeftToEndEvent(long scheduleEndTimestamp) {

        return (scheduleEndTimestamp - System.currentTimeMillis());
    }

    public String secondsToMin(int sec) {
        if (sec < 60) {
            return sec + " SEC";
        }
        return sec / 60 + " MIN";
    }

    public String millisToMinutesLeft(long millis) {
        double millisD = millis;
        int sec = (int) (Math.round((millisD - System.currentTimeMillis()) / 1000));
        if (sec > 0) {
            if (sec < 60) {
                return sec + " Secs";
            }

            int mins = (int) (Math.round((millisD - System.currentTimeMillis()) / 1000 / 60));
            if (mins < 60) {
                if (mins > 1) {
                    return mins + " Mins";
                }
                return mins + " Min";
            }

            int hour = (int) (Math.round((millisD - System.currentTimeMillis()) / 1000 / 60 / 60));
            if (hour < 24) {
                if (hour > 1) {
                    return hour + " Hours";
                }
                return hour + " Hour";
            }

            int days = (int) (Math.round(((millisD - System.currentTimeMillis()) / 1000 / 60 / 60 / 24)));
            if (days > 1) {
                return days + " Days";
            }
            return days + " Day";
        }

        return "";
    }

    public String millisToSecMinHour(long millis) {
        double millisD = millis;
        int sec = (int) (Math.round(((millisD - System.currentTimeMillis()) / 1000)));
        if (sec > 0) {
            if (sec < 60) {
                return ":" + sec;
            }

            int mins = (int) (Math.round(((millisD - System.currentTimeMillis()) / 1000) / 60));
            if (mins < 60) {
                return ":" + mins;
            }

            int hour = (int) (Math.round((millisD - System.currentTimeMillis()) / 1000 / 60 / 60));
            if (hour < 24) {
                if (hour > 1) {
                    return hour + "h";
                }
                return hour + "h";
            }

            int days = (int) (Math.round(((millisD - System.currentTimeMillis()) / 1000 / 60 / 60 / 24)));
            if (days > 1) {
                return days + "d";
            }
            return days + "d";
        }

        return "";
    }


    public Gist gist(Module moduleAPI) {
        if (moduleAPI != null && moduleAPI.getContentData() != null &&
                !moduleAPI.getContentData().isEmpty() &&
                moduleAPI.getContentData().get(0) != null &&
                moduleAPI.getContentData().get(0).getGist() != null) {
            return moduleAPI.getContentData().get(0).getGist();
        } else {
            return null;
        }
    }

    public String getDescription(Gist gistDe) {
        String description = "";
        if (gistDe != null &&
                gistDe.getBody() != null) {
            description = gistDe.getBody();

            int start = 0;
            int end = description.length();

            boolean openBracket = false;
            for (int i = 0; i < description.length(); i++) {
                if (!openBracket && description.charAt(i) == '>') {
                    openBracket = true;
                    start = i + 1;
                }
                if (openBracket && description.charAt(i) == '<') {
                    end = i;
                    break;
                }
            }
            description = description.substring(start, end);
        }
        return description;
    }

    public List<Tag> getTags(Module moduleAPI) {
        if (moduleAPI != null &&
                moduleAPI.getContentData() != null &&
                moduleAPI.getContentData().get(0) != null &&
                moduleAPI.getContentData().get(0).getTags() != null) {
            return moduleAPI.getContentData().get(0).getTags();
        } else {
            return null;
        }
    }

    private double parseExistingGooglePlaySubscriptionPrice() {
        try {
            String existingGooglePlaySubscriptionPrice = appPreference.getExistingGooglePlaySubscriptionPrice();
            if (!TextUtils.isEmpty(existingGooglePlaySubscriptionPrice)) {
                return NumberFormat.getCurrencyInstance().parse(existingGooglePlaySubscriptionPrice).doubleValue();
            }

        } catch (NumberFormatException | ParseException | NullPointerException e) {
            //Log.e(TAG, "Error parsing price from Google Play subscription data: " + e.toString());
        }
        return 0.0;
    }

    public boolean isExistingGooglePlaySubscriptionSuspended() {
        return appPreference.isExistingGooglePlaySubscriptionSuspended();
    }

    public String getActiveSubscriptionId() {
        return appPreference.getActiveSubscriptionId();
    }

    public String getActiveSubscriptionPlanName() {
        return appPreference.getActiveSubscriptionPlanName();
    }

    public String getUserSubscriptionPlanTitle() {
        return appPreference.getUserSubscriptionPlanTitle();
    }

    public String getActiveSubscriptionPlanTitle() {
        return appPreference.getActiveSubscriptionPlanTitle();
    }

    public boolean isSubscriptionCompleted() {
        String activeSubscriptionStatus = appPreference.getActiveSubscriptionStatus();
        return !TextUtils.isEmpty(activeSubscriptionStatus) && (activeSubscriptionStatus.equalsIgnoreCase(currentContext.getString(R.string.subscription_status_completed))
                || activeSubscriptionStatus.equalsIgnoreCase(currentContext.getString(R.string.subscription_status_deferred_cancellation))
                || activeSubscriptionStatus.equalsIgnoreCase(currentContext.getString(R.string.subscription_status_suspended)));

    }

    public String getSubscriptionStatus() {
        String status = (getUserSubscriptionInfo() != null
                && getUserSubscriptionInfo().getSubscriptionStatus() != null
                && !TextUtils.isEmpty(getUserSubscriptionInfo().getSubscriptionStatus())) ?
                getUserSubscriptionInfo().getSubscriptionStatus() : "";
        return status;
        //return "DEFERRED_CANCELLATION";

    }

    public boolean isReSubscriptionVisible() {

        return (getActiveSubscriptionStatus() != null &&
                (getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_cancelled))
                        || getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_suspended))
                        || getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_deferred_cancellation))));

    }

    public boolean isSubscribedFromAndroid() {

        return (getActiveSubscriptionPlatform().toLowerCase().contains("android"));

    }

    public String getActiveSubscriptionProcessor() {
        return appPreference.getActiveSubscriptionProcessor();
    }

    public void logout() {
        if (currentActivity != null) {
            if (!TextUtils.isEmpty(appPreference.getLoggedInUser())) {
                if (platformType.equals(PlatformType.ANDROID)) {
                    //  setbrowserLocalStorageSave(true);
                    if (appPreference != null)
                        appPreference.setIsbrowserDataAlreadyOpen(true);
                    appPreference.setWhatsappChecked(false);
                    sendUALoggedOutEvent(appPreference.getLoggedInUser());
                }
            }

            //removeAllOfflineDownloads();
            showLoadingDialog(true);
            GraphRequest revokePermissions = new GraphRequest(AccessToken.getCurrentAccessToken(),
                    appPreference.getLoggedInUser() + "/permissions/", null,
                    HttpMethod.DELETE, response -> {
                try {
                    if (response != null) {
                        FacebookRequestError error = response.getError();
                        if (error != null) {
                            //Log.e(TAG, error.toString());
                        }
                    }
                } catch (Exception e) {
                    //Log.e(TAG, "Error logging out from Facebook: " + e.getMessage());
                }
            });
            if (appPreference.getTVEUserId() != null)
                updateTVEAsyncTask(false);
            CommonUtils.clearUserPurchaseBundle();
            revokePermissions.executeAsync();
            LoginManager.getInstance().logOut();
            if (googleApiClient != null && googleApiClient.isConnected()) {
                Auth.GoogleSignInApi.signOut(googleApiClient);
            }
            if (videoPlayerView != null && !isAppAVOD()) {
                dismissPopupWindowPlayer(true);
                videoPlayerView = null;
            }
            callSignOutAPI();
            subscriptionUserEmail = null;
            subscriptionUserPassword = null;
            setLoggedInUser(null);
            clearVideoPlayerViewCache();
            appPreference.clear();
            setUserSubscriptionInfo(null);
            setUserSubscriptionPlanResult(null);
            sendAnalyticsLogoutEvent();
            setEntitlementPendingVideoData(null);
            if (googleApiClient != null && googleApiClient.isConnected()) {
                Auth.GoogleSignInApi.signOut(googleApiClient);
            }

            userHistoryData.clear();
            filmsInUserWatchList = null;
            signinAnonymousUser();
            getPageViewLruCache().evictAll();
            setSelectedPlan(null, null);
            CastHelper.getInstance(currentActivity.getApplicationContext()).disconnectChromecastOnLogout();

            AudioPlaylistHelper.getInstance().stopPlayback();
            stopAudioServices();
            AudioPlaylistHelper.getInstance().saveLastPlayPositionDetails(AudioPlaylistHelper.getInstance().getCurrentMediaId(), 0);
            GetSocialHelper.onLogoutSuccess();
            setPinVerified(false);

            new Handler(Looper.getMainLooper()).postDelayed(() -> {
                clearPageAPIData(() -> navigateToHomePage(true), false);
            }, 2000);

        }
    }

    private void sendFireBaseLogOutEvent() {
        firebaseAnalytics.logoutEvent();
        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
        firebaseAnalytics.userPropertyPlanId(null);
        firebaseAnalytics.userPropertyPlanName(null);
        firebaseAnalytics.analyticsUserId(null);
        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
    }

    @SuppressWarnings("unused")
    public void logoutTV() {
        if (!isNetworkConnected()) {
            RetryCallBinder retryCallBinder = getRetryCallBinder(null, null,
                    null, null,
                    null, false, null, LOGOUT_ACTION);
            Bundle bundle = new Bundle();
            bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
            bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
            bundle.putBoolean(currentActivity.getString(R.string.is_tos_dialog_page_key), false);
            bundle.putBoolean(currentActivity.getString(R.string.is_login_dialog_page_key), false);
            bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
            Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
            args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(args);
            return;
        }

        if (currentActivity != null) {
            if (appPreference.isLoginWithLinkYourAccount()) {
                deSyncDevice();
            }
            if (isUserLoggedInByTVProvider()) deSyncVerimatrixDevice();
            callSignOutAPI();
            setLoggedInUser(null);
            setPinVerified(false);
            appPreference.clear();
            //setFacebookAccessToken(null, null, null, null, false, false);
            //setGoogleAccessToken(null, null, null, null, false, false);

            if (userHistoryData != null) {
                userHistoryData.clear();
            }

            if (pageMap != null) {
                pageMap.clear();
                pageMap = null;
            }
            setNavigationModuleFirstTime(false);
            signinAnonymousUser();

            if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                AppsFlyerUtils.logoutEvent(currentActivity, appPreference.getLoggedInUser());
            }

            if (isCleverTapAvailable) {
                cleverTapSDK.sendEventLogout();
            }

            if (currentActivity.getClass().getName().equalsIgnoreCase("com.viewlift.tv.views.activity.AppCMSTVPlayVideoActivity")) {
                currentActivity.finish();
            }
            new Handler(Looper.getMainLooper()).postDelayed(() -> {
                NavigationPrimary homePageNavItem = findHomePageNavItem();
                if (homePage != null) {
                    cancelInternalEvents();

                    Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                    currentActivity.sendBroadcast(updateSubscription);
                    getPlayerLruCache().evictAll();
                    navigateToTVPage(
                            homePage.getPageId(),
                            homePage.getPageFunction(),
                            createPageUiUrl(homePage),
                            false,
                            deeplinkSearchQuery,
                            true,
                            false,
                            false,
                            false, false, false);
                }
            }, 3000);
        }
    }

    public void addInternalEvent(OnInternalEvent onInternalEvent) {
        if (!currentActions.isEmpty() &&
                !TextUtils.isEmpty(currentActions.peek()) &&
                onActionInternalEvents.get(currentActions.peek()) != null) {
            onActionInternalEvents.get(currentActions.peek()).add(onInternalEvent);
        }
    }

    public void clearOnInternalEvents() {
        if (!currentActions.isEmpty() &&
                !TextUtils.isEmpty(currentActions.peek()) &&
                onActionInternalEvents.get(currentActions.peek()) != null) {
            onActionInternalEvents.get(currentActions.peek()).clear();
        }
    }

    public @Nullable
    List<OnInternalEvent> getOnInternalEvents() {
        if (!currentActions.isEmpty() &&
                !TextUtils.isEmpty(currentActions.peek()) &&
                onActionInternalEvents.get(currentActions.peek()) != null) {
            return onActionInternalEvents.get(currentActions.peek());
        }
        return null;
    }

    public void restartInternalEvents() {
        if (!currentActions.isEmpty()) {
            //Log.d(TAG, "Restarting internal events");
            List<OnInternalEvent> onInternalEvents = onActionInternalEvents.get(currentActions.peek());
            if (onInternalEvents != null) {
                for (OnInternalEvent onInternalEvent : onInternalEvents) {
                    onInternalEvent.cancel(false);
                    //Log.d(TAG, "Restarted internal event");
                }
            }
        }
    }

    public void cancelInternalEvents() {
        if (!currentActions.isEmpty()) {
            List<OnInternalEvent> onInternalEvents = onActionInternalEvents.get(currentActions.peek());
            if (onInternalEvents != null) {
                for (OnInternalEvent onInternalEvent : onInternalEvents) {
                    onInternalEvent.cancel(true);
                }
            }
        }
    }

    public void popActionInternalEvents() {
        if (!currentActions.isEmpty()) {
            //Log.d(TAG, "Stack size - Popping action internal events: " + currentActions.size());
            currentActions.pop();
            //Log.d(TAG, "Stack size - Popped action internal events: " + currentActions.size());
        }
    }

    public NavigationPrimary findHomePageNavItem() {
        if (navigation != null && navigation.getNavigationPrimary() != null && !navigation.getNavigationPrimary().isEmpty()
                && navigation.getNavigationPrimary().get(0) != null && !TextUtils.isEmpty(navigation.getNavigationPrimary().get(0).getTitle())
                && navigation.getNavigationPrimary().get(0).getTitle().equalsIgnoreCase(currentActivity.getString(R.string.app_cms_action_homepage_nav))) {
            return navigation.getNavigationPrimary().get(0);
        } else if (getPlatformType() == PlatformType.ANDROID && navigation != null
                && navigation.getTabBar() != null && !navigation.getTabBar().isEmpty()) {
            return navigation.getTabBar().get(0);
        } else if (getPlatformType() == PlatformType.TV && navigation != null
                && navigation.getNavigationPrimary() != null && !navigation.getNavigationPrimary().isEmpty()) {
            return navigation.getNavigationPrimary().get(0);
        }
        return null;
    }

    public NavigationPrimary findMoviesPageNavItem() {
        if (navigation != null && navigation.getNavigationPrimary() != null
                && navigation.getNavigationPrimary().size() >= 2) {
            return navigation.getNavigationPrimary().get(1);
        }
        return null;
    }

    public NavigationPrimary findLivePageNavItem() {
        if (navigation != null && navigation.getNavigationPrimary().size() >= 3) {
            return navigation.getNavigationPrimary().get(2);
        }
        return null;
    }

    public void resetDeeplinkQuery() {
        deeplinkSearchQuery = null;
    }

    /**
     * This is the initial launch point of the app and is used to retrieve the main.json file
     * for this app.
     *
     * @param activity     The current Activity used for launching the app (unused)
     * @param siteId       The AppCMS site ID of the app
     * @param searchQuery  A deeplink URL used launch a Detail page via search
     * @param platformType An enumeration value to distinguish between mobile or TV variants
     * @param bustCache    A flag to indicate whether to use a parameter to bust the CDN cache via a
     *                     query parameter using a random value.
     */
    public void getAppCMSMain(final Activity activity,
                              final String siteId,
                              final Uri searchQuery,
                              final PlatformType platformType,
                              boolean bustCache, Action1<Boolean> launchSuccessfull) {
        Log.w(TAG, "LoadPage Attempting to retrieve main.json");
        defaultLanguage = getLanguage();
        getAppCmsGeoData();
        this.deeplinkSearchQuery = searchQuery;
        this.platformType = platformType;
        this.launched = false;
        this.cancelLoad = false;
        this.cancelAllLoads = false;
        this.processedUIModules = false;
        this.processedUIPages = false;
        // apikey =  Utils.getProperty("XAPI", currentActivity);
        GetAppCMSMainUIAsyncTask.Params params = new GetAppCMSMainUIAsyncTask.Params.Builder()
                .context(currentActivity)
                .siteId(siteId)
                .bustCache(bustCache)
                .networkDisconnected(!isNetworkConnected())
                .build();

        try {
            new GetAppCMSMainUIAsyncTask(appCMSMainUICall, main -> {
                try {
                    if (main == null && appCMSMain == null) {
                        if (!isNetworkConnected()) {
                            openDownloadScreenForNetworkError(true,
                                    () -> getAppCMSMain(activity,
                                            siteId,
                                            searchQuery,
                                            platformType,
                                            bustCache, launchSuccessfull));
                        } else {
                            launchBlankPage();
                        }
                    } else if (main != null
                            && getPlatformType() == PlatformType.ANDROID
                            && TextUtils.isEmpty(main
                            .getAndroid())) {
                        launchBlankPage();
                    } else if (main != null
                            && getPlatformType() == PlatformType.TV
                            && TextUtils.isEmpty(main
                            .getFireTv())) {
                        launchBlankPage();
                    } else if (main != null && TextUtils.isEmpty(main
                            .getApiBaseUrl())) {
                        launchBlankPage();
                    } else {
                        if (main != null) {
                            appCMSMain = main;
                            appCMSMain.setFireTV(getPlatformType() == PlatformType.TV);
                        }
                        //check default language
                        if (null != defaultLanguage && null != appCMSMain.getLanguages()) {
                            appCMSMain.getLanguages().swapPositionOfDefaultLanguageToFirst();
                            ArrayList<Language> languageList = (ArrayList) appCMSMain.getLanguages().getLanguageList();
                            boolean isLanguageExistinMain = languageList != null && languageList.contains(defaultLanguage);
                            if (!isLanguageExistinMain) {
                                defaultLanguage = appCMSMain.getLanguages().getDefaultlanguage();
                            }
                        }
                        if (appCMSMain.getCustomerService() != null
                                && appCMSMain.getCustomerService().getZendesk() != null
                                && appCMSMain.getCustomerService().getZendesk().getUrl() != null) {
                            CommonUtils.setZendeskApplicationId(appCMSMain.getCustomerService().getZendesk().getAppID());
                            CommonUtils.setZendeskOauthClientId(appCMSMain.getCustomerService().getZendesk().getClientID());
                            CommonUtils.setZendeskSubdomainUrl(appCMSMain.getCustomerService().getZendesk().getUrl());
                        }

                        new SoftReference<Object>(appCMSMain, referenceQueue);
                        loadFromFile = appCMSMain.shouldLoadFromFile();

                        //apikey = currentActivity.getString(R.string.x_api_key);
                        if (appCMSMain.getX_ApiKeys() != null &&
                                appCMSMain.getX_ApiKeys().get(0).getX_ApiKey() != null &&
                                !TextUtils.isEmpty(appCMSMain.getX_ApiKeys().get(0).getX_ApiKey())) {
                            apikey = appCMSMain.getX_ApiKeys().get(0).getX_ApiKey();
                        } else {
                            apikey = Utils.getProperty("XAPI", currentActivity);
                        }

                        //LanguageHelper.setLocale(getCurrentContext(),defaultLanguage.getLanguageCode());
                        if (isLocalizationSupported()) {
                            LocaleUtils.setLocale(currentContext, defaultLanguage.getLanguageCode());
                            PRE_LANGUAGE = defaultLanguage.getLanguageCode();
                            setLanguage(defaultLanguage);
                        }
                        if (appCMSMain != null
                                && appCMSMain.getGenericMessages() != null
                                && appCMSMain.getGenericMessages().getLocalizationMap() != null
                                && appCMSMain.getGenericMessages().getLocalizationMap().size() > 0
                                && appCMSMain.getGenericMessages().getLocalizationMap().get(getLanguage().getLanguageCode()) != null)
                            localizationResult = appCMSMain.getGenericMessages().getLocalizationMap().get(getLanguage().getLanguageCode());
                        else
                            localizationResult = null;
                        if (appCMSMain != null && appCMSMain.getGenericMessages() != null)
                            genericMessages = appCMSMain.getGenericMessages();

                        localisedStrings.setObjects(localizationResult, genericMessages);
                        appCMSSearchUrlComponent = DaggerAppCMSSearchUrlComponent.builder()
                                .appCMSSearchUrlModule(new AppCMSSearchUrlModule(appCMSMain.getApiBaseUrlCached(),
                                        appCMSMain.getInternalName(),
                                        apikey, /*getAuthToken(),*/
                                        appCMSSearchCall))
                                .build();

                        Utils.setHls(appCMSMain.getFeatures().isHls());
                        downloadParentalRatingMap();
                        initializeCleverTap();
                        /*if (appPreference.getRefreshTokenOldPreference() != null) {
                            callRefreshIdentity(() -> {
                                appPreference.clearOldAuthAndRefreshToken();
                                clearPageApiData();
                                // getAppCMSSite(platformType, launchSuccessfull);
                                switch (platformType) {
                                    case ANDROID:
                                        getAppCMSAndroid(0, launchSuccessfull);
                                        break;

                                    case TV:
                                        getAppCMSTV(0);
                                        break;

                                    default:
                                        break;
                                }
                            });
                        } else {*/
                        // getAppCMSSite(platformType, launchSuccessfull);
                        switch (platformType) {
                            case ANDROID:
                                getAppCMSAndroid(0, launchSuccessfull);
                                break;

                            case TV:
                                getAppCMSTV(0);
                                break;

                            default:
                                break;
                        }
//                        }
                    }
                } catch (Exception e) {
                    launchBlankPage();
                }
            }).execute(params);
        } catch (Exception e) {
        }
    }

    public void getAppCMSFloodLight(Context context) {
        AppCMSAPIModule appCMSAPIModule = new AppCMSAPIModule(context, currentActivity.getString(R.string.app_cms_floodlight_url_base), "");
        AppCMSFloodLightRest appCMSFloodLightRest = appCMSAPIModule.appCMSFloodLightRest(appCMSAPIModule.providesRetrofit(appCMSAPIModule.providesGson()));
        new GetAppCMSFloodLightAsyncTask(appCMSFloodLightRest, apikey, context, new Action1() {
            @Override
            public void call(Object o) {
                String res = (String) o;
                Toast.makeText(context, res, Toast.LENGTH_LONG).show();

                if (res != null) {
                    appPreference.saveFloodLightStatus(true);
                }
            }
        }).execute();
    }

    public boolean isDownloadable() {
        return getAppCMSMain() != null &&
                getAppCMSMain().getFeatures() != null &&
//                getAppCMSMain().isDownloadable() &&
                getAppCMSMain().getFeatures().isMobileAppDownloads();
    }

    public int getBrandPrimaryCtaColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getCta() != null &&
                    getAppCMSMain().getBrand().getCta().getPrimary() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getCta().getPrimary().getBackgroundColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getCta().getPrimary().getBackgroundColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getBrandPrimaryCtaBorderColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getCta() != null &&
                    getAppCMSMain().getBrand().getCta().getPrimary() != null &&
                    getAppCMSMain().getBrand().getCta().getPrimary().getBorder() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getCta().getPrimary().getBorder().getColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getCta().getPrimary().getBorder().getColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getBrandSecondaryCtaTextColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getCta() != null &&
                    getAppCMSMain().getBrand().getCta().getSecondary() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getCta().getSecondary().getTextColor())
            ) {
                return Color.parseColor(getAppCMSMain().getBrand().getCta().getSecondary().getTextColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getBrandPrimaryCtaTextColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getCta() != null &&
                    getAppCMSMain().getBrand().getCta().getPrimary() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getCta().getPrimary().getTextColor())
            ) {
                return Color.parseColor(getAppCMSMain().getBrand().getCta().getPrimary().getTextColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }


    public int getButtonBorderColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getGeneral() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getGeneral().getPageTitleColor())
            ) {
                return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getPageTitleColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.color_white);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.color_white);
        }
        return 0;
    }

    public int getGeneralBackgroundColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getGeneral() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getGeneral().getBackgroundColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getBackgroundColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.backgroundColor);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.backgroundColor);
        }
        return 0;
    }

    public int getBlockTitleColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getGeneral() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getGeneral().getBlockTitleColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getBlockTitleColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getGeneralTextColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getGeneral() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getGeneral().getTextColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getTextColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception e) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getBlockTitleTextColor() {
        try {
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getBrand() != null &&
                    getAppCMSMain().getBrand().getGeneral() != null &&
                    !CommonUtils.isEmpty(getAppCMSMain().getBrand().getGeneral().getBlockTitleColor())) {
                return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getBlockTitleColor());
            } else if (currentActivity != null) {
                return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
            }
        } catch (Exception ex) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public int getPageTitleTextColor() {
        if (getAppCMSMain() != null &&
                getAppCMSMain().getBrand() != null &&
                getAppCMSMain().getBrand().getGeneral() != null &&
                getAppCMSMain().getBrand().getGeneral().getPageTitleColor() != null) {
            return Color.parseColor(getAppCMSMain().getBrand().getGeneral().getPageTitleColor());
        } else if (currentActivity != null) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public SpannableStringBuilder getEpisodeTitlewithNumber(String title, String episodeNumber) {
        final SpannableStringBuilder sb = new SpannableStringBuilder(episodeNumber.trim() + " " + title);

        // Span to set text color to some RGB value
        final ForegroundColorSpan fcsNumber = new ForegroundColorSpan(0x92000000 + getGeneralTextColor());
        final ForegroundColorSpan fcsText = new ForegroundColorSpan(getGeneralTextColor());
        //final ForegroundColorSpan fcs = new ForegroundColorSpan(Color.parseColor("#9b9b9b"));

        // Span to make text bold
        final StyleSpan bss = new StyleSpan(android.graphics.Typeface.BOLD);

        // Set the text color for first 4 characters
        sb.setSpan(fcsNumber, 0, episodeNumber.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        sb.setSpan(fcsText, episodeNumber.length(), sb.toString().length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);

        // make them also bold
        sb.setSpan(bss, 0, episodeNumber.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        return sb;
    }

    public int getNavBarItemDefaultColor() {
        if (currentActivity != null) {
            return ContextCompat.getColor(currentActivity, R.color.colorNavBarText);
        }
        return 0;
    }

    public AppCMSMain getAppCMSMain() {
        return appCMSMain;
    }

    public AppCMSSite getAppCMSSite() {
        return appCMSSite;
    }

    /**
     * Checks if the device on which the app is running is a Fire TV and
     * is true.
     *
     * @return true if the device is fire tv and web only subscription is false.
     */

    public boolean isFireTVSubscriptionEnabled() {
        return com.viewlift.Utils.isFireTVDevice(getCurrentContext())
                && getAppCMSAndroid().isPaymentEnabled();
    }

    public boolean isFreshChatEnable() {
        return appCMSMain != null &&
                appCMSMain.getCustomerService() != null
                && appCMSMain.getCustomerService().getFreshChat() != null
                && appCMSMain.getCustomerService().getFreshChat().isEnableFreshChat();
    }

    public boolean isPageAVideoPage(String pageName) {
        if (currentActivity != null && pageName != null) {
            try {
                return pageName.contains(currentActivity.getString(R.string.app_cms_video_page_page_name));
            } catch (Exception e) {
                e.printStackTrace();
                //Log.e(TAG, "Failed to verify if input page is a video page: " + e.toString());
            }
        }
        return false;
    }

    public boolean isPageAPlayListPage(String pageName) {
        if (currentActivity != null && pageName != null) {
            try {
                return pageName.contains(currentActivity.getString(R.string.app_cms_playlist_page_name));
            } catch (Exception e) {
                e.printStackTrace();
                //Log.e(TAG, "Failed to verify if input page is a video page: " + e.toString());
            }
        }
        return false;
    }

    public boolean isPageAtPersonDetailPage(String pageName) {
        if (currentActivity != null && pageName != null) {
            try {
                return pageName.contains(personPage.getPageFunction());
            } catch (Exception e) {
                //Log.e(TAG, "Failed to verify if input page is a video page: " + e.toString());
            }
        }
        return false;
    }

    public boolean isPageAShowPage(String pageId, String pageName) {
        if (currentActivity != null && pageName != null) {
            try {
                return getPageFunctionValue(pageId, pageName).contains(currentActivity.getString(R.string.app_cms_pagename_showscreen_key));
            } catch (Exception e) {

            }
        }
        return false;
    }

    public boolean isPageABundlePage(String pageId, String pageName) {
        if (currentActivity != null && pageId != null) {
            try {
                return getPageFunctionValue(pageId, pageName).contains(currentActivity.getString(R.string.app_cms_pagename_bundle_page_key));
            } catch (Exception e) {

            }
        }
        return false;
    }

    private void initAppsFlyer(AppCMSAndroidUI appCMSAndroidUI) {
        if (currentContext != null &&
                currentContext instanceof AppCMSApplication) {
            /*if (appCMSAndroidUI != null &&
                    appCMSAndroidUI.getAnalytics() != null &&
                    !TextUtils.isEmpty(appCMSAndroidUI.getAnalytics().getAppflyerDevKey())) {
                setAppsFlyerKey(appCMSAndroidUI.getAnalytics().getAppflyerDevKey());
                ((AppCMSApplication) currentContext).initAppsFlyer(appCMSAndroidUI.getAnalytics().getAppflyerDevKey());
            }*/

            if (isAppsFlyerExist()) {
                appPreference.setAppsFlyerKey(getCurrentActivity().getString(R.string.app_cms_apps_flyer_key));
                ((AppCMSApplication) currentContext).initAppsFlyer(appPreference.getAppsFlyerKey());
                AppsFlyerUtils.appOpenEvent(currentContext, this);
                sendAppsFlyerEvents();
            }
        }
    }

    public boolean isPagePrimary(String pageId) {
        List<NavigationPrimary> navigationPrimaryList = null;
        if (navigation != null && navigation.getTabBar() != null) {
            navigationPrimaryList = navigation.getTabBar();
        }
        if (getPlatformType() == PlatformType.TV && null != navigation && null != navigation.getNavigationPrimary()) {
            navigationPrimaryList = navigation.getNavigationPrimary();
        }
        if (navigationPrimaryList != null) {
            for (NavigationPrimary navigationPrimary : navigationPrimaryList) {
                if (pageId != null &&
                        navigationPrimary != null &&
                        !TextUtils.isEmpty(navigationPrimary.getPageId()) &&
                        !TextUtils.isEmpty(pageId) &&
                        !isViewPlanPage(pageId)) {
                    if (pageId.contains(navigationPrimary.getPageId())) {
                        return true;
                    }
                } else if (navigationPrimary.getItems() != null && getPlatformType() == PlatformType.ANDROID) {
                    for (NavigationPrimary item : navigationPrimary.getItems()) {
                        if (pageId != null &&
                                item != null &&
                                navigationPrimary.getPageId() != null &&
                                !TextUtils.isEmpty(item.getPageId()) &&
                                !TextUtils.isEmpty(pageId) &&
                                !isViewPlanPage(pageId)) {
                            if (pageId.contains(navigationPrimary.getPageId())) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public boolean isPageNavigationPage(String pageId) {
        return currentActivity != null &&
                !TextUtils.isEmpty(pageId) &&
                pageId.equals(currentActivity.getString(R.string.app_cms_navigation_page_tag));
    }

    public boolean isPageTeamNavigationPage(List<NavigationPrimary> navigationTabBarList) {
        for (NavigationPrimary navigationTabBarItem : navigationTabBarList) {
            if (!TextUtils.isEmpty(navigationTabBarItem.getTitle()) && (
                    getPageFunctionValue(navigationTabBarItem.getPageId(), navigationTabBarItem.getTitle()).equalsIgnoreCase(currentActivity.getString(R.string.app_cms_team_page_tag)) ||
                            getPageFunctionValue(navigationTabBarItem.getPageId(), navigationTabBarItem.getTitle()).equalsIgnoreCase("TEAM"))) {
                return true;
            }
        }
        return false;
    }

    public boolean isPageSearch(String pageId) {
        return pageId != null &&
                !TextUtils.isEmpty(pageId) &&
                pageId.toLowerCase().contains(currentActivity.getString(R.string.app_cms_search_page_tag).toLowerCase());
    }

    public boolean isArticlePage(String pageId) {
        return pageId != null && articlePage != null && articlePage.getPageId() != null &&
                pageId.equalsIgnoreCase(articlePage.getPageId());
    }

    public boolean isHomePage(String pageId) {
        return pageId != null && homePage != null && homePage.getPageId() != null &&
                pageId.equalsIgnoreCase(homePage.getPageId());
    }

    public boolean isPhotoGalleryPage(String pageId) {
        return pageId != null && photoGalleryPage != null && photoGalleryPage.getPageId() != null &&
                pageId.equalsIgnoreCase(photoGalleryPage.getPageId());
    }

    public NavigationPrimary getPageTeamNavigationPage
            (List<NavigationPrimary> navigationTabBarList) {
        for (NavigationPrimary navigationTabBarItem : navigationTabBarList) {
            if (!TextUtils.isEmpty(navigationTabBarItem.getTitle()) && (
                    getPageFunctionValue(navigationTabBarItem.getPageId(), navigationTabBarItem.getTitle()).equalsIgnoreCase(currentActivity.getString(R.string.app_cms_team_page_tag)) ||
                            getPageFunctionValue(navigationTabBarItem.getPageId(), navigationTabBarItem.getTitle()).equalsIgnoreCase("TEAM"))) {
                return navigationTabBarItem;
            }
        }
        return null;
    }

    public boolean isPageUser(String pageId) {
        if (navigation != null && navigation.getNavigationUser() != null) {
            for (NavigationUser navigationUser : navigation.getNavigationUser()) {
                if (pageId != null &&
                        !TextUtils.isEmpty(pageId) &&
                        navigationUser != null &&
                        !TextUtils.isEmpty(navigationUser.getPageId()) &&
                        pageId.contains(navigationUser.getPageId())) {
                    return true;
                }
            }
        }
        return false;
    }

    @SuppressWarnings("unused")
    public boolean isPageFooter(String pageId) {
        if (navigation != null && navigation.getNavigationFooter() != null) {
            for (NavigationFooter navigationFooter : navigation.getNavigationFooter()) {
                if (pageId != null &&
                        !TextUtils.isEmpty(pageId) &&
                        navigationFooter != null &&
                        !TextUtils.isEmpty(navigationFooter.getPageId())
                        && pageId.contains(navigationFooter.getPageId())) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isPageSplashPage(String pageId) {
        return splashPage != null && !TextUtils.isEmpty(pageId) && !TextUtils.isEmpty(splashPage.getPageId()) && splashPage.getPageId().equals(pageId);
    }

    public boolean isPageLoginPage(String pageId) {
        return loginPage != null && !TextUtils.isEmpty(pageId) && !TextUtils.isEmpty(loginPage.getPageId()) && loginPage.getPageId().equals(pageId);
    }

    public boolean isAncillaryPage(String pageId) {
        MetaPage page = getMetaPage(pageId);
        return page != null && !TextUtils.isEmpty(page.getPageType()) && page.getPageType().equalsIgnoreCase(currentActivity.getString(R.string.app_cms_ancillary_page));
    }

    public AppCMSSearchUrlComponent getAppCMSSearchUrlComponent() {
        return appCMSSearchUrlComponent;
    }

    public void showMoreDialog(String title, String fullText) {
        if (platformType == PlatformType.ANDROID && !isAdditionalFragmentVisibile()) {
            if (currentActivity != null &&
                    currentActivity instanceof AppCompatActivity &&
                    isAdditionalFragmentViewAvailable()) {
                pushActionInternalEvents(currentActivity.getString(R.string.more_page_action));
                firebaseAnalytics.screenViewEvent(currentContext.getString(R.string.value_video_detail_screen) + "-" + title);
                clearAdditionalFragment();
                FragmentTransaction transaction =
                        currentActivity.getSupportFragmentManager().beginTransaction();
                AppCMSMoreFragment appCMSMoreFragment =
                        AppCMSMoreFragment.newInstance(currentActivity,
                                title,
                                fullText);
                transaction.add(R.id.app_cms_addon_fragment,
                        appCMSMoreFragment,
                        currentActivity.getString(R.string.app_cms_more_page_tag)).commitAllowingStateLoss();
                showAddOnFragment(true, 0.2f);
                setNavItemToCurrentAction(currentActivity);
            }
        } else if (platformType == PlatformType.TV) {
            Intent args = new Intent(AppCMSPresenter.PRESENTER_DIALOG_ACTION);
            Bundle bundle = new Bundle();
            bundle.putString(currentActivity.getString(R.string.dialog_item_title_key), title);
            bundle.putString(currentActivity.getString(R.string.dialog_item_description_key), fullText);

            args.putExtra(currentActivity.getString(R.string.dialog_item_key), bundle);
            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(args);
        }
    }

    public void showNoPurchaseDialog(String title, String fullText) {
        if (platformType == PlatformType.ANDROID && !isAdditionalFragmentVisibile()) {
            if (currentActivity != null &&
                    currentActivity instanceof AppCompatActivity &&
                    isAdditionalFragmentViewAvailable()) {
                pushActionInternalEvents(currentActivity.getString(R.string.purchase_page_action));
                clearAdditionalFragment();
                FragmentTransaction transaction =
                        currentActivity.getSupportFragmentManager().beginTransaction();
                AppCMSNoPurchaseFragment appCMSNoPurchaseFragment =
                        AppCMSNoPurchaseFragment.newInstance(currentActivity,
                                title,
                                fullText);
                transaction.add(R.id.app_cms_addon_fragment,
                        appCMSNoPurchaseFragment,
                        currentActivity.getString(R.string.app_cms_purchase_dialog_page_tag)).commitAllowingStateLoss();
                showAddOnFragment(true, 0.09f);
                setNavItemToCurrentAction(currentActivity);
            }
        }
    }

    public void showRedemptionDialog(String title, String fullText) {
        if (platformType == PlatformType.ANDROID && !isAdditionalFragmentVisibile()) {
            if (currentActivity != null &&
                    currentActivity instanceof AppCompatActivity &&
                    isAdditionalFragmentViewAvailable()) {
                pushActionInternalEvents(currentActivity.getString(R.string.more_page_action));
                clearAdditionalFragment();
                FragmentTransaction transaction =
                        currentActivity.getSupportFragmentManager().beginTransaction();
                AppCMSRedemptionSuccessDialog appCMSRedemptionSuccessDialog =
                        AppCMSRedemptionSuccessDialog.newInstance(currentActivity,
                                title,
                                fullText);
                transaction.add(R.id.app_cms_addon_fragment,
                        appCMSRedemptionSuccessDialog,
                        currentActivity.getString(R.string.app_cms_more_page_tag)).commitAllowingStateLoss();
                showAddOnFragment(true, 1.0f);
                setNavItemToCurrentAction(currentActivity);
            }
        }
    }


    @SuppressWarnings("unused")
    public void showClearHistoryDialog(String title, String
            fullText, Action1<Integer> action1) {
        Intent args = new Intent(AppCMSPresenter.PRESENTER_CLEAR_DIALOG_ACTION);
        Bundle bundle = new Bundle();
        bundle.putString(currentActivity.getString(R.string.dialog_item_title_key), title);
        bundle.putString(currentActivity.getString(R.string.dialog_item_description_key), fullText);
        args.putExtra(currentActivity.getString(R.string.dialog_item_key), bundle);
        args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(args);
    }

    private boolean shouldRefreshAuthToken() {
        if (isUserLoggedIn()) {
            return CommonUtils.isTokenExpired(appPreference.getAuthToken());
        } else {
            return CommonUtils.isTokenExpired(appPreference.getAnonymousUserToken());
        }
    }

    public void showToast(final String message, int messageDuration) {
        if (currentActivity != null) {
            currentActivity.runOnUiThread(new Runnable() {
                public void run() {
                    Toast.makeText(currentActivity, getLanguageResourcesFile().getUIresource(message), messageDuration).show();
                }
            });
        }
    }

    public boolean isDialogShown = false;

    /**
     * This displays a dialog message based upon entitlement options and the current user subscription status
     *
     * @param dialogType    An enumerated value to select the message from a set of preexisting messages
     * @param onCloseAction The action to take when the user closes the dialog
     */
    public AlertDialog dialog = null;

    public void showEntitlementDialog(DialogType dialogType, Action0 onCloseAction, MetadataMap
            metadataMap) {
        stopDownloadProgressDialog();
        removeWaysToWatch();
        /*if (videoPlayerView != null && videoPlayerView.getVisibility() == View.VISIBLE
                && !isUserSubscribed()
                && isUserLoggedIn()) {
            return;
        }*/
        if (currentActivity != null) {
            if (!isDialogShown)

                try {
                    String positiveButtonText = localisedStrings.getSubscribeNowText().toUpperCase();
                    String negativeButtonText = localisedStrings.getSignInText().toUpperCase();

                    int textColor = Color.parseColor(appCMSMain.getBrand().getGeneral().getTextColor());
                    String title = localisedStrings.getSubscriptionRequiredText();

                    String message = localisedStrings.getPremiumLoggedInUserMsg();

                    if ((dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER || dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW || dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED || dialogType == DialogType.SUBSCRIPTION_REQUIRED || dialogType == DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED) && isShowDialogForWebPurchase()) {
                        dialogType = DialogType.SUBSCRIPTION_REQUIRED_ON_WEB;
                        title = localisedStrings.getPremiumContentText();
//                        message = getPremiumGuestUserMsg();

                        if (!isUserLoggedIn()) {
                            message = localisedStrings.getPremiumContentGuestUserDialogMessageText();
                            positiveButtonText = localisedStrings.getSignInText();
                            negativeButtonText = localisedStrings.getCancelText();
                        } else {
                            positiveButtonText = localisedStrings.getOkText().toUpperCase();
                        }
                    }
                    if (dialogType == DialogType.ENTITLEMENT_LOGIN_REQUIRED) {
                        title = localisedStrings.getLoginRequiredText();
                        message = localisedStrings.getEntitlementLoginErrorMessageText();
                        positiveButtonText = localisedStrings.getSignUpText();
                        negativeButtonText = localisedStrings.getSignInText();

                    }
                    if (dialogType == DialogType.SUBSCRIPTION_PREMIUM_DOWNLOAD || dialogType == DialogType.SUBSCRIPTION_PREMIUM_CASTING) {
                        if (!isUserLoggedIn())
                            title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getUnsubscribedDownloadMsgText();
                    }

                    if (dialogType == DialogType.SUBSCRIPTION_EMAIL_INVALID) {
                        title = localisedStrings.getInvalidEmailText();

                        /*message = currentActivity.getString(R.string.quote_separator) +
                                subscribeEmail +
                                currentActivity.getString(R.string.quote_separator) +
                                getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.not_valid_email));*/
                        message = localisedStrings.getEmailFormatValidationMsg();
                    }

                    if (dialogType == DialogType.SUBSCRIPTION_EMAIL_SUCCESS) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.thank_you_for_subscribing));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.watercoolerready));
                    }

                    if (dialogType == DialogType.SUBSCRIPTION_EMAIL_EXIST) {
                        title = responsePojo.getUserExist().getTitle();
                        message = currentActivity.getString(R.string.quote_separator) +
                                subscribeEmail +
                                currentActivity.getString(R.string.quote_separator) +
                                getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.is_already_subscribed));
                    }

                    if (dialogType == DialogType.SUBSCRIPTION_EMAIL_FAIL) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.failed_to_subscribe));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.try_again_later));
                    }

                    if (dialogType == DialogType.LOGOUT_WITH_RUNNING_DOWNLOAD) {
                        title = localisedStrings.getDownloadVideoLogoutTitle();
                        message = localisedStrings.getDownloadVideoLogoutMsg();
                    }
                    if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER) {
                        title = localisedStrings.getPremiumContentText();

                        if (getTemplateType() == TemplateType.SPORTS
                                || getTemplateType() == TemplateType.FITNESS) {
                            message = localisedStrings.getLivePreviewSportsFitnessMsg();
                        } else {
                            message = localisedStrings.getEncourageUserLoginText();
                        }

                        if (subscriptionFlowContent != null &&
                                subscriptionFlowContent.getOverlayMessage() != null &&
                                !TextUtils.isEmpty(subscriptionFlowContent.getOverlayMessage())) {
                            message = subscriptionFlowContent.getOverlayMessage();
                        }
                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER || dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW || dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW) {
                        title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getLivePreviewOtherMsg();
                        /**
                         * if showing preview ended dialog for audio then show messaege from server
                         */
                        if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW ||
                                dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW) {
                            /*if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionFlowContent().getOverlayMessage() != null) {
                                message = getAppCMSAndroid().getSubscriptionFlowContent().getOverlayMessage();
                            }*/
                            title = localisedStrings.getLivePreviewEndedText();
                            message = localisedStrings.getEncourageUserLoginText();
                            if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText() != null) {
                                positiveButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText();
                            }
                            if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText() != null) {
                                negativeButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText();
                            }
                        }
                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO ||
                            dialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW ||
                            dialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW) {
                        title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getLivePreviewOtherMsg();
                        /**
                         * if showing preview ended dialog for audio then show messaege from server
                         */
                        if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW ||
                                dialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW) {
                            if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionAudioFlowContent().getOverlayMessage() != null) {
                                message = getAppCMSAndroid().getSubscriptionAudioFlowContent().getOverlayMessage();
                            } else {
                                message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_audio_preview_end_message));
                            }
                            title = localisedStrings.getLivePreviewEndedText();

                            if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText() != null) {
                                positiveButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText();
                            }
                            if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                    && getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText() != null) {
                                negativeButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText();
                            }
                        }
                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED) {
                        title = localisedStrings.getLoginSubscriptionRequiredText();
                        message = localisedStrings.getLoginSubscriptionRequiredMsgText();
                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.SUBSCRIPTION_REQUIRED) {
                        title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getPremiumLoggedInUserMsg();
                        if (subscriptionFlowContent != null &&
                                subscriptionFlowContent.getOverlayMessage() != null &&
                                !TextUtils.isEmpty(subscriptionFlowContent.getOverlayMessage())) {
                            message = subscriptionFlowContent.getOverlayMessage();
                        }

                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.SUBSCRIPTION_PLAN_UPGRADE) {
                        title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getPlanUpgradeText();
                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED) {
                        title = localisedStrings.getPremiumContentText();
                        message = localisedStrings.getEncourageUserLoginText();
                        if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                && getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText() != null) {
                            positiveButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getSubscriptionButtonText();
                        }
                        if (getAppCMSAndroid() != null && getAppCMSAndroid().getSubscriptionAudioFlowContent() != null
                                && getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText() != null) {
                            negativeButtonText = getAppCMSAndroid().getSubscriptionAudioFlowContent().getLoginButtonText();
                        }

                        if (subscriptionFlowContent != null &&
                                subscriptionFlowContent.getOverlayMessage() != null &&
                                !TextUtils.isEmpty(subscriptionFlowContent.getOverlayMessage())) {
                            message = subscriptionFlowContent.getOverlayMessage();
                        }

                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }
                    if (dialogType == DialogType.CANNOT_RE_SUBSCRIPTION) {
                        title = localisedStrings.getRe_subscribe();
                        if (getActiveSubscriptionPlatform() != null) {

                            if (isSubscribedFromAndroid()
                                    && getSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_deferred_cancellation))) {
                                message = localisedStrings.getReSubscribeMessage_fromAndroidWithOtherProcess();
                            } else if (getActiveSubscriptionPlatform().contains("android")) {
                                message = localisedStrings.getReSubscribeMessage_android();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("ios")) {
                                message = localisedStrings.getReSubscribeMessage_iTune();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("web")) {
                                message = localisedStrings.getReSubscribeMessage_web();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("amazon")) {
                                message = localisedStrings.getReSubscribeMessage_amazon();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("roku")) {
                                message = localisedStrings.getReSubscribeMessage_roku();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("smarttv")) {
                                message = localisedStrings.getReSubscribeMessage_smartTV();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("windows")) {
                                message = localisedStrings.getReSubscribeMessage_windows();
                            } else if (getActiveSubscriptionPlatform().toLowerCase().contains("ps4")) {
                                message = localisedStrings.getReSubscribeMessage_ps4();
                            } else {
                                message = localisedStrings.getReSubscribeMessage_other();
                            }
                        } else {
                            message = localisedStrings.getSubscriptionWebsiteMsg();
                        }
                    }
                    if (dialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION || dialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION_CONTENT) {
                        String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                        if ((!TextUtils.isEmpty(paymentProcessor) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_roku_payment_processor)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor_friendly)))) {
                            title = localisedStrings.getEditAccount();
                            message = localisedStrings.getSubscriptionWebsiteMsg();
                           /* if (isKrononApp())
                                message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_upgrade_for_web_user_dialog_1, getAppCMSMain().getDomainName()));*/
                        } else if (!TextUtils.isEmpty(paymentProcessor) &&
                                ((paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor))
                                        || paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor_friendly))))) {
                            title = localisedStrings.getEditAccount();
                            message = localisedStrings.getSubscriptionAppleMsg();
                        } else if (!TextUtils.isEmpty(paymentProcessor) &&
                                ((paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_roku_payment_processor))
                                        || paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_roku_payment_processor))))) {
                            title = localisedStrings.getEditAccount();
                            message = localisedStrings.getSubscriptionRokuMsg();
                        } else {
                            title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_google_play_cancel_title));
                            message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_cancel_for_google_play_user_dialog));
                        }
                        if (dialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION_CONTENT)
                            title = localisedStrings.getPremiumContentText();
                    }

                    if (dialogType == DialogType.CANNOT_CANCEL_SUBSCRIPTION) {
                        String paymentProcessor = appPreference.getActiveSubscriptionProcessor();
                        if ((!TextUtils.isEmpty(paymentProcessor) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_android_payment_processor_friendly)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor)) &&
                                !paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor_friendly)))) {
                            title = localisedStrings.getSubscriptionMsgHeaderText();
                            message = localisedStrings.getSubscriptionWebsiteMsg();
                        } else if (!TextUtils.isEmpty(paymentProcessor) &&
                                ((paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor))
                                        || paymentProcessor.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ios_payment_processor_friendly))))) {
                            title = localisedStrings.getSubscriptionMsgHeaderText();
                            message = localisedStrings.getSubscriptionAppleMsg();
                        } else {
                            if (!TextUtils.isEmpty(paymentProcessor) &&
                                    TextUtils.isEmpty(appPreference.getExistingGooglePlaySubscriptionId())) {
                                title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_google_play_cancel_title));
                                message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_cancel_for_google_play_user_dialog));
                            }
                        }
                    }

                    if (dialogType == DialogType.UPGRADE_UNAVAILABLE) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_upgrade_unavailable_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_subscription_upgrade_unavailable_user_dialog));
                    }

                    if (dialogType == DialogType.UNKNOWN_SUBSCRIPTION_FOR_UPGRADE) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_unknown_subscription_for_upgrade_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_unknown_subscription_for_upgrade_text));
                    }

                    if (dialogType == DialogType.UNKNOWN_SUBSCRIPTION_FOR_CANCEL) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_unknown_subscription_for_cancellation_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_unknown_subscription_for_cancellation_text));
                    }

                    if (dialogType == DialogType.LOGIN_REQUIRED) {
                        title = localisedStrings.getLoginRequiredText();
                        message = localisedStrings.getLoginRequiredMsgText();
                        positiveButtonText = localisedStrings.getSignInText().toUpperCase();

                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }

                    if (dialogType == DialogType.ADD_TO_WATCHLIST) {
                        if (metadataMap != null && metadataMap.getAddToWatchlistDialogHeader() != null)
                            title = metadataMap.getAddToWatchlistDialogHeader();
                        else
                            title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.add_to_watchlist_dialog_title));
                        if (metadataMap != null && metadataMap.getAddToWatchlistDialogMessage() != null)
                            message = metadataMap.getAddToWatchlistDialogMessage();
                        else
                            message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.add_to_watchlist_dialog_text));
                        positiveButtonText = localisedStrings.getSignInText().toUpperCase();

                        //Set Firebase User Property when user is not logged in and unsubscribed
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_out));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }

                    if (dialogType == DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED || dialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER || dialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO || dialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW) {
                        firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_in));
                        firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_unsubscribed));
                    }

                    if (dialogType == DialogType.EXISTING_SUBSCRIPTION) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_existing_subscription_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_existing_subscription_error_message));
//                        positiveButtonText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_login_button_text));
                        positiveButtonText = localisedStrings.getSignInText().toUpperCase();
                    }

                    if (dialogType == DialogType.EXISTING_SUBSCRIPTION_LOGOUT) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_existing_subscription_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_existing_subscription_logout_error_message));
//                        positiveButtonText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_signout_button_text));
                        positiveButtonText = getLocalizedLogoutText();
                    }
                    if (dialogType == DialogType.ARTICLE_API_RESPONSE_ERROR) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.no_data_received));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.there_is_a_problem_loading_data));
                        positiveButtonText = localisedStrings.getOkText().toUpperCase();

                    }
                    if (dialogType == DialogType.OPEN_URL_IN_BROWSER) {
                        title = "";
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.open_url_in_browser_message));
                        positiveButtonText = localisedStrings.getYesText().toUpperCase();
                    }
                    if (dialogType == DialogType.SUBSCRIPTION_REQUIRED_ON_WEB) {
                        //if (isUserLoggedIn())
                        //message = localisedStrings.getWebSubscriptionMessagePrefixText() + " " + getAppCMSMain().getDomainName() + " " + localisedStrings.getWebSubscriptionMessageSuffixText();
                        /**
                         * As per discussion with Kapil we are not showing website this will be added in the WebSubscriptionMessagePrefix message at tools.
                         */
                        message = localisedStrings.getWebSubscriptionMessagePrefixText();

                    }
                    AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
                    builder.setTitle(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                            Integer.toHexString(textColor).substring(2),
                            title)))
                            .setMessage(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                                    Integer.toHexString(textColor).substring(2),
                                    message)));


                    if (dialogType == DialogType.SUBSCRIPTION_PLAN_UPGRADE) {
                        builder.setPositiveButton(positiveButtonText.toUpperCase(),
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                        isDialogShown = false;
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        String[] extraData = new String[1];
                                        extraData[0] = currentActivity.getString(R.string.app_cms_page_upgrade_subscription_key);
                                        launchButtonSelectedAction(
                                                null,
                                                currentActivity.getString(R.string.app_cms_action_managesubscription_key),
                                                null,
                                                extraData,
                                                null,
                                                false,
                                                0,
                                                null);

                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error displaying dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.SUBSCRIPTION_PREMIUM_DOWNLOAD ||
                            dialogType == DialogType.SUBSCRIPTION_PREMIUM_CASTING) {
                        builder.setPositiveButton(positiveButtonText.toUpperCase(),
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                        isDialogShown = false;
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToSubscriptionPlansPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error displaying dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                        if (!isUserLoggedIn()) {
                            builder.setNegativeButton(localisedStrings.getSignInText().toUpperCase(),
                                    (dialog, which) -> {
                                        try {
                                            isDialogShown = false;
                                            launchType = LaunchType.LOGIN_AND_SIGNUP;
                                            dialog.dismiss();
                                            if (onCloseAction != null) {
                                                onCloseAction.call();
                                            }
                                            navigateToLoginPage(false);
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error cancelling dialog while logging out with running download: " + e.getMessage());
                                        }
                                    });
                        }
                    } else if (dialogType == DialogType.ENTITLEMENT_LOGIN_REQUIRED) {
                        builder.setPositiveButton(positiveButtonText.toUpperCase(),
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        launchType = LaunchType.SIGNUP;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToLoginPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error displaying dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                        if (!isUserLoggedIn()) {
                            builder.setNegativeButton(negativeButtonText,
                                    (dialog, which) -> {
                                        try {
                                            isDialogShown = false;
                                            launchType = LaunchType.LOGIN_AND_SIGNUP;
                                            dialog.dismiss();
                                            if (onCloseAction != null) {
                                                onCloseAction.call();
                                            }
                                            navigateToLoginPage(false);
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error cancelling dialog while logging out with running download: " + e.getMessage());
                                        }
                                    });
                        }
                    } else if (dialogType == DialogType.LOGOUT_WITH_RUNNING_DOWNLOAD) {
                        builder.setPositiveButton(localisedStrings.getYesText().toUpperCase(),
                                (dialog, which) -> {
                                    try {
                                        removeDownloadAndLogout();
                                        dialog.dismiss();
                                        isDialogShown = false;
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error displaying dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                        builder.setNegativeButton(localisedStrings.getCancelText().toUpperCase(),
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                        isDialogShown = false;
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error cancelling dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER ||
                            dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW || dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED) {
                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                        isDialogShown = false;
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToSubscriptionPlansPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing login & subscription required dialog: " + e.getMessage());
                                    }
                                });
                        builder.setNegativeButton(negativeButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        launchType = LaunchType.LOGIN_AND_SIGNUP;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToLoginPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing subscribe dialog: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO || dialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW) {


                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToSubscriptionPlansPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing login & subscription required dialog: " + e.getMessage());
                                    }
                                });
                        builder.setNegativeButton(negativeButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                        launchType = LaunchType.LOGIN_AND_SIGNUP;
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToLoginPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing subscribe dialog: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION ||
                            dialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION_CONTENT ||
                            dialogType == DialogType.UPGRADE_UNAVAILABLE ||
                            dialogType == DialogType.CANNOT_CANCEL_SUBSCRIPTION) {
                        builder.setPositiveButton(localisedStrings.getOkText(), new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                if (onCloseAction != null) {
                                    onCloseAction.call();
                                }
                            }
                        });
                    } else if (dialogType == DialogType.LOGIN_REQUIRED) {
                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        setLaunchType(LaunchType.LOGIN_AND_SIGNUP);
                                        navigateToLoginPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing login required dialog: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.ADD_TO_WATCHLIST) {
                        builder.setNegativeButton(positiveButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        setLaunchType(LaunchType.LOGIN_AND_SIGNUP);
                                        navigateToLoginPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing login required dialog: " + e.getMessage());
                                    }
                                });
                        builder.setNeutralButton(localisedStrings.getCancelText(),
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                        isDialogShown = false;
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error cancelling dialog while logging out with running download: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.CANNOT_RE_SUBSCRIPTION) {
                        builder.setPositiveButton(localisedStrings.getOkText(),
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing subscription required dialog: " + e.getMessage());
                                    }
                                });
                        if ((isSubscribedFromAndroid()
                                && getActiveSubscriptionStatus().equalsIgnoreCase(getCurrentContext().getString(R.string.subscription_status_deferred_cancellation)))
                                || getActiveSubscriptionPlatform().toLowerCase().contains("web")) {

                            builder.setPositiveButton(localisedStrings.getOpenBrawser(),
                                    (dialog, which) -> {
                                        try {
                                            String webLinkPlan = getCurrentContext().getString(R.string.web_view_plans_path, getAppCMSMain().getDomainName());
                                            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(webLinkPlan));
                                            getCurrentActivity().startActivity(browserIntent);
                                            dialog.dismiss();
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error closing subscription required dialog: " + e.getMessage());
                                        }
                                    });
                            builder.setNegativeButton(localisedStrings.getCancelText(),
                                    (dialog, which) -> {
                                        try {
                                            dialog.dismiss();
                                            isDialogShown = false;
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error cancelling dialog while logging out with running download: " + e.getMessage());
                                        }
                                    });
                        }

                    } else if (dialogType == DialogType.UNKNOWN_SUBSCRIPTION_FOR_UPGRADE ||
                            dialogType == DialogType.UNKNOWN_SUBSCRIPTION_FOR_CANCEL) {
                        builder.setPositiveButton(localisedStrings.getOkText(),
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing subscription required dialog: " + e.getMessage());
                                    }
                                });
                    } else if (dialogType == DialogType.EXISTING_SUBSCRIPTION) {
                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    if (onCloseAction != null) {
                                        onCloseAction.call();
                                    }
                                    isDialogShown = false;
                                    dialog.dismiss();
                                });
                    } else if (dialogType == DialogType.EXISTING_SUBSCRIPTION_LOGOUT) {
                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    if (onCloseAction != null) {
                                        onCloseAction.call();
                                    }
                                    isDialogShown = false;
                                    dialog.dismiss();
                                });
                    } else if ((dialogType == DialogType.SUBSCRIPTION_EMAIL_SUCCESS) ||
                            (dialogType == DialogType.SUBSCRIPTION_EMAIL_EXIST) ||
                            (dialogType == DialogType.SUBSCRIPTION_EMAIL_FAIL) ||
                            (dialogType == DialogType.SUBSCRIPTION_EMAIL_INVALID)) {
                        builder.setPositiveButton(localisedStrings.getOkText(),
                                (dialog, which) -> {
                                    try {
                                        dialog.dismiss();
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing subscription required dialog: " + e.getMessage());
                                    }
                                });
                    } else if ((dialogType == DialogType.SUBSCRIPTION_REQUIRED_ON_WEB)) {
                        if (!isUserLoggedIn()) {
                            builder.setPositiveButton(positiveButtonText,
                                    (dialog, which) -> {
                                        try {
                                            isDialogShown = false;
                                            dialog.dismiss();
                                            if (onCloseAction != null) {
                                                onCloseAction.call();
                                            }
                                            setLaunchType(LaunchType.LOGIN_AND_SIGNUP);
                                            navigateToLoginPage(false);
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error closing login required dialog: " + e.getMessage());
                                        }
                                    });
                            builder.setNegativeButton(negativeButtonText,
                                    (dialog, which) -> {
                                        try {
                                            isDialogShown = false;
                                            dialog.dismiss();
                                            if (onCloseAction != null) {
                                                onCloseAction.call();
                                            }
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error closing subscribe dialog: " + e.getMessage());
                                        }
                                    });
                        } else {
                            builder.setPositiveButton(positiveButtonText,
                                    (dialog, which) -> {
                                        try {
                                            isDialogShown = false;
                                            dialog.dismiss();
                                            if (onCloseAction != null) {
                                                onCloseAction.call();
                                            }
                                        } catch (Exception e) {
                                            //Log.e(TAG, "Error closing navigate to subscription dialog: " + e.getMessage());
                                        }
                                    });
                        }
                    } else {
                        builder.setPositiveButton(positiveButtonText,
                                (dialog, which) -> {
                                    try {
                                        isDialogShown = false;
                                        dialog.dismiss();
                                        if (onCloseAction != null) {
                                            onCloseAction.call();
                                        }
                                        navigateToSubscriptionPlansPage(false);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error closing navigate to subscription dialog: " + e.getMessage());
                                    }
                                });
                    }


                    DialogType finalDialogType = dialogType;
                    currentActivity.runOnUiThread(() -> {
                        dialog = builder.create();

                        if (onCloseAction != null) {
                            dialog.setCanceledOnTouchOutside(false);

                            dialog.setOnCancelListener(dialogInterface -> {
                                if (finalDialogType == DialogType.EXISTING_SUBSCRIPTION ||
                                        finalDialogType == DialogType.EXISTING_SUBSCRIPTION_LOGOUT || finalDialogType == DialogType.ENTITLEMENT_LOGIN_REQUIRED) {
                                    sendCloseOthersAction(null, true, false);
                                }
                            });
                        }

                        dialog.setOnShowListener(arg0 -> {
                            loginDialogPopupOpen = true;
                            dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getBrandPrimaryCtaColor());
                            if (dialog.getButton(AlertDialog.BUTTON_POSITIVE) != null) {
                                dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getBrandPrimaryCtaColor());
                            }
                            if (dialog.getButton(AlertDialog.BUTTON_NEUTRAL) != null) {
                                dialog.getButton(AlertDialog.BUTTON_NEUTRAL).setTextColor(getBrandPrimaryCtaColor());
                            }
                        });

                        dialog.setOnDismissListener(arg0 -> {
                            loginDialogPopupOpen = false;
                            isDialogShown = false;
                        });

                        dialog.setOnCancelListener(arg0 -> {
                            loginDialogPopupOpen = false;
                            isDialogShown = false;
                        });

                        dialog.setOnKeyListener((arg0, keyCode, event) -> {
                            if (keyCode == KeyEvent.KEYCODE_BACK) {
                                loginDialogPopupOpen = false;
                                isDialogShown = false;
                                if (finalDialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO ||
                                        finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO || finalDialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW ||
                                        finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW || finalDialogType == DialogType.ENTITLEMENT_LOGIN_REQUIRED
                                        || finalDialogType == DialogType.CANNOT_UPGRADE_SUBSCRIPTION) {
                                    if (onCloseAction != null) {
                                        //if user press back key without doing login subscription ,clear saved data
                                        onCloseAction.call();
                                    }
                                    setAudioPlayerOpen(false);
                                } else if (finalDialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER ||
                                        finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER ||
                                        finalDialogType == DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED ||
                                        finalDialogType == DialogType.LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW ||
                                        finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW ||
                                        finalDialogType == DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED ||
                                        finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_ON_WEB) {
                                    if (onCloseAction != null) {
                                        //if user press back key without doing login subscription ,clear saved data
                                        setEntitlementPendingVideoData(null);
                                        onCloseAction.call();
                                    }
                                }
                                dialog.dismiss();
                            }
                            return true;
                        });
                        if (dialog.getWindow() != null) {
                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                            if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                                try {
                                    dialog.show();
                                    Component component = new Component();
                                    ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.message)));
                                    ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.title)));
                                    ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_NEGATIVE));
                                    ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_POSITIVE));
                                    if (finalDialogType == DialogType.SUBSCRIPTION_REQUIRED_ON_WEB) {
                                        if (isUserLoggedIn() && !isUserSubscribed()) {
                                            dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setEnabled(false);
                                        } else {
                                            dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setEnabled(true);
                                        }
                                    }
                                    isDialogShown = true;
                                } catch (Exception e) {
                                    //Log.e(TAG, "An exception has occurred when attempting to show the dialogType dialog: "
//                                + e.toString());
                                }
                            }
                        }
                    });

                } catch (Exception e) {
                }
        }
    }

    public void showRentTimeDialog(Action1<Boolean> oncConfirmationAction, String
            mssgBody, String titleValue,
                                   String PositiveBtnTxt, String negativeBtnTxt, boolean isShowNegativeBtn,
                                   boolean isShowPositiveBtn) {
        if (currentActivity != null) {

            int textColor = Color.parseColor(appCMSMain.getBrand().getGeneral().getTextColor());
            AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
            String title = "";
            String positiveBtn = "";
            String negativeBtn = "";

            if (TextUtils.isEmpty(titleValue)) {
                title = localisedStrings.getAlertTitle();
            } else {
                title = titleValue;
            }
            if (TextUtils.isEmpty(PositiveBtnTxt)) {
                positiveBtn = localisedStrings.getOkText().toUpperCase();

            } else {
                positiveBtn = PositiveBtnTxt;
            }
            if (TextUtils.isEmpty(negativeBtnTxt)) {
                negativeBtn = localisedStrings.getOkText().toUpperCase();
            } else {
                negativeBtn = negativeBtnTxt;
            }
            String message = mssgBody;

            builder.setTitle(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                    Integer.toHexString(textColor).substring(2),
                    title)))
                    .setMessage(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                            Integer.toHexString(textColor).substring(2),
                            message)));
            builder.setPositiveButton(positiveBtn,
                    (dialog, which) -> {
                        dialog.dismiss();
                        if (oncConfirmationAction != null) {
                            Observable.just(true)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(oncConfirmationAction);
                        }
                    });
            builder.setNegativeButton(negativeBtn,
                    (dialog, which) -> {
                        try {
                            dialog.dismiss();
                            if (oncConfirmationAction != null) {
                                Observable.just(false)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(oncConfirmationAction);
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error closing confirm cancellation dialog: " + e.getMessage());
                        }
                    });
            builder.setCancelable(false);
            AlertDialog dialog = builder.create();
            if (dialog.getWindow() != null) {
                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                    try {
                        dialog.show();
                        int tintTextColor = getBrandPrimaryCtaColor();
                        Component component = new Component();
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.message)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.title)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_NEGATIVE));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_POSITIVE));
                        dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(tintTextColor);
                        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(tintTextColor);

                        if (!isShowNegativeBtn) {
                            dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setVisibility(View.GONE);
                        }
                        if (!isShowPositiveBtn) {
                            dialog.getButton(AlertDialog.BUTTON_POSITIVE).setVisibility(View.GONE);
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "An exception has occurred when attempting to show the dialogType dialog: "
//                                + e.toString());
                    }
                }
            }
        }
    }

    public void showJusPayInitilizationErrorDialog() {
        if (currentActivity != null) {
            int textColor = getGeneralTextColor();
            AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
            String title = localisedStrings.getFailedPaymentErrorTitle();
            String message = localisedStrings.getJusPayInitErrorMessage();
            try {
                builder.setTitle(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                        Integer.toHexString(textColor).substring(2),
                        title)))
                        .setMessage(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                                Integer.toHexString(textColor).substring(2),
                                message)));
            } catch (Exception e) {
                builder.setTitle(title)
                        .setMessage(message);
            }

            builder.setPositiveButton(localisedStrings.getCloseText(),
                    (dialog, which) -> {
                        dialog.dismiss();
                    });

            builder.setCancelable(false);
            AlertDialog dialog = builder.create();
            if (dialog.getWindow() != null) {
                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                    try {
                        dialog.show();
                        Component component = new Component();
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.message)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.title)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_POSITIVE));
                        int tintTextColor = getBrandPrimaryCtaColor();
                        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(tintTextColor);
                    } catch (Exception e) {
                        //Log.e(TAG, "An exception has occurred when attempting to show the dialogType dialog: "
//                                + e.toString());
                    }
                }
            }
        }
    }

    public void showConfirmCancelSubscriptionDialog(Action1<Boolean> oncConfirmationAction) {
        if (currentActivity != null) {
            int textColor = getGeneralTextColor(); //Color.parseColor(appCMSMain.getBrand().getGeneral().getTextColor());
            AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
            String title = localisedStrings.getFailedPaymentErrorTitle();
            String message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_payment_canceled_body));
            builder.setTitle(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                    Integer.toHexString(textColor).substring(2),
                    title)))
                    .setMessage(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                            Integer.toHexString(textColor).substring(2),
                            message)));
            builder.setPositiveButton(localisedStrings.getYesText(),
                    (dialog, which) -> {
                        dialog.dismiss();
                        if (oncConfirmationAction != null) {
                            Observable.just(true)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(oncConfirmationAction);
                        }
                    });
            builder.setNegativeButton(localisedStrings.getNoText(),
                    (dialog, which) -> {
                        try {
                            dialog.dismiss();
                            if (oncConfirmationAction != null) {
                                Observable.just(false)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(oncConfirmationAction);
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error closing confirm cancellation dialog: " + e.getMessage());
                        }
                    });
            builder.setCancelable(false);
            AlertDialog dialog = builder.create();
            if (dialog.getWindow() != null) {
                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                    try {
                        dialog.show();
                        Component component = new Component();
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.message)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialog.findViewById(android.R.id.title)));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_NEGATIVE));
                        ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialog.getButton(AlertDialog.BUTTON_POSITIVE));
                        int tintTextColor = getBrandPrimaryCtaColor();
                        dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(tintTextColor);
                        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(tintTextColor);
                    } catch (Exception e) {
                        //Log.e(TAG, "An exception has occurred when attempting to show the dialogType dialog: "
//                                + e.toString());
                    }
                }
            }
        }
    }

    /**
     * This will navigate the app to the Download Page if there is no network activity
     *
     * @param launchActivity A flag to indicate whether a new Activity should be launched or an
     *                       existing Activity should be updated with the Download page UI and content
     * @param retryAction    The callback to execute if the user chooses to retry the previously executed
     *                       network request
     */

    public void openDownloadScreenForNetworkError(boolean launchActivity, Action0 retryAction) {
        try { // Applied this flow for fixing SVFA-1435 App Launch Scenario
            if ((!isUserSubscribed() && isAppSVOD()) || !downloadsAvailableForApp()) {//fix SVFA-1911
                showDialog(DialogType.NETWORK, null, true,
                        () -> {
                            if (retryAction != null) {
                                retryAction.call();
                            }
                        },
                        () -> {
                            if (currentActivity != null) {
                                currentActivity.finish();
                            }
//                            launched = true;
//                            launchBlankPage();
//                            sendStopLoadingPageAction(false, null);
//                            showNoNetworkConnectivityToast();
//                            showNetworkConnectivity = false;
                        }, null);
                return;
            }

            if (downloadsAvailableForApp()) {
                navigateToDownloadPage(appPreference.getDownloadPageId());
            }
        } catch (Exception e) {
            launchBlankPage();// Fix for SVFA-1435 after killing app
            sendStopLoadingPageAction(false, null);
            //Log.d(TAG, e.getMessage());
        }
    }

    @SuppressWarnings("UnusedAssignment")
    public void showDialog(DialogType dialogType,
                           String optionalMessage,
                           boolean showCancelButton,
                           final Action0 onDismissAction,
                           final Action0 onCloseAction,
                           String title) {
        if (currentActivity != null) {
            removeWaysToWatch();
            int textColor = ContextCompat.getColor(currentActivity, android.R.color.white);
            try {
                textColor = Color.parseColor(appCMSMain.getBrand().getGeneral().getTextColor());
            } catch (Exception e) {
                textColor = ContextCompat.getColor(currentActivity, android.R.color.white);
            }
            AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
            String message = optionalMessage;

            switch (dialogType) {
                case SIGNUP:
                case SIGNUP_PASSWORD_INVALID:
                case SIGNIN:
                case REDEEM_CODE:
                    message = optionalMessage;
                    break;

                case SIGN_OUT:
                    message = localisedStrings.getLogoutText();
                    break;
                case RESET_PASSWORD:
                    if (title == null)
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_reset_password_title));
                    message = optionalMessage;
                    break;

                case CANCEL_SUBSCRIPTION:
                    title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_cancel_subscription_title));
                    message = optionalMessage;
                    break;

                case EXISTING_SUBSCRIPTION:
                    title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_existing_subscription_title));
                    message = optionalMessage;
                    break;

                case RETRY_SUBSCRIPTION:
                case SUBSCRIBE:
                    if (title == null)
                        title = localisedStrings.getSubscriptionMsgHeaderText();
                    message = optionalMessage;
                    break;

                case DELETE_ONE_HISTORY_ITEM:
                case DELETE_ALL_HISTORY_ITEMS:
                    if (title == null)
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_history_alert_title));
                    message = optionalMessage;
                    break;

                case DELETE_ONE_WATCHLIST_ITEM:
                case DELETE_ALL_WATCHLIST_ITEMS:
                    if (title == null)
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_watchlist_alert_title));
                    message = optionalMessage;
                    break;
                case DELETE_ONE_DOWNLOAD_ITEM:
                case DELETE_ALL_DOWNLOAD_ITEMS:
                    if (title == null)
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_delete_download_alert_title));
                    message = optionalMessage;
                    break;

                case DOWNLOAD_INCOMPLETE:
                    title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_download_incomplete_error_title));
                    if (optionalMessage != null) {
                        message = optionalMessage;
                    } else {
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_download_incomplete_error_message));
                    }
                    break;

                case STREAMING_INFO_MISSING:
                    title = localisedStrings.getStreamingInfoErrorText();
                    message = localisedStrings.getStreamingInfoMsgText();
                    break;

                case REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION_FOR_DOWNLOAD:
                    title = localisedStrings.getExternalStorageTitleText();
                    message = optionalMessage;
                    if (localizationResult != null && localizationResult.getDownloadExternalStorageMessage() != null)
                        message = localizationResult.getDownloadExternalStorageMessage();
                    else if (genericMessages != null && genericMessages.getDownloadExternalStorageMessage() != null)
                        message = genericMessages.getDownloadExternalStorageMessage();
                    break;

                case SD_CARD_NOT_AVAILABLE:
                    title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_sdCard_unavailable_error_title));
                    message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_sdCard_unavailable_error_message));
                    break;

                case DOWNLOAD_FAILED:
                    title = localisedStrings.getDownloadSpaceDialogTitleText();
                    message = optionalMessage;
                    break;

                case DOWNLOAD_VIA_MOBILE_DISABLED:
                    title = localisedStrings.getDownloadCellularTitleText();
                    message = optionalMessage;
                    break;

                case DOWNLOAD_NOT_AVAILABLE:
                    message = localisedStrings.getUserOnlineTimeAlertText();
                    break;

                case EXISTING_DOWNLOAD_OFFLINE_ITEM:
                    title = localisedStrings.getDownloadExistsOfflineHeaderText();
                    message = localisedStrings.getDownloadExistsOfflineMessageText();
                    break;

                case UNABLE_TO_PLAY_VIDEO:
                    title = localisedStrings.getContentNotAvailable();
                    message = optionalMessage;
                    break;
                case VIDEO_NOT_AVAILABLE:
                    title = localisedStrings.getErrorTitle();
                    message = optionalMessage;
                    break;
                case VIDEO_NOT_AVAILABLE_ALERT:
                    title = localisedStrings.getAlertTitle();
                    message = optionalMessage;
                    break;
                case TVOD_CONTENT_ERROR:
                    title = title;
                    message = optionalMessage;
                    break;
                case DRM_NOT_DOWNLOAD:
                    title = localisedStrings.getDrmNotSupport();
                    message = optionalMessage;
                    break;
                case DRM_NOT_CAST:
                    title = localisedStrings.getDrmNotSupport();
                    message = optionalMessage;
                    break;
                case DRM_PLAY_ERROR:
                    title = localisedStrings.getVideoPlaybackHeaderMessage();
                    message = optionalMessage;
                    break;
                case RECOMMENDATION_CATEGORY_EMPTY:
                    if (title == null)
                        title = localisedStrings.getInternetErrorHeader();
                    if (optionalMessage != null) {
                        message = optionalMessage;
                    } else {
                        message = localisedStrings.getInternetErrorMsg();
                    }
                    break;
                case SSL_SUBSCRIPTION_ERROR:
                    title = localisedStrings.getFailedPaymentErrorTitle();
                    message = optionalMessage;
                    break;
                case RATING_PROMPT:
                    message = localisedStrings.getRatingPromptMessage();
                    break;
                case CONTACT_US:
                    message = localisedStrings.getRatingPromptConfirmationMessage();
                    break;
                case MAX_STREAMS_ERROR:
                    if (title == null)
                        title = localisedStrings.getErrorTitle();
                    message = localisedStrings.getMaxStreamErrorText();
                    break;
                case APP_MENU:
                    message = localisedStrings.getPleaseLoginToViewMyAha();
                    break;
                case GET_SOCIAL_INIVITE:
                    title = localisedStrings.getCongratulationsText();
                    message = localisedStrings.getInviteSuccessText();
                    break;
                case CARD_NOT_SUPPORT_RECURRING_PAYMENT:
                    message = optionalMessage;
                    break;
                default:
                    if (title == null)
                        title = localisedStrings.getInternetErrorHeader();
                    if (optionalMessage != null) {
                        message = optionalMessage;
                    } else {
                        message = localisedStrings.getInternetErrorMsg();
                    }
                    if (isNetworkConnected()) {
                        title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_data_error_title));
                        message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_data_error_message));
                    }
                    break;
            }
            builder.setTitle(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                    Integer.toHexString(textColor).substring(2),
                    title)))
                    .setMessage(Html.fromHtml(currentActivity.getString(R.string.text_with_color,
                            Integer.toHexString(textColor).substring(2),
                            message)));
            if (showCancelButton) {
                String okText = localisedStrings.getOkText().toUpperCase();
                String cancelText = localisedStrings.getCancelText().toUpperCase();
                if (dialogType == DialogType.NETWORK && optionalMessage == null) {
                    okText = localisedStrings.getRetryText().toUpperCase();
                    cancelText = localisedStrings.getCloseText().toUpperCase();
                } else if (dialogType == DialogType.RE_START_DOWNLOAD_ITEM) {
                    okText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_retry_text));
                    cancelText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_cancel_alert_dialog_button_text));
                } else if (dialogType == DialogType.RETRY_SUBSCRIPTION) {
                    okText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_retry_text));
                    cancelText = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_cancel_alert_dialog_button_text));
                } else if (dialogType == DialogType.RATING_PROMPT) {
                    okText = localisedStrings.getRatingProceedAllowText();
                    cancelText = localisedStrings.getRatingProceedDenyText();
                } else if (dialogType == DialogType.CONTACT_US) {
                    okText = localisedStrings.getRatingProceedAllowText();
                    cancelText = localisedStrings.getRatingProceedDenyText();
                }
                builder.setPositiveButton(okText,
                        (dialog, which) -> {
                            try {
                                dialog.dismiss();
                                if (onDismissAction != null) {
                                    onDismissAction.call();
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                //Log.e(TAG, "Error closing cancellation dialog: " + e.getMessage());
                            }
                        });
                builder.setNegativeButton(cancelText,
                        (dialog, which) -> {
                            try {
                                dialog.dismiss();
                                if (onCloseAction != null) {
                                    onCloseAction.call();
                                    stopDownloadProgressDialog();
                                }
                            } catch (Exception e) {
                                //
                            }
                        });
            } else {
                builder.setNegativeButton(localisedStrings.getCloseText().toUpperCase(),
                        (dialog, which) -> {
                            try {
                                dialog.dismiss();
                                if (onDismissAction != null) {
                                    onDismissAction.call();
                                }
                            } catch (Exception e) {
                                //Log.e(TAG, "Error closing cancellation dialog: " + e.getMessage());
                            }
                        });
            }

            builder.setCancelable(false);

            dialogAlert = builder.create();
            if (dialogAlert.getWindow() != null) {
                try {
                    dialogAlert.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                } catch (Exception e) {
                    //Log.w(TAG, "Failed to set background color from AppCMS branding - defaulting to colorPrimaryDark: " +
//                            e.getMessage());
                    /**
                     *
                     * by default first set color of background in contrast of text color
                     */
                    dialogAlert.getWindow().setBackgroundDrawable(new ColorDrawable(ContextCompat.getColor(currentActivity, android.R.color.black)));
//                    textColor = ContextCompat.getColor(currentActivity, android.R.color.black);

                }

                dialogAlert.setOnShowListener(arg0 -> {
                    int buttonTextColor = ContextCompat.getColor(currentActivity, R.color.colorAccent);
                    try {
                        buttonTextColor = getBrandPrimaryCtaColor();
                    } catch (Exception e) {
                        buttonTextColor = ContextCompat.getColor(currentActivity, R.color.colorAccent);
                    }
                    if (dialogAlert.getButton(AlertDialog.BUTTON_NEGATIVE) != null) {
                        dialogAlert.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(buttonTextColor);
                    }
                    if (dialogAlert.getButton(AlertDialog.BUTTON_POSITIVE) != null) {
                        dialogAlert.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(buttonTextColor);
                    }
                });

                currentActivity.runOnUiThread(() -> {
                    if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                        try {
                            if (!dialogAlert.isShowing())
                                dialogAlert.show();
                            Component component = new Component();
                            ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialogAlert.findViewById(android.R.id.message)));
                            ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, ((TextView) dialogAlert.findViewById(android.R.id.title)));
                            ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialogAlert.getButton(AlertDialog.BUTTON_NEGATIVE));
                            ViewCreator.setTypeFace(getCurrentContext(), this, getJsonValueKeyMap(), component, dialogAlert.getButton(AlertDialog.BUTTON_POSITIVE));
                            int tintTextColor = getBrandPrimaryCtaColor();
                            if (dialogAlert.getButton(AlertDialog.BUTTON_NEGATIVE) != null) {
                                dialogAlert.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(tintTextColor);
                            }
                            if (dialogAlert.getButton(AlertDialog.BUTTON_POSITIVE) != null) {
                                dialogAlert.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(tintTextColor);
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "An exception has occurred when attempting to show the dialogType dialog: " + e.toString());
                        }
                    }
                });
            }
        }
    }


    public void cancelAlertDialog() {
        try {
            if (dialogAlert != null && dialogAlert.isShowing()) {
                dialogAlert.dismiss();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @SuppressLint("MissingPermission")
    @SuppressWarnings("ConstantConditions")
    public boolean isNetworkConnected() {
        if (currentActivity != null) {
            ConnectivityManager connectivityManager =
                    (ConnectivityManager) currentActivity.getSystemService(Context.CONNECTIVITY_SERVICE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                Network activeNetwork = connectivityManager.getActiveNetwork();
                if (activeNetwork != null) {
                    NetworkInfo activeNetworkInfo = connectivityManager.getNetworkInfo(activeNetwork);
                    try {
                        return activeNetworkInfo.isConnectedOrConnecting();
                    } catch (Exception e) {
                        //
                    }
                }
            } else {
                if (connectivityManager != null && connectivityManager.getAllNetworkInfo() != null) {
                    for (NetworkInfo networkInfo : connectivityManager.getAllNetworkInfo()) {
                        try {
                            if (networkInfo.isConnectedOrConnecting()) {
                                return true;
                            }
                        } catch (Exception e) {
                            //
                        }
                    }
                }
            }
        }

        return false;
    }

    public void pushActionInternalEvents(String action) {
        //Log.d(TAG, "Stack size - pushing internal events: " + currentActions.size());
        if (onActionInternalEvents.get(action) == null) {
            onActionInternalEvents.put(action, new ArrayList<>());
        }
        int currentActionPos = currentActions.search(action);
        if (0 < currentActionPos) {
            for (int i = 0; i < currentActionPos; i++) {
                currentActions.pop();
            }
        }
        currentActions.push(action);
    }

    @SuppressWarnings("unused")
    public void sendBeaconAdImpression(String vid, String screenName, String parentScreenName,
                                       long currentPosition) {
        //Log.d(TAG, "Sending Beacon Ad Impression");
        String url = getBeaconUrl(vid, screenName, parentScreenName, currentPosition,
                BeaconEvent.AD_IMPRESSION, false);
        //Log.d(TAG, "Beacon Ad Impression: " + url);
        beaconMessageRunnable.setUrl(url);
        beaconMessageThread.run();
    }

    @SuppressWarnings("unused")
    public void sendBeaconAdRequestMessage(String vid, String screenName, String
            parentScreenName,
                                           long currentPosition) {
        //Log.d(TAG, "Sending Beacon Ad Request");
        String url = getBeaconUrl(vid, screenName, parentScreenName, currentPosition,
                BeaconEvent.AD_REQUEST, false);
        //Log.d(TAG, "Beacon Ad Request: " + url);
        beaconMessageRunnable.setUrl(url);
        beaconMessageThread.run();
    }

    @SuppressWarnings("unused")
    public void sendBeaconPingMessage(String vid, String screenName, String parentScreenName,
                                      long currentPosition, boolean usingChromecast) {
        //Log.d(TAG, "Sending Beacon Ping Message");
        String url = getBeaconUrl(vid, screenName, parentScreenName, currentPosition, BeaconEvent.PING, usingChromecast);
        //Log.d(TAG, "Beacon Ping: " + url);
        beaconMessageRunnable.setUrl(url);
        beaconMessageThread.run();
    }

    @SuppressWarnings("unused")
    public void sendBeaconPlayMessage(String vid, String screenName, String parentScreenName,
                                      long currentPosition, boolean usingChromecast) {
        //Log.d(TAG, "Sending Beacon Play Message");
        String url = getBeaconUrl(vid, screenName, parentScreenName, currentPosition, BeaconEvent.PLAY, usingChromecast);
        //Log.d(TAG, "Beacon Play: " + url);
        beaconMessageRunnable.setUrl(url);
        beaconMessageThread.run();
    }

    private ArrayList<BeaconRequest> getBeaconRequestList() {
        realmController = RealmController.with(currentActivity);
        String uid = appPreference.getInstanceId();
        if (isUserLoggedIn()) {
            uid = appPreference.getLoggedInUser();
        }

        ArrayList<BeaconRequest> beaconRequestList = new ArrayList<>();
        try {
            for (OfflineBeaconData offlineBeaconData : realmController.getOfflineBeaconDataListByUser(uid)) {
                BeaconRequest beaconRequest = offlineBeaconData.convertToBeaconRequest();
                beaconRequestList.add(beaconRequest);
            }
            return beaconRequestList;
        } catch (Exception e) {
            return null;
        }
    }

    private void sendOfflineBeaconMessage() {
        ArrayList<BeaconRequest> beaconRequests = getBeaconRequestList();

        String url = getBeaconUrl();
        AppCMSBeaconRequest request = new AppCMSBeaconRequest();

        if (url != null && beaconRequests != null) {

            request.setBeaconRequest(beaconRequests);
            appCMSBeaconCall.call(url, apikey, beaconResponse -> {
                try {

                    if (beaconResponse.beaconRequestResponse.size() > 0 &&
                            beaconResponse.beaconRequestResponse.get(0).recordId != null &&
                            beaconResponse.beaconRequestResponse.get(0).recordId.length() > 0) {
                        //Log.d(TAG, "Beacon success Event: Offline " + beaconResponse.beaconRequestResponse.get(0).recordId);
                        currentActivity.runOnUiThread(() -> realmController.deleteOfflineBeaconDataByUser(appPreference.getLoggedInUser()));
                    }
                } catch (Exception e) {
                    //Log.d(TAG, "Beacon fail Event: offline  due to: " + e.getMessage());
                }
            }, request);
        } else {
            //Log.d(TAG, "No offline Beacon Event: available ");
        }
    }

    public void sendBeaconMessage(String vid, String screenName, String parentScreenName,
                                  long currentPosition, boolean usingChromecast, BeaconEvent event,
                                  String mediaType, String bitrate, String height, String width,
                                  String streamid, double ttfirstframe, int apod, boolean isDownloaded) {

        if (currentActivity != null) {

            try {
                BeaconRequest beaconRequest = getBeaconRequest(vid, screenName, parentScreenName, currentPosition, event,
                        usingChromecast, mediaType, bitrate, height, width, streamid, ttfirstframe, apod, isDownloaded);

                realmController = RealmController.with(currentActivity);
                if (!isNetworkConnected()) {
                    currentActivity.runOnUiThread(() -> {
                        try {
                            beaconRequest.setTstampoverride(getCurrentTimeStamp());
                            realmController.addOfflineBeaconData(beaconRequest.convertToOfflineBeaconData());
                        } catch (Exception e) {
                            //Log.e(TAG, "Error adding offline Beacon data: " + e.getMessage());
                        }
                    });

                    //Log.d(TAG, "Beacon info added to database +++ " + event);
                    return;
                }
                String url = getBeaconUrl();

                AppCMSBeaconRequest request = new AppCMSBeaconRequest();
                ArrayList<BeaconRequest> beaconRequests = new ArrayList<>();

                beaconRequests.add(beaconRequest);


                request.setBeaconRequest(beaconRequests);
                if (url != null) {

                    appCMSBeaconCall.call(url, apikey, beaconResponse -> {
                        try {

                            if (beaconResponse != null && beaconResponse.beaconRequestResponse != null && beaconResponse.beaconRequestResponse.size() > 0 &&
                                    beaconResponse.beaconRequestResponse.get(0).recordId != null &&
                                    beaconResponse.beaconRequestResponse.get(0).recordId.length() > 0) {
                                //Log.d(TAG, "Beacon success Event: Offline " + event + "  " + beaconResponse.beaconRequestResponse.get(0).recordId);
                            }
                        } catch (Exception e) {
                            //Log.d(TAG, "Beacon fail Event: " + event + " due to: " + e.getMessage());
                        }
                    }, request);

                }
            } catch (Exception e) {
                //Log.e(TAG, "Error sending new beacon message: " + e.getMessage());
            }
        }

    }

    public String getStreamingId(String filmName) throws
            UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {

        if (filmName != null) {
            SecretKeySpec key = new SecretKeySpec((getCurrentTimeStamp()).getBytes(StandardCharsets.UTF_8), "HmacSHA1");
            Mac mac = Mac.getInstance("HmacSHA1");
            mac.init(key);
            byte[] bytes = mac.doFinal(filmName.getBytes(StandardCharsets.UTF_8));
            return UUID.nameUUIDFromBytes(bytes).toString();
        }
        return "";
    }

    public String getPermalinkCompletePath(String pagePath) {
        StringBuffer permalinkCompletePath = new StringBuffer();
        if (currentActivity != null) {
            permalinkCompletePath.append(currentActivity.getString(R.string.https_scheme));
            permalinkCompletePath.append(appCMSMain.getDomainName());
            //  permalinkCompletePath.append(File.separatorChar); //Commented due to Page path is already having '/' with it
            permalinkCompletePath.append(pagePath);
        }
        return permalinkCompletePath.toString();
    }

    @SuppressLint("DefaultLocale")
    private BeaconRequest getBeaconRequest(String vid, String screenName, String
            parentScreenName,
                                           long currentPosition, BeaconEvent event, boolean usingChromecast,
                                           String mediaType, String bitrte, String resolutionHeight,
                                           String resolutionWidth, String streamId, double ttfirstframe, int apod,
                                           boolean isDownloaded) {
        BeaconRequest beaconRequest = new BeaconRequest();
        String uid = appPreference.getInstanceId();
        /*if (getPlatformType() == PlatformType.TV) {
            uid = getDeviceId();
        }*/

        String platform;
        String dp1;
        if (platformType.equals(PlatformType.ANDROID)) {
            platform = currentContext.getString(R.string.app_cms_beacon_platform);
            dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_android);
        } else {
            if (isFireTVDevice(currentContext)) {
                platform = currentContext.getString(R.string.app_cms_beacon_fire_tv_platform);
                dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_fire_os);
            } else {
                platform = currentContext.getString(R.string.app_cms_beacon_android_tv_platform);
                dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_android);
            }
        }

        // int currentPositionSecs = (int) (currentPosition / MILLISECONDS_PER_SECOND);
        int currentPositionSecs = (int) (currentPosition);
        if (isUserLoggedIn()) {
            uid = appPreference.getLoggedInUser();
        } else {
            uid = CommonUtils.getUserIdFromAuthToken(appPreference.getAnonymousUserToken());
        }

        if (TextUtils.isEmpty(uid)) {
            uid = getDeviceId();
        }

        beaconRequest.setAid(appCMSMain.getBeacon().getSiteName());
        beaconRequest.setCid(appCMSMain.getBeacon().getClientId());
        beaconRequest.setPfm(platform);
        beaconRequest.setVid(vid);
        beaconRequest.setUid(uid);
        beaconRequest.setPa(event.toString());
        beaconRequest.setMedia_type(mediaType);
        beaconRequest.setStream_id(streamId);
        beaconRequest.setDp1(dp1);
        beaconRequest.setUrl(getPermalinkCompletePath(screenName));
        beaconRequest.setRef(parentScreenName);
        beaconRequest.setVpos(String.valueOf(currentPositionSecs));
        beaconRequest.setApos(String.valueOf(currentPositionSecs));
        beaconRequest.setEnvironment(getEnvironment());
        beaconRequest.setResolutionheight(resolutionHeight);
        beaconRequest.setResolutionwidth(resolutionWidth);
        if (bitrte != null) {
            beaconRequest.setBitrate(bitrte);
        }
        if (event == BeaconEvent.FIRST_FRAME && ttfirstframe != 0d) {
            beaconRequest.setTtfirstframe(String.format("%.2f", ttfirstframe));
        }
        if (event == BeaconEvent.AD_IMPRESSION || event == BeaconEvent.AD_REQUEST) {
            beaconRequest.setApod(String.valueOf(apod));
        }

        if (isDownloaded) {
            beaconRequest.setDp2("downloaded_view-online");
        } else {
            beaconRequest.setDp2("view-online");
        }


        if (usingChromecast) {
            beaconRequest.setPlayer("Chromecast");
        } else {
            beaconRequest.setPlayer("Native");
        }


        return beaconRequest;
    }

    public String getDeviceId() {
        return android.provider.Settings.Secure.getString(currentActivity.getContentResolver(),
                android.provider.Settings.Secure.ANDROID_ID);
    }

    @SuppressLint("SimpleDateFormat")
    public String getCurrentTimeStamp() {
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return formatter.format(new Date(System.currentTimeMillis()));
    }

    public void searchSuggestionClick(String[] searchResultClick) {
        String permalink = searchResultClick[3];
        String action = currentActivity.getString(R.string.app_cms_action_detailvideopage_key);
        String title = searchResultClick[0];
        String runtime = searchResultClick[1];
        String mediaType = searchResultClick[4];
        String contentType = searchResultClick[5];
        String gistId = searchResultClick[6];
        //  String tag = searchResultClick[10];
        //Log.d(TAG, "Launching " + permalink + ":" + action);
        setPlaySource("");
        setPlaySource("Search List");
        /*get audio details on tray click item and play song*/
        if (mediaType.toLowerCase().contains(currentContext.getString(R.string.app_cms_article_key_type).toLowerCase())) {
            setCurrentArticleIndex(-1);
            if (getAppCMSMain() != null &&
                    getAppCMSMain().getFeatures() != null &&
                    getAppCMSMain().getFeatures().isArticleHardwallEnabled()) {
                showLoader();
                refreshVideoData(gistId, contentDatum -> {
                    stopLoader();
                    if (contentDatum != null) {
                        try {
                            navigateToArticlePage(gistId, title, false, null, false);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }, null, false, false, null);
            } else {
                navigateToArticlePage(gistId, title, false, null, false);
            }
            return;
        } else if (mediaType.toLowerCase().contains(currentContext.getString(R.string.app_cms_photo_gallery_key_type).toLowerCase())) {
            navigateToPhotoGalleryPage(gistId, title, null, false);
            return;
        } else if (mediaType.toLowerCase().contains(currentContext.getString(R.string.content_type_event).toLowerCase())) {
            navigateToEventDetailPage(permalink);
            return;
        }

        if (mediaType.toLowerCase().contains(currentContext.getString(R.string.media_type_audio).toLowerCase()) &&
                contentType != null &&
                contentType.toLowerCase().contains(currentContext.getString(R.string.content_type_audio).toLowerCase())) {
            List<String> audioPlaylistId = new ArrayList<>();
            audioPlaylistId.add(gistId);
            AudioPlaylistHelper.getInstance().setCurrentPlaylistData(null);
            AudioPlaylistHelper.getInstance().setPlaylist(audioPlaylistId);
            getCurrentActivity().sendBroadcast(new Intent(AppCMSPresenter
                    .PRESENTER_PAGE_LOADING_ACTION));
            AudioPlaylistHelper.getInstance().playAudioOnClickItem(gistId, 0);
            return;
        }

        /*Get playlist data and open playlist page*/
        if (mediaType != null
                && mediaType.toLowerCase().contains(currentContext.getString(R.string.media_type_playlist).toLowerCase())) {
            setPlaySource(getPlaySource() + "_Playlist Screen - " + title);
            navigateToPlaylistPage(gistId);
            return;
        }
        openVideoPageFromSearch(searchResultClick);
        closeSoftKeyboard();
    }

    private String getEnvironment() {
        String environment = "unknown";
        if (appCMSMain.getApiBaseUrl().contains("prod")) {
            environment = "production";
        } else if (appCMSMain.getApiBaseUrl().contains("release")) {
            environment = "release";
        } else if (appCMSMain.getApiBaseUrl().contains("preprod")) {
            environment = "preprod";
        } else if (appCMSMain.getApiBaseUrl().contains("develop")) {
            environment = "develop";
        } else if (appCMSMain.getApiBaseUrl().contains("staging")) {
            environment = "staging";
        } else if (appCMSMain.getApiBaseUrl().contains("qa")) {
            environment = "qa";
        }

        return environment;
    }

    @SuppressLint("StringFormatInvalid")
    private String getBeaconUrl() {
        if (appCMSMain != null &&
                appCMSMain.getBeacon() != null &&
                appCMSMain.getBeacon().getApiBaseUrl() != null) {
            return appCMSMain.getBeacon().getApiBaseUrl();
        } else if (currentActivity != null) {

            return currentActivity.getString(R.string.app_cms_beacon_url_base);
        }
        return null;
    }

    private String getBeaconUrl(String vid, String screenName, String parentScreenName,
                                long currentPosition, BeaconEvent event, boolean usingChromecast) {
        StringBuilder url = new StringBuilder();
        if (currentActivity != null && appCMSMain != null) {
            final String utfEncoding = currentActivity.getString(R.string.utf8enc);
            String uid = appPreference.getInstanceId();
            int currentPositionSecs = (int) (currentPosition / MILLISECONDS_PER_SECOND);
            if (isUserLoggedIn()) {
                uid = appPreference.getLoggedInUser();
            }
            try {
                String platform;
                String dp1;
                if (platformType.equals(PlatformType.ANDROID)) {
                    platform = currentContext.getString(R.string.app_cms_beacon_platform);
                    dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_android);
                } else {
                    if (isFireTVDevice(currentContext)) {
                        platform = currentContext.getString(R.string.app_cms_beacon_fire_tv_platform);
                        dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_fire_os);
                    } else {
                        platform = currentContext.getString(R.string.app_cms_beacon_android_tv_platform);
                        dp1 = currentContext.getString(R.string.app_cms_beacon_dpm_android);
                    }
                }
                url.append(currentActivity.getString(R.string.app_cms_beacon_url,
                        appCMSMain.getBeacon().getApiBaseUrl(),
                        URLEncoder.encode(appCMSMain.getBeacon().getSiteName(), utfEncoding),
                        URLEncoder.encode(appCMSMain.getBeacon().getClientId(), utfEncoding),

                        URLEncoder.encode(platform, utfEncoding),
                        URLEncoder.encode(dp1, utfEncoding),
                        URLEncoder.encode(vid, utfEncoding),
                        URLEncoder.encode(getPermalinkCompletePath(screenName), utfEncoding),
                        URLEncoder.encode(parentScreenName, utfEncoding),
                        event,
                        currentPositionSecs,
                        URLEncoder.encode(uid, utfEncoding)));
                if (usingChromecast) {
                    url.append(URLEncoder.encode(currentActivity.getString(R.string.app_cms_beacon_chromecast_dp2_url),
                            utfEncoding));
                }
            } catch (UnsupportedEncodingException e) {
                //Log.e(TAG, "DialogType encoding Beacon URL parameters: " + e.toString());
            }
        }
        return url.toString();
    }

    public void sendGaScreen(String screenName) {
        if (screenName != null) {
            if (tracker != null) {
                //Log.d(TAG, "Sending GA screen tracking event: " + screenName);
                tracker.setScreenName(screenName);

                tracker.send(new HitBuilders.ScreenViewBuilder().build());
            }
            firebaseAnalytics.viewItemEvent(screenName);
        }
    }

    public void sendGaEventForDownloadedContent(DownloadVideoRealm downloadVideoRealm) {
        if (downloadVideoRealm != null) {
            try {
                String mediaType = downloadVideoRealm.getMediaType();
                String contentType = downloadVideoRealm.getContentType();
                String title = downloadVideoRealm.getVideoTitle();
                String showTitle = downloadVideoRealm.getShowTitle();
                if (title != null) {
                    title.substring(0, Math.min(title.length(), 500));
                }
                if (showTitle != null) {
                    showTitle.substring(0, Math.min(title.length(), 500));
                    title += " | " + showTitle;
                }
                if (mediaType != null && mediaType.toLowerCase().contains(getCurrentActivity().getString(R.string.media_type_audio).toLowerCase())) {
                    sendGaEvent(currentActivity.getResources().getString(R.string.ga_audio_download_action),
                            currentActivity.getResources().getString(R.string.ga_audio_download_category), title + (downloadVideoRealm.getPlayListName() != null ? " | " + downloadVideoRealm.getPlayListName() : ""));
                } else if (mediaType != null && mediaType.toLowerCase().contains(currentActivity.getString(R.string.media_type_episode).toLowerCase())) {
                    sendGaEvent(mediaType, currentActivity.getResources().getString(R.string.ga_video_download_category), title + (downloadVideoRealm.getShowTitle() != null ? " | " + downloadVideoRealm.getShowTitle() : ""));
                } else if (contentType != null && contentType.toLowerCase().contains(currentActivity.getString(R.string.content_type_video).toLowerCase())) {
                    sendGaEvent(contentType, currentActivity.getResources().getString(R.string.ga_video_download_category), title);
                }
            } catch (Exception ex) {

            }
        }
    }

    public void sendGaIAPEvent(Bundle iapEventBundle) {
        if (getmFireBaseAnalytics() != null) {
            getmFireBaseAnalytics().logEvent("app_cms_iap_event", iapEventBundle);
        }
    }

    public void sendGaEvent(String action, String category, String label) {
        /*if (tracker != null) {
            Log.d("GAEvent", "Action :" + action + ", Category :" + category + ", Label :" + label);
            tracker.send(new HitBuilders.EventBuilder()
                    .setCategory(category)
                    .setAction(action)
                    .setLabel(label)
                    .build());
        }*/
        Bundle params = new Bundle();
        params.putString("category", category);
        params.putString("action", action);
        params.putString("label", label);
        if (getmFireBaseAnalytics() != null) {
            getmFireBaseAnalytics().logEvent("ga_event", params);
        }

    }

    public void successSignInEmailPassword() {
        String deviceName;
        String platform;
        if (platformType.equals(PlatformType.ANDROID)) {
            deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
        } else {
            if (isFireTVDevice(currentContext)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
            } else {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            }
        }
        String url = currentActivity.getString(R.string.app_cms_signin_api_url,
                appCMSMain.getApiBaseUrl(),
                platform,
                deviceName,
                appCMSMain.getInternalName(),
                getDeviceId(),
                CommonUtils.getDeviceName());

        startLoginAsyncTask(url,
                appPreference.getLoggedInUserEmail(),
                appPreference.getLoggedInUserPassword(),
                false,
                "N",
                false,
                false,
                true,
                true,
                false);
    }

    /**
     * This is a common method being used on successfull transaction of CCAVenue and SSLCommerz
     *
     * @param data This is null for the time being
     */
    public void finalizeSignupAfterCCAvenueSubscription(boolean fromJuspay) {
       /* if (isSignupFromFacebook) {
            launchType = LaunchType.LOGIN_AND_SIGNUP;
            setFacebookAccessToken(facebookAccessToken,
                    facebookUserId,
                    facebookUsername,
                    facebookEmail,
                    true,
                    false);
        } else if (isSignupFromGoogle) {
            launchType = LaunchType.LOGIN_AND_SIGNUP;
            setGoogleAccessToken(googleAccessToken,
                    googleUserId,
                    googleUsername,
                    googleEmail,
                    true,
                    false);
        } else {
            if (isSiteOTPEnabled(this)) {
                if (appPreference.getLoggedInUserEmail() != null && appPreference.getLoggedInUserPassword() != null) {
                    //OTP is Enabled and Still Existing User Logged in With Username and Password
                    phoneObjectRequest.setFromVerify(false);
//                    successSignInEmailPassword();
                } else {
                    String deviceName;
                    String platform;
                    if (platformType.equals(PlatformType.ANDROID)) {
                        deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                        platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                    } else {
                        if (isFireTVDevice(currentContext)) {
                            deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                            platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                        } else {
                            deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                        }
                    }
                    String loginUrl = currentActivity.getString(R.string.app_cms_signin_api_url,
                            appCMSMain.getApiBaseUrl(),
                            platform,
                            deviceName,
                            appCMSMain.getInternalName(),
                            getDeviceId(),
                            CommonUtils.getDeviceName());
                    phoneObjectRequest.setScreenName("signin");
                    phoneObjectRequest.setFromVerify(true);
                    verifyOTPRequestCreation(phoneObjectRequest.getOtpValue(), phoneObjectRequest, loginUrl, null, false);
                }
            } else {
                phoneObjectRequest.setFromVerify(false);
//                successSignInEmailPassword();
            }
        }*/
        updatePlaybackControl();
        getUserData(new Action1<UserIdentity>() {
            @Override
            public void call(UserIdentity userIdentity) {
                if (getLaunchType() != LaunchType.TVOD_PURCHASE)
                    sendEventSubscriptionSuccess();
                if (getAudioPlayerOpen() && isUserLoggedIn()) {
                    sendRefreshPageAction();
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            sendCloseOthersAction(null, true, false);
                        }
                    }, 200);


                    AudioPlaylistHelper.getInstance().playAudioOnClickItem(AudioPlaylistHelper.getInstance().getLastMediaId(), 30000);
                    setAudioPlayerOpen(false);
                } else if (entitlementPendingVideoData != null && entitlementPendingVideoData.contentDatum != null && !entitlementPendingVideoData.contentDatum.isFromStandalone()) {
                    sendRefreshPageAction();
                    if (!loginFromNavPage) {
                        sendCloseOthersAction(null, true, !loginFromNavPage);
                    }
                    if (billlingOptionsShown) {
                        if (fromJuspay)
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                        sendCloseOthersAction(null, true, !loginFromNavPage);
                        billlingOptionsShown = false;
                    }
                    launchButtonSelectedAction(entitlementPendingVideoData.pagePath,
                            entitlementPendingVideoData.action,
                            entitlementPendingVideoData.filmTitle,
                            entitlementPendingVideoData.extraData,
                            entitlementPendingVideoData.contentDatum,
                            entitlementPendingVideoData.closeLauncher,
                            entitlementPendingVideoData.currentlyPlayingIndex,
                            entitlementPendingVideoData.relateVideoIds);
                    if (entitlementPendingVideoData != null) {
                        entitlementPendingVideoData.pagePath = null;
                        entitlementPendingVideoData.action = null;
                        entitlementPendingVideoData.filmTitle = null;
                        entitlementPendingVideoData.extraData = null;
                        entitlementPendingVideoData.contentDatum = null;
                        entitlementPendingVideoData.closeLauncher = false;
                        entitlementPendingVideoData.currentlyPlayingIndex = -1;
                        entitlementPendingVideoData.relateVideoIds = null;
                    }
                } else {
                    sendCloseOthersAction(null, true, false);
                    cancelInternalEvents();
                    restartInternalEvents();
                    appPreference.setPurchaseKey(true);
                    senduserProfileEvent();
                    if (entitlementPendingVideoData != null && ((entitlementPendingVideoData.contentDatum != null && entitlementPendingVideoData.contentDatum.isFromStandalone())
                            || entitlementPendingVideoData.isFromContent)) {
                        if (billlingOptionsShown) {
                            if (fromJuspay)
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                            billlingOptionsShown = false;
                        }
                        entitlementPendingVideoData = null;
                        sendRefreshPageAction();
                    } else {
                        NavigationPrimary homePageNavItem = findHomePageNavItem();
                        if (homePageNavItem != null) {
                            cancelInternalEvents();
                            navigateToPage(homePageNavItem.getPageId(),
                                    homePageNavItem.getTitle(),
                                    homePageNavItem.getUrl(),
                                    false,
                                    true,
                                    false,
                                    true,
                                    true,
                                    deeplinkSearchQuery);
                        }
                    }
                }
            }
        });
    }


    public void restoreAmazonSubscription(String receiptData, String skuToPurchase, String currencyCode, String amazonIAPuserId) {
        SubscriptionRequest subscriptionRequest = getTVSubscriptionRequest(receiptData, skuToPurchase, skuToPurchase, currencyCode, amazonIAPuserId);
        sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_RESTORE_PURCHASE_INITIATED,
                AMAZON_IAP,
                getLoggedInUser(),
                amazonIAPuserId,
                skuToPurchase,
                receiptData, ""));

        subscriptionRequest.setReceipt(receiptData);
        int subscriptionCallType = R.string.app_cms_subscription_plan_create_key;
        try {

            String url = currentActivity.getString(R.string.app_cms_register_subscription_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    currentActivity.getString(R.string.app_cms_subscription_tv_platform_key));
            if (!storeCountryCode.equalsIgnoreCase(getCountryCode())) {
                url = url + "&store_countryCode=" + storeCountryCode;
            }

            appCMSSubscriptionPlanCall.call(url,
                    subscriptionCallType,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    result -> {
                    }, appCMSSubscriptionPlanResult -> {
                        if (appCMSSubscriptionPlanResult != null
                                && appCMSSubscriptionPlanResult.getSubscriptionStatus() != null
                                && appCMSSubscriptionPlanResult.getSubscriptionStatus().equalsIgnoreCase("COMPLETED")) {
                            sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_RESTORE_PURCHASE_SUCCESS, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, ""));
                            appPreference.setIsUserSubscribed(true);
                        } else {
                            String errorMsg = appCMSSubscriptionPlanResult != null ? appCMSSubscriptionPlanResult.getError() : null;
                            if (errorMsg == null && appCMSSubscriptionPlanResult != null) {
                                errorMsg = appCMSSubscriptionPlanResult.getMessage();
                            }
                            sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_RESTORE_PURCHASE_FAILED, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, errorMsg));
                        }
                    },
                    planResult -> {
                    }, errorResponse -> {
                        sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_RESTORE_PURCHASE_FAILED, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, errorResponse));
                    });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void finalizeSignUpAfterSubscriptionForFireTV(String receiptData,
                                                         String planToPurchase,
                                                         String skuToPurchase,
                                                         String currencyCode,
                                                         String amazonIAPuserId) {
        SubscriptionRequest subscriptionRequest = getTVSubscriptionRequest(receiptData, planToPurchase, skuToPurchase, currencyCode, amazonIAPuserId);

        sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_INITIATED, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, ""));

        // NOTE: Replaced with Utils.getProperty()
        //subscriptionRequest.setSiteId(currentActivity.getString(R.string.app_cms_app_name));

        subscriptionRequest.setReceipt(receiptData);
        int subscriptionCallType = R.string.app_cms_subscription_plan_create_key;

        try {
            String url = currentActivity.getString(R.string.app_cms_register_subscription_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    currentActivity.getString(R.string.app_cms_subscription_tv_platform_key));

            if (!storeCountryCode.equalsIgnoreCase(getCountryCode())) {
                url = url + "&store_countryCode=" + storeCountryCode;
            }

            appCMSSubscriptionPlanCall.call(url,
                    subscriptionCallType,
                    subscriptionRequest,
                    true, apikey,
                    getAuthToken(),
                    result -> {
                    }, appCMSSubscriptionPlanResult -> {
                        if (!isViewPlanPageOpenFromADialog()) {
                            navigateToHomePage(true);
                        } else {
                            setViewPlanPageOpenFromADialog(false);
                            Fragment prev = currentActivity.getSupportFragmentManager().findFragmentByTag(DIALOG_FRAGMENT_TAG);
                            if (prev != null) {
                                DialogFragment df = (DialogFragment) prev;
                                df.dismiss();
                            }

                            if (isSignupFlag() && isPersonalizationEnabled()) {
                                openRecommendationDialog(false);
                            }
                            stopLoader();

                        }
                        if (appCMSSubscriptionPlanResult != null
                                && appCMSSubscriptionPlanResult.getSubscriptionStatus() != null
                                && appCMSSubscriptionPlanResult.getSubscriptionStatus().equalsIgnoreCase("COMPLETED")) {
                            sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_SUCCESS, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, ""));
                            //appPreference.setIsUserSubscribed(true);
                            getUserData(new Action1<UserIdentity>() {
                                @Override
                                public void call(UserIdentity userIdentity) {
                                    Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                    currentActivity.sendBroadcast(updateSubscription);
                                }
                            });
                        } else {
                            String errorMsg = appCMSSubscriptionPlanResult != null ? appCMSSubscriptionPlanResult.getError() : null;
                            if (errorMsg == null) {
                                errorMsg = appCMSSubscriptionPlanResult.getMessage();
                            }
                            sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_FAILED, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, errorMsg));
                        }


                    },
                    planResult -> {
                    }, errorResponse -> {
                        sendGaIAPEvent(Utils.getIapEventBundle(IAP_VL_FAILED, AMAZON_IAP, getLoggedInUser(), amazonIAPuserId, skuToPurchase, receiptData, errorResponse));
                        if (!isViewPlanPageOpenFromADialog()) {
                            navigateToHomePage(true);
                        } else {
                            setViewPlanPageOpenFromADialog(false);
                            Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                            myProfileIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                            currentActivity.sendBroadcast(myProfileIntent);

                            if (isSignupFlag() && isPersonalizationEnabled()) {
                                openRecommendationDialog(false);
                            }
                            stopLoader();
                        }
                        appPreference.setIsUserSubscribed(false);
                    });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private SubscriptionRequest getTVSubscriptionRequest(String reseiptData,
                                                         String planToPurchase,
                                                         String skuToPurchase,
                                                         String currencyCode,
                                                         String amazonIAPuserId) {
        SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
        subscriptionRequest.setSiteInternalName(getAppCMSMain().getInternalName());
        subscriptionRequest.setUserId(appPreference.getLoggedInUser());
        subscriptionRequest.setSiteId(Utils.getProperty("SiteId", currentActivity));
        subscriptionRequest.setPlatform(currentActivity.getString(R.string.app_cms_subscription_tv_platform_key));
        subscriptionRequest.setSubscription(currentActivity.getString(R.string.app_cms_subscription_tv_key));
        subscriptionRequest.setPlanId(planToPurchase);
        subscriptionRequest.setPlanIdentifier(skuToPurchase);
        subscriptionRequest.setEmail(appPreference.getLoggedInUserEmail());
        subscriptionRequest.setCurrencyCode(currencyCode);
        subscriptionRequest.setReceipt(reseiptData);
        subscriptionRequest.setAddEntitlement(true);
        subscriptionRequest.setAmazonIAPUserId(amazonIAPuserId);
        subscriptionRequest.setPaymentUniqueId(amazonIAPuserId);
        return subscriptionRequest;
    }

    public void finalizeSignupAfterSubscription(String receiptData) {
        setSelectedPlan(null, null);
        appPreference.setActiveSubscriptionReceipt(receiptData);
        appPreference.setRestoreSubscriptionReceipt(null);

        int subscriptionCallType = R.string.app_cms_subscription_plan_create_key;

        if (appPreference.getActiveSubscriptionSku() != null) {
            subscriptionCallType = R.string.app_cms_subscription_plan_update_key;
        }

        // Save plan info in case subscribe call fails
        appPreference.setActiveSubscriptionId(planToPurchase);
        appPreference.setActiveSubscriptionCurrency(currencyOfPlanToPurchase);
        appPreference.setActiveSubscriptionPrice(String.valueOf(planToPurchasePrice));
        appPreference.setActiveSubscriptionSku(skuToPurchase);


        SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
        subscriptionRequest.setPlatform(currentActivity.getString(R.string.app_cms_subscription_platform_key));
        subscriptionRequest.setSiteId(Utils.getProperty("SiteId", currentActivity));
        subscriptionRequest.setSubscription(currentActivity.getString(R.string.app_cms_subscription_key));
        subscriptionRequest.setPlanId(planToPurchase);
        subscriptionRequest.setPlanIdentifier(skuToPurchase);
        subscriptionRequest.setUserId(appPreference.getLoggedInUser());
        subscriptionRequest.setReceipt(receiptData);
        //Log.d(TAG, "Subscription request: " + gson.toJson(subscriptionRequest, SubscriptionRequest.class));


        try {
            showLoader();
            appCMSSubscriptionPlanCall.call(
                    currentActivity.getString(R.string.app_cms_register_subscription_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(),
                            currentActivity.getString(R.string.app_cms_subscription_platform_key)),
                    subscriptionCallType,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    result -> {
                        //
                    },
                    appCMSSubscriptionPlanResult -> {
                        try {
                            appPreference.setActiveSubscriptionSku(skuToPurchase);
                            appPreference.setActiveSubscriptionCountryCode(countryCode);
                            if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                                AppsFlyerUtils.subscriptionEvent(currentActivity,
                                        true,
                                        appPreference.getAppsFlyerKey(),
                                        String.valueOf(planToPurchasePrice),
                                        subscriptionRequest.getPlanId(),
                                        subscriptionRequest.getCurrencyCode(), appPreference.getLoggedInUser());
                            }
                            //Subscription Succes Firebase Log Event
                            firebaseAnalytics.ecommPurchaseEvent(subscriptionRequest.getPlanId(), planToPurchaseName, currencyOfPlanToPurchase, planToPurchasePrice, null);
                            appPreference.setActiveSubscriptionId(planToPurchase);
                            appPreference.setActiveSubscriptionCurrency(currencyOfPlanToPurchase);
                            appPreference.setActiveSubscriptionPrice(String.valueOf(planToPurchasePrice));
                            if (billlingOptionsShown) {
                                if ((useJusPay() || useCCAvenue() || useSSLCommerz()) && (selectedPaymentMethod != null && selectedPaymentMethod != BillingFragment.PaymentMethod.IN_APP_PURCHASE))
                                    openMobileNumberActivity();
                            } else {
                                if (useJusPay() || useCCAvenue() || useSSLCommerz()) {
                                    /*open mobile number activity and from there choose SSLCommerz for Banglades otherwise CCAvenue*/
                                    openMobileNumberActivity();
                                }
                            }

                            skuToPurchase = null;
                            planToPurchase = null;
                            currencyOfPlanToPurchase = null;
                            planToPurchaseName = null;
                            planToPurchasePrice = 0.0f;
                            countryCode = "";

                            if (!isUserLoggedIn()) {
                                if ((launchType == LaunchType.SUBSCRIBE ||
                                        launchType == LaunchType.INIT_SIGNUP) &&
                                        !isSignupFromFacebook &&
                                        !isSignupFromGoogle) {
                                    String deviceName;
                                    String platform;
                                    if (platformType.equals(PlatformType.ANDROID)) {
                                        deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                                        platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                                    } else {
                                        if (isFireTVDevice(currentContext)) {
                                            deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                                            platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                                        } else {
                                            deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                                            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                                        }
                                    }
                                    String url = currentActivity.getString(R.string.app_cms_signin_api_url,
                                            appCMSMain.getApiBaseUrl(),
                                            platform,
                                            deviceName,
                                            appCMSMain.getInternalName(),
                                            getDeviceId(),
                                            CommonUtils.getDeviceName());

                                    startLoginAsyncTask(url,
                                            subscriptionUserEmail,
                                            subscriptionUserPassword,
                                            false,
                                            "N",
                                            false,
                                            launchType == LaunchType.INIT_SIGNUP,
                                            true,
                                            true,
                                            false);
                                    launchType = LaunchType.LOGIN_AND_SIGNUP;
                                }
                                if (isSignupFromFacebook) {
                                    launchType = LaunchType.LOGIN_AND_SIGNUP;
                                    setFacebookAccessToken(facebookAccessToken,
                                            facebookUserId,
                                            facebookUsername,
                                            facebookEmail,
                                            true,
                                            false);
                                } else if (isSignupFromGoogle) {
                                    launchType = LaunchType.LOGIN_AND_SIGNUP;
                                    setGoogleAccessToken(googleAccessToken,
                                            googleUserId,
                                            googleUsername,
                                            googleEmail,
                                            true,
                                            false);
                                }
                            } else {
                                getUserData(new Action1<UserIdentity>() {
                                    @Override
                                    public void call(UserIdentity userIdentity) {
                                        launchType = LaunchType.LOGIN_AND_SIGNUP;
                                        updatePlaybackControl();
                                        if (getAudioPlayerOpen() && isUserLoggedIn()) {
                                            sendRefreshPageAction();
                                            if (!loginFromNavPage) {
                                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                            }
                                            AudioPlaylistHelper.getInstance().playAudioOnClickItem(AudioPlaylistHelper.getInstance().getLastMediaId(), 30000);
                                            setAudioPlayerOpen(false);
                                        } else if (entitlementPendingVideoData != null && entitlementPendingVideoData.contentDatum != null && !entitlementPendingVideoData.contentDatum.isFromStandalone()) {
                                            sendRefreshPageAction();
                                            if (!loginFromNavPage) {
                                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                            }
                                            if (billlingOptionsShown) {
                                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                                billlingOptionsShown = false;
                                            }
                                            launchButtonSelectedAction(entitlementPendingVideoData.pagePath,
                                                    entitlementPendingVideoData.action,
                                                    entitlementPendingVideoData.filmTitle,
                                                    entitlementPendingVideoData.extraData,
                                                    entitlementPendingVideoData.contentDatum,
                                                    entitlementPendingVideoData.closeLauncher,
                                                    entitlementPendingVideoData.currentlyPlayingIndex,
                                                    entitlementPendingVideoData.relateVideoIds);
                                            if (entitlementPendingVideoData != null) {
                                                entitlementPendingVideoData.pagePath = null;
                                                entitlementPendingVideoData.action = null;
                                                entitlementPendingVideoData.filmTitle = null;
                                                entitlementPendingVideoData.extraData = null;
                                                entitlementPendingVideoData.contentDatum = null;
                                                entitlementPendingVideoData.closeLauncher = false;
                                                entitlementPendingVideoData.currentlyPlayingIndex = -1;
                                                entitlementPendingVideoData.relateVideoIds = null;
                                            }
                                        } else {
                                            sendCloseOthersAction(null, true, false);
                                            cancelInternalEvents();
                                            restartInternalEvents();
                                            if (entitlementPendingVideoData != null && ((entitlementPendingVideoData.contentDatum != null && entitlementPendingVideoData.contentDatum.isFromStandalone())
                                                    || entitlementPendingVideoData.isFromContent)) {
                                                if (billlingOptionsShown) {
                                                    sendCloseOthersAction(null, true, !loginFromNavPage);
                                                    billlingOptionsShown = false;
                                                }
                                                entitlementPendingVideoData = null;
                                                sendRefreshPageAction();
                                            } else {
                                                NavigationPrimary homePageNavItem = findHomePageNavItem();
                                                if (homePageNavItem != null) {
                                                    cancelInternalEvents();
                                                    navigateToPage(homePageNavItem.getPageId(),
                                                            homePageNavItem.getTitle(),
                                                            homePageNavItem.getUrl(),
                                                            false,
                                                            true,
                                                            false,
                                                            true,
                                                            true,
                                                            deeplinkSearchQuery);
                                                }

                                                //Show Personalization Screen Post User Plan Purchase
                                                if (isPersonalizationEnabled()) {
                                                    showLoader();
                                                    AppCMSPresenter.isFromSettings = false;
                                                    getUserRecommendedGenres(getLoggedInUser(), s -> {
                                                        setSelectedGenreString(s);
                                                        //if (isRecommendationEnabled()) {
                                                        Handler handler = new Handler();
                                                        handler.postDelayed(new Runnable() {
                                                            @Override
                                                            public void run() {
                                                                try {
                                                                    stopLoader();
                                                                    showPersonalizationscreenIfEnabled(false, true);
                                                                } catch (Exception e) {
                                                                }
                                                            }
                                                        }, 1000);
                                                        //}
                                                    }, false, true);
                                                }
                                            }
                                        }
                                    }
                                });
                                /*new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        getUserData(null);
                                    }
                                }, 1000);*/

                            }
                            subscriptionUserEmail = null;
                            subscriptionUserPassword = null;
                            facebookAccessToken = null;
                            facebookUserId = null;

                            googleAccessToken = null;
                            googleUserId = null;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    },
                    planResult -> {
                        //
                    }, errorResponse -> {

                    });
            sendEventSubscripationPurchasedNew();
        } catch (IOException e) {
            //Log.e(TAG, "Failed to update user subscription status");
            stopLoader();
        }
        senduserProfileEvent();
        sendSubscriptionPurchasedEvent();
    }

    private String selectedGenreString;

    public String getSelectedGenreString() {
        return selectedGenreString;
    }

    public void setSelectedGenreString(String selectedGenreString) {
        this.selectedGenreString = selectedGenreString;
    }

    public void getUserRecommendedGenres(String userId, Action1<String> action, boolean isFromSettingsPage, boolean isNavigateToHomePage) {
        final String[] result = new String[1];
        GetRecommendationGenreAsyncTask.Params params = new GetRecommendationGenreAsyncTask.Params.Builder()
                .context(currentActivity)
                .siteId(getAppCMSMain().getInternalName())
                .userId(userId)
                .url(currentActivity.getString(R.string.get_recommendation_user_genre, appCMSMain.getApiBaseUrl()))
                .xapiKey(apikey)
                .authToken(getAuthToken())
                .build();

        new GetRecommendationGenreAsyncTask(getUserRecommendGenreCall, getUserRecoCat -> {
            if (getUserRecoCat == null) {
                result[0] = "NOGENRE|";
                setPersonalizedGenresPreference(null, isFromSettingsPage, isNavigateToHomePage);
            } else {
                result[0] = getUserRecoCat.getGenreValue();
                if (TextUtils.isEmpty(getUserRecoCat.getGenreValue()) || getUserRecoCat.getGenreValue().toLowerCase().contains("none")) {
                    setPersonalizedGenresPreference(null, isFromSettingsPage, isNavigateToHomePage);
                } else {
                    setPersonalizedGenresPreference(getUserRecoCat.getGenreValue(), isFromSettingsPage, isNavigateToHomePage);
                }
            }
            if (action != null)
                action.call(result[0]);
        }).execute(params);

    }

    public static Boolean isFromSettings = false;

    public PopupWindow popupWindow;

    public void showRecommendationGenreDialog(Action1<SignInResponse> recommendationSelected) throws Exception {
        if (popupWindow == null || (popupWindow != null && !popupWindow.isShowing())) {
            View popupView = LayoutInflater.from(getCurrentActiveContext()).inflate(R.layout.recommendation_layout_costraint, null);
            if (getTemplateType() == AppCMSPresenter.TemplateType.NEWS) {
                popupView = LayoutInflater.from(getCurrentActiveContext()).inflate(R.layout.recommendation_news_layout, null);
            }
            popupWindow = new PopupWindow(popupView, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);
            RecyclerView recyclerView = popupView.findViewById(R.id.card_recycler_view);
            recyclerView.setHasFixedSize(true);
            recyclerView.setBackgroundColor(getGeneralBackgroundColor());
            popupView.setBackgroundColor(getGeneralBackgroundColor());
            RecyclerView.LayoutManager layoutManager = new GridLayoutManager(getCurrentActiveContext(), 3);
            if (getTemplateType() == AppCMSPresenter.TemplateType.NEWS)
                layoutManager = new LinearLayoutManager(getCurrentActiveContext());
            recyclerView.setLayoutManager(layoutManager);
            ArrayList<RecommendationGenre> recommendationVersions;

            if (isFromSettings)
                recommendationVersions = prepareSelectedData();
            else
                recommendationVersions = prepareData();

            RecommendationDataAdapter adapter = new RecommendationDataAdapter(getCurrentActiveContext(), recommendationVersions, this);
            recyclerView.setAdapter(adapter);
            popupWindow.setAnimationStyle(R.style.popup_window_animation_phone);

            popupWindow.showAtLocation(popupView, Gravity.CENTER, 0, 0);


            if (popupView.findViewById(R.id.headerText) != null) {
                ((TextView) popupView.findViewById(R.id.headerText)).setText(localisedStrings.getRecommendationTitle());
                ((TextView) popupView.findViewById(R.id.headerText)).setTextColor(getBrandPrimaryCtaColor());
            }

            if (popupView.findViewById(R.id.subHeadertext) != null) {
                ((TextView) popupView.findViewById(R.id.subHeadertext)).setText(localisedStrings.getRecommendationSubTitle());
                ((TextView) popupView.findViewById(R.id.subHeadertext)).setTextColor(getBrandPrimaryCtaColor());
            }

            ((Button) popupView.findViewById(R.id.recommendClose)).setText(localisedStrings.getSaveText());

            if (isNewsTemplate()) {
                (((Button) popupView.findViewById(R.id.recommendClose)).getBackground()).setColorFilter(getBrandPrimaryCtaColor(), PorterDuff.Mode.SRC_ATOP);
            } else {
                ((Button) popupView.findViewById(R.id.recommendClose)).setBackgroundColor(getBrandPrimaryCtaColor());
            }
            ((Button) popupView.findViewById(R.id.recommendClose)).setTextColor(getBrandPrimaryCtaTextColor());
            ((Button) popupView.findViewById(R.id.recommendSkip)).setText(localisedStrings.getSkipText());
            ((Button) popupView.findViewById(R.id.recommendSkip)).setBackgroundColor(getGeneralBackgroundColor());
            ((Button) popupView.findViewById(R.id.recommendSkip)).setTextColor(getGeneralTextColor());


            if (localizationResult != null && localizationResult.getRecommendStartBrowsingText() != null && localizationResult.getRecommendSaveButtonText() != null) {
                if ((popupView.findViewById(R.id.recommendClose)) != null)
                    ((Button) popupView.findViewById(R.id.recommendClose)).setText(isFromSettings ? localizationResult.getRecommendSaveButtonText() : localizationResult.getRecommendStartBrowsingText());
            }

            if (localizationResult != null && localizationResult.getRecommendSkipButtonText() != null) {
                if ((popupView.findViewById(R.id.recommendSkip)) != null)
                    ((Button) popupView.findViewById(R.id.recommendSkip)).setText(localizationResult.getRecommendSkipButtonText());
            }

            if (isFromSettings) {
                ((Button) popupView.findViewById(R.id.recommendClose)).setText(localisedStrings.getSaveText());
            } else {
                ((Button) popupView.findViewById(R.id.recommendClose)).setText(localisedStrings.getStartBrowsingText());
            }


            popupView.findViewById(R.id.recommendClose).setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        String genreString = "";
                        for (int i = 0; i < recommendationVersions.size(); i++) {
                            if (recommendationVersions.get(i).isItemSelected()) {
                                genreString += recommendationVersions.get(i).getAndroid_version_name() + "|";
                            }
                        }
                        if (!TextUtils.isEmpty(genreString)) {
                            //showToast(localisedStrings.getEmptyGenerListMessage(), Toast.LENGTH_LONG);
                            genreString = genreString.substring(0, genreString.length() - 1);
                        } /*else {*/
                        try {
                            sendUserRecommendationValues(getLoggedInUser(), genreString, recommendationSelected);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        popupWindow.dismiss();
                        getAppPreference().setPersonalizationScreenShown(true);
                        //}
                    } catch (Exception e) {
                    }

                }
            });

            popupView.findViewById(R.id.recommendSkip).setOnClickListener(v -> {
                popupWindow.dismiss();
                getAppPreference().setPersonalizationScreenShown(true);
                isFromSetting = false;
            });
            //   isFromSettings = false;
        }
    }

    ArrayList<RecommendationGenre> recommendedversion;

    private ArrayList<RecommendationGenre> prepareSelectedData() {
        recommendedversion = new ArrayList<>();
        for (int i = 0; i < getAppCMSMain().getRecommendation().getRecommendCategories().size(); i++) {
            RecommendationGenre androidVersion = new RecommendationGenre();
            androidVersion.setAndroid_version_name(getAppCMSMain().getRecommendation().getRecommendCategories().get(i).getTitle());
            androidVersion.setAndroid_image_url(getAppCMSMain().getRecommendation().getRecommendCategories().get(i).getImgUrl());


            boolean isFound = (selectedGenreString.toLowerCase()).indexOf(getAppCMSMain().getRecommendation().getRecommendCategories().get(i).getTitle().toLowerCase()) != -1; //true
            if (isFound) {
                androidVersion.setItemSelected(true);
            }
//            if(selectedGenreItems.size()>0){
//                if((Arrays.asList(selectedGenreItems).contains(getAppCMSMain().getRecommendation().recommendCategories.get(i).getTitle()))){
//                    androidVersion.setItemSelected(true);
//                };
//            }
            recommendedversion.add(androidVersion);
        }
        return recommendedversion;
    }

    private ArrayList<RecommendationGenre> prepareData() {
        recommendedversion = new ArrayList<>();
        for (int i = 0; i < getAppCMSMain().getRecommendation().getRecommendCategories().size(); i++) {
            RecommendationGenre androidVersion = new RecommendationGenre();
            androidVersion.setAndroid_version_name(getAppCMSMain().getRecommendation().getRecommendCategories().get(i).getTitle());
            androidVersion.setAndroid_image_url(getAppCMSMain().getRecommendation().getRecommendCategories().get(i).getImgUrl());
            recommendedversion.add(androidVersion);
        }
        return recommendedversion;
    }

    public List<SubscriptionPlan> availablePlans() {
        if (realmController != null) {
            try {
                return realmController.getAllSubscriptionPlans();
            } catch (Exception e) {

            }
        }
        return new ArrayList<>();
    }

    public boolean upgradesAvailableForUser() {
//        if (checkUpgradeFlag) {
//            return upgradesAvailable;
//        }

        boolean canUpgrade = true;
        if (useCCAvenue() || "ccavenue".equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())) {
            canUpgrade = currentContext.getString(R.string.subscription_status_completed).equals(appPreference.getSubscriptionStatus());
        }
        if (useSSLCommerz() || "sslcommerz".equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())) {
            canUpgrade = currentContext.getString(R.string.subscription_status_completed).equals(appPreference.getSubscriptionStatus());
        }

        if (useJusPay() || "juspay".equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())) {
            canUpgrade = currentContext.getString(R.string.subscription_status_completed).equals(appPreference.getSubscriptionStatus());
        }

        if (useJusPay() || "juspay".equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())) {
            canUpgrade = currentContext.getString(R.string.subscription_status_completed).equals(appPreference.getSubscriptionStatus());
        }

        if (currentActivity.getString(R.string.robi).equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())
                || currentActivity.getString(R.string.gp).equalsIgnoreCase(appPreference.getActiveSubscriptionProcessor())) {
            canUpgrade = false;
        }

        if (canUpgrade) {
            List<SubscriptionPlan> availablePlans = availablePlans();

            List<SubscriptionPlan> availableUpgradesForUser = new ArrayList<>();
            if (availablePlans != null) {
                for (SubscriptionPlan subscriptionPlan : availablePlans) {
                    String activeSubscriptionPriceStr = appPreference.getActiveSubscriptionPrice();
                    double activeSubscriptionPrice = 0.0;
                    try {
                        activeSubscriptionPrice = Double.valueOf(activeSubscriptionPriceStr);
                    } catch (Exception e) {

                    }
                    String activeSubscriptionSku = appPreference.getActiveSubscriptionSku();
                    if (TextUtils.isEmpty(activeSubscriptionSku)) {
                        activeSubscriptionSku = "";
                    }
                    if (subscriptionPlan != null &&
                            activeSubscriptionPrice < subscriptionPlan.getSubscriptionPrice() &&
                            !activeSubscriptionSku.equalsIgnoreCase(subscriptionPlan.getSku())) {
                        availableUpgradesForUser.add(subscriptionPlan);
                    }
                }
            }

            return !availableUpgradesForUser.isEmpty();
        }
        return false;
    }

    public boolean isActionFacebook(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.LOGIN_FACEBOOK ||
                    actionToActionTypeMap.get(action) == AppCMSActionType.SIGNUP_FACEBOOK;
        }

        return false;
    }

    public boolean isLoginActionFacebook(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.LOGIN_FACEBOOK;
        }
        return false;
    }

    public boolean isSignupActionFacebook(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.SIGNUP_FACEBOOK;
        }
        return false;
    }

    public boolean isActionGoogle(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.LOGIN_GOOGLE ||
                    actionToActionTypeMap.get(action) == AppCMSActionType.SIGNUP_GOOGLE;
        }

        return false;
    }

    String createConversionDataQuery() {
        StringBuilder query = new StringBuilder();
        for (String attrName : getAppsFlyerConversionData().keySet()) {
            if (attrName.contains("campaign") && getAppsFlyerConversionData().get(attrName) != null) {
                query.append("&");
                query.append("campaign");
                query.append("=");
                query.append(getAppsFlyerConversionData().get(attrName));
            }
            if (attrName.contains("media_source") && getAppsFlyerConversionData().get(attrName) != null) {
                query.append("&");
                query.append("campaign_source");
                query.append("=");
                query.append(getAppsFlyerConversionData().get(attrName));
            }
            if (attrName.contains("af_channel") && getAppsFlyerConversionData().get(attrName) != null) {
                query.append("&");
                query.append("campaign_medium");
                query.append("=");
                query.append(getAppsFlyerConversionData().get(attrName));
            }
            if (attrName.contains("af_adset") && getAppsFlyerConversionData().get(attrName) != null) {
                query.append("&");
                query.append("ad_set");
                query.append("=");
                query.append(getAppsFlyerConversionData().get(attrName));
            }
            if (attrName.contains("af_ad") && getAppsFlyerConversionData().get(attrName) != null) {
                query.append("&");
                query.append("ad");
                query.append("=");
                query.append(getAppsFlyerConversionData().get(attrName));
            }
        }
        return query.toString();
    }

    public boolean isActionSignUpGoogle(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.SIGNUP_GOOGLE;
        }
        return false;
    }

    public boolean isActionSignInGoogle(String action) {
        if (!TextUtils.isEmpty(action)) {
            return actionToActionTypeMap.get(action) == AppCMSActionType.LOGIN_GOOGLE;
        }
        return false;
    }

    public void signup(String email, String password, Boolean
            emailConsent, String isEmailConsentPresent, Action1<SignInResponse> signInResponseAction1, Boolean showDialog) {
        if (currentActivity != null /*&& !isUserLoggedIn()*/) {
            String deviceName;
            String platform;
            if (platformType.equals(PlatformType.ANDROID)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            } else {
                if (isFireTVDevice(currentContext)) {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                } else {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                }
            }
            String url = currentActivity.getString(R.string.app_cms_signup_api_url,
                    appCMSMain.getApiBaseUrl(),
                    platform,
                    deviceName,
                    appCMSMain.getInternalName(),
                    getDeviceId(),
                    CommonUtils.getDeviceName());

            if (getAppsFlyerConversionData() != null) {
                url = url + createConversionDataQuery();
            }

            startLoginAsyncTask(url,
                    email,
                    password,
                    emailConsent,
                    isEmailConsentPresent,
                    true,
                    launchType == LaunchType.SUBSCRIBE || (!isUserLoggedIn() && !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())),
                    false,
                    false,
                    false);
        }
    }

    public void refreshSubscriptionData(Action0 onRefreshReadyAction,
                                        boolean reloadUserSubscriptionData) {
        try {
            if (currentActivity != null && isUserLoggedIn()) {
                if (shouldRefreshAuthToken()) {
                    refreshIdentity(appPreference.getRefreshToken(),
                            () -> refreshUserSubscriptionData(onRefreshReadyAction, reloadUserSubscriptionData));
                } else {
                    refreshUserSubscriptionData(onRefreshReadyAction, reloadUserSubscriptionData);
                }
            } else {
                if (onRefreshReadyAction != null) {
                    onRefreshReadyAction.call();
                }
            }
        } catch (Exception e) {
            //Log.e(TAG, "Caught exception when attempting to refresh subscription data: " + e.getMessage());
            if (onRefreshReadyAction != null) {
                onRefreshReadyAction.call();
            }
        }
    }

    private void refreshUserSubscriptionData(Action0 onRefreshReadyAction,
                                             boolean reloadUserSubscriptionData) {
        try {
            /**
             * handling case of when subscription page is null (Not created )
             */
            String subscriptionPageId = subscriptionPage == null ? "/content/pages" : subscriptionPage.getPageId();
            String baseUrl = appCMSMain.getApiBaseUrl();
            String endPoint = subscriptionPageId.equalsIgnoreCase("/content/pages") ? subscriptionPageId : pageIdToPageAPIUrlMap.get(subscriptionPageId);
            //String endPoint = "/content/pages";
            String siteId = appCMSMain.getInternalName();
            boolean usePageIdQueryParam = true;
            boolean viewPlans = true;
            boolean showPage = false;
            List<SubscriptionPlan> subscriptionPlans = new ArrayList<>();

            String apiUrl = getApiUrl(usePageIdQueryParam,
                    viewPlans,
                    showPage,
                    false,
                    null,
                    baseUrl,
                    endPoint,
                    siteId,
                    subscriptionPageId,
                    false);
            getPageIdContent(apiUrl,
                    subscriptionPageId,
                    null,
                    false,
                    false,
                    appCMSPageAPI -> {
                        if (appCMSPageAPI != null) {
                            clearSubscriptionPlans();

                            try {
                                for (Module module : appCMSPageAPI.getModules()) {
                                    if (!TextUtils.isEmpty(module.getModuleType()) &&
                                            module.getModuleType().equals(currentActivity.getString(R.string.app_cms_view_plan_module_key))) {
                                        if (module.getContentData() != null &&
                                                !module.getContentData().isEmpty()) {
                                            for (ContentDatum contentDatum : module.getContentData()) {
                                                SubscriptionPlan subscriptionPlan = new SubscriptionPlan();
                                                subscriptionPlan.setSku(contentDatum.getIdentifier());
                                                subscriptionPlan.setPlanId(contentDatum.getId());
                                                if (contentDatum.getPlanDetails() != null &&
                                                        !contentDatum.getPlanDetails().isEmpty() &&
                                                        contentDatum.getPlanDetails().get(0) != null &&
                                                        !TextUtils.isEmpty(contentDatum.getPlanDetails().get(0).getCountryCode())) {
                                                    subscriptionPlan.setCountryCode(contentDatum.getPlanDetails().get(0).getCountryCode());
                                                }
                                                if (contentDatum.getPlanDetails() != null &&
                                                        !contentDatum.getPlanDetails().isEmpty() &&
                                                        contentDatum.getPlanDetails().get(0) != null) {
                                                    subscriptionPlan.setSubscriptionPrice(contentDatum.getPlanDetails().get(0).getRecurringPaymentAmount());
                                                }
                                                if (contentDatum.getPlanDetails() != null &&
                                                        !contentDatum.getPlanDetails().isEmpty() &&
                                                        contentDatum.getPlanDetails().get(0) != null &&
                                                        contentDatum.getPlanDetails().get(0).getRecurringPaymentCurrencyCode() != null) {
                                                    subscriptionPlan.setRecurringPaymentCurrencyCode(contentDatum.getPlanDetails().get(0).getRecurringPaymentCurrencyCode());
                                                }
                                                subscriptionPlan.setPlanName(contentDatum.getName());
                                                createSubscriptionPlan(subscriptionPlan);
                                                subscriptionPlans.add(subscriptionPlan);
                                            }
                                        }
                                    }
                                }
                            } catch (Exception e) {
                                Log.e(TAG, "Error retrieving subscription information: " + e.getMessage());
                                if (onRefreshReadyAction != null) {
                                    onRefreshReadyAction.call();
                                }
                            }


                        }
                    });

            if (reloadUserSubscriptionData) {
                try {
                    appCMSSubscriptionPlanCall.call(
                            currentActivity.getString(R.string.app_cms_get_current_subscription_api_url,
                                    appCMSMain.getApiBaseUrl(),
                                    appPreference.getLoggedInUser(),
                                    appCMSMain.getInternalName()),
                            R.string.app_cms_subscription_subscribed_plan_key,
                            null,
                            true,
                            apikey,
                            getAuthToken(),
                            listResult -> {
                                //
                            },
                            singleResult -> {
                                //
                            },
                            appCMSSubscriptionPlanResult -> {

                                try {

                                    if (appCMSSubscriptionPlanResult != null) {

                                        if (urbanAirshipEventPresenter.subscriptionAboutToExpire(appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionEndDate())) {
                                            if (platformType.equals(PlatformType.ANDROID)) {
                                                sendUASubscriptionAboutToExpireEvent(appPreference.getLoggedInUser());
                                            }
                                        } else if (isUserSubscribed()) {
                                            if (platformType.equals(PlatformType.ANDROID)) {
                                                sendUASubscribedEvent(appPreference.getLoggedInUser());
                                            }
//                                                        sendUASubscribedMOTV(appPreference.getLoggedInUser());
                                        } else {
                                            if (platformType.equals(PlatformType.ANDROID)) {
                                                sendUAUnsubscribedEvent(appPreference.getLoggedInUser());
                                                /**
                                                 * Add lapsed UA Tagging event here.
                                                 */
                                                sendUAAboutLapsedUser(appPreference.getLoggedInUser());
                                            }
                                        }
                                        if (platformType.equals(PlatformType.ANDROID)) {
                                            sendUASubscriptionEndDateEvent(appPreference.getLoggedInUser(),
                                                    appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionEndDate());
                                            sendUASubscriptionPlanEvent(appPreference.getLoggedInUser(),
                                                    appCMSSubscriptionPlanResult.getSubscriptionInfo().getIdentifier());
                                        }

                                        setUserSubscriptionInfo(appCMSSubscriptionPlanResult.getSubscriptionInfo());
                                        setUserSubscriptionPlanResult(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo());
                                        UserSubscriptionPlan userSubscriptionPlan = new UserSubscriptionPlan();
                                        userSubscriptionPlan.setUserId(appPreference.getLoggedInUser());
                                        String planReceipt = appCMSSubscriptionPlanResult.getSubscriptionInfo().getReceipt();
                                        Receipt receipt = gson.fromJson(planReceipt, Receipt.class);
                                        userSubscriptionPlan.setPlanReceipt(planReceipt);
                                        userSubscriptionPlan.setPaymentHandler(appCMSSubscriptionPlanResult.getSubscriptionInfo().getPaymentHandler());

                                        SubscriptionPlan subscribedPlan = null;
                                        if (subscriptionPlans != null) {
                                            for (SubscriptionPlan subscriptionPlan : subscriptionPlans) {
                                                if (!TextUtils.isEmpty(subscriptionPlan.getSku()) &&
                                                        receipt != null &&
                                                        subscriptionPlan.getSku().equals(receipt.getProductId())) {
                                                    subscribedPlan = subscriptionPlan;
                                                }
                                            }
                                        }

                                        if (subscribedPlan != null) {
                                            appPreference.setActiveSubscriptionSku(subscribedPlan.getSku());
                                            appPreference.setActiveSubscriptionId(subscribedPlan.getPlanId());
                                            appPreference.setActiveSubscriptionPlanName(subscribedPlan.getPlanName());
                                            appPreference.setActiveSubscriptionPrice(String.valueOf(subscribedPlan.getSubscriptionPrice()));
                                            appPreference.setActiveSubscriptionPriceCurrencyCode(subscribedPlan.getRecurringPaymentCurrencyCode());
                                            appPreference.setActiveSubscriptionCountryCode(subscribedPlan.getCountryCode());
                                        } else if (appCMSSubscriptionPlanResult.getSubscriptionPlanInfo() != null &&
                                                appCMSSubscriptionPlanResult.getSubscriptionInfo() != null) {
                                            appPreference.setActiveSubscriptionSku(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getIdentifier());
                                            appPreference.setActiveSubscriptionCountryCode(appCMSSubscriptionPlanResult.getSubscriptionInfo().getCountryCode());
                                            appPreference.setActiveSubscriptionId(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getId());
                                            appPreference.setActiveSubscriptionPlanName(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getName());
                                            String countryCode = appCMSSubscriptionPlanResult.getSubscriptionInfo().getCountryCode();
                                            appPreference.setActiveSubscriptionCountryCode(countryCode);
                                            if (appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getPlanDetails() != null) {
                                                for (PlanDetail planDetail : appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getPlanDetails()) {
                                                    if (appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getPlanDetails().size() > 0) {
                                                        currencyCode = planDetail.getRecurringPaymentCurrencyCode();
                                                        planToPurchasePrice = planDetail.getStrikeThroughPrice();
                                                        appPreference.setActiveSubscriptionPrice(String.valueOf(planDetail.getRecurringPaymentAmount()));
                                                        appPreference.setActiveSubscriptionPriceCurrencyCode(planDetail.getRecurringPaymentCurrencyCode());
                                                        appPreference.setUserSubscriptionPlanTitle(planDetail.getTitle());
                                                    } else if (!TextUtils.isEmpty(planDetail.getRecurringPaymentCurrencyCode()) &&
                                                            planDetail.getCountryCode().equalsIgnoreCase(countryCode)) {
                                                        currencyCode = planDetail.getRecurringPaymentCurrencyCode();
                                                        planToPurchasePrice = planDetail.getStrikeThroughPrice();
                                                        appPreference.setActiveSubscriptionPrice(String.valueOf(planDetail.getRecurringPaymentAmount()));
                                                        appPreference.setUserSubscriptionPlanTitle(planDetail.getTitle());
                                                        appPreference.setActiveSubscriptionPriceCurrencyCode(planDetail.getRecurringPaymentCurrencyCode());
                                                    }
                                                }
                                            }
                                            appPreference.setActiveSubscriptionStatus(appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionStatus());
                                            appPreference.setActiveSubscriptionEndDate(appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionEndDate());
                                            appPreference.setActiveSubscriptionStartDate(appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionStartDate());
                                            //if (useCCAvenue() && !isSubscriptionCompleted()) {
                                            if (!isSubscriptionCompleted()) {
                                                StringBuilder sb = new StringBuilder("Scheduled to be cancelled by ");
                                                String subscriptionEndDate = appCMSSubscriptionPlanResult
                                                        .getSubscriptionInfo()
                                                        .getSubscriptionEndDate();
                                                int timeStampIndex = subscriptionEndDate
                                                        .indexOf("T");
                                                if (0 <= timeStampIndex) {
                                                    sb.append(subscriptionEndDate.substring(0, timeStampIndex));
                                                } else {
                                                    sb.append(subscriptionEndDate);
                                                }
                                                appPreference.setActiveSubscriptionPlanName(sb.toString());
                                            }
                                            //}
                                        }
                                        if (appCMSSubscriptionPlanResult.getSubscriptionPlanInfo() != null) {
                                            appPreference.setActiveSubscriptionPlanCycle(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getRenewalCycleType());
                                            appPreference.setActiveSubscriptionPlanCyclePeriodMultiplier(appCMSSubscriptionPlanResult.getSubscriptionPlanInfo().getRenewalCyclePeriodMultiplier());
                                        }

                                        if (appCMSSubscriptionPlanResult.getSubscriptionInfo() != null) {
                                            String subscriptionStatus = appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionStatus();
                                            String subscriptionEndDate = appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionEndDate();
                                            appPreference.setSubscriptionStatus(subscriptionStatus);

                                            if (!TextUtils.isEmpty(subscriptionStatus) && !TextUtils.isEmpty(subscriptionEndDate)
                                                    && subscriptionStatus.equalsIgnoreCase("COMPLETED") && CommonUtils.isValidSubscription(subscriptionEndDate)) {
                                                appPreference.setIsUserSubscribed(true);
                                            }

                                            appPreference.setActiveSubscriptionPaymentOperator(appCMSSubscriptionPlanResult.getSubscriptionInfo().getPaymentOperator());
                                        }

                                        if (appCMSSubscriptionPlanResult.getSubscriptionInfo() != null &&
                                                !TextUtils.isEmpty(appCMSSubscriptionPlanResult.getSubscriptionInfo().getPaymentHandler())) {
                                            String paymentHandler = appCMSSubscriptionPlanResult.getSubscriptionInfo().getPaymentHandler();

                                            if (CommonUtils.paymentProviders.containsKey(paymentHandler)) {
                                                appPreference.setActiveSubscriptionProcessor(CommonUtils.paymentProviders.get(paymentHandler));
                                            } else {
                                                CommonUtils.paymentProviders.put(paymentHandler, appCMSSubscriptionPlanResult.getSubscriptionInfo().getPaymentHandlerDisplayName());
                                                appPreference.setActiveSubscriptionProcessor(CommonUtils.paymentProviders.get(paymentHandler));
                                            }
                                        }
                                    }

                                    if (isLaunched() && currentActivity instanceof AppCMSPageActivity) {
                                        ((AppCMSPageActivity) currentActivity).checkedFixedBanner();
                                    }

                                    if (onRefreshReadyAction != null) {
                                        onRefreshReadyAction.call();
                                    }
                                } catch (Exception e) {
                                    //Log.e(TAG, "refreshSubscriptionData: " + e.getMessage());
                                    if (onRefreshReadyAction != null) {
                                        onRefreshReadyAction.call();
                                    }
                                }
                            }, errorResponse -> {

                            }
                    );
                } catch (Exception e) {
                    Log.e(TAG, "refreshSubscriptionData: " + e.getMessage());
                    if (onRefreshReadyAction != null) {
                        onRefreshReadyAction.call();
                    }
                }
            }
        } catch (Exception e) {
            //Log.e(TAG, "refreshSubscriptionData: " + e.getMessage());
            Log.e(TAG, "Caught exception when attempting to refresh subscription data: " + e.getMessage());
            if (onRefreshReadyAction != null) {
                onRefreshReadyAction.call();
            }
        }
    }

    private boolean checkForSubscriptionCancellation(AppCMSUserSubscriptionPlanResult
                                                             appCMSSubscriptionPlanResult) {
        try {
            ZonedDateTime nowTime = ZonedDateTime.now(UTC_ZONE_ID);
            ZonedDateTime subscriptionEndTime = ZonedDateTime.from(DateTimeFormatter.ofPattern(SUBSCRIPTION_DATE_FORMAT).
                    parse(appCMSSubscriptionPlanResult.getSubscriptionInfo().getSubscriptionEndDate()));
            return subscriptionEndTime.toEpochSecond() < nowTime.toEpochSecond();
        } catch (Exception e) {

        }
        return false;
    }

    public void refreshPageAPIData(AppCMSPageUI appCMSPageUI,
                                   String pageId,
                                   List<String> modules,
                                   Action1<AppCMSPageAPI> appCMSPageAPIReadyAction) {
        if (appCMSPageUI != null) {
            String baseUrl = appCMSMain.getApiBaseUrl();
            String endPoint = pageIdToPageAPIUrlMap.get(pageId);
            String siteId = appCMSMain.getInternalName();
            boolean usePageIdQueryParam = true;
            boolean viewPlans = isViewPlanPage(pageId);
            boolean showPage = isShowPage(pageId);
            boolean categoryPage = isCategoryPage(pageId);
            String apiUrl = getApiUrl(usePageIdQueryParam,
                    viewPlans,
                    showPage,
                    categoryPage,
                    null,
                    baseUrl,
                    endPoint,
                    siteId,
                    getPageId(appCMSPageUI),
                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled());
            getPageViewLruCache().remove(pageId);
            getPageIdContent(apiUrl,
                    getPageId(appCMSPageUI),
                    modules,
                    appCMSPageUI.getCaching() != null && !appCMSPageUI.getCaching().shouldOverrideCaching() && appCMSPageUI.getCaching().isEnabled(),
                    false,
                    appCMSPageAPIReadyAction);
        }
    }

    private void login(String email, String password) {
        if (currentActivity != null) {
            showLoader();
            String deviceName;
            String platform;
            if (platformType.equals(PlatformType.ANDROID)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            } else {
                if (isFireTVDevice(currentContext)) {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                } else {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                }
            }
            String url = currentActivity.getString(R.string.app_cms_signin_api_url,
                    appCMSMain.getApiBaseUrl(),
                    platform,
                    deviceName,
                    appCMSMain.getInternalName(),
                    getDeviceId(),
                    CommonUtils.getDeviceName());

            startLoginAsyncTask(url,
                    email,
                    password,
                    false,
                    "N",
                    false,
                    (!isUserLoggedIn() && !TextUtils.isEmpty(appPreference.getRestoreSubscriptionReceipt())),
                    false,
                    false,
                    true);
        }
    }

    /**
     * Validate redemption and offer code
     *
     * @param redemptionCode - input by user
     * @author Wishy
     */
    private void validateRedemptionCode(String redemptionCode) {
        if (currentActivity != null) {
            showLoader();
            String url = currentActivity.getString(R.string.app_cms_validate_redemption_code_api_url,
                    appCMSMain.getApiBaseUrl(),
                    appCMSMain.getInternalName(),
                    getLanguageParamForAPICall());
            if (appCMSMain.isMonetizationModelEnabled())
                validateOfferRemption(redemptionCode, null, null);
            else
                validateRedemptionCodeAsyncTask(url,
                        redemptionCode);
        }
    }

    public String getDeviceName() {
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        if (model.toLowerCase().startsWith(manufacturer.toLowerCase())) {
            return capitalize(model);
        } else {
            return capitalize(manufacturer) + " " + model;
        }
    }


    private String capitalize(String s) {
        if (s == null || s.length() == 0) {
            return "";
        }
        char first = s.charAt(0);
        if (Character.isUpperCase(first)) {
            return s;
        } else {
            return Character.toUpperCase(first) + s.substring(1);
        }
    }

    public void callRefreshIdentity(Action0 onReadyAction) {
        if (currentActivity != null && appCMSMain != null) {
            if (!shouldRefreshAuthToken() && onReadyAction != null) {
                onReadyAction.call();
                return;
            }
            refreshIdentity(appPreference.getRefreshToken(), onReadyAction);
        }
    }

    public LaunchType getLaunchType() {
        return launchType;
    }

    public void setLaunchType(LaunchType launchType) {
        this.launchType = launchType;
    }

    @SuppressWarnings("unused")
    private RealmList<SubscriptionPlan> getAvailableUpgradePlans
            (RealmResults<SubscriptionPlan> availablePlans) {
        RealmList<SubscriptionPlan> availableUpgrades = new RealmList<>();
        if (currentActivity != null && availablePlans != null) {
            double existingSubscriptionPrice = parseActiveSubscriptionPrice();
            String existingSku = appPreference.getActiveSubscriptionSku();

            if (existingSubscriptionPrice == 0.0) {
                existingSubscriptionPrice = parseExistingGooglePlaySubscriptionPrice();
            }

            if (existingSubscriptionPrice != 0.0) {
                for (SubscriptionPlan subscriptionPlan : availablePlans) {
                    if (existingSubscriptionPrice < subscriptionPlan.getSubscriptionPrice() &&
                            (TextUtils.isEmpty(existingSku)) ||
                            (!TextUtils.isEmpty(existingSku) && !existingSku.equals(subscriptionPlan.getSku()))) {
                        availableUpgrades.add(subscriptionPlan);
                    }
                }
            }
        }
        return availableUpgrades;
    }

    @SuppressWarnings("unused")
    private void refreshGoogleAccessToken
            (Action1<GoogleRefreshTokenResponse> readyAction) {
        if (currentActivity != null) {
            googleRefreshTokenCall.refreshTokenCall(currentActivity.getString(R.string.google_authentication_refresh_token_api),
                    currentActivity.getString(R.string.google_authentication_refresh_token_api_grant_type),
                    currentActivity.getString(R.string.google_authentication_refresh_token_api_client_id),
                    currentActivity.getString(R.string.google_authentication_refresh_token_api_client_secret),
                    currentActivity.getString(R.string.google_authentication_refresh_token_api_refresh_token),
                    readyAction);
        }
    }


    private void startPhoneOTPAsyncTask(PhoneObjectRequest phoneObjectRequest, final Consumer<String> call) {

        if (currentActivity != null) {
            String url;
            String deviceName;
            String platform;
            if (platformType.equals(PlatformType.ANDROID)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            } else {
                if (isFireTVDevice(currentContext)) {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                } else {
                    deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                    platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                }
            }
            switch (phoneObjectRequest.getScreenName()) {
                case "signup":
                    url = currentActivity.getString(R.string.app_cms_signup_api_url,
                            appCMSMain.getApiBaseUrl(),
                            platform,
                            deviceName,
                            appCMSMain.getInternalName(),
                            getDeviceId(),
                            CommonUtils.getDeviceName());
                    break;
                case "login":
                    url = currentActivity.getString(R.string.app_cms_signin_api_url,
                            appCMSMain.getApiBaseUrl(),
                            platform,
                            deviceName,
                            appCMSMain.getInternalName(),
                            getDeviceId(),
                            CommonUtils.getDeviceName());

                    break;
                case "update":
                    url = currentActivity.getString(R.string.app_cms_update_api_url,
                            appCMSMain.getApiBaseUrl(),
                            platform,
                            deviceName,
                            appCMSMain.getInternalName(),
                            getDeviceId(),
                            appPreference != null && appPreference.getLoggedInUser() != null ? appPreference.getLoggedInUser() : " ");
                    phoneObjectRequest.setRequestType("send");
                    break;
                default:
                    return;
            }

            phoneObjectRequest.setUrl(url);
            PostAppCMSLoginRequestAsyncTask.Params params = new PostAppCMSLoginRequestAsyncTask.Params
                    .Builder()
                    .url(url)
                    .authToken(getAuthToken())
                    .appCMSPresenter(this)
                    .email(phoneObjectRequest.getEmail())
                    .name(Strings.isEmptyOrWhitespace(phoneObjectRequest.getName()) ? phoneObjectRequest.getName() : "")
                    .phoneValue(phoneObjectRequest.getPhone())
                    .requestType(phoneObjectRequest.getRequestType())
                    .screenName(phoneObjectRequest.getScreenName())
                    .build();
            new PostAppCMSLoginRequestAsyncTask(appCMSSignInCall,
                    signInResponse -> {
                        try {
                            String loginText = localisedStrings.getSignInText();

                            if (!TextUtils.isEmpty(signInResponse.getMessage()) || signInResponse.isErrorResponseSet()) {
                                String message = signInResponse.getErrorResponse().getError();
                                if (phoneObjectRequest.getMetadataMap() != null && signInResponse.getErrorResponse().getCode() != null) {
                                    message = (String) convertClassToMap(phoneObjectRequest.getMetadataMap()).get(signInResponse.getErrorResponse().getCode());
                                }
                                if (message == null)
                                    message = signInResponse.getErrorResponse().getError();
                                if (phoneObjectRequest.getMetadataMap() != null) {
                                    showDialog(DialogType.SIGNIN, (String) convertClassToMap(phoneObjectRequest.getMetadataMap()).get(signInResponse.getErrorResponse().getCode()), false, null, null, loginText);
                                } else {
                                    showDialog(DialogType.SIGNIN, message, false, null, null, " ");
                                }
                                if (call != null) {
                                    call.accept("enable");
                                }
                                stopLoader();
                            } else {
                                if (call != null) {
                                    call.accept("dismiss");
                                }
                                stopLoader();
                                new Handler().postDelayed(() -> {
                                    stopLoader();
                                    FragmentTransaction fragmentTransaction = currentActivity.getSupportFragmentManager().beginTransaction();
                                    fragmentTransaction.add(VerifyOTPPhoneFragment.newInstance(currentActivity, phoneObjectRequest), "VerifyOTPPhoneFragment");
                                    fragmentTransaction.commitAllowingStateLoss();
                                }, 100);
                            }
                        } catch (Throwable e) {
                            e.printStackTrace();
                        }
                    }, apikey).execute(params);
        }
    }


    private void startLoginAsyncTask(String url,
                                     String email,
                                     String password,
                                     Boolean emailConsent,
                                     String isEmailConsentPresent,
                                     boolean signup,
                                     boolean followWithSubscription,
                                     boolean suppressErrorMessages,
                                     boolean forceSubscribed,
                                     boolean refreshSubscriptionData) {


        PostAppCMSLoginRequestAsyncTask.Params params = new PostAppCMSLoginRequestAsyncTask.Params
                .Builder()
                .url(url)
                .authToken(getAuthToken())
                .email(email)
                .appCMSPresenter(this)
                .password(password)
                .isEmailConsentPresent(isEmailConsentPresent)
                .tveId(appPreference.getTVEUserId())
                .emailConsent(signup ? emailConsent : null)
                .amazonUserId(signup && Utils.isFireTVDevice(getCurrentContext()) ? amazonUserId : null)
                .build();

        new PostAppCMSLoginRequestAsyncTask(appCMSSignInCall,
                signInResponse -> {
                    //Log.v("anonymousToken", getAnonymousUserToken());

                    try {
                        String loginText = localisedStrings.getSignInText();
                        String signupText = localisedStrings.getSignUpText();
                        if (signInResponse == null) {
                            // Show log error
                            //Log.e(TAG, "Email and password are not valid.");
                            if (!suppressErrorMessages) {
                                if (signup) {
                                    showDialog(DialogType.SIGNUP_PASSWORD_INVALID, getLanguageResourcesFile().getUIresource(currentActivity.getString(
                                            R.string.app_cms_error_user_already_exists)), false, null, null, signupText);
                                } else {
                                    showDialog(DialogType.SIGNIN, getLanguageResourcesFile().getUIresource(currentActivity.getString(
                                            R.string.app_cms_error_email_password)), false, null, null, loginText);
                                }

                            }
                            stopLoader();
                        } else if (!TextUtils.isEmpty(signInResponse.getMessage()) || signInResponse.isErrorResponseSet()) {
                            if (platformType == PlatformType.TV) {
                                stopLoader();
                                try {
                                    String message = signInResponse.getErrorResponse().getError();
                                    if (getModuleApi() != null
                                            && moduleApi.getMetadataMap() != null
                                            && signInResponse.getErrorResponse().getCode() != null
                                            && convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()) != null) {
                                        message = (String) convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode());
                                    }
                                    openTVErrorDialog(message,
                                            signup ? getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_signup)).toUpperCase() :
                                                    getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_login)).toUpperCase(), false);
                                } catch (Exception e) {
                                    Log.e(TAG, "DialogType launching TV DialogType Activity");
                                }
                            } else {
                                if (signInResponse.getErrorResponse().getError() != null) {
                                    if (signup) {
                                        if (getModuleApi() != null && getModuleApi().getMetadataMap() != null && convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()) != null)
                                            showDialog(DialogType.SIGNUP, (String) convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()), false, null, null, signupText);
                                        else
                                            showDialog(DialogType.SIGNUP, signInResponse.getErrorResponse().getError(), false, null, null, signupText);
                                    } else {
                                        if (getModuleApi() != null && getModuleApi().getMetadataMap() != null && convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()) != null)
                                            showDialog(DialogType.SIGNIN, (String) convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()), false, null, null, loginText);
                                        else
                                            showDialog(DialogType.SIGNIN, signInResponse.getErrorResponse().getError(), false, null, null, loginText);
                                    }
                                    stopLoader();
                                }
                            }

//                            stopLoader();
                        } else {
//                            String signResponseValue = gson.toJson(signInResponse, SignInResponse.class);
                            //Log.d(TAG, "Sign in response value: " + signResponseValue);
                            appPreference.setLoggedInUserPhone(signInResponse.getPhoneNumber());
                            appPreference.setRefreshToken(signInResponse.getRefreshToken());
                            appPreference.setAuthToken(signInResponse.getAuthorizationToken());
                            setLoggedInUser(signInResponse.getUserId());
                            //Log.d(TAG, "Sign in user ID response: " + signInResponse.getUserId());

                            appPreference.setLoggedInUserName(signInResponse.getName());
                            appPreference.setLoggedInUserEmail(signInResponse.getEmail());
                            appPreference.setLoggedInUserPassword(password);
                            appPreference.setLoginType(currentActivity.getString(R.string.login_type_email));
                            //Log.d(TAG, "Initiating subscription purchase");
                            if (launchType == LaunchType.VIEWING_RESTRICTIONS_VIEW || launchType == LaunchType.VIDEO_PIN_VIEW) {
                                sendCloseOthersAction(null, true, true);
                                if (launchType == LaunchType.VIEWING_RESTRICTIONS_VIEW) {
                                    if (appPreference != null && !TextUtils.isEmpty(appPreference.getParentalPin())) {
                                        navigateToViewingRestrictionsPage();
                                    } else {
                                        launchType = LaunchType.VIEWING_RESTRICTIONS_FROM_VIDEO_PIN_VIEW;
                                        navigateToChangeVideoPinPage();
                                    }
                                } else {
                                    navigateToChangeVideoPinPage();
                                }
                                return;
                            }

                            firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
                            if (followWithSubscription) {
                                isSignupFromFacebook = false;
                                isSignupFromGoogle = false;
                                subscriptionUserEmail = email;
                                subscriptionUserPassword = password;
                            }

                            setSignupFlag(signup);

                            GetSocialHelper.onLoginSuccess(appPreference);

                            finalizeLogin(forceSubscribed,
                                    signInResponse.isSubscribed(),
                                    followWithSubscription,
                                    refreshSubscriptionData);


                            senduserProfileEvent();
                            appPreference.setRegistrationType("native");
                            if (signup) {

                                if (getTemplateType() == AppCMSPresenter.TemplateType.NEWS && getPlatformType() == PlatformType.ANDROID) {
                                    showPersonalizationscreenIfEnabled(false, true);
                                }
                                if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                                    AppsFlyerUtils.registrationEvent(this, currentActivity, signInResponse.getUserId(),
                                            appPreference.getAppsFlyerKey());
                                    AppsFlyerUtils.setEventRegistrationComplete(AppCMSPresenter.this);
                                }
                                if (!isAmazonPurchaseInitiated() && isPersonalizationEnabled()) {
                                    if (isRecommendationOnlyForSubscribedEnabled()) {
                                        if (isUserSubscribed()) {
                                            openRecommendationDialog(false);
                                        }
                                    } else {
                                        openRecommendationDialog(false);
                                    }
                                }
                                sendSignUpEvent("native");
                            } else {
                                sendLoginEvent("native");
                                AppsFlyerUtils.loginEvent(AppCMSPresenter.this);
                                if (isMobileUpdateRequired(this, signInResponse.getPhoneNumber()) && platformType == PlatformType.ANDROID) {
                                    new Handler().postDelayed(() -> openMobileUpdationScreen(), 1000);
                                }
                            }
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                        e.printStackTrace();
                        stopLoader();
                    }
                }, apikey).execute(params);
    }

    public void openMobileUpdationScreen() {
        Fragment fragment = getCurrentActivity().getSupportFragmentManager().findFragmentByTag("PhoneUpdationLoginFragment");
        if (fragment == null) {
            phoneObjectRequest.setEmail(null);
            phoneObjectRequest.setName(null);
            phoneObjectRequest.setFromVerify(true);
            FragmentTransaction fragmentTransaction = getCurrentActivity().getSupportFragmentManager().beginTransaction();
            fragmentTransaction.add(PhoneUpdationLoginFragment.newInstance(getCurrentActivity(), phoneObjectRequest, true), "PhoneUpdationLoginFragment");
            fragmentTransaction.commitAllowingStateLoss();
        }
    }

    public void startLoginTVEAsyncTask(String userIdTVE, TVProvider provider) {
        showLoader();
        String url = getCurrentActivity().getString(R.string.app_cms_tve_login_api_url,
                appCMSMain.getApiBaseUrl(), getDeviceValueForAPI(),
                appCMSMain.getInternalName(), getPlatformValueForAPI(),
                getDeviceId(),
                getDeviceName());
        String userId = userIdTVE;
        if (appPreference.getLoggedInUser() != null)
            userId = appPreference.getLoggedInUser();
        PostAppCMSLoginRequestTVEAsyncTask.Params params = new PostAppCMSLoginRequestTVEAsyncTask.Params
                .Builder()
                .url(url)
                .userId(userId)
                .tveUserId(userIdTVE)
                .provider(provider.getName())
                .idpLogo(provider.getImages().getImageUrl())
                .idpName(provider.getDisplayName())
                .resourceIds(provider.getResourceIds())
                .build();

        new PostAppCMSLoginRequestTVEAsyncTask(appCMSSignInCall,
                signInResponse -> {
                    stopLoader();
                    //Log.v("anonymousToken", getAnonymousUserToken());

                    try {
                        String loginText = localisedStrings.getSignInText();
                        if (signInResponse == null) {
                            stopLoader();
                        } else if (!TextUtils.isEmpty(signInResponse.getMessage()) || signInResponse.isErrorResponseSet()) {
                            if (platformType == PlatformType.TV) {
                                stopLoader();
                                openTVErrorDialog(signInResponse.getErrorResponse().getError(),
                                        getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_login)).toUpperCase(), false);

                            } else {
                                if (signInResponse.getErrorResponse().getError() != null) {
                                    if (getModuleApi() != null && getModuleApi().getMetadataMap() != null && convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()) != null)
                                        showDialog(DialogType.SIGNIN, (String) convertClassToMap(getModuleApi().getMetadataMap()).get(signInResponse.getErrorResponse().getCode()), false, null, null, loginText);
                                    else
                                        showDialog(DialogType.SIGNIN, signInResponse.getErrorResponse().getError(), false, null, null, loginText);
                                    stopLoader();
                                }
                            }
                        } else {
                            appPreference.setTVEUserId(userIdTVE);
                            appPreference.setRefreshToken(signInResponse.getRefreshToken());
                            appPreference.setAuthToken(signInResponse.getAuthorizationToken());
                            appPreference.setTvProvider(provider.getDisplayName());
                            setLoggedInUser(signInResponse.getUserId());
                            appPreference.setLoggedInUserName(signInResponse.getName());
                            appPreference.setLoggedInUserEmail(signInResponse.getEmail());
                            appPreference.setTVEUserLoggedInTime();
                            appPreference.setUserAuthProviderName(signInResponse.getProvider());
                            loginFromProvider = true;
                            finalizeLogin(false,
                                    signInResponse.isSubscribed(),
                                    false,
                                    true);
                            sendRefreshPageAction();
                            senduserProfileEvent();
                            sendLoginEvent("TVE");
                            AppsFlyerUtils.loginEvent(AppCMSPresenter.this);
                        }
                    } catch (Exception e) {
                        //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                        stopLoader();
                    }
                }, apikey).execute(params);
    }

    public void updateTVEAsyncTask(boolean authorized) {
        if (authorized) {
            verimatrixBounceAction.call(true);
            return;
        }
        showLoader();
        String url = getCurrentActivity().getString(R.string.app_cms_tve_sign_out_api_url,
                appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName());
        appCMSSignInCall.signoutTVE(url, apikey, getAuthToken(), new Action1<SignInResponse>() {
            @Override
            public void call(SignInResponse signInResponse) {
                stopLoader();
                appPreference.setTVEUserId(null);
            }
        });
    }

    private String getTransactionValue() {
        String platform = currentContext.getResources().getStringArray(R.array.platform)[0];
        if (platformType == PlatformType.TV) {
            platform = "amazon-iap";
        }
        return platform;
    }

    private String getPlatformValueForAPI() {
        String platform = currentContext.getResources().getStringArray(R.array.platform)[0];
        if (platformType == PlatformType.TV) {
            platform = currentContext.getResources().getStringArray(R.array.platform)[1];
        }
        return platform;
    }

    private String getDeviceValueForAPI() {
        String device = currentContext.getResources().getStringArray(R.array.device_type)[0];
        if (BaseView.isTablet(currentContext))
            device = currentContext.getResources().getStringArray(R.array.device_type)[1];
        if (platformType == PlatformType.TV) {
            device = currentContext.getResources().getStringArray(R.array.device_type)[2];
        }
        return device;
    }

    public void updateUserEmail(String email) {
        String url = currentActivity.getString(R.string.app_cms_signup_api_url,
                appCMSMain.getApiBaseUrl(), getPlatformValueForAPI(), getDeviceValueForAPI(),
                appCMSMain.getInternalName(),
                getDeviceId(),
                CommonUtils.getDeviceName());
        appCMSSignInCall.updateEmail(url, email, apikey, getAuthToken(), signInResponse -> {
            if (signInResponse != null) {
                appPreference.setLoggedInUserEmail(signInResponse.getEmail());
            } else {
                appPreference.setLoggedInUserEmail(email);
            }
        });
    }

    public void verimatrixContentAuthorization(boolean authorized) {
        if (authorized)
            verimatrixResourceAccessAction.call(true);

    }


    public void openRecommendationDialog(boolean isUserSettingPage) {
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                Intent args = new Intent(AppCMSPresenter.RECOMMENDATION_DIALOG_FRAGMENT_TAG);
                args.putExtra(currentActivity.getString(R.string.tv_generic_dialog_key), isUserSettingPage);
                currentActivity.sendBroadcast(args);
                setAmazonPurchaseInitiated(false);
            }
        }, 1000);
    }

    public boolean isRecommendationEnabled() {
        return getAppCMSMain() != null &&
                getAppCMSMain().getRecommendation() != null &&
                getAppCMSMain().getRecommendation().isRecommendation() &&
                getAppCMSMain().getRecommendation().getRecommendCategories() != null &&
                getAppCMSMain().getRecommendation().getRecommendCategories().size() > 0;
    }

    public boolean isPersonalizationEnabled() {
        return getAppCMSMain().getRecommendation() != null &&
                getAppCMSMain().getRecommendation().isPersonalization() &&
                getAppCMSMain().getRecommendation().getRecommendCategories() != null &&
                getAppCMSMain().getRecommendation().getRecommendCategories().size() > 0;
    }

    public boolean isRecommendationOnlyForSubscribedEnabled() {
        return getAppCMSMain().getRecommendation() != null &&
                getAppCMSMain().getRecommendation().isSubscribed();
    }

    /**
     * Validate and redeem offer code
     *
     * @param redemptionCode - input by user
     * @author Wishy
     */
    private void validateOfferRemption(String redemptionCode, String contentType, String permalink) {

        TextView errorText = currentActivity.findViewById(R.id.redemption_error_text_id);

        if (errorText != null) {
            errorText.setVisibility(View.VISIBLE);
            errorText.setText("");
        }

        if (isValidRedemptionCode) {
            PostAppCMSRedeemRequestAsyncTask.Params params = new PostAppCMSRedeemRequestAsyncTask.Params
                    .Builder()
                    .url(currentActivity.getString(R.string.app_cms_redeem_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(),
                            getLanguageParamForAPICall()))
                    .redemptionCode(redemptionCode)
                    .site(appCMSMain.getInternalName())
                    .platform(platformType == PlatformType.ANDROID ? "ANDROID" : "FIRETV")
                    .siteId(Utils.getProperty("SiteId", currentActivity))
                    .transaction("prepaid")
                    .userId(appPreference.getLoggedInUser())
                    .purchaseType("PURCHASE")
                    .currencyCode("USD")
                    .build();
            new PostAppCMSRedeemRequestAsyncTask(appCMSRedeemCall,
                    redeemApiResponse -> {
                        try {
                            if (redeemApiResponse == null) {
                                if (errorText != null)
                                    errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                                stopLoader();
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getError())) {
                                if (redeemApiResponse.getErrorResponse().getError() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getError().trim());
                                    stopLoader();
                                }
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getMessage())) {
                                if (redeemApiResponse.getErrorResponse().getMessage() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getMessage().trim());
                                    stopLoader();
                                }
                            } else {
                                if (redeemApiResponse.getStatus() == null) {
                                    if (errorText != null)
                                        errorText.setText(currentActivity.getString(R.string.enter_valid_coupon_code));
                                    stopLoader();
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("success")) {
                                    getUserData(new Action1<UserIdentity>() {
                                        @Override
                                        public void call(UserIdentity userIdentity) {
                                            appPreference.setCoupanCode(redemptionCode);
                                            stopLoader();
                                            if (platformType == PlatformType.ANDROID) {
                                                String action = currentContext.getString(R.string.app_cms_action_detailvideopage_key);
                                                if (contentType.toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.app_cms_series_content_type).toLowerCase()))
                                                    action = currentContext.getString(R.string.app_cms_action_showvideopage_key);
                                                if (contentType.toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.content_type_bundle).toLowerCase()))
                                                    action = currentContext.getString(R.string.app_cms_action_detailbundlepage_key);
                                                if (permalink != null)
                                                    launchButtonSelectedAction(permalink, action, null, null, null, false, 0, null);
                                                else
                                                    navigateToLibraryPage(getLibraryPage().getPageId(), getLibraryPage().getPageName(), false, false);
                                            } else {
                                                openTVGenericDialog(currentActivity.getString(R.string.app_cms_code_redemption_header),
                                                        currentActivity.getString(R.string.app_cms_code_redemption_success),
                                                        null, getLocalisedStrings().getOkText(), null, null);
                                            }
                                        }
                                    });


                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                            stopLoader();
                            if (errorText != null)
                                errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                        }
                    }, apikey, getAuthToken()).redeemCoupon(params);
        } else {
            PostAppCMSRedeemRequestAsyncTask.Params params = new PostAppCMSRedeemRequestAsyncTask.Params
                    .Builder()
                    .url(currentActivity.getString(R.string.app_cms_validate_offer_code_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(),
                            getLanguageParamForAPICall()))
                    .redemptionCode(redemptionCode)
                    .build();

            new PostAppCMSRedeemRequestAsyncTask(appCMSRedeemCall,
                    redeemApiResponse -> {
                        try {
                            if (redeemApiResponse == null) {
                                if (errorText != null)
                                    errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                                stopLoader();
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getError())) {
                                if (redeemApiResponse.getErrorResponse().getError() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getError().trim());
                                    stopLoader();
                                }
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getMessage())) {
                                if (redeemApiResponse.getErrorResponse().getMessage() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getMessage().trim());
                                    stopLoader();
                                }
                            } else {
                                if (redeemApiResponse.getStatus() == null) {
                                    if (errorText != null)
                                        errorText.setText(currentActivity.getString(R.string.enter_valid_coupon_code));
                                    stopLoader();
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("UNEXPIRED")) {
                                    isValidRedemptionCode = true;
                                    validateOfferRemption(redemptionCode, redeemApiResponse.getContentType(), redeemApiResponse.getPermalink());
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("success")) {
                                    if (platformType == PlatformType.ANDROID) {
                                        showRedemptionDialog("Success!", getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.redeem_successfully)));
                                    }
                                    if (platformType == PlatformType.TV) {
                                        openTVGenericDialog(currentActivity.getString(R.string.app_cms_code_redemption_header),
                                                currentActivity.getString(R.string.app_cms_code_redemption_success),
                                                null, getLocalisedStrings().getOkText(), null, null);
                                    }
                                    stopLoader();
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                            stopLoader();
                            if (errorText != null)
                                errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                        }
                    }, apikey, getAuthToken()).validateOffer(params);
        }
    }

    /**
     * Validate and redeem redemption code
     *
     * @param redemptionCode - input by user
     * @author Wishy
     * @deprecated use {@link #validateOfferRemption(String, String, String)}
     */
    @Deprecated
    private void validateRedemptionCodeAsyncTask(String url,
                                                 String redemptionCode) {
        PostAppCMSRedeemRequestAsyncTask.Params params = null;

        TextView errorText = currentActivity.findViewById(R.id.redemption_error_text_id);

        if (errorText != null) {
            errorText.setVisibility(View.VISIBLE);
            errorText.setText("");
        }

        if (isValidRedemptionCode) {
            params = new PostAppCMSRedeemRequestAsyncTask.Params
                    .Builder()
                    .url(url)
                    .redemptionCode(redemptionCode)
                    .site(appCMSMain.getInternalName())
                    .platform(platformType == PlatformType.ANDROID ? "ANDROID" : "FIRETV")
                    .siteId(Utils.getProperty("SiteId", currentActivity))
                    .transaction("prepaid")
                    .userId(appPreference.getLoggedInUser())
                    .purchaseType("PURCHASE")
                    .currencyCode("USD")
                    .build();
            new PostAppCMSRedeemRequestAsyncTask(appCMSRedeemCall,
                    redeemApiResponse -> {
                        try {
                            if (redeemApiResponse == null) {
                                if (errorText != null)
                                    errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                                stopLoader();
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getError())) {
                                if (redeemApiResponse.getErrorResponse().getError() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getError().trim());
                                    stopLoader();
                                }
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getMessage())) {
                                if (redeemApiResponse.getErrorResponse().getMessage() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getMessage().trim());
                                    stopLoader();
                                }
                            } else {
                                if (redeemApiResponse.getStatus() == null) {
                                    if (errorText != null)
                                        errorText.setText(currentActivity.getString(R.string.enter_valid_coupon_code));
                                    stopLoader();
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("success")) {
                                    getUserData(new Action1<UserIdentity>() {
                                        @Override
                                        public void call(UserIdentity userIdentity) {
                                            stopLoader();
                                            if (platformType == PlatformType.ANDROID) {
                                                navigateToLibraryPage(getLibraryPage().getPageId(), getLibraryPage().getPageName(), false, false);
                                            } else {
                                                openTVGenericDialog(currentActivity.getString(R.string.app_cms_code_redemption_header),
                                                        currentActivity.getString(R.string.app_cms_code_redemption_success),
                                                        null, getLocalisedStrings().getOkText(), null, null);
                                            }
                                        }
                                    });

                                    appPreference.setCoupanCode(redemptionCode);
                                    stopLoader();
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                            stopLoader();
                            if (errorText != null)
                                errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                        }
                    }, apikey, getAuthToken()).redeemCoupon(params);
        } else {
            params = new PostAppCMSRedeemRequestAsyncTask.Params
                    .Builder()
                    .url(url)
                    .redemptionCode(redemptionCode)
                    .build();

            new PostAppCMSRedeemRequestAsyncTask(appCMSRedeemCall,
                    redeemApiResponse -> {
                        try {
                            if (redeemApiResponse == null) {
                                if (errorText != null)
                                    errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                                stopLoader();
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getError())) {
                                if (redeemApiResponse.getErrorResponse().getError() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getError().trim());
                                    stopLoader();
                                }
                            } else if (redeemApiResponse.getErrorResponse() != null && !TextUtils.isEmpty(redeemApiResponse.getErrorResponse().getMessage())) {
                                if (redeemApiResponse.getErrorResponse().getMessage() != null) {
                                    if (errorText != null)
                                        errorText.setText(redeemApiResponse.getErrorResponse().getMessage().trim());
                                    stopLoader();
                                }
                            } else {
                                if (redeemApiResponse.getStatus() == null) {
                                    if (errorText != null)
                                        errorText.setText(currentActivity.getString(R.string.enter_valid_coupon_code));
                                    stopLoader();
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("UNEXPIRED")) {
                                    isValidRedemptionCode = true;
                                    validateRedemptionCodeAsyncTask(currentActivity.getString(R.string.app_cms_redeem_api_url,
                                            appCMSMain.getApiBaseUrl(),
                                            appCMSMain.getInternalName(),
                                            getLanguageParamForAPICall()), redemptionCode);
                                } else if (redeemApiResponse.getStatus().equalsIgnoreCase("success")) {
                                    if (platformType == PlatformType.ANDROID) {
                                        showRedemptionDialog("Success!", getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.redeem_successfully)));
                                    }
                                    if (platformType == PlatformType.TV) {
                                        openTVGenericDialog(currentActivity.getString(R.string.app_cms_code_redemption_header),
                                                currentActivity.getString(R.string.app_cms_code_redemption_success),
                                                null, getLocalisedStrings().getOkText(), null, null);
                                    }
                                    stopLoader();
                                }
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving sign in response: " + e.getMessage());
                            stopLoader();
                            if (errorText != null)
                                errorText.setText(getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.enter_valid_coupon_code)));
                        }
                    }, apikey, getAuthToken()).validateCoupon(params);
        }
    }


    private Context getCurrentActiveContext() {
        return currentActivity == null ? currentContext : currentActivity;
    }

    public String getStringDataById(Context context, int id) {
        context = context == null ? currentActivity == null ? currentContext : currentActivity : context;
        if (context != null) {
            if (Build.VERSION.SDK_INT >= 23) {
                return context.getString(id);
            } else {
                return context.getResources().getString(id);
            }
        } else
            return "";
    }

    public void setLoginFromProvider(boolean loginFromProvider) {
        this.loginFromProvider = loginFromProvider;
    }

    boolean loginFromProvider;
    boolean waysToWatchScreenShown;
    boolean billlingOptionsShown = false;

    public void setBilllingOptionsShown(boolean billlingOptionsShown) {
        this.billlingOptionsShown = billlingOptionsShown;
    }

    boolean isSubscritionUpated = false;

    private void finalizeLogin(boolean forceSubscribed,
                               boolean isUserSubscribed,
                               boolean followWithSubscription,
                               boolean refreshSubscriptionData) {
        new Handler(Looper.getMainLooper()).post(() -> {
            showLoader();
        });
        if (getPlatformType().equals(PlatformType.ANDROID)) {
            sendUALoggedInEvent(appPreference.getLoggedInUser());
        }
        if (forceSubscribed) {
            appPreference.setIsUserSubscribed(true);
        } else {
            appPreference.setIsUserSubscribed(isUserSubscribed);
        }

        setTempEmail("");
        setTempPassword("");
//        clearVideoPlayerViewCache();
        //Log.d(TAG, "checkForExistingSubscription()");
        checkForExistingSubscription(false);
        if (platformType == PlatformType.ANDROID) {
            if (getCurrentActivity() instanceof AppCMSPageActivity) {
                ((AppCMSPageActivity) getCurrentActivity()).isFromLogin = true;
            }
            isFromSignInPageSuccess = true;
        }

        populateUserHistoryData();
        if (appPreference != null) {
            appPreference.setbrowserLocalStorage(false);
            appPreference.setIsbrowserDataAlreadyOpen(true);
        }

        if (getLaunchType() == LaunchType.SIGNUP)
            showPersonalizationscreenIfEnabled(false, true);
        /*if (isPersonalizationEnabled() && isAppAVOD() && getLaunchType() == LaunchType.SIGNUP) {
            showLoader();
            AppCMSPresenter.isFromSettings = false;
            getUserRecommendedGenres(getLoggedInUser(), s -> {
                setSelectedGenreString(s);
                //if (isRecommendationEnabled()) {
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            stopLoader();
                            showRecommendationGenreDialog(null);
                        } catch (Exception e) {
                        }
                    }
                }, 1000);
                //}
            }, false);
        }*/

        //Log.d(TAG, "Initiating user login - user subscribed: " + getIsUserSubscribed());

//        if (TextUtils.isEmpty(appPreference.getUserDownloadQualityPref())) {
//            appPreference.setUserDownloadQualityPref(getStringDataById(currentActivity, R.string.app_cms_default_download_quality));
//        }

        getUserData(userIdentity -> {
            processDownloadMetaPage();
            if (followWithSubscription) {
                stopLoader();
                if (launchType == LaunchType.V2_SUBSCRIPTION_FLOW)
                    AppBus.instanceOf().setShowPaymentOption(true);
                else {
                    sendCloseOthersAction(null, true, false);
                    initiateItemPurchase(false);
                }

            } else {
                shouldLaunchLoginAction = true;
                populateFilmsInUserWatchlist();
                cacheNavItems();

                //Log.d(TAG, "Logging in");
                if (isAppSVOD() && refreshSubscriptionData) {
                    checkUpgradeFlag = false;
//                refreshSubscriptionData(() -> {
                    updatePlaybackControl();
                    if (getAudioPlayerOpen() && isUserLoggedIn()) {
                        sendRefreshPageAction();
                        if (!loginFromNavPage) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                        }
                        AudioPlaylistHelper.getInstance().playAudioOnClickItem(AudioPlaylistHelper.getInstance().getLastMediaId(), 30000);
                        setAudioPlayerOpen(false);
                    } else if (entitlementPendingVideoData != null) {
                        // sendRefreshPageAction();
                        if (!loginFromNavPage && !isSubscritionUpated) {
                            isSubscritionUpated = true;
                            sendCloseOthersAction(null, true, true);
                            if (loginFromProvider) {
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                loginFromProvider = false;
                            }
                            if (waysToWatchScreenShown) {
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                waysToWatchScreenShown = false;
                            }
                            if (billlingOptionsShown) {
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                billlingOptionsShown = false;
                            }
                            sendRefreshPageAction();
                            launchButtonSelectedAction(entitlementPendingVideoData.pagePath,
                                    entitlementPendingVideoData.action,
                                    entitlementPendingVideoData.filmTitle,
                                    entitlementPendingVideoData.extraData,
                                    entitlementPendingVideoData.contentDatum,
                                    entitlementPendingVideoData.closeLauncher,
                                    entitlementPendingVideoData.currentlyPlayingIndex,
                                    entitlementPendingVideoData.relateVideoIds);

                        }
                    } else if (launchType == LaunchType.LOGIN_AND_SUBSCRIBE) {
                        if (isUserSubscribed) {
                            navigateToHomePage(false);
                        } else {
                            sendCloseOthersAction(null, true, false);
                            initiateItemPurchase(false);
                            stopLoader();
                        }
                    } else {
                        try {
                            getPageViewLruCache().evictAll();
                        } catch (Exception e) {
                            //
                        }

                        clearPageAPIData(() -> {
                            if (!loginFromNavPage) {
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                            }
                            if (loginFromProvider) {
                                sendCloseOthersAction(null, true, !loginFromNavPage);
                                loginFromProvider = false;
                            }
                            cancelInternalEvents();
                            restartInternalEvents();

//                            if (TextUtils.isEmpty(appPreference.getUserDownloadQualityPref())) {
//                                appPreference.setUserDownloadQualityPref(getStringDataById(currentActivity, R.string.app_cms_default_download_quality));
//                            }

                            if (loginFromNavPage) {
                                if (homePage != null) {
                                    cancelInternalEvents();
                                    sendCloseOthersAction(null, true, true);
                                    sendCloseOthersAction(null, true, true);

                                    if (platformType == PlatformType.ANDROID) {
                                        dismissPopupWindowPlayer(true);
                                        videoPlayerView = null;
                                        videoPlayerViewParent = null;
                                        navigateToPage(homePage.getPageId(),
                                                homePage.getPageFunction(),
                                                createPageUiUrl(homePage),
                                                false,
                                                true,
                                                false,
                                                true,
                                                true,
                                                deeplinkSearchQuery);
                                    } else if (platformType == PlatformType.TV) {
                                        if (getLaunchType() == LaunchType.LOGIN_AND_SIGNUP) {
                                            Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                            myProfileIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                            currentActivity.sendBroadcast(myProfileIntent);
                                            Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                            currentActivity.sendBroadcast(subscriptionMessageIntent);
                                            Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                            currentActivity.sendBroadcast(updateSubscription);
                                            // getPlayerLruCache().evictAll();
                                        } else if (getLaunchType() == LaunchType.LOGIN_FROM_MINI_PLAYER) {

                                            Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                            currentActivity.sendBroadcast(myProfileIntent);

                                            Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                            currentActivity.sendBroadcast(subscriptionMessageIntent);

                                            Intent playerIntent = new Intent(STAND_ALONE_PLAYER_REFRESH);
                                            currentActivity.sendBroadcast(playerIntent);

                                            Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                            currentActivity.sendBroadcast(updateSubscription);
                                            getPlayerLruCache().evictAll();

                                        } else if (getLaunchType() == LaunchType.AUTOPLAY_SCREEN) {

                                            Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                            currentActivity.sendBroadcast(myProfileIntent);

                                            Intent playerIntent = new Intent(LOGIN_SUCCESSFUL_ON_AUTOPLAY);
                                            currentActivity.sendBroadcast(playerIntent);

                                            Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                            currentActivity.sendBroadcast(updateSubscription);
                                            getPlayerLruCache().evictAll();

                                        } else if (getLaunchType() == LaunchType.NAVIGATE_TO_HOME_FROM_LOGIN_DIALOG) {
                                            Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                            currentActivity.sendBroadcast(myProfileIntent);
                                            Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                            currentActivity.sendBroadcast(subscriptionMessageIntent);
                                            Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                            currentActivity.sendBroadcast(updateSubscription);
                                            getPlayerLruCache().evictAll();
                                            navigateToTVPage(
                                                    homePage.getPageId(),
                                                    homePage.getPageFunction(),
                                                    createPageUiUrl(homePage),
                                                    false,
                                                    deeplinkSearchQuery,
                                                    true,
                                                    false,
                                                    false, false, false, false);

                                        } else if (getLaunchType() == LaunchType.HOME) {
                                            Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                            currentActivity.sendBroadcast(updateSubscription);

                                            getPlayerLruCache().evictAll();
                                            navigateToTVPage(
                                                    homePage.getPageId(),
                                                    homePage.getPageFunction(),
                                                    createPageUiUrl(homePage),
                                                    false,
                                                    deeplinkSearchQuery,
                                                    true,
                                                    false,
                                                    false,
                                                    false, false, false);
                                        }
                                    }
                                }

                            }
                        }, false);
                    }
//                    currentActivity.sendBroadcast(new Intent(AppCMSPresenter.PRESENTER_STOP_PAGE_LOADING_ACTION));
//                }, false);
                } else {
                    clearPageAPIData(() -> {
                    }, false);
                    updatePlaybackControl();
                    if (getAudioPlayerOpen() && isUserLoggedIn()) {
                        sendRefreshPageAction();
                        if (!loginFromNavPage) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                        }
                        AudioPlaylistHelper.getInstance().playAudioOnClickItem(AudioPlaylistHelper.getInstance().getLastMediaId(), 30000);
                        setAudioPlayerOpen(false);
                    } else if (entitlementPendingVideoData != null) {
                        sendRefreshPageAction();
                        if (!loginFromNavPage) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                        }
                        if (loginFromProvider) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                            loginFromProvider = false;
                        }
                        if (waysToWatchScreenShown) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                            waysToWatchScreenShown = false;
                        }
                        if (billlingOptionsShown) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                            billlingOptionsShown = false;
                        }
                        if (getLaunchType() == LaunchType.TVOD_PURCHASE) {
                            navigateToLoginPage(true);
                        } else {
                            launchButtonSelectedAction(entitlementPendingVideoData.pagePath,
                                    entitlementPendingVideoData.action,
                                    entitlementPendingVideoData.filmTitle,
                                    entitlementPendingVideoData.extraData,
                                    entitlementPendingVideoData.contentDatum,
                                    entitlementPendingVideoData.closeLauncher,
                                    entitlementPendingVideoData.currentlyPlayingIndex,
                                    entitlementPendingVideoData.relateVideoIds);
                            if (entitlementPendingVideoData != null) {
                                entitlementPendingVideoData.pagePath = null;
                                entitlementPendingVideoData.action = null;
                                entitlementPendingVideoData.filmTitle = null;
                                entitlementPendingVideoData.extraData = null;
                                entitlementPendingVideoData.contentDatum = null;
                                entitlementPendingVideoData.closeLauncher = false;
                                entitlementPendingVideoData.currentlyPlayingIndex = -1;
                                entitlementPendingVideoData.relateVideoIds = null;
                            }
                        }
                    } else if (launchType == LaunchType.LOGIN_AND_SUBSCRIBE) {
                        if (isUserSubscribed) {
                            navigateToHomePage(false);
                        } else {
                            sendCloseOthersAction(null, true, false);
                            initiateItemPurchase(false);
                            stopLoader();
                        }
                    } else {
                        if (!loginFromNavPage) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                        }
                        if (loginFromProvider) {
                            sendCloseOthersAction(null, true, !loginFromNavPage);
                            loginFromProvider = false;
                        }

                        cancelInternalEvents();
                        restartInternalEvents();

//                    if (TextUtils.isEmpty(appPreference.getUserDownloadQualityPref())) {
//                        appPreference.setUserDownloadQualityPref(getStringDataById(currentActivity, R.string.app_cms_default_download_quality));
//                    }

                        if (getLaunchType() == LaunchType.TVOD_PURCHASE) {
                            navigateToLoginPage(true);
                        } else if (loginFromNavPage) {
                            NavigationPrimary homePageNavItem = findHomePageNavItem();
                            if (homePageNavItem != null) {
                                cancelInternalEvents();
                                if (platformType == PlatformType.TV) {
                                    if (getLaunchType() == LaunchType.LOGIN_AND_SIGNUP) {
                                        Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                        currentActivity.sendBroadcast(myProfileIntent);

                                        Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                        currentActivity.sendBroadcast(subscriptionMessageIntent);
                                        Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                        currentActivity.sendBroadcast(updateSubscription);
                                        getPlayerLruCache().evictAll();

                                    } else if (getLaunchType() == LaunchType.AUTOPLAY_SCREEN) {

                                        Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                        currentActivity.sendBroadcast(myProfileIntent);

                                        Intent playerIntent = new Intent(LOGIN_SUCCESSFUL_ON_AUTOPLAY);
                                        currentActivity.sendBroadcast(playerIntent);

                                        Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                        currentActivity.sendBroadcast(updateSubscription);
                                        getPlayerLruCache().evictAll();

                                    } else if (getLaunchType() == LaunchType.LOGIN_FROM_MINI_PLAYER) {

                                        Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                        currentActivity.sendBroadcast(myProfileIntent);

                                        Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                        currentActivity.sendBroadcast(subscriptionMessageIntent);

                                        Intent playerIntent = new Intent(STAND_ALONE_PLAYER_REFRESH);
                                        currentActivity.sendBroadcast(playerIntent);

                                        Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                        currentActivity.sendBroadcast(updateSubscription);
                                        getPlayerLruCache().evictAll();

                                    } else if (getLaunchType() == LaunchType.NAVIGATE_TO_HOME_FROM_LOGIN_DIALOG) {
                                        Intent myProfileIntent = new Intent(CLOSE_DIALOG_ACTION);
                                        currentActivity.sendBroadcast(myProfileIntent);

                                        Intent subscriptionMessageIntent = new Intent(SHOW_SUBSCRIPTION_MESSAGE_ON_VIDEO_PLAYER_ACTION);
                                        currentActivity.sendBroadcast(subscriptionMessageIntent);
                                        Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                        currentActivity.sendBroadcast(updateSubscription);
                                        getPlayerLruCache().evictAll();
                                        navigateToTVPage(
                                                homePage.getPageId(),
                                                homePage.getPageFunction(),
                                                createPageUiUrl(homePage),
                                                false,
                                                deeplinkSearchQuery,
                                                true,
                                                false,
                                                false, false, false, false);

                                    } else if (getLaunchType() == LaunchType.HOME) {
                                        Intent updateSubscription = new Intent(UPDATE_SUBSCRIPTION);
                                        currentActivity.sendBroadcast(updateSubscription);

                                        getPlayerLruCache().evictAll();
                                        setSelectedSchedulePosition(0); //handle live player title issue in RTA.
                                        navigateToTVPage(
                                                homePage.getPageId(),
                                                homePage.getPageFunction(),
                                                createPageUiUrl(homePage),
                                                false,
                                                deeplinkSearchQuery,
                                                true,
                                                false,
                                                false,
                                                false, false, false);
                                    }
                                } else {
                                    if (loginFromNavPage) {
                                        dismissPopupWindowPlayer(true);
                                        videoPlayerView = null;
                                        videoPlayerViewParent = null;
                                        navigateToPage(homePage.getPageId(),
                                                homePage.getPageFunction(),
                                                createPageUiUrl(homePage),
                                                false,
                                                true,
                                                false,
                                                true,
                                                true,
                                                deeplinkSearchQuery);
                                    }
                                }
                            }
                        }
//                    if (platformType.equals(PlatformType.ANDROID)) {
//                        stopLoader();
//                    }
                    }

                    if (platformType.equals(PlatformType.ANDROID)) {
                        sendUALoggedInEvent(appPreference.getLoggedInUser());
                    }
                }
            }
        });
    }

    private void processDownloadMetaPage() {
        // Download the Download Page UI if it hasn't been download already
        if (downloadsAvailableForApp()) {
            String downloadPageId = appPreference.getDownloadPageId();
            if (TextUtils.isEmpty(downloadPageId) &&
                    appCMSAndroid != null &&
                    appCMSAndroid.getMetaPages() != null &&
                    !appCMSAndroid.getMetaPages().isEmpty()) {
                for (MetaPage metaPage : appCMSAndroid.getMetaPages()) {
                    if (metaPage.getPageFunction() != null && (metaPage.getPageFunction().contains("My Downloads") ||
                            metaPage.getPageFunction().contains("Downloads") || isDownloadPage(metaPage.getPageId()))) {
                        appPreference.setDownloadPageId(metaPage.getPageId());
                        downloadPageId = metaPage.getPageId();
                    }
                }
            }

            AppCMSPageUI appCMSPageUI = navigationPages.get(downloadPageId);
            if (appCMSPageUI == null) {
                MetaPage downloadMetaPage = pageIdToMetaPageMap.get(downloadPageId);
                if (downloadMetaPage != null) {
                    getAppCMSPage(createPageUiUrl(downloadMetaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(downloadMetaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(downloadMetaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                }
                            },
                            loadFromFile,
                            false);
                }
            }
        }
    }

    boolean isRefreshingIdentity = false;
    List<Action0> actions = new ArrayList<>();

    public void refreshIdentity(String refreshToken, final Action0 onReadyAction) {
        if (refreshToken == null || !isNetworkConnected()) {
            onReadyAction.call();
            return;
        }
        actions.add(onReadyAction);
        if (currentActivity != null && appCMSMain != null && shouldRefreshAuthToken() && !isRefreshingIdentity) {
            isRefreshingIdentity = true;
            String url = currentActivity.getString(R.string.app_cms_refresh_identity_api_url,
                    appCMSMain.getApiBaseUrl(),
                    refreshToken);
            Log.i("refreshIdentity", url);

            GetAppCMSRefreshIdentityAsyncTask.Params params =
                    new GetAppCMSRefreshIdentityAsyncTask.Params
                            .Builder()
                            .xApiKey(apikey)
                            .url(url)
                            .build();
            new GetAppCMSRefreshIdentityAsyncTask(appCMSRefreshIdentityCall,
                    refreshIdentityResponse -> {
                        isRefreshingIdentity = false;
                        try {
                            if (refreshIdentityResponse != null) {
                                if (refreshIdentityResponse.isSuccessful()) {
                                    setLoggedInUser(refreshIdentityResponse.getId());
                                    appPreference.setRefreshToken(refreshIdentityResponse.getRefreshToken());
                                    appPreference.setAuthToken(refreshIdentityResponse.getAuthorizationToken());
                                    CommonUtils.setCountryCode(CommonUtils.getCountryCodeFromAuthToken(refreshIdentityResponse.getAuthorizationToken()));
                                } else if (refreshIdentityResponse.getErrorCode() == 401) {
                                    // https://snagfilms.atlassian.net/browse/VIEWLIFT-2697
                                    // This is a fix for the case when after login the device is removed from settings
                                    // in this case the refreshIdentity API returns 401.
                                    // Therefore, if 401 is received, we logout the user.
                                    if (platformType.equals(PlatformType.TV)) {
                                        showToast("You're being logged out!", Toast.LENGTH_SHORT);
                                        logoutTV();
                                    } else {
                                        logout();
                                    }
                                }
                            }

                            for (Action0 action : actions) {
                                action.call();
                            }
                            actions.clear();
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving refresh identity response: " + e.getMessage());
                            try {
                                for (Action0 action : actions) {
                                    action.call();
                                }
                                actions.clear();
                            } catch (ConcurrentModificationException e1) {
                                e1.printStackTrace();
                            }
                        }
                    }).execute(params);
        }

    }

    private void askForPermissionToDownloadToExternalStorage(
            boolean checkToShowPermissionRationale,
            final ContentDatum entitlementContentDatum,
            final Action1<UserVideoDownloadStatus> resultAction1) {
        requestPlaylistDownload = false;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            downloadContentDatumAfterPermissionGranted = entitlementContentDatum;
            downloadResultActionAfterPermissionGranted = resultAction1;
            if (currentActivity != null && !hasWriteExternalStoragePermission()) {
                if (checkToShowPermissionRationale &&
                        ActivityCompat.shouldShowRequestPermissionRationale(currentActivity,
                                Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                    showDialog(DialogType.REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION_FOR_DOWNLOAD,
                            getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_download_write_external_storage_permission_rationale_message)),
                            true,
                            () -> {
                                try {
                                    askForPermissionToDownloadToExternalStorage(false,
                                            downloadContentDatumAfterPermissionGranted,
                                            downloadResultActionAfterPermissionGranted);
                                } catch (Exception e) {
                                    //Log.e(TAG, "Error handling request permissions result: " + e.getMessage());
                                }
                            },
                            null, null);
                } else {
                    ActivityCompat.requestPermissions(currentActivity,
                            new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},
                            REQUEST_WRITE_EXTERNAL_STORAGE_FOR_DOWNLOADS);
                }
            }
        }
    }

    public void askForPermissionToDownloadForPlaylist(boolean checkToShowPermissionRationale,
                                                      final Action1<Boolean> resultAction11) {
        requestPlaylistDownload = true;
        if (!hasWriteExternalStoragePermission()) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                downloadResultActionForPlaylistAfterPermissionGranted = resultAction11;
                if (currentActivity != null && !hasWriteExternalStoragePermission()) {
                    if (checkToShowPermissionRationale && ActivityCompat.shouldShowRequestPermissionRationale(currentActivity,
                            android.Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
                        showDialog(DialogType.REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION_FOR_DOWNLOAD,
                                getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_download_write_external_storage_permission_rationale_message)),
                                true,
                                () -> {
                                    try {
                                        askForPermissionToDownloadForPlaylist(false, resultAction11);
                                    } catch (Exception e) {
                                        //Log.e(TAG, "Error handling request permissions result: " + e.getMessage());
                                    }
                                },
                                null, null);
                    } else {
                        ActivityCompat.requestPermissions(currentActivity,
                                new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},
                                REQUEST_WRITE_EXTERNAL_STORAGE_FOR_DOWNLOADS);
                    }
                }
            }
        } else {
            resultAction11.call(true);
        }

    }

    private boolean hasWriteExternalStoragePermission() {
        if (currentActivity != null) {
            return Build.VERSION.SDK_INT < Build.VERSION_CODES.M ||
                    (ContextCompat.checkSelfPermission(currentActivity,
                            android.Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);
        }
        return false;
    }

    public void resumeDownloadAfterPermissionGranted() {
        if (requestPlaylistDownload && downloadResultActionForPlaylistAfterPermissionGranted != null) {
            downloadResultActionForPlaylistAfterPermissionGranted.call(true);
        } else if (requestDownloadQualityScreen) {
            showDownloadQualityScreen(downloadContentDatumAfterPermissionGranted, downloadResultActionAfterPermissionGranted);
        } else {
            try {
                editDownload(downloadContentDatumAfterPermissionGranted, downloadContentDatumAfterPermissionGranted,
                        downloadResultActionAfterPermissionGranted,
                        null, null);
            } catch (NullPointerException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public boolean isAppSVOD() {
        return appCMSMain != null
                && jsonValueKeyMap.get(appCMSMain.getServiceType()) == AppCMSUIKeyType.MAIN_SVOD_SERVICE_TYPE;
    }

    public boolean isAppTVE() {
        return appCMSMain != null
                && jsonValueKeyMap.get(appCMSMain.getServiceType()) == AppCMSUIKeyType.MAIN_TVE_SERVICE_TYPE;
    }

    public boolean isAppAVOD() {
        return appCMSMain != null
                && jsonValueKeyMap.get(appCMSMain.getServiceType()) == AppCMSUIKeyType.MAIN_AVOD_SERVICE_TYPE;
    }

    public boolean isAppTVOD() {
        return appCMSMain != null
                && jsonValueKeyMap.get(appCMSMain.getServiceType()) == AppCMSUIKeyType.MAIN_TVOD_SERVICE_TYPE;
    }

    public void setNavItemToCurrentAction(Activity activity) {
        if (activity != null && currentActions != null && !currentActions.isEmpty()) {
            Intent setNavigationItemIntent = new Intent(PRESENTER_RESET_NAVIGATION_ITEM_ACTION);
            setNavigationItemIntent.putExtra(activity.getString(R.string.navigation_item_key),
                    currentActions.peek());
            setNavigationItemIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            activity.sendBroadcast(setNavigationItemIntent);
        }
    }

    public AppCompatActivity getCurrentActivity() {
        if (currentActivity instanceof AppCMSPageActivity) {
            return currentActivity != null && !(currentActivity.isFinishing() || currentActivity.isDestroyed()) ? currentActivity : null;
        } else
            return currentActivity;
    }

    public void setCurrentActivity(Activity activity) {
        if (activity instanceof AppCompatActivity) {
            this.currentActivity = (AppCompatActivity) activity;
            if (contentTypeChecker == null)
                contentTypeChecker = new ContentTypeChecker(currentActivity);
            if (firebaseAnalytics == null)
                firebaseAnalytics = AppCMSFirebaseAnalytics.Companion.getInstance(AppCMSPresenter.this);
        }
        if (currentActivity != null) {
            this.downloadManager = (DownloadManager) currentActivity.getSystemService(Context.DOWNLOAD_SERVICE);
        }
        this.downloadQueueThread = new DownloadQueueThread(this);
//        String clientId = activity.getString(R.string.default_web_client_id);
        //this.serverClientId = activity.getString(R.string.default_web_client_id);
    }

    public void setBitmapCachePresenter(BitmapCachePresenter bitmapCachePresenter) {
        this.bitmapCachePresenter = bitmapCachePresenter;
    }

    public Bitmap getBitmapFromCache(String url) {
        if (bitmapCachePresenter != null) {
            return bitmapCachePresenter.getBitmapFromMemCache(url);
        }
        return null;
    }

    public void addBitmapToCache(String url, Bitmap bitmap) {
        if (bitmapCachePresenter != null && currentContext != null) {
            bitmapCachePresenter.addBitmapToCache(currentContext, url, bitmap);
        }
    }


    private Bundle getPageActivityBundle(Activity activity,
                                         AppCMSPageUI appCMSPageUI,
                                         AppCMSPageAPI appCMSPageAPI,
                                         String pageID,
                                         String pageName,
                                         String pagePath,
                                         String screenName,
                                         boolean loadFromFile,
                                         boolean appbarPresent,
                                         boolean fullscreenEnabled,
                                         boolean navbarPresent,
                                         boolean sendCloseAction,
                                         Uri searchQuery,
                                         ExtraScreenType extraScreenType,
                                         LaunchData launchData,
                                         boolean showParentalGateView, AppCMSVideoPageBinder appCMSVideoPageBinder) {
        if (activity != null) {
            /*FIX for MSEAN-1324*/
            /*if (getTabBarUIFooterModule() != null && getTabBarUIFooterModule().getSettings() != null) {
                appbarPresent = appbarPresent == false ? getTabBarUIFooterModule().getSettings().isShowTabBar() : true;
            }*/
            Bundle args = new Bundle();
            AppCMSBinder appCMSBinder = getAppCMSBinder(activity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageID,
                    pageName,
                    pagePath,
                    screenName,
                    loadFromFile,
                    appbarPresent,
                    fullscreenEnabled,
                    navbarPresent,
                    sendCloseAction,
                    searchQuery,
                    extraScreenType,
                    appCMSSearchCall,
                    launchData,
                    showParentalGateView);
            appCMSBinder.setAppCMSVideoPageBinder(appCMSVideoPageBinder);
            appCMSBinder.setShowDetailsPage(false);
            if (appCMSPageUI != null) {
                for (ModuleList module : appCMSPageUI.getModuleList()) {
                    if (module != null && module.getBlockName() != null && module.getBlockName().contains("showDetail06")) {
                        appCMSBinder.setShowDetailsPage(true);
                        break;
                    }
                }
            }
            args.putBinder(activity.getString(R.string.app_cms_binder_key), appCMSBinder);
            return args;
        }
        return null;
    }

    private Bundle getAutoplayActivityBundle(Activity activity,
                                             AppCMSPageUI appCMSPageUI,
                                             AppCMSPageAPI appCMSPageAPI,
                                             String pageID,
                                             String pageName,
                                             String screenName,
                                             boolean loadFromFile,
                                             boolean appbarPresent,
                                             boolean fullscreenEnabled,
                                             boolean navbarPresent,
                                             boolean sendCloseAction,
                                             AppCMSVideoPageBinder binder) {
        Bundle args = new Bundle();
        binder.setAppCMSPageUI(appCMSPageUI);
        binder.setAppCMSPageAPI(appCMSPageAPI);
        binder.setPageID(pageID);
        binder.setPageName(pageName);
        binder.setScreenName(screenName);
        binder.setLoadFromFile(loadFromFile);
        binder.setAppbarPresent(appbarPresent);
        binder.setFullscreenEnabled(fullscreenEnabled);
        binder.setNavbarPresent(navbarPresent);
        binder.setSendCloseAction(sendCloseAction);
        args.putBinder(activity.getString(R.string.app_cms_video_player_binder_key), binder);
        return args;
    }

    private AppCMSDownloadQualityBinder getAppCMSDownloadQualityBinder(Activity activity,
                                                                       AppCMSPageUI appCMSPageUI,
                                                                       AppCMSPageAPI appCMSPageAPI,
                                                                       String pageId,
                                                                       String pageName,
                                                                       String screenName,
                                                                       boolean loadedFromFile,
                                                                       boolean appbarPresent,
                                                                       boolean fullScreenEnabled,
                                                                       boolean navbarPresent,
                                                                       ContentDatum entitlementContentDatum,
                                                                       Action1<UserVideoDownloadStatus> resultAction
    ) {
        AppCMSDownloadQualityBinder appCMSDownloadQualityBinder = new AppCMSDownloadQualityBinder(appCMSMain,
                appCMSPageUI,
                appCMSPageAPI,
                pageId,
                pageName,
                screenName,
                loadedFromFile,
                appbarPresent,
                fullScreenEnabled,
                navbarPresent,
                isUserLoggedIn(),
                jsonValueKeyMap,
                entitlementContentDatum,
                resultAction);
        new SoftReference<>(appCMSDownloadQualityBinder, referenceQueue);
        return appCMSDownloadQualityBinder;
    }

    @SuppressWarnings("unused")
    public void searchRetryDialog(String searchTerm) {
        RetryCallBinder retryCallBinder = getRetryCallBinder(null, null,
                searchTerm, null,
                null, false,
                null, SEARCH_RETRY_ACTION
        );
        Bundle bundle = new Bundle();
        bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
        bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
        bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
        Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
        args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(args);
    }

    private RetryCallBinder getRetryCallBinder(String pagePath,
                                               String action,
                                               String filmTitle,
                                               String[] extraData,
                                               ContentDatum contentDatum,
                                               boolean closeLauncher,
                                               String filmId,
                                               RETRY_TYPE retry_type) {
        RetryCallBinder retryCallBinder = new RetryCallBinder();
        retryCallBinder.setPagePath(pagePath);
        retryCallBinder.setAction(action);
        retryCallBinder.setFilmTitle(filmTitle);
        retryCallBinder.setExtraData(extraData);
        retryCallBinder.setContentDatum(contentDatum);
        retryCallBinder.setCloselauncher(closeLauncher);
        retryCallBinder.setRetry_type(retry_type);
        retryCallBinder.setFilmId(filmId);
        return retryCallBinder;
    }

    private AppCMSBinder getAppCMSBinder(Activity activity,
                                         AppCMSPageUI appCMSPageUI,
                                         AppCMSPageAPI appCMSPageAPI,
                                         String pageID,
                                         String pageName,
                                         String pagePath,
                                         String screenName,
                                         boolean loadFromFile,
                                         boolean appbarPresent,
                                         boolean fullscreenEnabled,
                                         boolean navbarPresent,
                                         boolean sendCloseAction,
                                         Uri searchQuery,
                                         ExtraScreenType extraScreenType,
                                         AppCMSSearchCall appCMSSearchCall,
                                         LaunchData launchData,
                                         boolean showParentalGateView) {
        AppCMSBinder appCMSBinder = new AppCMSBinder(appCMSMain,
                appCMSPageUI,
                appCMSPageAPI,
                navigation,
                pageID,
                pageName,
                pagePath,
                screenName,
                loadFromFile,
                appbarPresent,
                fullscreenEnabled,
                navbarPresent,
                sendCloseAction,
                isUserLoggedIn(),
                isUserSubscribed(),
                extraScreenType,
                jsonValueKeyMap,
                searchQuery,
                appCMSSearchCall,
                launchData,
                showParentalGateView);
        new SoftReference<>(appCMSBinder, referenceQueue);
        return appCMSBinder;
    }

    private AppCMSVideoPageBinder getAppCMSVideoPageBinder(Activity activity,
                                                           AppCMSPageUI appCMSPageUI,
                                                           AppCMSPageAPI appCMSPageAPI,
                                                           String pageID,
                                                           String pageName,
                                                           String screenName,
                                                           boolean loadFromFile,
                                                           boolean appbarPresent,
                                                           boolean fullscreenEnabled,
                                                           boolean navbarPresent,
                                                           boolean sendCloseAction,
                                                           boolean playAds,
                                                           String fontColor,
                                                           String backgroundColor,
                                                           String adsUrl,
                                                           ContentDatum contentDatum,
                                                           boolean isTrailer,
                                                           List<String> relatedVideoIds,
                                                           int currentlyPlayingIndex,
                                                           boolean isOffline,
                                                           String seriesParentalRating) {

        AppCMSVideoPageBinder appCMSVideoPageBinder = new AppCMSVideoPageBinder(
                appCMSPageUI,
                appCMSPageAPI,
                pageID,
                pageName,
                screenName,
                loadFromFile,
                appbarPresent,
                fullscreenEnabled,
                navbarPresent,
                sendCloseAction,
                jsonValueKeyMap,
                playAds,
                fontColor,
                backgroundColor,
                adsUrl,
                contentDatum,
                isTrailer,
                isUserLoggedIn(),
                isUserSubscribed(),
                relatedVideoIds,
                currentlyPlayingIndex,
                isOffline,
                seriesParentalRating);
        new SoftReference<>(appCMSVideoPageBinder, referenceQueue);
        return appCMSVideoPageBinder;
    }

    private void launchPageActivity(Activity activity,
                                    AppCMSPageUI appCMSPageUI,
                                    AppCMSPageAPI appCMSPageAPI,
                                    String pageId,
                                    String pageName,
                                    String pagePath,
                                    String screenName,
                                    boolean loadFromFile,
                                    boolean appbarPresent,
                                    boolean fullscreenEnabled,
                                    boolean navbarPresent,
                                    boolean sendCloseAction,
                                    Uri searchQuery,
                                    ExtraScreenType extraScreenType) {
        if (!cancelAllLoads) {
            try {
                Bundle args = getPageActivityBundle(activity,
                        appCMSPageUI,
                        appCMSPageAPI,
                        pageId,
                        pageName,
                        pagePath,
                        screenName,
                        loadFromFile,
                        appbarPresent,
                        fullscreenEnabled,
                        navbarPresent,
                        sendCloseAction,
                        searchQuery,
                        extraScreenType,
                        null,
                        false,
                        null);
                Intent appCMSIntent = new Intent(activity, AppCMSPageActivity.class);
                appCMSIntent.putExtra(activity.getString(R.string.app_cms_bundle_key), args);
                appCMSIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                activity.startActivity(appCMSIntent);
                stopLoader();
            } catch (Exception e) {
                //Log.e(TAG, "Error launching page activity: " + pageName);
                showDialog(DialogType.NETWORK, null, false, null, null, null);
            }
        }
    }

    public void launchBlankPage() {
        if (getPlatformType() == PlatformType.ANDROID) {
            if (currentActivity != null) {
                if (!(currentActivity instanceof AppCMSPageActivity)) {
                    Bundle args = getPageActivityBundle(currentActivity,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            false,
                            true,
                            false,
                            true,
                            false,
                            null,
                            ExtraScreenType.BLANK,
                            null,
                            false,
                            null);
                    Intent appCMSIntent = new Intent(currentActivity, AppCMSPageActivity.class);
                    appCMSIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                    appCMSIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                    currentActivity.startActivity(appCMSIntent);
                }

            }
        } else if (null != currentActivity && getPlatformType() == PlatformType.TV) {
            launchErrorActivity(PlatformType.TV, null, true);
        }
    }

    private void launchAutoplayActivity(Activity activity,
                                        AppCMSPageUI appCMSPageUI,
                                        AppCMSPageAPI appCMSPageAPI,
                                        String pageId,
                                        String pageName,
                                        String screenName,
                                        boolean loadFromFile,
                                        boolean appbarPresent,
                                        boolean fullscreenEnabled,
                                        boolean navbarPresent,
                                        boolean sendCloseAction,
                                        AppCMSVideoPageBinder binder,
                                        Action1<Object> action1) {
        if (currentActivity instanceof AppCMSPlayVideoActivity) {
            ((AppCMSPlayVideoActivity) currentActivity).closePlayer();
        } else if (platformType == PlatformType.TV) {
            action1.call(null);
        }
        /*if (!cancelAllLoads)*/
        {
            Bundle args = getAutoplayActivityBundle(activity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageId,
                    pageName,
                    screenName,
                    loadFromFile,
                    appbarPresent,
                    fullscreenEnabled,
                    navbarPresent,
                    sendCloseAction,
                    binder);
            Intent intent;
            if (platformType == PlatformType.ANDROID) {
                intent = new Intent(currentActivity, AutoplayActivity.class);
                intent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), args);
                intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                currentActivity.startActivity(intent);
            } else {
                try {
                    String tvAutoplayActivityPackage = "com.viewlift.tv.views.activity.AppCMSTVAutoplayActivity";
                    intent = new Intent(currentActivity, Class.forName(tvAutoplayActivityPackage));
                    intent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), args);
                    intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                    currentActivity.startActivity(intent);
                } catch (ClassNotFoundException e) {

                }
            }
        }
    }

    public void launchRestWorkoutPage(Module appCMSPageAPI,
                                      AppCMSVideoPageBinder binder) {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            {
                Bundle args = getPageActivityBundle(currentActivity,
                        navigationPages.get(accountSettingsPage.getPageId()),
                        getPageAPILruCache().get(accountSettingsPage.getPageId()),
                        currentActivity.getString(R.string.app_cms_rest_workout_page_tag),
                        currentActivity.getString(R.string.app_cms_rest_workout_page_tag),
                        null,
                        currentActivity.getString(R.string.app_cms_rest_workout_page_tag),
                        false,
                        true,
                        true,
                        false,
                        false,
                        null,
                        ExtraScreenType.REST_SCREEN,
                        null,
                        false,
                        binder);
                AppCMSBinder appCMSBinder = getCurrentAppCMSBinder();
                appCMSBinder.setAppCMSVideoPageBinder(binder);
                if (args != null) {
                    Intent updatePageIntent =
                            new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                    updatePageIntent.putExtra(
                            currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(updatePageIntent);
                }
            }
        }
    }

    private void launchDownloadQualityActivity(AppCMSDownloadQualityBinder binder) {
        if (!cancelAllLoads) {
            Bundle args = new Bundle();
            args.putBinder(currentActivity.getString(R.string.app_cms_download_setting_binder_key), binder);
            Intent intent = new Intent(currentActivity, AppCMSDownloadQualityActivity.class);
            intent.putExtra(currentActivity.getString(R.string.app_cms_download_setting_bundle_key), args);
            intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
            currentActivity.startActivity(intent);
        }
    }


    private String networkCountryCode;

    private void getAppCmsGeoData() {
        if (currentActivity != null) {
            String url = currentActivity.getString(R.string.app_cms_geo_data_api_url);
            appCMSIPGeoLocatorCall.call(url, "", apikey, new Action1<IPGeoLocatorResponse>() {
                @Override
                public void call(IPGeoLocatorResponse ipGeoLocatorResponse) {
                    if (ipGeoLocatorResponse != null && ipGeoLocatorResponse.getCountryisocode() != null) {
                        networkCountryCode = ipGeoLocatorResponse.getCountryisocode();
                        Utils.setCountryCode(networkCountryCode);
                        Utils.setIPAddress(ipGeoLocatorResponse.getOrigip());
                    }
                }
            });
        }
    }

    public void getEmailConsentAPI(Action1<Map<String, AppCMSEmailConsentValue>> action1) {
        if (currentActivity != null) {
            String url = currentActivity.getString(R.string.app_cms_email_consent_data_api, appCMSMain.getSite());
            appCMSEmailConsentCall.call(url, action1::call);
        }
    }


    private void getAppCMSSite(final PlatformType platformType, Action1<Boolean> launchSuccessfull) {
        Log.w(TAG, "Attempting to retrieve site.json");
        if (currentActivity != null) {
            //Log.d(TAG, "Retrieving site.json");
            String baseUrl = (!TextUtils.isEmpty(appCMSMain.getApiBaseUrlCached())) ? appCMSMain.getApiBaseUrlCached() : appCMSMain.getApiBaseUrl();
            if (isHardCodedUrlNeeded) {
                baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha);
                if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null && appCMSMain.getApiBaseUrl().contains("staging-api")) {
                    baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha_staging);
                }
            } else {
                baseUrl = appCMSMain.getApiBaseUrl();
                if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null
                        && appCMSMain.getApiBaseUrl().contains("staging-api")
                        && appCMSMain.getApiBaseUrlCached() != null) {
                    baseUrl = appCMSMain.getApiBaseUrlCached();
                }
            }
            appCMSMain.setApiBaseUrlCached(baseUrl);
            String url = currentActivity.getString(R.string.app_cms_site_api_url,
                    baseUrl,
                    appCMSMain.getDomainName());
            new GetAppCMSSiteAsyncTask(appCMSSiteCall,
                    appCMSSite -> {
                        try {
                            if (appCMSSite != null) {
                                this.appCMSSite = appCMSSite;

                                appCMSSearchUrlComponent = DaggerAppCMSSearchUrlComponent.builder()
                                        .appCMSSearchUrlModule(new AppCMSSearchUrlModule(appCMSMain.getApiBaseUrlCached(),
                                                appCMSMain.getInternalName(),
                                                apikey, /*getAuthToken(),*/
                                                appCMSSearchCall))
                                        .build();
                                switch (platformType) {
                                    case ANDROID:
                                        getAppCMSAndroid(0, launchSuccessfull);
                                        break;

                                    case TV:
                                        getAppCMSTV(0);
                                        break;

                                    default:
                                        break;
                                }
                            } else {
                                launchErrorActivity(platformType, null, true);
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving AppCMS Site Info: " + e.getMessage());
                            launchErrorActivity(platformType, null, true);
                        }
                    }, apikey/*,getAuthToken()*/).execute(url, !isNetworkConnected());
        } else {
            launchBlankPage();
        }
    }

    public void refreshPages(Action1<Boolean> onReadyAction,
                             boolean attemptRetry,
                             int retryAttempts,
                             int maxRetryAttempts) {
        //Log.d(TAG, "Refreshing pages");
        if (currentActivity != null) {
            if (appCMSMain != null) {
                Log.d(TAG, "Refreshing main.json version: " + appCMSMain.getVersion());
            }

            try {
                refreshAppCMSMain((appCMSMainUpdated) -> {
                    if (appCMSMainUpdated != null && appCMSMain != null) {
                        //Log.d(TAG, "Refreshed main.json");
                        //Log.d(TAG, "Current main.json version: " + appCMSMain.getVersion());
                        //Log.d(TAG, "Received main.json version: " + appCMSMainUpdated.getVersion());
                        if (appCMSMainUpdated.getVersion().equals(appCMSMain.getVersion()) &&
                                attemptRetry &&
                                retryAttempts < maxRetryAttempts) {
                            refreshPages(onReadyAction,
                                    attemptRetry,
                                    retryAttempts + 1,
                                    maxRetryAttempts);
                        } else if (!appCMSMainUpdated.getVersion().equals(appCMSMain.getVersion())) {
                            //Log.d(TAG, "Reloading page data");
                            this.appCMSMain = appCMSMainUpdated;
                            try {
                                refreshAppCMSAndroid((appCMSAndroid) -> {
                                    if (appCMSAndroid != null) {
                                        // Log.d(TAG, "Clearing Page and API cache");
                                        clearPageAPIData(() -> {
                                            final int numPages = appCMSAndroid.getMetaPages().size();
                                            for (int i = 0; i < numPages; i++) {
                                                final MetaPage metaPage = appCMSAndroid.getMetaPages().get(i);
                                                numPagesProcessed = 0;
                                                //Log.d(TAG, "Refreshed module page: " + metaPage.getPageFunction() +
//                                                " " +
//                                                metaPage.getPageId() +
//                                                " " +
//                                                createPageUiUrl(metaPage));
                                                if (currentActivity != null) {
                                                    try {
                                                        getAppCMSPage(createPageUiUrl(metaPage),
                                                                appCMSPageUI -> {
                                                                    numPagesProcessed++;
                                                                    if (appCMSPageUI != null) {
                                                                        if (appCMSPageUI.getCaching() != null) {
                                                                            appCMSPageUI.getCaching().setOverrideCaching(true);
                                                                            new GetAppCMSPageUIAsyncTask(appCMSPageUICall, null).writeToFile(appCMSPageUI, createPageUiUrl(metaPage));
                                                                        }
                                                                        navigationPages.put(metaPage.getPageId(), appCMSPageUI);

                                                                        String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                                                        if (action != null && actionToPageMap.containsKey(action)) {
                                                                            actionToPageMap.put(action, appCMSPageUI);
                                                                        }
                                                                    }
                                                                    try {
                                                                        if (numPagesProcessed == numPages) {
                                                                            numPagesProcessed = 0;
                                                                            getAppCMSModules(appCMSAndroid,
                                                                                    true,
                                                                                    true,
                                                                                    (appCMSAndroidModules) -> {
                                                                                        if (appCMSAndroidModules != null) {
                                                                                            //Log.d(TAG, "Received and refreshed module list");
                                                                                            this.appCMSAndroidModules = appCMSAndroidModules;
                                                                                            if (appCMSAndroidModules.isLoadedFromNetwork() &&
                                                                                                    pageViewLruCache != null) {
                                                                                                Log.d(TAG, "Clearing page cache");
                                                                                                try {
                                                                                                    pageViewLruCache.evictAll();
                                                                                                } catch (Exception e) {

                                                                                                }
                                                                                            }

                                                                                            Log.d(TAG, "Refreshing API Data");
                                                                                        }

                                                                                        if (onReadyAction != null) {
                                                                                            onReadyAction.call(true);
                                                                                        }
                                                                                    });
                                                                        }
                                                                    } catch (Exception e) {
                                                                        //Log.e(TAG, "Failed to refresh AppCMS modules: " +
//                                            e.getMessage());
                                                                    }
                                                                },
                                                                false,
                                                                true);
                                                    } catch (Exception e) {
                                                        //Log.e(TAG, "Failed to refresh AppCMS page " +
//                                                    metaPage.getPageFunction() +
//                                                " " +
//                                                e.getMessage());
                                                    }
                                                }
                                            }
                                        }, false);
                                    }
                                });
                            } catch (Exception e) {
                                //Log.e(TAG, "Failed to refresh android.json: " + e.getMessage());
                            }
                        } else {
                            if (onReadyAction != null) {
                                onReadyAction.call(false);
                            }
                        }
                    } else {
                        Log.w(TAG, "Resulting main.json from refresh is null");
                        if (onReadyAction != null) {
                            onReadyAction.call(false);
                        }
                    }
                });
            } catch (Exception e) {
                //Log.e(TAG, "Failed to refresh main.json: " + e.getMessage());
            }
        } else {
            //Log.w(TAG, "Current activity is null, can not refresh page data");
        }
    }

    public void updateAppCMSMain(AppCMSMain appCMSMain) {
        this.appCMSMain = appCMSMain;
    }

    public void refreshAppCMSMain(Action1<AppCMSMain> readyAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(),
                        () -> {
                            try {
                                GetAppCMSMainUIAsyncTask.Params params = new GetAppCMSMainUIAsyncTask.Params.Builder()
                                        .context(currentActivity)
                                        .siteId(Utils.getProperty("SiteId", currentActivity))
                                        .bustCache(true)
                                        .build();
                                new GetAppCMSMainUIAsyncTask(appCMSMainUICall, main -> {
                                    if (readyAction != null && main != null) {
                                        Log.d(TAG, "Refreshed main.json with update version: " + main.getVersion());
                                        Log.d(TAG, "Notifying listeners that main.json has been updated");
                                        Observable.just(main)
                                                .onErrorResumeNext(throwable -> Observable.empty())
                                                .subscribe(readyAction);
                                    }
                                }).execute(params);
                            } catch (Exception e) {
                                Log.e(TAG, "Error retrieving main.json: " + e.getMessage());
                                Observable.just((AppCMSMain) null)
                                        .onErrorResumeNext(throwable -> Observable.empty())
                                        .subscribe(readyAction);
                            }
                        });
            } else {
                try {
                    GetAppCMSMainUIAsyncTask.Params params = new GetAppCMSMainUIAsyncTask.Params.Builder()
                            .context(currentActivity)
                            .siteId(Utils.getProperty("SiteId", currentActivity))
                            .bustCache(true)
                            .build();
                    new GetAppCMSMainUIAsyncTask(appCMSMainUICall, main -> {
                        Log.d(TAG, "Refreshed main.json");
                        if (readyAction != null) {
                            Log.d(TAG, "Notifying listeners that main.json has been updated");
                            Observable.just(main)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(readyAction);
                        }
                    }).execute(params);
                } catch (Exception e) {
                    Log.e(TAG, "Error retrieving main.json: " + e.getMessage());
                    Observable.just((AppCMSMain) null)
                            .onErrorResumeNext(throwable -> Observable.empty())
                            .subscribe(readyAction);
                }
            }
        }
    }

    private void refreshAppCMSAndroid(Action1<AppCMSAndroidUI> readyAction) {
        if (currentActivity != null) {
            GetAppCMSAndroidUIAsyncTask.Params params =
                    new GetAppCMSAndroidUIAsyncTask.Params.Builder()
                            .url(appCMSMain.getAndroid())
                            .xApiKey(apikey)
                            .loadFromFile(false)
                            .bustCache(true)
                            .build();
            try {
                new GetAppCMSAndroidUIAsyncTask(appCMSAndroidUICall, appCMSAndroidUI -> {
                    //Log.d(TAG, "Refreshed android.json");
                    if (readyAction != null) {
                        //Log.d(TAG, "Notifying listeners that android.json has been updated");
                        if (appCMSAndroidUI != null) {
                            Observable.just(appCMSAndroidUI)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(readyAction);
                        } else {
                            Observable.just((AppCMSAndroidUI) null)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(readyAction);
                        }
                    }
                }).execute(params);
            } catch (Exception e) {
                //Log.e(TAG, "Error retrieving android.json: " + e.getMessage());
                Observable.just((AppCMSAndroidUI) null)
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe(readyAction);
            }
        }
    }

    private void getAppCMSAndroid(int tryCount, Action1<Boolean> launchSuccessfull) {
        //Log.d(TAG, "Attempting to retrieve android.json");
        try {
            GetAppCMSAndroidUIAsyncTask.Params params =
                    new GetAppCMSAndroidUIAsyncTask.Params.Builder()
                            .url(appCMSMain.getAndroid())
                            .xApiKey(apikey)
                            .loadFromFile(appCMSMain.shouldLoadFromFile())
                            .bustCache(true)
                            .build();
//                    Log.d(TAG, "Params: " + appCMSMain.getAndroid() + " " + loadFromFile);
            new GetAppCMSAndroidUIAsyncTask(appCMSAndroidUICall, appCMSAndroidUI -> {
                try {
                    if (appCMSAndroidUI == null ||
                            appCMSAndroidUI.getMetaPages() == null ||
                            appCMSAndroidUI.getMetaPages().isEmpty()) {
                        //Log.e(TAG, "AppCMS keys for pages for appCMSAndroid not found");
                        if (tryCount < 2) {
                            getAppCMSAndroid(tryCount + 1, launchSuccessfull);
                        } else {
                            launchBlankPage();
                        }
                    } else if (isAppBelowMinVersion() && BuildConfig.FLAVOR.equalsIgnoreCase(AppCMSPresenter.MOBILE_BUILD_VARIENT)) {
                        //Log.e(TAG, "AppCMS current application version is below the minimum version supported");
                        launchUpgradeAppActivity();
                    } else {
                        this.appCMSAndroid = appCMSAndroidUI;
                        this.navigation = appCMSAndroidUI.getNavigation();
                        this.mainheader = (ArrayList<Headers>) appCMSAndroidUI.getHeaders();
//                        this.headers = appCMSAndroidUI.getHeaders().get(0).getTitle();


                        if (appCMSAndroid.getGeoRestrictedCountries() != null &&
                                appCMSAndroid.getGeoRestrictedCountries().size() > 0) {
                            if (appCMSAndroid.getGeoRestrictedCountries().contains(getCountryCode())) {
                                //TODO :- launch restricted page.
                                launchErrorActivity(PlatformType.ANDROID, localisedStrings.getGeoRestrictText(), true);
                                return;
                            }

                        }
                        removeLanguage();
                        new SoftReference<>(navigation, referenceQueue);
                        queueMetaPages(appCMSAndroidUI.getMetaPages());
                        //Log.d(TAG, "Processing meta pages queue");

                        launchBlankPage();

                        getAppCMSModules(appCMSAndroidUI,
                                false,
                                false,
                                (appCMSAndroidModules) -> {
                                    //Log.d(TAG, "Received module list");
                                    this.appCMSAndroidModules = appCMSAndroidModules;
                                    this.processedUIModules = true;
                                    if (processedUIModules && processedUIPages) {
                                        finalizeLaunch(tryCount, launchSuccessfull);
                                    }
                                });

                        MetaPage launchPage = homePage;
                        if (appCMSMain.getFeatures().isSplashModule() && splashPage != null)
                            launchPage = splashPage;
                        if (launchPage != null) {
                            pageIdToPageAPIUrlMap.put(launchPage.getPageId(), launchPage.getPageAPI());
                            pageIdToPageFunctionMap.put(launchPage.getPageId(), launchPage.getPageFunction());

                            final MetaPage launchPageFinal = launchPage;

                            getAppCMSPage(createPageUiUrl(launchPage),
                                    appCMSPageUI -> {
                                        navigationPages.put(launchPageFinal.getPageId(), appCMSPageUI);
                                        String action = pageNameToActionMap.get(launchPageFinal.getPageFunction());
                                        if (action != null && actionToPageMap.containsKey(action)) {
                                            actionToPageMap.put(action, appCMSPageUI);
                                        }

                                        processedUIPages = true;

                                        if (processedUIModules && processedUIPages) {
                                            finalizeLaunch(tryCount, launchSuccessfull);
                                        }
                                    },
                                    loadFromFile,
                                    false);

                            if (launchPageFinal == homePage) {
                                cachePage(homePage.getPageId(), true);
                            }
                        } else {
                            processMetaPagesList(loadFromFile,
                                    appCMSAndroidUI.getMetaPages(),
                                    () -> {
                                        this.processedUIPages = true;
                                        if (processedUIModules && processedUIPages) {
                                            finalizeLaunch(tryCount, launchSuccessfull);
                                        }
                                    });
                        }
                    }
                } catch (Exception e) {
                    //Log.e(TAG, "Error processing meta pages queue: " + e.getMessage());
                    launchBlankPage();
                }
            }).execute(params);
        } catch (Exception e) {
            //Log.e(TAG, "Failed to load Android json file: " + e.getMessage());
            launchBlankPage();
        }
    }

    private void finalizeLaunch(int tryCount, Action1<Boolean> launchSuccessfull) {
        if (!isNetworkConnected()) {
            if (getPlatformType() == PlatformType.ANDROID) {
                openDownloadScreenForNetworkError(true,
                        () -> getAppCMSAndroid(tryCount, launchSuccessfull));
            } else {
                launchBlankPage();
            }
        } else {
            if (isUserLoggedIn()) {
                if (appPreference.isLoginWithLinkYourAccount() && getPlatformType() == PlatformType.TV) {
                    try {
                        String deviceName;
                        String platform;
                        if (platformType.equals(PlatformType.ANDROID)) {
                            deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
                            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                        } else {
                            if (isFireTVDevice(currentContext)) {
                                deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                                platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
                            } else {
                                deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
                            }
                        }
                        appCmsSyncDeviceCodeAPICall.call(
                                currentActivity.getString(R.string.app_cms_sync_code_api_url,
                                        appCMSMain.getApiBaseUrl(),
                                        getDeviceId(),
                                        platform,
                                        //appCMSMain.getInternalName(),
                                        appCMSMain.getInternalName(),
                                        CommonUtils.getDeviceName(),
                                        deviceName),
                                getAuthToken(),
                                apikey,
                                false,
                                new Action1<SyncDeviceCode>() {
                                    @Override
                                    public void call(SyncDeviceCode syncDeviceCode) {
                                        if (null != syncDeviceCode) {
                                            appPreference.setLoginWithLinkYourAccount(true);
                                            appPreference.setRefreshToken(syncDeviceCode.getRefreshToken());
                                            appPreference.setAuthToken(syncDeviceCode.getAuthorizationToken());
                                            setLoggedInUser(syncDeviceCode.getUserId());
                                            firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
                                            appPreference.setLoggedInUserName(syncDeviceCode.getName());
                                            appPreference.setLoggedInUserEmail(syncDeviceCode.getEmail());
                                            refreshSubscriptionData(null, true);
                                        } else {
                                            signinAnonymousUser();
                                            appPreference.setLoginWithLinkYourAccount(false);
                                            appPreference.setRefreshToken(null);
                                            appPreference.setAuthToken(null);
                                            setLoggedInUser(null);
                                            appPreference.setLoggedInUserName(null);
                                            appPreference.setLoggedInUserEmail(null);
                                            appPreference.setIsUserSubscribed(false);
                                            appPreference.setActiveSubscriptionPlanName(null);
                                        }
                                    }
                                });
                    } catch (Exception e) {
                    }
                } else {
                    getUserData(userIdentity -> {
                        if (isMobileUpdateRequired(this, getLoggedInPhone()) && platformType == PlatformType.ANDROID) {
                            navigateToUpdateMobileNumberPage();
                        }
                    });
                    try {
                        if (isLaunched() && currentActivity instanceof AppCMSPageActivity) {
                            ((AppCMSPageActivity) currentActivity).checkedFixedBanner();
                        }
                    } catch (Exception e) {
                        //launchBlankPage();
                    }
                }
                populateUserHistoryData();
                if (isRecommendationEnabled())
                    getUserRecommendedGenres(getLoggedInUser(), null, false, false);

            }

            if (CommonUtils.isOnePlusTV() && CommonUtils.isValidDeepLink(getCurrentContext(), deeplinkSearchQuery)) {
                processDeepLink();
                return;
            }
            if ((getCurrentActivity() instanceof AppCMSPageActivity) && !((AppCMSPageActivity) getCurrentActivity()).isBinderStackEmpty() && launchSuccessfull != null) {
                launchSuccessfull.call(true);
                ///  sendDeepLinkAction(Uri.parse(appPreference.getUADeepLink()));
                /// processDeepLink();
                stopLoader();
                return;
            }
            if (appCMSMain.getFeatures().isSplashModule() && splashPage != null) {
                if (getPlatformType() == PlatformType.ANDROID) {
                    MetaPage launchPage = splashPage;
                    if (deeplinkSearchQuery != null)
                        launchPage = homePage;
                    navigateToPage(launchPage.getPageId(),
                            launchPage.getPageFunction(),
                            createPageUiUrl(launchPage),
                            false,
                            false,
                            false,
                            false,
                            false,
                            deeplinkSearchQuery);
                    if (launchSuccessfull != null)
                        launchSuccessfull.call(true);
                } else {
                    if (isNewsTemplate()) {
                        Intent letsGoIntent = new Intent(LETS_GO_ACTION);
                        currentActivity.sendBroadcast(letsGoIntent);
                        showLoadingDialog(false);
                    } else {
                        boolean launchSuccess = navigateToTVPage(homePage.getPageId(),
                                homePage.getPageFunction(),
                                homePage.getPageUI(),
                                true,
                                null,
                                false,
                                false,
                                false, false, false, false);
                    }
                }
            } else {
                if (getPlatformType() == PlatformType.ANDROID) {
                    if (homePage.getPageId() != null) {
                        boolean launchSuccess = navigateToPage(homePage.getPageId(),
                                homePage.getPageFunction(),
                                createPageUiUrl(homePage),
                                false,
                                true,
                                false,
                                true,
                                false,
                                deeplinkSearchQuery);
                        if (launchSuccessfull != null)
                            launchSuccessfull.call(true);
                        if (!launchSuccess) {
                            launchBlankPage();
                        }
                    }
                } else {
                    if (isNewsTemplate()) {
                        Intent letsGoIntent = new Intent(LETS_GO_ACTION);
                        currentActivity.sendBroadcast(letsGoIntent);
                        showLoadingDialog(false);
                    } else {
                        if (homePage != null) {
                            boolean launchSuccess = navigateToTVPage(homePage.getPageId(),
                                    homePage.getPageFunction(),
                                    createPageUiUrl(homePage),
                                    true,
                                    null,
                                    false,
                                    false,
                                    false, false, false, false);
                        }
                    }
                    setShouldCheckTVUpgrade(true);
                }
            }
            cacheNavItems();
        }
    }

    private void getRecommendedContent(final RecommendationAPIAction history, String requestType) {
        try {
            String userIdValue = getLoggedInUser() != null ? getLoggedInUser() : "guest-user-id";
            String languageCodeValue = getLanguage().getLanguageCode();
            String countryCodeValue = getCountryCode();
            String contentType = "";
            if (isNewsTemplate()) {
                contentType = "Video";
            }
            String recommendatioAPIUrl = currentContext.getString(R.string.get_recommendation_api_url,
                    appCMSMain.getApiBaseUrl(),
                    userIdValue,
                    getAppCMSMain().getInternalName(),
                    countryCodeValue,
                    languageCodeValue,
                    requestType,
                    contentType,
                    "");

            appCMSHistoryCall.callRecommendation(recommendatioAPIUrl,
                    getAuthToken(),
                    getApiKey(),
                    history);
        } catch (IOException | NullPointerException e) {
            //Log.e(TAG, "getHistoryPageContent: " + e.toString());
        }
    }

    private void getRecommendedContent(final RecommendationAPIAction history,
                                       String requestType,
                                       String contentType,
                                       String moduleId) {
        try {
            String userIdValue = getLoggedInUser() != null ? getLoggedInUser() : "guest-user-id";
            String languageCodeValue = getLanguage().getLanguageCode();
            String countryCodeValue = getCountryCode();
            if (isNewsTemplate()) {
                contentType = "Video";
            }
            String recommendatioAPIUrl = currentContext.getString(R.string.get_recommendation_api_url,
                    appCMSMain.getApiBaseUrl(),
                    userIdValue,
                    getAppCMSMain().getInternalName(),
                    countryCodeValue,
                    languageCodeValue,
                    requestType,
                    contentType,
                    moduleId);

            appCMSHistoryCall.callRecommendation(recommendatioAPIUrl,
                    getAuthToken(),
                    getApiKey(),
                    history);
        } catch (IOException | NullPointerException e) {
            //Log.e(TAG, "getHistoryPageContent: " + e.toString());
        }
    }

    public void getRecommendedGenreContent(final String requestType,
                                           final String contentType,
                                           final String moduleId,
                                           final String[] genre,
                                           final Action1<AppCMSRecommendationGenreResult> recommendationListAction) {
        try {
            String userIdValue = getLoggedInUser() != null ? getLoggedInUser() : "guest-user-id";
            String languageCodeValue = getLanguage().getLanguageCode();
            String countryCodeValue = getCountryCode();
            String recommendationAPIUrl = currentContext.getString(R.string.get_recommendation_with_genre_api_url,
                    appCMSMain.getApiBaseUrl(),
                    userIdValue,
                    getAppCMSMain().getInternalName(),
                    countryCodeValue,
                    languageCodeValue,
                    requestType,
                    contentType,
                    moduleId,
                    TextUtils.join(",", genre));

            appCMSHistoryCall.callRecommendationGenre(recommendationAPIUrl,
                    getAuthToken(),
                    getApiKey(),
                    recommendationListAction);
        } catch (Exception e) {
            //Log.e(TAG, "getHistoryPageContent: " + e.toString());
        }
    }

    public void getRecommendedData(final Action1<AppCMSHistoryResult> appCMSHistoryResultAction, String requestType) {
        if (currentActivity != null) {
            try {
                getRecommendedContent(new RecommendationAPIAction() {
                    @Override
                    public void call(AppCMSHistoryResult appCMSHistoryResult) {
                        if (appCMSHistoryResult != null) {
                            Observable.just(appCMSHistoryResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(appCMSHistoryResultAction);
                        } else {
                            Observable.just((AppCMSHistoryResult) null)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(appCMSHistoryResultAction);
                        }
                    }
                }, requestType);
            } catch (Exception e) {
                Observable.just((AppCMSHistoryResult) null)
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe(appCMSHistoryResultAction);
            }
        }
    }

    public void getRecommendedData(final Action1<AppCMSHistoryResult> appCMSHistoryResultAction,
                                   String requestType,
                                   String contentType,
                                   String moduleId) {
        if (currentActivity != null) {
            try {
                getRecommendedContent(new RecommendationAPIAction() {
                    @Override
                    public void call(AppCMSHistoryResult appCMSHistoryResult) {
                        if (appCMSHistoryResult != null) {
                            Observable.just(appCMSHistoryResult)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(appCMSHistoryResultAction);
                        } else {
                            Observable.just((AppCMSHistoryResult) null)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(appCMSHistoryResultAction);
                        }
                    }
                }, requestType, contentType, moduleId);
            } catch (Exception e) {
                Observable.just((AppCMSHistoryResult) null)
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe(appCMSHistoryResultAction);
            }
        }
    }

    private LinkedHashMap<String, ContentDatum> recommendationData = new LinkedHashMap<>();
    private LinkedHashMap<String, ContentDatum> popularRecommendData = new LinkedHashMap<>();

    public void populateRecommendedList(final Action1<AppCMSHistoryResult> recommendationListAction,
                                        String requestType,
                                        String contentType,
                                        String moduleId) {
        requestType = !TextUtils.isEmpty(requestType) ? requestType : "personal";
        getRecommendedData(appCMSHistoryResult -> {
            try {
                if (appCMSHistoryResult != null) {
                    Observable.just(appCMSHistoryResult)
                            .onErrorResumeNext(throwable -> Observable.empty())
                            .subscribe(recommendationListAction);
                } else {
                    Observable.just((AppCMSHistoryResult) null)
                            .onErrorResumeNext(throwable -> Observable.empty())
                            .subscribe(recommendationListAction);
                }
            } catch (Exception e) {
                Observable.just((AppCMSHistoryResult) null)
                        .onErrorResumeNext(throwable -> Observable.empty())
                        .subscribe(recommendationListAction);
            }

        }, requestType, contentType, moduleId);
    }

    private void populateRecommendedList() {
        getRecommendedData(appCMSHistoryResult -> {
            try {
                int contentDatumLength = appCMSHistoryResult.getRecords().size();
                List<Record> recommendedRecords = appCMSHistoryResult.getRecords();
                recommendationData.clear();

                for (int i = 0; i < contentDatumLength; i++) {

                    ContentDatum recordContentDatum = recommendedRecords.get(i).recommendationToContentDatum();
                    recommendationData.put(recordContentDatum.getGist().getId(), recordContentDatum);
                }
                if (currentActivity != null && currentActivity instanceof AppCMSPageActivity && isHomePage(((AppCMSPageActivity) currentActivity).getCurrentPageId())) {
                    sendRefreshPageAction();
                }

            } catch (Exception e) {

            }

        }, "personal");
    }

    private void populateRecommendedPopularList() {
        /*getRecommendedData(appCMSHistoryResult -> {
            try {
                int contentDatumLength = appCMSHistoryResult.getRecords().size();
                List<Record> recommendedRecords = appCMSHistoryResult.getRecords();
                popularRecommendData.clear();

                for (int i = 0; i < contentDatumLength; i++) {
                    ContentDatum recordContentDatum = recommendedRecords.get(i).recommendationToContentDatum();
                    popularRecommendData.put(recordContentDatum.getGist().getId(), recordContentDatum);
                }

                if (currentActivity != null && currentActivity instanceof AppCMSPageActivity && isHomePage(((AppCMSPageActivity) currentActivity).getCurrentPageId())) {
                    sendRefreshPageAction();
                }
            } catch (Exception e) {

            }

        }, "popular");*/
    }

    public ArrayList<ContentDatum> getRecommendationList(String trayType, String contentType) {
        if (recommendationData != null) {
            ArrayList<ContentDatum> continueWatching = new ArrayList<>();
            recommendedIds = new ArrayList<>();
            for (ContentDatum data : recommendationData.values()) {
                if ((data.getGist().getContentType() != null && !data.getGist().getContentType().toLowerCase().equalsIgnoreCase("series")) || (data.getGist().getMediaType() != null && !data.getGist().getMediaType().toLowerCase().equalsIgnoreCase("series")))
                    recommendedIds.add(data.getGist().getId());
                continueWatching.add(data);
            }
            return continueWatching;
        }
        return null;
    }

    //TODo remove this after recommendation2
    public ArrayList<ContentDatum> getRecommendationList() {
        if (recommendationData != null) {
            ArrayList<ContentDatum> continueWatching = new ArrayList<>();
            recommendedIds = new ArrayList<>();
            for (ContentDatum data : recommendationData.values()) {
                if ((data.getGist().getContentType() != null && !data.getGist().getContentType().toLowerCase().equalsIgnoreCase("series")) || (data.getGist().getMediaType() != null && !data.getGist().getMediaType().toLowerCase().equalsIgnoreCase("series")))
                    recommendedIds.add(data.getGist().getId());
                continueWatching.add(data);
            }
            return continueWatching;
        }
        return null;
    }

    //TODo remove this after recommendation2
    public ArrayList<ContentDatum> getRecommendationPopularList() {

        if (popularRecommendData != null) {
            ArrayList<ContentDatum> continueWatching = new ArrayList<>();
            for (ContentDatum data : popularRecommendData.values()) {
                continueWatching.add(data);
            }
            return continueWatching;
        }
        return null;
    }


    public void cacheNavItems() {
        try {
            List<NavigationPrimary> navigationPrimaryList = null;
            if (getPlatformType() == PlatformType.ANDROID && getNavigation() != null) {
                navigationPrimaryList = getNavigation().getTabBar();
            } else if (getPlatformType() == PlatformType.TV && getNavigation() != null) {
                navigationPrimaryList = getNavigation().getNavigationPrimary();
            }

            if (navigationPrimaryList != null) {
                for (int i = 0; i < navigationPrimaryList.size(); i++) {
                    NavigationPrimary navigationItem = navigationPrimaryList.get(i);
                    if (navigationItem.getPageId() != null && !navigationItem.getPageId().equals("Menu Screen") &&
                            !navigationItem.getPageId().equals("Search Screen")) {
                        cachePage(navigationItem.getPageId(), (platformType == PlatformType.ANDROID));

                        if (navigationItem.getGeoTargetedPageIdsMap() != null && navigationItem.getGeoTargetedPageIdsMap().size() > 0) {
                            String geoTargetedId = navigationItem.getGeoTargetedPageIdsMap().get(getCountryCode());
                            if (geoTargetedId != null)
                                cachePage(geoTargetedId, false);
                        }

                    }
                }
            }
            if (platformType == PlatformType.ANDROID) {
                cachePage(appPreference.getDownloadPageId(), true);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void initializeAppCMSAnalytics() {
        if (appCMSAndroid != null && appCMSAndroid.getAnalytics() != null &&
                appCMSAndroid.getAnalytics().getGoogleAnalyticsId() != null) {
            initializeGA(appCMSAndroid.getAnalytics().getGoogleAnalyticsId());

        }
        appPreference.setAppOpenCount();
        initAppsFlyer(appCMSAndroid);
    }

    private void getAppCMSModules(AppCMSAndroidUI appCMSAndroidUI,
                                  boolean forceLoadFromNetwork,
                                  boolean bustCache,
                                  Action1<AppCMSAndroidModules> readyAction) {
        if (currentActivity != null) {
            appCMSAndroidModuleCall.call(appCMSAndroidUI.getBlocksBundleUrl(),
                    apikey,
                    appCMSAndroidUI.getVersion(),
                    forceLoadFromNetwork,
                    bustCache,
                    readyAction);
        }
    }

    public void processDeepLink() {
        String path = deeplinkSearchQuery.getPath();
        if (!TextUtils.isEmpty(deeplinkSearchQuery.getHost()))
            path = File.separatorChar + deeplinkSearchQuery.getHost() + path;
        launchVideoPlayerFromPermalink(path);
        resetDeeplinkQuery();
    }

    public void launchVideoPlayerFromPermalink(String pagePath) {
        String apiUrl = getApiUrl(false, false, false, false, null, appCMSMain.getApiBaseUrl(), "/content/pages", appCMSMain.getInternalName(), pagePath, false);
        getPageIdContent(apiUrl, pagePath, null, false, false, new AppCMSPageAPIAction(false, false, false, null, null, null, "", pagePath, false, false, null) {
            @Override
            public void call(AppCMSPageAPI appCMSPageAPI) {
                if (appCMSPageAPI != null) {
                    try {
                        for (int i = 0; i < appCMSPageAPI.getModules().size(); i++) {
                            if (appCMSPageAPI.getModules().get(i).getContentData() != null) {
                                for (int j = 0; j < appCMSPageAPI.getModules().get(i).getContentData().size(); j++) {
                                    if (appCMSPageAPI.getModules().get(i).getContentData().get(j).getGist().getPermalink().equalsIgnoreCase(pagePath)) {
                                        if (!appCMSPageAPI.getModules().get(i).getContentData().get(j).getGist().getContentType().equalsIgnoreCase("SERIES")) {
                                            ContentDatum contentDatum = new ContentDatum();
                                            Gist gist = new Gist();
                                            gist.setId(appCMSPageAPI.getModules().get(i).getContentData().get(j).getGist().getId());
                                            contentDatum.setGist(gist);
                                            launchTVVideoPlayer(contentDatum, 0, null, 0, null);
                                        } else {
                                            if (appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason() != null
                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().size() > 0
                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().get(0) != null
                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().get(0).getEpisodes() != null
                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().get(0).getEpisodes().size() > 0
                                                    && appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().get(0).getEpisodes().get(0) != null) {
                                                String contentId = appCMSPageAPI.getModules().get(i).getContentData().get(j).getSeason().get(0).getEpisodes().get(0).getId();
                                                playEpisode(appCMSPageAPI.getModules().get(i).getContentData().get(j), contentId);
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        Log.d(TAG, e.toString());
                    }
                }
            }
        });
    }

    public MetaPage getSeeAllPage() {
        return seeAllPage;
    }

    public MetaPage getConceptPage() {
        return conceptPage;
    }

    public MetaPage getBrowsePage() {
        return browsePage;
    }

    private void getAppCMSPage(String url,
                               final Action1<AppCMSPageUI> onPageReady,
                               boolean loadFromFile,
                               boolean bustCache) {
        String authToken = isUserLoggedIn() ? appPreference.getAuthToken() : appPreference.getAnonymousUserToken();
        GetAppCMSPageUIAsyncTask.Params params =
                new GetAppCMSPageUIAsyncTask.Params.Builder()
                        .url(url)
                        .xApiKey(apikey)
                        .authToken(authToken)
                        .bustCache(bustCache)
                        .loadFromFile(loadFromFile)
                        .build();
        new GetAppCMSPageUIAsyncTask(appCMSPageUICall, onPageReady).execute(params);
    }

    private void getAppCmsLanguageFile(String url,
                                       final Action1<Resources> onPageReady,
                                       boolean loadFromFile,
                                       boolean bustCache) {
        GetAppCMSResourceAsyncTask.Params params =
                new GetAppCMSResourceAsyncTask.Params.Builder()
                        .url(url)
                        .xApiKey(apikey)
                        .bustCache(false)
                        .loadFromFile(false)
                        .build();
        new GetAppCMSResourceAsyncTask(appCMSResourceCall, onPageReady).execute(params);
    }


    public MetaPage getLibraryPage() {
        return libraryPage;
    }

    private void queueMetaPages(List<MetaPage> metaPageList) {
        if (pagesToProcess == null) {
            pagesToProcess = new ConcurrentLinkedQueue<>();
        }

        if (!metaPageList.isEmpty()) {
            MetaPage tempHomePage = null;
            for (MetaPage metaPage : metaPageList) {
                pageIdToMetaPageMap.put(metaPage.getPageIdForMap(), metaPage);
                pageIdToPageAPIUrlMap.put(metaPage.getPageIdForMap(), metaPage.getPageAPI());
                pageIdToPageFunctionMap.put(metaPage.getPageIdForMap(), metaPage.getPageFunction());

                String action = pageNameToActionMap.get(metaPage.getPageFunction().trim());
                if (action != null && actionToPageMap.containsKey(action)) {
                    actionToPageNameMap.put(action, metaPage.getPageFunction());
                    actionToPageAPIUrlMap.put(action, metaPage.getPageAPI());
                    actionTypeToMetaPageMap.put(actionToActionTypeMap.get(action), metaPage);
                }

                if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.PAGE_ACCOUNT_SETTINGS ||
                        jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                                == AppCMSUIKeyType.PAGE_MY_ACCOUNT) {
                    accountSettingsPage = metaPage;
                    new SoftReference<Object>(accountSettingsPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.PAGE_ENTITLEMENT_SCREEN) {
                    entitlementScreenPage = metaPage;
                    new SoftReference<Object>(entitlementScreenPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.PAGE_PLAYER_DETAIL) {
                    playerDetailPage = metaPage;
                    new SoftReference<Object>(playerDetailPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.EDIT_PROFLE_PAGE) {
                    editProfilePage = metaPage;
                    new SoftReference<Object>(editProfilePage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.PROFLE_PAGE) {
                    profilePage = metaPage;
                    new SoftReference<Object>(profilePage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.RESET_PASSWORD_PAGE) {
                    resetPasswordPage = metaPage;
                    new SoftReference<Object>(resetPasswordPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.FILTER_PAGE) {
                    filterPage = metaPage;
                    new SoftReference<Object>(filterPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.ANDROID_LOGIN_PAGE) {
                    loginScreenPage = metaPage;
                    new SoftReference<Object>(loginScreenPage, referenceQueue);
                } else if ((jsonValueKeyMap.get(metaPage.getPageFunction().trim())
                        == AppCMSUIKeyType.PAGE_SEE_ALL_CATEGORY
                        || metaPage.getPageName().contains("Categories"))
                        && metaPage.getPageType().contains("Category Template Page")) {
                    seeAllPage = metaPage;
                    new SoftReference<Object>(seeAllPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_INSTRUCTOR_KEY) {
                    instructorPage = metaPage;
                    actionTypeToMetaPageMap.put(actionToActionTypeMap.get(action), metaPage);
                    new SoftReference<Object>(instructorPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_CONCEPT_LANDING_KEY) {
                    conceptPage = metaPage;
                    new SoftReference<Object>(conceptPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_EQUIPMENT_KEY) {
                    equipmentSelectionPage = metaPage;
                    new SoftReference<Object>(equipmentSelectionPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SPLASH_SCREEN_KEY) {
                    splashPage = metaPage;
                    new SoftReference<Object>(splashPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_AUTH_SCREEN_KEY) {
                    loginPage = metaPage;
                    new SoftReference<Object>(loginPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SIGN_UP_SCREEN_KEY) {
                    signupPage = metaPage;
                    new SoftReference<Object>(signupPage, referenceQueue);
                }
             /*   else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SEARCH_SCREEN_KEY) {
                    searchPage = metaPage;
                    new SoftReference<Object>(searchPage, referenceQueue);
                }*/
                else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_DOWNLOAD_SETTINGS_KEY) {
                    downloadQualityPage = metaPage;
                    new SoftReference<Object>(downloadQualityPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_DOWNLOAD_KEY ||
                        jsonValueKeyMap.get(metaPage.getPageFunction())
                                == AppCMSUIKeyType.ANDROID_DOWNLOAD_NAV_KEY) {
                    downloadPage = metaPage;
                    new SoftReference<Object>(downloadPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PRIVACY_POLICY_KEY) {
                    privacyPolicyPage = metaPage;
                    new SoftReference<Object>(privacyPolicyPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.LINK_ACCOUNT_PAGE_KEY) {
                    linkAccountPage = metaPage;
                    new SoftReference<Object>(linkAccountPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.SUB_NAV_PAGE_KEY) {
                    subNavPage = metaPage;
                    new SoftReference<Object>(subNavPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.TERMS_OF_SERVICE_KEY) {
                    tosPage = metaPage;
                    new SoftReference<Object>(privacyPolicyPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.WEATHER_PAGE) {
                    weatherPage = metaPage;
                    new SoftReference<Object>(weatherPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_SEARCH_KEY) {
                    searchPage = metaPage;
                    new SoftReference<Object>(searchPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_SEARCH_KEY) {
                    searchPage = metaPage;
                    new SoftReference<Object>(searchPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_REFERRAL_KEY) {
                    referralPage = metaPage;
                    new SoftReference<Object>(referralPage, referenceQueue);
                }


                if (navigation != null &&
                        navigation.getNavigationPrimary() != null &&
                        navigation.getNavigationPrimary().get(0) != null &&
                        navigation.getNavigationPrimary().get(0).getPageId() != null) {
                    if (platformType == PlatformType.TV &&
                            metaPage.getPageId().equalsIgnoreCase(navigation.getNavigationPrimary().get(0).getPageId())) {
                        tempHomePage = metaPage;
                    }
                }
                if (platformType == PlatformType.ANDROID
                        && navigation.getTabBar() != null
                        && navigation.getTabBar().size() > 0
                        && navigation.getTabBar().get(0).getPageId() != null
                        && metaPage.getPageId().equalsIgnoreCase(navigation.getTabBar().get(0).getPageId())
                ) {
                    tempHomePage = metaPage;
                }

                if (platformType == PlatformType.TV) {
                    if (jsonValueKeyMap.get(metaPage.getPageFunction())
                            == AppCMSUIKeyType.ANDROID_HOME_SCREEN_KEY && homePage == null) {
                        if (navigation.getNavigationPrimary() != null) {
                            for (NavigationPrimary navigationPrimary : navigation.getNavigationPrimary()) {
                                if (navigationPrimary.getPageId() != null && navigationPrimary.getPageId().equalsIgnoreCase(metaPage.getPageId())) {
                                    homePage = metaPage;
                                    break;
                                }
                            }
                        } else {
                            homePage = metaPage;
                        }
                        //homePage = metaPage;
                        new SoftReference<Object>(homePage, referenceQueue);
                    }
                } else if (platformType == PlatformType.ANDROID) {
                    if (appCMSMain.getId() != null && appCMSMain.getId().equalsIgnoreCase("cf9c3bbc-917a-4447-90ab-55bf78b01f49")) {
                        if ((jsonValueKeyMap.get(metaPage.getPageFunction())
                                == AppCMSUIKeyType.ANDROID_HOME_SCREEN_KEY)
                                && homePage == null) {
                            if (mainheader != null && mainheader.size() > 0) {
                                for (int i = 0; i < mainheader.size(); i++) {
                                    for (int j = 0; j < mainheader.get(i).getData().size(); j++) {
                                        if (mainheader.get(i).getData() != null && mainheader.get(i).getData().get(j) != null &&
                                                mainheader.get(i).getData().get(j).getPageId() != null) {
                                            if (mainheader.get(i).getData().get(j).getPageId().equalsIgnoreCase(metaPage.getPageId())) {
                                                homePage = metaPage;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            new SoftReference<Object>(homePage, referenceQueue);
                        }
                    } else {
                        if ((jsonValueKeyMap.get(metaPage.getPageFunction())
                                == AppCMSUIKeyType.ANDROID_HOME_SCREEN_KEY)
                                && homePage == null) {
                            for (NavigationPrimary navigationPrimary : navigation.getTabBar()) {
                                if (navigationPrimary != null && navigationPrimary.getPageId() != null && navigationPrimary.getPageId().equalsIgnoreCase(metaPage.getPageId())) {
                                    homePage = metaPage;
                                    break;
                                }
                            }
                            //homePage = metaPage;
                            new SoftReference<Object>(homePage, referenceQueue);
                        }
                    }

                }
                if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_MOVIES_SCREEN_KEY) {
                    moviesPage = metaPage;
                    new SoftReference<Object>(moviesPage, referenceQueue);
                }
                if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_CONTACT_SCREEN_KEY
                        || jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_CONTACT_US_SCREEN_KEY
                        || jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_CONTACT_US_ROKU_SCREEN_KEY) {
                    contactUsPage = metaPage;
                    new SoftReference<Object>(contactUsPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SHOWS_SCREEN_KEY) {
                    showsPage = metaPage;
                    new SoftReference<Object>(showsPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_CUSTOM_NAVIGATION_KEY) {
                    customNavigation = metaPage;
                    new SoftReference<Object>(customNavigation, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_PLAYLIST_KEY) {
                    playlistPage = metaPage;
                    new SoftReference<Object>(playlistPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_TEAM_DETAIL_KEY) {
                    teamDetailPage = metaPage;
                    new SoftReference<Object>(teamDetailPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SUBSCRIPTION_SCREEN_KEY) {
                    try {
                        if ((navigation.getSettings().getPrimaryCta().getDisplayedPath().contains("View Plans")
                                || navigation.getSettings().getPrimaryCta().getDisplayedPath().contains("ViewPlans"))
                                && navigation.getSettings().getPrimaryCta().getUrl().equalsIgnoreCase("/viewplans")
                                && navigation.getSettings().getPrimaryCta().getPageId().equalsIgnoreCase(metaPage.getPageId())) {
                            subscriptionPage = metaPage;

                        }
                    } catch (Exception e) {
                        /**
                         * This catch block will handle case when there is only one ViewPlan Page
                         * without any reference in Navigation
                         */
                        subscriptionPage = metaPage;
                    } finally {
                        if (subscriptionPage == null) {
                            subscriptionPage = metaPage;
                        }
                    }
                    new SoftReference<Object>(subscriptionPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_HISTORY_SCREEN_KEY
                        || jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_HISTORY_NAV_KEY) {
                    historyPage = metaPage;
                    new SoftReference<Object>(historyPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_WATCHLIST_SCREEN_KEY) {
                    watchlistPage = metaPage;
                    new SoftReference<Object>(watchlistPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_SCHEDULE_TRAY_TITLE_KEY) {
                    watchlistPage = metaPage;
                    new SoftReference<Object>(watchlistPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_SCHEDULE_SCREEN_KEY) {
                    schedulePage = metaPage;
                    new SoftReference<Object>(schedulePage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_PERSON_SCREEN_KEY) {
                    personPage = metaPage;
                    new SoftReference<Object>(personPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_EVENT_SCREEN_KEY) {
                    eventPage = metaPage;
                    new SoftReference<Object>(eventPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_BUNDLE_DETAIL_KEY) {
                    eventPage = metaPage;
                    new SoftReference<Object>(eventPage, referenceQueue);
                }

                if (jsonValueKeyMap.get(metaPage.getPageName())
                        == AppCMSUIKeyType.ANDROID_FIGHTER_ROSTER_SCREEN_KEY) {
                    rosterPage = metaPage;
                    new SoftReference<Object>(rosterPage, referenceQueue);
                } else if ((jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_ARTICLE_SCREEN_KEY)
                        /*|| metaPage.getPageName().contains(getCurrentActiveContext().getString(R.string.app_cms_pagename_articlescreen_key))
                        || metaPage.getPageFunction().contains(getCurrentActiveContext().getString(R.string.app_cms_pagename_articlescreen_key)) */) {
                    articlePage = metaPage;
                    new SoftReference<Object>(rosterPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_PHOTOGALLERY_SCREEN_KEY) {
                    photoGalleryPage = metaPage;
                    new SoftReference<Object>(rosterPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.ANDROID_LIBRARY_SCREEN_KEY ||
                        jsonValueKeyMap.get(metaPage.getPageFunction())
                                == AppCMSUIKeyType.ANDROID_LIBRARY_NAV_KEY) {
                    libraryPage = metaPage;
                    new SoftReference<Object>(libraryPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction()) == AppCMSUIKeyType.JUSPAY_PAYMENT_SCREEN_KEY) {
                    juspayPaymentPage = metaPage;
                    new SoftReference<Object>(juspayPaymentPage, referenceQueue);
                } else if (jsonValueKeyMap.get(metaPage.getPageFunction()) == AppCMSUIKeyType.SUBSCRIPTION_FLOW_PAGE_KEY) {
                    subscriptionFlowPage = metaPage;
                    new SoftReference<Object>(subscriptionFlowPage, referenceQueue);
                }

                int pageToQueueIndex = -1;
                if (isAppSVOD() && !isUserLoggedIn()) {
                    launchType = LaunchType.LOGIN_AND_SIGNUP;
                }

                pagesToProcess.addAll(metaPageList);
            }

            if (homePage == null) {
                homePage = tempHomePage;
            }

            if (getPlatformType() == PlatformType.TV && getTemplateType() != TemplateType.SPORTS) {
                homePage = tempHomePage;
            }

        }
    }

    public void cachePage(String pageId, boolean downloadPageContent) {
        MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
        if (metaPage != null) {
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            if (appCMSPageUI == null) {
                getAppCMSPage(createPageUiUrl(metaPage),
                        appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUIResult);
                                }
                            }
                        },
                        loadFromFile,
                        false);
            }

            if (downloadPageContent) {
                String baseUrl = appCMSMain.getApiBaseUrl();
                String endPoint = metaPage.getPageAPI();
                String siteId = appCMSMain.getInternalName();
                // Cache meta page when the app is loading
                getPageIdContent(getApiUrl(true,
                        false,
                        false,
                        false,
                        null,
                        baseUrl,
                        endPoint,
                        siteId,
                        metaPage.getPageId(),
                        !TextUtils.isEmpty(appCMSMain.getApiBaseUrlCached())),
                        metaPage.getPageId(),
                        null,
                        !TextUtils.isEmpty(appCMSMain.getApiBaseUrlCached()),
                        false,
                        null);
            }
        }
    }

    private void processMetaPagesList(final boolean loadFromFile,
                                      List<MetaPage> metaPageList,
                                      final Action0 onPagesFinishedAction) {

        if (currentActivity != null) {
            GetAppCMSPageUIAsyncTask getAppCMSPageUIAsyncTask =
                    new GetAppCMSPageUIAsyncTask(appCMSPageUICall, null);

            List<Observable<GetAppCMSPageUIAsyncTask.MetaPageUI>> observables = new ArrayList<>();
            for (MetaPage metaPage : metaPageList) {
                if (metaPage.getPageFunction() != null && (metaPage.getPageFunction().contains("My Downloads") ||
                        metaPage.getPageFunction().contains("Downloads") || isDownloadPage(metaPage.getPageId()))) {
                    appPreference.setDownloadPageId(metaPage.getPageId());
                }

                String url = createPageUiUrl(metaPage);

                GetAppCMSPageUIAsyncTask.Params params =
                        new GetAppCMSPageUIAsyncTask.Params.Builder()
                                .url(url)
                                .xApiKey(apikey)
                                .bustCache(false)
                                .loadFromFile(loadFromFile)
                                .metaPage(metaPage)
                                .build();
                observables.add(getAppCMSPageUIAsyncTask.getObservable(params));
            }

            Observable.zip(observables, args -> {
                try {
                    for (Object arg : args) {
                        if (arg instanceof GetAppCMSPageUIAsyncTask.MetaPageUI) {
                            GetAppCMSPageUIAsyncTask.MetaPageUI metaPageUI = (GetAppCMSPageUIAsyncTask.MetaPageUI) arg;
                            navigationPages.put(metaPageUI.getMetaPage().getPageId(), metaPageUI.getAppCMSPageUI());
                            String action = pageNameToActionMap.get(metaPageUI.getMetaPage().getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, metaPageUI.getAppCMSPageUI());
                                actionToPageNameMap.put(action, metaPageUI.getMetaPage().getPageFunction());
                                actionToPageAPIUrlMap.put(action, metaPageUI.getMetaPage().getPageAPI());
                                actionTypeToMetaPageMap.put(actionToActionTypeMap.get(action), metaPageUI.getMetaPage());
                                //Log.d(TAG, "Action: " + action + "  PageAPI URL: "
//                                        + metaPage.getPageAPI());
                            }
                        }
                    }
                } catch (Exception e) {
                    return false;
                }
                return true;
            }).onErrorResumeNext(throwable -> Observable.empty())
                    .subscribe(r -> {
                        if (r) {
                            onPagesFinishedAction.call();
                        } else {
                            launchBlankPage();
                        }
                    });
        }
    }

    private void processMetaPagesQueue(final boolean loadFromFile,
                                       final Action0 onPagesFinishedAction) {
        if (currentActivity != null) {
            final MetaPage metaPage = pagesToProcess.remove();

            //Log.d(TAG, "Processing meta page " +
//                    metaPage.getPageFunction() + ": " +
//                    metaPage.getPageId() + " " +
//                    createPageUiUrl(metaPage) + " " +
//                    metaPage.getPageAPI());
            if (metaPage.getPageFunction().contains("Downloads") && !metaPage.getPageFunction().contains("Settings")) {

                appPreference.setDownloadPageId(metaPage.getPageId());
            }

            pageIdToPageAPIUrlMap.put(metaPage.getPageId(), metaPage.getPageAPI());
            pageIdToPageFunctionMap.put(metaPage.getPageId(), metaPage.getPageFunction());

            getAppCMSPage(createPageUiUrl(metaPage),
                    appCMSPageUI -> {
                        try {
                            navigationPages.put(metaPage.getPageId(), appCMSPageUI);
                            String action = pageNameToActionMap.get(metaPage.getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, appCMSPageUI);
                                actionToPageNameMap.put(action, metaPage.getPageFunction());
                                actionToPageAPIUrlMap.put(action, metaPage.getPageAPI());
                                actionTypeToMetaPageMap.put(actionToActionTypeMap.get(action), metaPage);
                                //Log.d(TAG, "Action: " + action + "  PageAPI URL: "
//                                        + metaPage.getPageAPI());
                            }
                            if (!pagesToProcess.isEmpty()) {

                                AppCMSPresenter.this.processMetaPagesQueue(loadFromFile,
                                        onPagesFinishedAction);
                            } else {
                                onPagesFinishedAction.call();
                            }
                        } catch (Exception e) {
                            //Log.e(TAG, "Error retrieving AppCMS Page UI: " + e.getMessage());
                            AppCMSPresenter.this.launchBlankPage();
                        }
                    },
                    loadFromFile,
                    false);
        }
    }

    public AppCMSPageUI getAppCMSPageUI(String pageName) {
        String action = pageNameToActionMap.get(pageName);
        if (action != null && actionToPageMap.containsKey(action)) {
            return actionToPageMap.get(action);
        }
        return null;
    }

    /**
     * Temp method for loading download Quality screen from Assets till json is not updated at Server
     */
    @SuppressWarnings("unused")
    public AppCMSPageUI getDataFromFile(String fileName) {
        StringBuilder buf = new StringBuilder();
        try {
            InputStream json = currentActivity.getAssets().open(fileName);
            BufferedReader in =
                    new BufferedReader(new InputStreamReader(json, StandardCharsets.UTF_8));
            String str;

            while ((str = in.readLine()) != null) {
                buf.append(str);
            }

            in.close();
        } catch (Exception e) {
            //Log.e(TAG, "Error getting data from file: " + e.getMessage());
        }

        Gson gson = new Gson();

        return gson.fromJson(buf.toString().trim(), AppCMSPageUI.class);
    }

    public boolean isHistoryPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && historyPage != null && pageId.equals(historyPage.getPageId());
    }

    public boolean isEditProfilePage(String pageId) {
        return !TextUtils.isEmpty(pageId) && editProfilePage != null && pageId.equals(editProfilePage.getPageId());
    }

    public boolean isEventPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && eventPage != null && pageId.equals(eventPage.getPageId());
    }

    public boolean isRosterPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && rosterPage != null && pageId.equals(rosterPage.getPageId());
    }

    public boolean isLibraryPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && libraryPage != null && pageId.equals(libraryPage.getPageId());
    }

    private int getWatchlistPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_WATCHLIST_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getPhotoGalleryPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_PHOTOGALLERY_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getArticlePage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_ARTICLE_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    public boolean isWatchlistPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && watchlistPage != null && pageId.equals(watchlistPage.getPageId());
    }

    public boolean isPlaylistPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && playlistPage != null && pageId.equals(playlistPage.getPageId());
    }

    public boolean isSchedulePage(String pageId) {
        return !TextUtils.isEmpty(pageId) && schedulePage != null && pageId.equals(schedulePage.getPageId());
    }

    public boolean isFollowPage(String pageId) {
        return !TextUtils.isEmpty(pageId) && followPage != null && pageId.equals(followPage.getPageId());
    }

    private int getSigninPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_AUTH_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getDownloadPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_DOWNLOAD_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getPlaylistPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_PLAYLIST_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getDownloadQualityPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_DOWNLOAD_SETTINGS_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getHomePage(List<MetaPage> metaPageList) {
        String id = navigation.getTabBar().get(0).getPageId();
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_HOME_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getMoviesPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_MOVIES_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getPrivacyPolicyPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.PRIVACY_POLICY_KEY) {
                return i;
            }
        }
        return -1;
    }

    private int getTOSPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.TERMS_OF_SERVICE_KEY) {
                return i;
            }
        }
        return -1;
    }


    public MetaPage getWeatherPage() {
        if (weatherPage == null && appCMSAndroid != null && appCMSAndroid.getMetaPages() != null && appCMSAndroid.getMetaPages().size() > 0) {
            for (MetaPage metaPage : appCMSAndroid.getMetaPages()) {
                if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.WEATHER_PAGE) {
                    weatherPage = metaPage;
                    break;
                }
            }
        }
        return weatherPage;
    }

    public MetaPage isShowPage() {
        if (weatherPage == null && appCMSAndroid != null && appCMSAndroid.getMetaPages() != null && appCMSAndroid.getMetaPages().size() > 0) {
            for (MetaPage metaPage : appCMSAndroid.getMetaPages()) {
                if (jsonValueKeyMap.get(metaPage.getPageFunction())
                        == AppCMSUIKeyType.PAGE_SHOW_KEY) {
                    weatherPage = metaPage;
                    break;
                }
            }
        }
        return weatherPage;
    }

    public MetaPage getMetaPage(String pageId) {
        return pageIdToMetaPageMap.get(pageId);
    }

    private int getShowsPage(List<MetaPage> metaPageList) {
        for (int i = 0; i < metaPageList.size(); i++) {
            if (jsonValueKeyMap.get(metaPageList.get(i).getPageFunction())
                    == AppCMSUIKeyType.ANDROID_SHOWS_SCREEN_KEY) {
                return i;
            }
        }
        return -1;
    }

    public MetaPage getSubscriptionPage() {
        return subscriptionPage;
    }

    public MetaPage getDownloadPage() {
        return downloadPage;
    }


    private String getAutoplayPageId(String mediaType) {
        String autoPlayKey = null;
        for (Map.Entry<String, String> entry : pageIdToPageFunctionMap.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            if (getPlatformType() == PlatformType.TV) {
                if (mediaType != null && mediaType.equalsIgnoreCase("episodic")) {
                    if (value.equalsIgnoreCase(currentActivity.getString(R.string.app_cms_page_autoplay_land_key))) {
                        autoPlayKey = key;
                        return autoPlayKey;
                    } else if (value.equals(currentActivity.getString(R.string.app_cms_page_autoplay_key))) {
                        autoPlayKey = key;
                    }
                } else {
                    if (value.equals(currentActivity.getString(R.string.app_cms_page_autoplay_key))) {
                        autoPlayKey = key;
                        return autoPlayKey;
                    }
                }
            } else if (getPlatformType() == PlatformType.ANDROID) {
                if (value.equals(currentActivity.getString(R.string.app_cms_page_autoplay_key))) {
                    return key;
                }
            }
        }


        for (Map.Entry<String, String> entry : pageIdToPageFunctionMap.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();

        }
        return autoPlayKey;
    }


    private String getPageId(AppCMSPageUI appCMSPageUI) {
        for (Map.Entry<String, AppCMSPageUI> entry : navigationPages.entrySet()) {
            if (entry.getValue() == appCMSPageUI) {
                return entry.getKey();
            }
        }
        return null;
    }

    private void clearMaps() {
        navigationPages.clear();
        navigationPageData.clear();
        pageIdToPageAPIUrlMap.clear();
        actionToPageAPIUrlMap.clear();
        actionToPageNameMap.clear();
        pageIdToPageFunctionMap.clear();
        pageIdToMetaPageMap.clear();
    }

    private void getAppCMSTV(int tryCount) {
        GetAppCMSAndroidUIAsyncTask.Params params =
                new GetAppCMSAndroidUIAsyncTask.Params.Builder()
                        .url(appCMSMain.getFireTv())
                        .xApiKey(apikey)
                        .loadFromFile(loadFromFile)
                        .bustCache(false)
                        .build();
        //Log.d(TAG, "Params: " + appCMSMain.getAndroid() + " " + loadFromFile);
        new GetAppCMSAndroidUIAsyncTask(appCMSAndroidUICall, appCMSAndroidUI -> {
            appCMSAndroid = appCMSAndroidUI;

            if (appCMSAndroidUI == null ||
                    appCMSAndroidUI.getMetaPages() == null ||
                    appCMSAndroidUI.getMetaPages().isEmpty()) {
                if (tryCount < 2) {
                    getAppCMSTV(tryCount + 1);
                } else {
                    launchErrorActivity(PlatformType.TV, null, true);
                }
            } else {

                if (appCMSAndroid.getGeoRestrictedCountries() != null &&
                        appCMSAndroid.getGeoRestrictedCountries().size() > 0) {
                    if (appCMSAndroid.getGeoRestrictedCountries().contains(getCountryCode())) {
                        launchErrorActivity(PlatformType.TV, localisedStrings.getGeoRestrictText(), false);
                        return;
                    }
                }

                if (!isUserLoggedIn()) {
                    if (appPreference.getAnonymousUserToken() == null) {
                        signinAnonymousUser();
                    }
                }

                navigation = appCMSAndroidUI.getNavigation();

                if (getTemplateType() == TemplateType.ENTERTAINMENT || isNewsTemplate()) {
                    //add search in navigation item.
                    NavigationPrimary myProfile = new NavigationPrimary();
                    if (null != currentActivity) {
                        myProfile.setPageId(currentActivity.getString(R.string.my_profile_pageid));
                        myProfile.setTitle(currentActivity.getString(R.string.app_cms_my_profile_label,
                                appCMSAndroidUI.getShortAppName() != null ?
                                        appCMSAndroidUI.getShortAppName() :
                                        currentActivity.getString(R.string.profile_label)));
                        myProfile.setIcon(currentActivity.getString(R.string.st_user_icon_key));
                        AccessLevels accessLevels = new AccessLevels();
                        accessLevels.setLoggedIn(true);
                        accessLevels.setLoggedOut(true);
                        accessLevels.setSubscribed(true);
                        myProfile.setAccessLevels(accessLevels);
                    }
                    if (getTemplateType() == TemplateType.ENTERTAINMENT
                            && (appCMSMain.getFeatures().isLoginModuleEnable() || appCMSMain.getFeatures().isSignupModuleEnable())) {
                        navigation.getNavigationPrimary().add(myProfile);
                    } else if (!(appCMSMain.getFeatures().isLoginModuleEnable() || appCMSMain.getFeatures().isSignupModuleEnable())) {
                        myProfile.setTitle(getLocalisedStrings().getMoreLabelText());
                        myProfile.setPagePath("More");
                        navigation.getNavigationPrimary().add(myProfile);
                    }

                    boolean shouldAddSearch = true;
                    int searchIndex = 0;
                    if (navigation != null && navigation.getNavigationPrimary() != null
                            && navigation.getNavigationPrimary().size() > 0) {
                        List<NavigationPrimary> navigationPrimary1 = navigation.getNavigationPrimary();
                        for (int i = 0; i < navigationPrimary1.size(); i++) {
                            NavigationPrimary navigationPrimary = navigationPrimary1.get(i);
                            if (navigationPrimary != null && navigationPrimary.getTitle() != null) {
                                if (navigationPrimary.getTitle().contains("search")
                                        || navigationPrimary.getTitle().contains("Search")) {
                                    shouldAddSearch = false;
                                    searchIndex = i;
                                    break;
                                }
                            }
                        }
                    }
                    if (shouldAddSearch) {
                        //add search in navigation item.
                        NavigationPrimary searchNav = new NavigationPrimary();
                        if (null != currentActivity) {
                            searchNav.setPageId(currentActivity.getString(R.string.search_pageid));
                            searchNav.setTitle(currentActivity.getString(R.string.app_cms_search_label));
                            searchNav.setIcon(currentActivity.getString(R.string.st_search_icon_key));
                            AccessLevels accessLevels = new AccessLevels();
                            accessLevels.setLoggedIn(true);
                            accessLevels.setLoggedOut(true);
                            accessLevels.setSubscribed(true);
                            searchNav.setAccessLevels(accessLevels);
                        }
//                        navigation.getNavigationPrimary().remove(searchIndex);
                        navigation.getNavigationPrimary().add(searchNav);
                    }

                    if (isNewsTemplate()) navigation.getNavigationPrimary().add(myProfile);
                }

                //TODO :- HardCoded settings option id for now. issue is that Account and setting both have the same pageId.
                if (navigation != null && navigation.getNavigationPrimary() != null
                        && navigation.getNavigationPrimary().size() > 0) {
                    for (NavigationPrimary navigationPrimary : navigation.getNavigationPrimary()) {
                        if (navigationPrimary != null && navigationPrimary.getTitle() != null) {
                            if (navigationPrimary.getTitle().contains("Setting")
                                    || navigationPrimary.getTitle().contains("setting")) {
                                navigationPrimary.setPageId(currentActivity.getString(R.string.app_cms_settings_page_tag));
                                break;
                            } else if (navigationPrimary.getDisplayedPath() != null
                                    && currentContext.getString(R.string.app_cms_pagename_my_account_screen_key).contains(navigationPrimary.getDisplayedPath())) {
                                navigationPrimary.setPageId(currentActivity.getString(R.string.app_cms_settings_page_tag));
                                break;
                            }
                        }
                    }
                }
                removeLanguage();

                queueMetaPages(appCMSAndroidUI.getMetaPages());
                final MetaPage firstPage = pagesToProcess.peek();

                getAppCMSModules(appCMSAndroidUI,
                        false,
                        true,
                        (appCMSAndroidModules) -> {

                            this.appCMSAndroidModules = appCMSAndroidModules;
                            this.processedUIModules = true;
                            if (processedUIModules && processedUIPages) {
                                processedUIModules = false;
                                finalizeLaunch(tryCount, null);
                            }

                        });

                MetaPage launchPage = homePage;
                /*if (appCMSMain.isForceLogin() && !isUserLoggedIn()) {
                    launchPage = loginPage;
                }*/

                if (launchPage != null) {
                    pageIdToPageAPIUrlMap.put(launchPage.getPageId(), launchPage.getPageAPI());
                    pageIdToPageFunctionMap.put(launchPage.getPageId(), launchPage.getPageFunction());

                    final MetaPage launchPageFinal = launchPage;

                    getAppCMSPage(createPageUiUrl(launchPage),
                            appCMSPageUI -> {
                                navigationPages.put(launchPageFinal.getPageId(), appCMSPageUI);
                                String action = pageNameToActionMap.get(launchPageFinal.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUI);
                                }
                                if (getTemplateType() == TemplateType.ENTERTAINMENT) {
                                    Intent logoAnimIntent = new Intent(AppCMSPresenter.ACTION_LOGO_ANIMATION);
                                    currentActivity.sendBroadcast(logoAnimIntent);
                                }
                                processedUIPages = true;
                                if (processedUIModules && processedUIPages) {
                                    processedUIPages = false;
                                    finalizeLaunch(tryCount, null);
                                }
                            },
                            loadFromFile,
                            false);

                    if (launchPageFinal == homePage) {
                        cachePage(homePage.getPageId(), true);
                    }
                } else {
                    processMetaPagesList(loadFromFile,
                            appCMSAndroidUI.getMetaPages(),
                            () -> {
                                finalizeLaunch(tryCount, null);
                            });
                }
            }
        }).execute(params);
    }

    Resources languageResources;

    private void downLoadLanguageFile(String languageCode) {
        getAppCmsLanguageFile(
                currentContext.getString(
                        platformType.equals(PlatformType.ANDROID) ? R.string.app_cms_language_url : R.string.app_cms_language_url_ftv,
                        Utils.getProperty("BaseUrl", currentContext),
                        languageCode),
                resources -> {
                    if (null != resources && resources.getResourcesMap() != null) {
                        languageResources = resources;
                    } else {
                        languageResources = null;
                    }
                },
                true,
                true
        );
    }

    public boolean navigateToTVPage(String pageId,
                                    String pageTitle,
                                    String url,
                                    boolean launchActivity,
                                    Uri searchQuery,
                                    boolean forcedDownload,
                                    boolean isTOSDialogPage,
                                    boolean isLoginDialogPage,
                                    boolean isViewPlanPage,
                                    boolean showParentalGateView,
                                    boolean loginFromAutoplay) {
        boolean result = false;
        boolean isContactUsScreen = null != pageIdToPageFunctionMap
                && null != pageIdToPageFunctionMap.get(pageId)
                && pageIdToPageFunctionMap.get(pageId).contains(currentActivity.getString(R.string.contact_us));
        if (currentActivity != null && !TextUtils.isEmpty(pageId)
                && !isContactUsScreen) {
            loadingPage = true;
            if (isUserLoggedIn()) {
                refreshUserSubscriptionData(() -> {
                }, false);
            }
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            AppCMSPageAPI appCMSPageAPI = null;
            if (!isViewPlanPage(pageId)) {
                appCMSPageAPI = navigationPageData.get(pageId);
            }
            currentActivity.sendBroadcast(new Intent(AppCMSPresenter.PRESENTER_PAGE_LOADING_ACTION));
            if (appCMSPageUI == null) {
                if (isNetworkConnected()) {
                    MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                    if (metaPage != null) {
                        getAppCMSPage(createPageUiUrl(metaPage),
                                appCMSPageUIResult -> {
                                    if (appCMSPageUIResult != null) {
                                        navigationPages.put(pageId, appCMSPageUIResult);
                                        String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                        if (action != null && actionToPageMap.containsKey(action)) {
                                            actionToPageMap.put(action, appCMSPageUIResult);
                                        }
                                        navigateToTVPage(pageId,
                                                pageTitle,
                                                url,
                                                launchActivity,
                                                null,
                                                forcedDownload,
                                                isTOSDialogPage,
                                                isLoginDialogPage, isViewPlanPage(pageId), showParentalGateView, loginFromAutoplay);
                                    }
                                },
                                loadFromFile,
                                false);
                    }
                } else {
                    RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                            pageTitle, null,
                            null, launchActivity, pageId, PAGE_ACTION);
                    Bundle bundle = new Bundle();
                    bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                    bundle.putBoolean(currentActivity.getString(R.string.is_tos_dialog_page_key), isTOSDialogPage);
                    bundle.putBoolean(currentActivity.getString(R.string.is_login_dialog_page_key), isLoginDialogPage);
                    bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                    Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                    args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                    currentActivity.sendBroadcast(args);
                    return false;
                }
            } else {
                if (forcedDownload && appCMSPageAPI != null) {
                    if (isNetworkConnected()) {
                        appCMSPageAPI = null;
                        weatherWidgetData = null;
                        if (null != pageId) {
                            getPageAPILruCache().remove(pageId);
                        }
                    }
                }
                if (null != pageIdToPageFunctionMap
                        && null != pageIdToPageFunctionMap.get(pageId)
                        && pageIdToPageFunctionMap.get(pageId).contains("Language")) {
                    appCMSPageAPI = getAppCMSPageAPI(appCMSPageUI);
                }
                if (appCMSPageAPI == null) {
                    //check internet connection here.
                    if (!isNetworkConnected()) {
                        RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                                pageTitle, null,
                                null, launchActivity, pageId, PAGE_ACTION);
                        Bundle bundle = new Bundle();
                        bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                        bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                        bundle.putBoolean(currentActivity.getString(R.string.is_tos_dialog_page_key), isTOSDialogPage);
                        bundle.putBoolean(currentActivity.getString(R.string.is_login_dialog_page_key), isLoginDialogPage);
                        bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                        bundle.putBoolean(currentActivity.getString(R.string.show_header), true);
                        Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                        args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                        currentActivity.sendBroadcast(args);
                        return false;
                    }
                    String apiUrl = getApiUrl(true,
                            isViewPlanPage(pageId),
                            false,
                            false,
                            null,
                            appCMSMain.getApiBaseUrl(),
                            pageIdToPageAPIUrlMap.get(pageId),
                            appCMSMain.getInternalName(),
                            pageId,
                            appCMSPageUI != null &&
                                    appCMSPageUI.getCaching() != null &&
                                    !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                    appCMSPageUI.getCaching().isEnabled());
                    getPageIdContent(apiUrl,
                            pageId,
                            null,
                            appCMSPageUI != null &&
                                    appCMSPageUI.getCaching() != null &&
                                    !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                    appCMSPageUI.getCaching().isEnabled(),
                            false,
                            new AppCMSPageAPIAction(true,
                                    false,
                                    true,
                                    appCMSPageUI,
                                    pageId,
                                    pageId,
                                    pageTitle,
                                    pageId,
                                    launchActivity,
                                    false,
                                    searchQuery) {
                                @Override
                                public void call(AppCMSPageAPI appCMSPageAPI) {
                                    if (appCMSPageAPI != null) {
                                        boolean isHistoryUpdate = false;
                                        boolean isWeatherModuleDataDownload = false;
                                        AtomicBoolean isRecommendedTrayUpdate = new AtomicBoolean(false);
                                        List<Module> modules = appCMSPageAPI.getModules();
                                        for (int i = 0; i < appCMSPageAPI.getModules().size(); i++) {
                                            Module module = modules.get(i);
                                            if (module.getModuleType().equalsIgnoreCase("WeatherModule")) {
                                                isWeatherModuleDataDownload = true;
                                                boolean finalIsHistoryUpdate = isHistoryUpdate;
                                                getWeatherFeedXML(module.getApiUrl(), cities -> {
                                                    appCMSPageAPI.setWeatherWidgetData(cities);
                                                    if (!finalIsHistoryUpdate) {
                                                        populateTVPage(appCMSPageAPI,
                                                                appCMSPageUI,
                                                                this.pageId,
                                                                this.launchActivity,
                                                                this.pageTitle,
                                                                isTOSDialogPage,
                                                                isLoginDialogPage,
                                                                this.pagePath,
                                                                showParentalGateView,
                                                                loginFromAutoplay);
                                                    }
                                                    loadingPage = false;
                                                    tryLaunchingPlayerFromDeeplink(null);
                                                });
                                                break;
                                            }
                                        }
                                        if (!isHistoryUpdate && !isWeatherModuleDataDownload && !isRecommendedTrayUpdate.get()) {
                                            populateTVPage(appCMSPageAPI,
                                                    appCMSPageUI,
                                                    this.pageId,
                                                    this.launchActivity,
                                                    this.pageTitle,
                                                    isTOSDialogPage,
                                                    isLoginDialogPage,
                                                    this.pagePath,
                                                    showParentalGateView,
                                                    loginFromAutoplay);
                                            loadingPage = false;
                                            tryLaunchingPlayerFromDeeplink(null);
                                        }
                                    } else {
                                        sendStopLoadingPageAction(true, () -> navigateToTVPage(pageId, pageTitle, url, launchActivity, searchQuery, forcedDownload, isTOSDialogPage, isLoginDialogPage, false, false, false));
                                        setNavItemToCurrentAction(currentActivity);
                                    }
                                    loadingPage = false;
                                }
                            });
                } else {
                    cancelInternalEvents();
                    pushActionInternalEvents(pageId);
                    if (launchActivity) {
                        launchTVPageActivity(currentActivity,
                                appCMSPageUI,
                                appCMSPageAPI,
                                pageId,
                                pageTitle,
                                pageIdToPageFunctionMap.get(pageId),
                                loadFromFile,
                                true,
                                false,
                                true,
                                searchQuery,
                                isTOSDialogPage,
                                isLoginDialogPage);
                        setNavItemToCurrentAction(currentActivity);
                    } else {
                        ExtraScreenType extraScreenType;
                        if (isTOSDialogPage) {
                            extraScreenType = ExtraScreenType.TERM_OF_SERVICE;
                        } else if (loginFromAutoplay) {
                            extraScreenType = ExtraScreenType.AUTOPLAY;
                        } else {
                            extraScreenType = isLoginDialogPage ? ExtraScreenType.EDIT_PROFILE : ExtraScreenType.NONE;
                        }
                        Bundle args = getPageActivityBundle(currentActivity,
                                appCMSPageUI,
                                appCMSPageAPI,
                                pageId,
                                pageTitle,
                                pageId,
                                pageIdToPageFunctionMap.get(pageId),
                                loadFromFile,
                                true,
                                false,
                                true,
                                false,
                                searchQuery,
                                extraScreenType,
                                null,
                                showParentalGateView,
                                null);
                        if (args != null) {
                            Intent updatePageIntent =
                                    new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                    args);
                            updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                            currentActivity.sendBroadcast(updatePageIntent);
                            setNavItemToCurrentAction(currentActivity);
                        }
                    }
                    loadingPage = false;
                    tryLaunchingPlayerFromDeeplink(null);
                }
                result = true;
            }
        } else if (isContactUsScreen) {
            openContactUsScreen(pageId, pageTitle, url);
        } else {
            //Log.d(TAG, "Resetting page navigation to previous tab");
            setNavItemToCurrentAction(currentActivity);
            stopLoader();
        }
        return result;
    }


    private boolean isFromSetting = false;

    public boolean isFromSetting() {
        return isFromSetting;
    }

    public void setIsFromSetting(boolean b) {
        isFromSetting = b;
    }

    public void sendUserRecommendationValues(String userIdValue, String selectedGenre, Action1<SignInResponse> signInResponseAction1) {
        showLoader();
        PostAppCMSLoginRequestAsyncTask.Params params = new PostAppCMSLoginRequestAsyncTask.Params
                .Builder()
                .url(currentActivity.getString(R.string.save_recommendation_api_url, getAppCMSMain().getApiBaseUrl(), getAppCMSMain().getInternalName()))
                .authToken(getAuthToken())
                .genreValue(selectedGenre)
                .emailConsent(false)
                .isEmailConsentPresent("N")
                .userIdValue(userIdValue)
                .build();
        new PostAppCMSLoginRequestAsyncTask(appCMSSignInCall, signInResponse -> {
            try {
                //Log.d(TAG, signInResponse.toString());
                /**
                 * This will clear local prersonization preference
                 *
                 */
                getUserRecommendedGenres(appPreference.getLoggedInUser(), null, false, isFromSettings);
                stopLoader();
                signInResponseAction1.call(signInResponse);
            } catch (Exception e) {
                stopLoader();
            }
        }, apikey).execute(params);
    }

    public void tryLaunchingPlayerFromDeeplink(Action0 onVideoPlayerLaunchedAction) {
        if (appPreference.getIsTVAppLaunchTypeDeepLink()) {
            showLoadingDialog(true);
            String deepLinkContentID = appPreference.getDeepLinkContentID();

            String showId;
            //00000148-f688-d53c-a7ff-ffdddfaa0000

            // TODO: 09/07/18 Harcoded show id, to be removed after catalog ingestion
            deepLinkContentID = deepLinkContentID + "#d498be13-311f-40e3-b761-ae3e3948d59d";
            if (deepLinkContentID.contains("#")) {
                String[] split = deepLinkContentID.split("#");
                String contentId = split[0];
                showId = split[1];
                getShowDetails(showId, appCMSShowDetail -> {
                    ContentDatum contentDatum = appCMSShowDetail.convertToContentDatum();
                    playEpisode(contentDatum, contentId);
                });
                appPreference.setIsTVAppLaunchTypeDeepLink(false);
                appPreference.setDeepLinkContentID(null);
            } else {
                ContentDatum contentDatum = new ContentDatum();
                Gist gist = new Gist();
                gist.setId(deepLinkContentID);
                contentDatum.setGist(gist);
                launchTVVideoPlayer(contentDatum, 0, null, 0, onVideoPlayerLaunchedAction);
                appPreference.setIsTVAppLaunchTypeDeepLink(false);
                appPreference.setDeepLinkContentID(null);
            }
        }
    }

    private void populateTVPage(AppCMSPageAPI appCMSPageAPI,
                                AppCMSPageUI appCMSPageUI,
                                String pageId,
                                boolean launchActivity,
                                String pageTitle,
                                boolean isTosPage,
                                boolean isLoginPage,
                                String pagePath,
                                boolean showParentalGateView,
                                boolean loginFromAutoplay) {
        cancelInternalEvents();
        pushActionInternalEvents(pageId
                + BaseView.isLandscape(currentActivity));
        navigationPageData.put(pageId, appCMSPageAPI);
        if (launchActivity) {
            launchTVPageActivity(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageId,
                    pageTitle,
                    pageIdToPageFunctionMap.get(pageId),
                    loadFromFile,
                    false,
                    false,
                    false,
                    Uri.EMPTY,
                    isTosPage,
                    isLoginPage);
            setNavItemToCurrentAction(currentActivity);
        } else {
            ExtraScreenType extraScreenType;
            if (isTosPage) {
                extraScreenType = ExtraScreenType.TERM_OF_SERVICE;
            } else if (loginFromAutoplay) {
                extraScreenType = ExtraScreenType.AUTOPLAY;
            } else {
                extraScreenType = isLoginPage ? ExtraScreenType.EDIT_PROFILE : ExtraScreenType.NONE;
            }
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageId,
                    pageTitle,
                    pagePath,
                    pageIdToPageFunctionMap.get(pageId),
                    loadFromFile,
                    false,
                    false,
                    false,
                    false,
                    Uri.EMPTY,
                    extraScreenType,
                    null,
                    showParentalGateView,
                    null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);

                setNavItemToCurrentAction(currentActivity);
            }
        }
    }

    private void openContactUsScreen(String pageId,
                                     String pageTitle,
                                     String url) {
        AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
        if (appCMSPageUI == null) {
            if (platformType.equals(PlatformType.TV) && !isNetworkConnected()) {
                RetryCallBinder retryCallBinder = getRetryCallBinder(url, null,
                        pageTitle, null,
                        null, false, pageId, PAGE_ACTION);
                retryCallBinder.setPageId(pageId);
                Bundle bundle = new Bundle();
                bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
                bundle.putBoolean(currentActivity.getString(R.string.is_tos_dialog_page_key), false);
                bundle.putBoolean(currentActivity.getString(R.string.is_login_dialog_page_key), false);
                bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
                Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
                args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
                args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(args);
                return;
            }
            MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
            if (metaPage != null) {
                getAppCMSPage(createPageUiUrl(metaPage),
                        appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUIResult);
                                }
                                openContactUsScreen(pageId, pageTitle, url);
                            }
                        },
                        loadFromFile,
                        false);
            }
        } else {
            AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
            appCMSPageAPI.setId(getPageId(appCMSPageUI));
            Module module = new Module();
            appCMSPageAPI.setModules(Arrays.asList(module));
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageId,
                    pageTitle,
                    pageId,
                    pageIdToPageFunctionMap.get(pageId),
                    loadFromFile,
                    true,
                    false,
                    true,
                    false,
                    Uri.EMPTY,
                    ExtraScreenType.NONE,
                    null,
                    false,
                    null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
                setNavItemToCurrentAction(currentActivity);
            }
        }
    }

    private void launchTVPageActivity(Activity activity,
                                      AppCMSPageUI appCMSPageUI,
                                      AppCMSPageAPI appCMSPageAPI,
                                      String pageId,
                                      String pageName,
                                      String screenName,
                                      boolean loadFromFile,
                                      boolean appbarPresent,
                                      boolean fullscreenEnabled,
                                      boolean navbarPresent,
                                      Uri searchQuery,
                                      boolean isTosPage,
                                      boolean isLoginPage) {
        Bundle args = getPageActivityBundle(activity,
                appCMSPageUI,
                appCMSPageAPI,
                pageId,
                pageName,
                pageId,
                screenName,
                loadFromFile,
                appbarPresent,
                fullscreenEnabled,
                navbarPresent,
                false,
                searchQuery,
                isTosPage ? ExtraScreenType.TERM_OF_SERVICE : (isLoginPage ? ExtraScreenType.EDIT_PROFILE : ExtraScreenType.NONE),
                null,
                false,
                null);
        try {
            if (args != null) {
                String tvHomeScreenPackage = "com.viewlift.tv.views.activity.AppCmsHomeActivity";
                Intent appCMSIntent = new Intent(activity, Class.forName(tvHomeScreenPackage));
                appCMSIntent.putExtra(activity.getString(R.string.app_cms_bundle_key), args);
                appCMSIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                getCurrentActivity().finish();
                activity.startActivity(appCMSIntent);
            }
        } catch (Exception e) {
            //Log.e(TAG, "Error launching TV activity: " + e.getMessage());
        } finally {
            /*sendStopLoadingPageAction(true,
                    () -> launchTVPageActivity(activity, appCMSPageUI, appCMSPageAPI, pageId, pageName,
                            screenName, loadFromFile, appbarPresent, fullscreenEnabled, navbarPresent,
                            searchQuery, isTosPage, isLoginPage));*/
        }
    }

    public void playNextVideo(AppCMSVideoPageBinder binder,
                              int currentlyPlayingIndex,
                              long watchedTime) {
        // sendCloseOthersAction(null, true, false);
        isVideoPlayerStarted = false;
        if (!binder.isOffline()) {
            if (platformType.equals(PlatformType.ANDROID)) {
                String action = null;

                if (0 <= binder.getCurrentPlayingVideoIndex()) {
                    launchVideoPlayer(binder.getContentData(),
                            binder.getRelateVideoIds() != null &&
                                    currentlyPlayingIndex < binder.getRelateVideoIds().size() ?
                                    binder.getRelateVideoIds().get(binder.getCurrentPlayingVideoIndex()) :
                                    binder.getContentData().getGist().getId(),
                            currentlyPlayingIndex,
                            binder.getRelateVideoIds(),
                            watchedTime / 1000L,
                            action);
                }
            } else {
                launchTVVideoPlayer(binder.getContentData(),
                        currentlyPlayingIndex,
                        binder.getRelateVideoIds(),
                        watchedTime / 1000L,
                        null);
            }
        } else {
            String permalink = binder.getContentData().getGist().getPermalink();
            String action = currentActivity.getString(R.string.app_cms_action_watchvideo_key);
            String title = binder.getContentData().getGist().getTitle();
            String hlsUrl = binder.getContentData().getGist().getLocalFileUrl();
            String[] extraData = new String[4];
            extraData[0] = permalink;
            extraData[1] = hlsUrl;
            extraData[2] = binder.getContentData().getGist().getId();
            extraData[3] = "true"; // to know that this is an offline video
            launchButtonSelectedAction(
                    permalink,
                    action,
                    title,
                    extraData,
                    binder.getContentData(),
                    false,
                    binder.getCurrentPlayingVideoIndex(),
                    binder.getRelateVideoIds());
        }
    }

    public Map<String, AppCMSUIKeyType> getJsonValueKeyMap() {
        return jsonValueKeyMap;
    }

    /**
     * Method opens the autoplay screen when one movie finishes playing
     *
     * @param binder  binder to share data
     * @param action1
     */
    public void openAutoPlayScreen(final AppCMSVideoPageBinder binder, Action1<
            Object> action1) {
        String url = null;
        String id = binder.getContentData().getGist().getOriginalObjectId();
        if (id == null) {
            id = binder.getContentData().getGist().getId();
        }
        binder.setCurrentMovieId(id);
        binder.setCurrentMovieName(binder.getContentData().getGist().getTitle());
        binder.setCurrentMovieImageUrl(binder.getContentData().getGist().getVideoImageUrl());
        if (!binder.isOffline()) {
            final String filmId =
                    binder.getRelateVideoIds().get(binder.getCurrentPlayingVideoIndex() + 1);
            if (currentActivity != null &&
                    !loadingPage && appCMSMain != null &&
                    !TextUtils.isEmpty(appCMSMain.getApiBaseUrl()) &&
                    !TextUtils.isEmpty(appCMSMain.getInternalName())) {
                if (platformType.equals(PlatformType.ANDROID)) {
                    /*url = currentActivity.getString(R.string.app_cms_entitlement_api_url,
                            appCMSMain.getApiBaseUrl(),
                            filmId);*/
                    url = currentActivity.getString(R.string.app_cms_content_detail_api_url,
                            appCMSMain.getApiBaseUrl(),
                            filmId,
                            appCMSMain.getInternalName(),
                            getLanguageParamForAPICall());
                } else {
                    url = currentActivity.getString(R.string.app_cms_content_detail_api_url,
                            appCMSMain.getApiBaseUrl(),
                            filmId,
                            appCMSMain.getInternalName(),
                            getLanguageParamForAPICall());
                }
            }
        } else {
            realmController = RealmController.with(currentActivity);
            ContentDatum contentDatum = null;
            if (realmController.getDownloadById(binder.getRelateVideoIds().get(binder.getCurrentPlayingVideoIndex() + 1)) != null) {
                contentDatum = realmController.getDownloadById(binder.getRelateVideoIds().get(binder.getCurrentPlayingVideoIndex() + 1))
                        .convertToContentDatum(appPreference.getLoggedInUser());
            }
            try {
                Download download = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getDowloadedVideoObject(binder.getRelateVideoIds().get(binder.getCurrentPlayingVideoIndex() + 1));
                if (download != null && download.state == Download.STATE_COMPLETED) {
                    OfflineVideoData offlineVideoData = deserialize(download.request.data);
                    if (offlineVideoData != null)
                        if ((offlineVideoData.getUserId()).equalsIgnoreCase(appPreference.getLoggedInUser())) {
                            contentDatum = offlineVideoData.convertToContentDatum(appPreference.getLoggedInUser());
                        }
                }
            } catch (Exception e) {
                Log.d(TAG, "openAutoPlayScreen() called with: binder = [" + binder + "], action1 = [" + action1 + "]");
            }

            binder.setContentData(contentDatum);
        }
        String pageId = getAutoplayPageId(binder.getContentData().getGist().getMediaType());
        navigateToAutoplayPage(pageId,
                currentActivity.getString(R.string.app_cms_page_autoplay_key),
                url,
                binder,
                action1);
    }

    public void getRelatedMedia(String filmIds, final Action1<AppCMSVideoDetail> action1) {
        String url = currentContext.getString(R.string.app_cms_video_detail_api_url,
                appCMSMain.getApiBaseUrl(),
                filmIds,
                appCMSMain.getInternalName(),
                getLanguageParamForAPICall());
        GetAppCMSVideoDetailAsyncTask.Params params =
                new GetAppCMSVideoDetailAsyncTask.Params.Builder().url(url)
                        .authToken(getAuthToken())
                        .apiKey(apikey)
                        .build();
        new GetAppCMSVideoDetailAsyncTask(appCMSVideoDetailCall,
                action1).execute(params);
    }


    public boolean launchTVButtonSelectedAction(String pagePath,
                                                String action,
                                                String filmTitle,
                                                String[] extraData,
                                                ContentDatum contentDatum,
                                                final boolean closeLauncher,
                                                int currentlyPlayingIndex,
                                                List<String> relateVideoIds,
                                                Action0 action0) {
        boolean result = false;
        //Log.d(TAG, "Attempting to load page " + filmTitle + ": " + pagePath);
        if (!isNetworkConnected()) {
            RetryCallBinder retryCallBinder = getRetryCallBinder(pagePath, action,
                    filmTitle, extraData,
                    contentDatum, closeLauncher, null, BUTTON_ACTION);
            Bundle bundle = new Bundle();
            bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
            bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
            bundle.putBoolean(currentActivity.getString(R.string.show_header), true);
            bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
            Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
            args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(args);
        } else if (currentActivity != null && !loadingPage) {
            AppCMSActionType actionType = actionToActionTypeMap.get(action);
            if (actionType == null) {
                //Log.e(TAG, "Action " + action + " not found!");
                return false;
            }
            result = true;
            boolean isTrailer = actionType == AppCMSActionType.WATCH_TRAILER;
            if (actionType == AppCMSActionType.PLAY_VIDEO_PAGE ||
                    actionType == AppCMSActionType.WATCH_TRAILER) {
                String videoId = contentDatum.getGist().getOriginalObjectId();
                if (videoId == null) {
                    videoId = contentDatum.getGist().getId();
                }
                String showPermalink = null;
                getUserVideoStatus(videoId,
                        (UserVideoStatusResponse userVideoStatusResponse) -> {
                            if (userVideoStatusResponse != null) {
                                contentDatum.getGist().setWatchedTime
                                        (userVideoStatusResponse.getWatchedTime());
                            }
                            Intent playVideoIntent = new Intent();
                            try {
                                Class videoPlayer = Class.forName(tvVideoPlayerPackage);
                                playVideoIntent = new Intent(currentActivity, videoPlayer);
                            } catch (Exception e) {

                            }
                            String adsUrl = null;

                            boolean requestAds = actionType == AppCMSActionType.PLAY_VIDEO_PAGE && !isUserSubscribed();

                            if (contentDatum.getGist() != null && contentDatum.getGist().isLiveStream()) {
                                requestAds = false;
                            }

                            if (contentDatum.getAdUrl() != null) {
                                adsUrl = contentDatum.getAdUrl();
                            } else {
                                if (!isUserSubscribed()) {
                                    adsUrl = getAppAdsURL(contentDatum);
                                }
                                if (adsUrl == null) {
                                    requestAds = false;
                                }
                            }
                            String backgroundColor = appCMSMain.getBrand()
                                    .getGeneral()
                                    .getBackgroundColor();
                            AppCMSVideoPageBinder appCMSVideoPageBinder =
                                    getDefaultAppCMSVideoPageBinder(contentDatum, currentlyPlayingIndex, relateVideoIds, false, isTrailer, requestAds, adsUrl, backgroundColor,
                                            extraData != null ? extraData[0] : null);
                            if (closeLauncher) {
                                sendCloseOthersAction(null, true, false);
                            }


                            Bundle bundle = new Bundle();
                            bundle.putBinder(currentActivity.getString(R.string.app_cms_video_player_binder_key),
                                    appCMSVideoPageBinder);
                            playVideoIntent.putExtra(currentActivity.getString(R.string.app_cms_video_player_bundle_binder_key), bundle);
                            currentActivity.startActivityForResult(playVideoIntent, PLAYER_REQUEST_CODE);

                            if (action0 != null) {
                                action0.call();
                            }
                            new Handler().postDelayed(() -> sendCloseOthersAction(null, true, false), 200);
                        });

                //sendStopLoadingPageAction();

            } else if (actionType == AppCMSActionType.SHARE) {
                if (extraData != null && extraData.length > 0 && !TextUtils.isEmpty(extraData[0])) {
                    String httpsScheme = currentActivity.getString(R.string.https_scheme);
                    Intent sendIntent = new Intent();
                    sendIntent.setAction(Intent.ACTION_SEND);
                    sendIntent.putExtra(Intent.EXTRA_TEXT, extraData[0].startsWith(httpsScheme) ? extraData[0] : httpsScheme + extraData[0]);
                    sendIntent.setType(currentActivity.getString(R.string.text_plain_mime_type));
                    if (isHoichoiApp()) {
                        CommonUtils.launchSharingIntentApp(currentActivity, sendIntent, localisedStrings.getShareVideoText());
                    } else {
                        currentActivity.startActivity(Intent.createChooser(sendIntent, localisedStrings.getShareVideoText()));
                    }
                }
            } else if (actionType == AppCMSActionType.CLOSE) {
                sendCloseOthersAction(null, true, false);
            } else if (actionType == AppCMSActionType.LOGIN) {
                //Log.d(TAG, "Login action selected: " + extraData[0]);
                showLoader();
                //closeSoftKeyboard();
                login(extraData[0], extraData[1]);
                firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
            } else if (actionType == AppCMSActionType.FORGOT_PASSWORD) {
                //Log.d(TAG, "Forgot password selected: " + extraData[0]);
                AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);
                launchResetPasswordTVPage(appCMSPageUI, action);
            } else if (actionType == AppCMSActionType.LINK_YOUR_ACCOUNT) {
                //Log.d(TAG, "Forgot password selected: " + extraData[0]);
                isLoginWithTVProvider = extraData != null ? extraData[0].
                        contains(currentContext.getResources().getString(R.string.app_cms_page_link_your_account_with_tv_provider_btn_key)) : false;
                AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);
                launchLinkYourAccountPage(appCMSPageUI, action);
            } else if (actionType == AppCMSActionType.LOGIN_FACEBOOK) {
                //Log.d(TAG, "Login Facebook selected");
                loginFacebook();
                firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_facebook));
            } else if (actionType == AppCMSActionType.SIGNUP) {
                //Log.d(TAG, "Sign-Up selected: " + extraData[0]);
                showLoader();
                signup(extraData[0], extraData[1], Boolean.valueOf(extraData[2]), extraData[3], null, true);
                firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_email));
            } else if (actionType == AppCMSActionType.REDEEM_CODE) {
//                closeSoftKeyboard();
                EditText subscribeEditText = currentActivity.findViewById(R.id.redemption_edit_box);
                if (subscribeEditText != null) {
                    String redemptionCode = subscribeEditText.getText().toString().trim();
                    if (!TextUtils.isEmpty(redemptionCode)) {
                        isValidRedemptionCode = false;
                        validateRedemptionCode(redemptionCode);
                    }
                }
            } else if (actionType == AppCMSActionType.CHANGE_LANGUAGE) {
                //Log.d(TAG, "Sign-Up selected: " + extraData[0]);
                showLoader();
                AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);
                showChangeLanguageTVDialog(appCMSPageUI, action);
            } else {
                boolean appbarPresent = true;
                boolean fullscreenEnabled = false;
                boolean navbarPresent = true;
                final StringBuffer screenName = new StringBuffer();
                if (!TextUtils.isEmpty(actionToPageNameMap.get(action))) {
                    screenName.append(actionToPageNameMap.get(action));
                }
                loadingPage = true;
                boolean categoryPage = false;
                switch (actionType) {
                    case AUTH_PAGE:
                        appbarPresent = false;
                        fullscreenEnabled = false;
                        navbarPresent = false;
                        break;

                    case VIDEO_PAGE:
                        appbarPresent = false;
                        fullscreenEnabled = false;
                        navbarPresent = false;
                        screenName.append(currentActivity.getString(
                                R.string.app_cms_template_page_separator));
                        screenName.append(filmTitle);
                        //Todo need to manage it depend on Template
                        if (getTemplateType() == TemplateType.SPORTS
                                || getTemplateType() == TemplateType.FITNESS) {
                            appbarPresent = true;
                            navbarPresent = true;
                        }
                        break;
                    case PAGE_BUNDLE_KEY:
                        // screenName.delete(0, screenName.length());
                        screenName.append(currentActivity.getString(
                                R.string.app_cms_template_page_separator));
                        screenName.append(filmTitle);
                        break;
                    case SHOW_PAGE:
                        screenName.append(currentActivity.getString(
                                R.string.app_cms_template_page_separator));
                        screenName.append(filmTitle);
                        break;
                    case SEE_ALL_CATEGORY:
                        categoryPage = true;
                        screenType = ExtraScreenType.NONE;
                        break;
                    case PLAY_VIDEO_PAGE:
                        appbarPresent = false;
                        fullscreenEnabled = false;
                        navbarPresent = false;
                        break;

                    case HOME_PAGE:
                    default:
                        break;
                }
                showLoader();
                if (action.equalsIgnoreCase("lectureDetailPage")
                        && contentDatum.getGist().getContentType() != null) {
                    if (contentDatum.getGist().getContentType().equalsIgnoreCase("SERIES")
                            || contentDatum.getGist().getContentType().equalsIgnoreCase("SEASON")) {
                        action = "showDetailPage";
                    } else if (contentDatum.getGist().getContentType() != null && contentDatum.getGist().getContentType().equalsIgnoreCase("BUNDLE") &&
                            contentDatum.getGist().getMediaType() != null && contentDatum.getGist().getMediaType().equalsIgnoreCase("EPISODIC")) {
                        action = "lectureDetailPage";
                    } else if (contentDatum.getGist().getContentType().equalsIgnoreCase("BUNDLE")) {
                        action = "bundleDetailPage";
                    }
                }

                AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);

                if (appCMSPageUI == null) {
                    MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
                    if (metaPage != null) {
                        int finalCurrentlyPlayingIndex2 = currentlyPlayingIndex;
                        List<String> finalRelateVideoIds2 = relateVideoIds;
                        getAppCMSPage(createPageUiUrl(metaPage),
                                appCMSPageUIResult -> {
                                    if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                        navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                        String action1 = pageNameToActionMap.get(metaPage.getPageFunction());
                                        if (action1 != null && actionToPageMap.containsKey(action1)) {
                                            actionToPageMap.put(action1, appCMSPageUIResult);
                                        }
                                        loadingPage = false;
                                        /*if (actionType == AppCMSActionType.SEE_ALL_CATEGORY) {
                                            if (appCMSPageUIResult.getModuleList() != null
                                                    && appCMSPageUIResult.getModuleList().size() > 0) {
                                                setModuleId(appCMSPageUIResult.getModuleList());
                                            }
                                        }*/
                                        launchTVButtonSelectedAction(pagePath,
                                                action1,
                                                filmTitle,
                                                extraData,
                                                contentDatum,
                                                closeLauncher,
                                                finalCurrentlyPlayingIndex2,
                                                finalRelateVideoIds2,
                                                null);
                                    }
                                },
                                loadFromFile,
                                false);
                    }
                } else {
                    if (appCMSPageUI.getModuleList() != null &&
                            appCMSPageUI.getModuleList().get(0) != null) {
                        setModuleId(appCMSPageUI.getModuleList());
                    }
                    String apiUrl = getApiUrl(false,
                            false,
                            false,
                            categoryPage,
                            extraData,
                            appCMSMain.getApiBaseUrl(),
                            actionToPageAPIUrlMap.get(action),
                            appCMSMain.getInternalName(),
                            pagePath,
                            appCMSPageUI != null &&
                                    appCMSPageUI.getCaching() != null &&
                                    !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                    appCMSPageUI.getCaching().isEnabled());

                    getPageIdContent(apiUrl,
                            pagePath,
                            null,
                            appCMSPageUI != null &&
                                    appCMSPageUI.getCaching() != null &&
                                    !appCMSPageUI.getCaching().shouldOverrideCaching() &&
                                    appCMSPageUI.getCaching().isEnabled(),
                            false,
                            new AppCMSPageAPIAction(appbarPresent,
                                    fullscreenEnabled,
                                    navbarPresent,
                                    appCMSPageUI,
                                    action,
                                    getPageId(appCMSPageUI),
                                    filmTitle,
                                    pagePath,
                                    false,
                                    closeLauncher,
                                    null) {
                                @Override
                                public void call(AppCMSPageAPI appCMSPageAPI) {
                                    if (appCMSPageAPI != null) {
                                        if (actionType.equals(AppCMSActionType.SEE_ALL_CATEGORY)) {
                                            /*if (appCMSPageAPI.getModules() != null
                                                    && appCMSPageAPI.getModules().size() > 0
                                                    && appCMSPageAPI.getModules().get(0) != null) {
                                                appCMSPageAPI.getModules().get(0).setTitle(filmTitle);
                                            }*/

                                            for (Module module : appCMSPageAPI.getModules()) {
                                                ContentDatum data = null;
                                                if (module.getContentData() != null && module.getContentData().size() > 0) {
                                                    data = module.getContentData().get(0);
                                                }
                                                if (module.getModuleType() != null && module.getModuleType().equalsIgnoreCase("ShowDetailModule")) {
                                                    loadingPage = false;
                                                    launchTVButtonSelectedAction(pagePath,
                                                            "showDetailPage",
                                                            appCMSPageAPI.getTitle(),
                                                            null,
                                                            data,
                                                            false,
                                                            0,
                                                            null,
                                                            null);
                                                    return;
                                                } else if (module.getModuleType() != null && module.getModuleType().equalsIgnoreCase("VideoDetailModule")) {
                                                    loadingPage = false;
                                                    launchTVButtonSelectedAction(pagePath,
                                                            "lectureDetailPage",
                                                            appCMSPageAPI.getTitle(),
                                                            null,
                                                            data,
                                                            false,
                                                            0,
                                                            null,
                                                            null);
                                                    return;
                                                }
                                            }
                                        }

                                        if (relateVideoIds != null) {
                                            for (Module module : appCMSPageAPI.getModules()) {
                                                if (module.getModuleType().equalsIgnoreCase("VideoDetailModule")) {
                                                    module.getContentData().get(0).getContentDetails().setRelatedVideoIds(relateVideoIds);
                                                    break;
                                                }
                                            }
                                        }

                                        try {
                                            cancelInternalEvents();
                                            pushActionInternalEvents(this.action + BaseView.isLandscape(currentActivity));
                                            Bundle args = getPageActivityBundle(currentActivity,
                                                    this.appCMSPageUI,
                                                    appCMSPageAPI,
                                                    this.pageId,
                                                    appCMSPageAPI.getTitle(),
                                                    pagePath,
                                                    screenName.toString(),
                                                    loadFromFile,
                                                    this.appbarPresent,
                                                    this.fullscreenEnabled,
                                                    this.navbarPresent,
                                                    this.sendCloseAction,
                                                    this.searchQuery,
                                                    ExtraScreenType.NONE,
                                                    null,
                                                    false,
                                                    null);
                                            if (args != null) {
                                                Intent updatePageIntent =
                                                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                                                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                        args);
                                                currentActivity.sendBroadcast(updatePageIntent);
                                            }
                                        } catch (Exception e) {
                                            Log.d(TAG, e.getMessage());
                                        }
                                    } else {
                                        sendStopLoadingPageAction(true,
                                                () -> launchTVButtonSelectedAction(
                                                        pagePath,
                                                        action,
                                                        filmTitle,
                                                        extraData,
                                                        contentDatum,
                                                        closeLauncher,
                                                        currentlyPlayingIndex,
                                                        relateVideoIds,
                                                        null));
                                    }
                                    loadingPage = false;
                                }
                            });
                }
            }
        }
        return result;
    }


    @SuppressWarnings("unused")
    private void LaunchTVVideoPlayerActivity(String pagePath,
                                             String filmTitle,
                                             String[] extraData,
                                             boolean closeLauncher,
                                             ContentDatum contentDatum,
                                             AppCMSActionType actionType) {
        Intent playVideoIntent = new Intent(currentActivity, AppCMSPlayVideoActivity.class);
        try {
            Class videoPlayer = Class.forName(tvVideoPlayerPackage);
            playVideoIntent = new Intent(currentActivity, videoPlayer);
        } catch (Exception e) {
            //Log.e(TAG, "Error launching TV Button Selected Action: " + e.getMessage());
        }

        if (actionType == AppCMSActionType.PLAY_VIDEO_PAGE) {
            boolean requestAds = true;
            if (pagePath != null && pagePath.contains(currentActivity
                    .getString(R.string.app_cms_action_qualifier_watchvideo_key))) {
                requestAds = false;
            }
            playVideoIntent.putExtra(currentActivity.getString(R.string.play_ads_key), requestAds);
        } else {
            playVideoIntent.putExtra(currentActivity.getString(R.string.play_ads_key), false);
            playVideoIntent.putExtra(currentActivity.getString(R.string.is_trailer_key), true);
        }

        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_font_color_key),
                appCMSMain.getBrand().getGeneral().getTextColor());
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_title_key),
                filmTitle);
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_hls_url_key),
                extraData);

        Date now = new Date();
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_ads_url_key),
                getAppAdsURL(contentDatum));
        playVideoIntent.putExtra(currentActivity.getString(R.string.app_cms_bg_color_key),
                getAppBackgroundColor());
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_closed_caption_key), extraData[3]);
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_watched_time_key), contentDatum.getGist().getWatchedTime());
        playVideoIntent.putExtra(currentActivity.getString(R.string.video_player_run_time_key), contentDatum.getGist().getRuntime());
        if (closeLauncher) {
            sendCloseOthersAction(null, true, false);
        }
        currentActivity.startActivityForResult(playVideoIntent, PLAYER_REQUEST_CODE);
    }

    public void showLoadingDialog(boolean showDialog) {
        if (currentActivity != null) {
            if (showDialog) {
                showLoader();
            } else {
                stopLoader();
            }
        }
    }

    public PlatformType getPlatformType() {
        if (platformType == null) {
            platformType = CommonUtils.isTVDevice(currentContext) ? PlatformType.TV : PlatformType.ANDROID;
        }
        return platformType;
    }

    public TemplateType getTemplateType() {
        if (appCMSMain != null && appCMSMain.getTemplateName() != null) {
            String templateName = appCMSMain.getTemplateName();
            if ("Entertainment".equalsIgnoreCase(templateName)) {
                return TemplateType.ENTERTAINMENT;
            } else if ("Education".equalsIgnoreCase(templateName)) {
                return TemplateType.EDUCATION;
            } else if ("LIVE".equalsIgnoreCase(templateName)) {
                return TemplateType.LIVE;
            } else if ("FITNESS".equalsIgnoreCase(templateName)) {
                return TemplateType.FITNESS;
            } else if ("NEWS".equalsIgnoreCase(templateName)) {
                return TemplateType.NEWS;
            } else /*if (templateName.equalsIgnoreCase("Sports"))*/ {
                return TemplateType.SPORTS;
            }
        } else {
            return TemplateType.SPORTS;

        }
    }

    public boolean isFitnessTemplate() {
        return getTemplateType().equals(TemplateType.FITNESS);
    }

    public boolean isNewsTemplate() {
        return getTemplateType().equals(TemplateType.NEWS);
    }

    public boolean isRemovableSDCardAvailable() {
        return currentActivity != null && getStorageDirectories(currentActivity).length >= 1;
    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    private String getSDCardPath(Context context, String dirName) {
        String dirPath = getSDCardPath(context) + File.separator + dirName;
        File dir = new File(dirPath);
        if (!dir.isDirectory())
            dir.mkdirs();

        return dir.getAbsolutePath();

    }

    private String getSDCardPath(Context context) {
        File baseSDCardDir;
        String[] dirs = getStorageDirectories(context);
        baseSDCardDir = new File(dirs[0]);

        return baseSDCardDir.getAbsolutePath();
    }

    private String[] getStorageDirectories(Context context) {
        HashSet<String> paths = new HashSet<>();
        String rawExternalStorage = System.getenv("EXTERNAL_STORAGE");
        String rawSecondaryStoragesStr = System.getenv("SECONDARY_STORAGE");
        String rawEmulatedStorageTarget = System.getenv("EMULATED_STORAGE_TARGET");
        if (TextUtils.isEmpty(rawEmulatedStorageTarget)) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

                List<String> results = new ArrayList<>();
                File[] externalDirs = context.getExternalFilesDirs(null);
                for (File file : externalDirs) {
                    String path;
                    try {
                        // path = file.getPath().split("/Android")[0];
                        path = file.getAbsolutePath();
                    } catch (Exception e) {
                        //Log.e(TAG, "Error getting storage directories for downloads: " + e.getMessage());
                        path = null;
                    }
                    if (path != null) {
                        if ((Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && Environment.isExternalStorageRemovable(file))
                                || rawSecondaryStoragesStr != null && rawSecondaryStoragesStr.contains(path)) {
                            results.add(path);
                        }
                    }
                }

                paths.addAll(results);

            } else {
                if (TextUtils.isEmpty(rawExternalStorage)) {
                    boolean b = paths.addAll(Arrays.asList(physicalPaths));
                } else {
                    paths.add(rawExternalStorage);
                }
            }
        } else {
            String path = Environment.getExternalStorageDirectory().getAbsolutePath();

            String[] folders = Pattern.compile("/").split(path);
            String lastFolder = folders[folders.length - 1];
            boolean isDigit = false;
            try {
                Integer.valueOf(lastFolder);
                isDigit = true;
            } catch (NumberFormatException ignored) {
            }

            String rawUserId = isDigit ? lastFolder : "";
            if (TextUtils.isEmpty(rawUserId)) {
                paths.add(rawEmulatedStorageTarget);
            } else {
                paths.add(rawEmulatedStorageTarget + File.separator + rawUserId);
            }
        }
        // Code has not any use in case of build >=23 (M)
       /*
       if (!TextUtils.isEmpty(rawSecondaryStoragesStr)) {
            String[] rawSecondaryStorages = rawSecondaryStoragesStr.split(File.pathSeparator);
            Collections.addAll(paths, rawSecondaryStorages);
        }*/
        return paths.toArray(new String[paths.size()]);
    }

    @SuppressWarnings("unused")
    public void setSearchResultsOnSharePreference(List<String> searchValues) {
        if (currentActivity == null)
            return;
        SharedPreferences sharePref = currentActivity.getSharedPreferences(
                currentActivity.getString(R.string.app_cms_search_sharepref_key), Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sharePref.edit();
        editor.putInt(currentActivity.getString(R.string.app_cms_search_value_size_key), searchValues.size());
        for (int i = 0; i < searchValues.size(); i++) {
            editor.remove(currentActivity.getString(R.string.app_cms_search_value_key) + i);
            editor.putString(currentActivity.getString(R.string.app_cms_search_value_key) + i, searchValues.get(i));
        }
        editor.apply();
    }

    @SuppressWarnings("unused")
    public List<String> getSearchResultsFromSharePreference() {
        if (currentActivity == null)
            return null;
        List<String> searchValues = new ArrayList<>();
        SharedPreferences sharePref = currentActivity.getSharedPreferences(
                currentActivity.getString(R.string.app_cms_search_sharepref_key), Context.MODE_PRIVATE);
        int size = sharePref.getInt(currentActivity.getString(R.string.app_cms_search_value_size_key), 0);
        for (int i = 0; i < size; i++) {
            searchValues.add(sharePref.getString(currentActivity.getString(R.string.app_cms_search_value_key) + i, null));
        }
        return searchValues;
    }

    @SuppressWarnings("unused")
    public void clearSearchResultsSharePreference() {
        if (currentActivity == null)
            return;
        SharedPreferences sharePref = currentActivity.getSharedPreferences(
                currentActivity.getString(R.string.app_cms_search_sharepref_key), Context.MODE_PRIVATE);
        sharePref.edit().clear().apply();
    }

    @SuppressWarnings("unused")
    public void openSearch(String pageId, String pageTitle) {
        Intent searchIntent = new Intent(SEARCH_ACTION);
        Bundle bundle = getPageActivityBundle(
                currentActivity,
                navigationPages.get(pageId),
                navigationPageData.get(pageId),
                pageId,
                pageTitle,
                pageIdToPageFunctionMap.get(pageId),
                pageTitle, false, false, false, false,
                false, Uri.EMPTY, ExtraScreenType.NONE,
                null,
                false,
                null);

        searchIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                bundle);
        searchIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(searchIntent);
    }

    @SuppressWarnings("unused")
    public void openLibrary(String pageId, String pageTitle) {
        Intent libraryIntent = new Intent(LIBRARY_ACTION);
        Bundle bundle = getPageActivityBundle(
                currentActivity,
                navigationPages.get(pageId),
                navigationPageData.get(pageId),
                pageId,
                pageTitle,
                pageIdToPageFunctionMap.get(pageId),
                pageTitle, false, false, false, false,
                false, Uri.EMPTY, ExtraScreenType.NONE,
                null, false,
                null);
        libraryIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), bundle);
        libraryIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(libraryIntent);
    }

    @SuppressWarnings("unused")
    public void openSearch(String search, String s, String searchString) {
        Intent searchIntent = new Intent(SEARCH_ACTION);
        Bundle bundle = getPageActivityBundle(
                currentActivity,
                navigationPages.get(searchPage.getPageId()),
                navigationPageData.get(searchPage.getPageId()),
                searchPage.getPageId(),
                searchPage.getPageFunction(),
                pageIdToPageFunctionMap.get(searchPage.getPageId()),
                searchPage.getPageFunction(),
                false,
                false,
                false,
                false,
                false,
                Uri.parse(searchString),
                ExtraScreenType.NONE,
                null, false, null);

        searchIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                bundle);
        searchIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(searchIntent);
    }

    public void launchTVVideoPlayer(final ContentDatum contentDatum,
                                    final int currentlyPlayingIndex,
                                    List<String> relateVideoIds,
                                    long watchTime, Action0 action0) {
        if (!isNetworkConnected() && platformType == PlatformType.TV) {
            RetryCallBinder retryCallBinder = getRetryCallBinder(contentDatum.getGist().getPermalink(), null,
                    contentDatum.getGist().getTitle(), null,
                    contentDatum, false,
                    contentDatum.getGist().getId(), VIDEO_ACTION
            );

            Bundle bundle = new Bundle();
            bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
            bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
            bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
            Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
            args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
            args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
            currentActivity.sendBroadcast(args);
        } else if (currentActivity != null &&
                !loadingPage && appCMSMain != null &&
                !TextUtils.isEmpty(appCMSMain.getApiBaseUrl()) &&
                !TextUtils.isEmpty(appCMSMain.getInternalName())) {
            final String action = currentActivity.getString(R.string.app_cms_action_watchvideo_key);
            validateTVEUserSubscription(contentDatum);
            if (shouldRefreshAuthToken()) {
                refreshIdentity(appPreference.getRefreshToken(),
                        () -> {
                            refreshVideoData(contentDatum.getGist().getId(), updatedContentDatum -> {
                                if (isContentAllowedForTV(updatedContentDatum)) {
                                    List<String> relatedVideoIds;
                                    if (relateVideoIds == null || relateVideoIds.size() == 0) {
                                        relatedVideoIds = updatedContentDatum.getContentDetails().getRelatedVideoIds();
                                        // Putting the current video id on the
                                        // zeroth position, to make sure when user
                                        // asks Alexa to play previous video, we
                                        // always have a previous video.
                                        if (relatedVideoIds != null) {
                                            relatedVideoIds.add(0, updatedContentDatum.getGist().getId());
                                        }
                                    } else {
                                        relatedVideoIds = relateVideoIds;
                                    }

                                    updatedContentDatum.setSeason(contentDatum.getSeason());
                                    launchTVButtonSelectedAction(contentDatum.getGist().getId(),
                                            action,
                                            updatedContentDatum.getGist().getTitle(),
                                            null,
                                            updatedContentDatum,
                                            false,
                                            currentlyPlayingIndex,
                                            relatedVideoIds,
                                            action0);
                                }
                            }, null, false, false, contentDatum);
                        });
            } else {
                refreshVideoData(contentDatum.getGist().getId(), updatedContentDatum -> {
                    if (updatedContentDatum != null && isContentAllowedForTV(updatedContentDatum)) {
                        List<String> relatedVideoIds;
                        updatedContentDatum.getGist().setTitle(contentDatum.getGist().getTitle());
                        updatedContentDatum.getGist().setDescription(contentDatum.getGist().getDescription());
                        if (relateVideoIds == null || relateVideoIds.size() == 0) {
                            relatedVideoIds = updatedContentDatum.getContentDetails().getRelatedVideoIds();
                            // Putting the current video id on the
                            // zeroth position, to make sure when user
                            // asks Alexa to play previous video, we
                            // always have a previous video.
                            if (relatedVideoIds != null) {
                                relatedVideoIds.add(0, updatedContentDatum.getGist().getId());
                            }
                        } else {
                            relatedVideoIds = relateVideoIds;
                        }

                        if (contentDatum.getSeriesData() != null)
                            updatedContentDatum.setSeriesData(contentDatum.getSeriesData());
                        if (contentDatum.getModuleApi() != null)
                            updatedContentDatum.setModuleApi(contentDatum.getModuleApi());

                        updatedContentDatum.setSeason(contentDatum.getSeason());
                        launchTVButtonSelectedAction(contentDatum.getGist().getId(),
                                action,
                                updatedContentDatum.getGist().getTitle(),
                                null,
                                updatedContentDatum,
                                false,
                                currentlyPlayingIndex,
                                relatedVideoIds,
                                action0);
                    }
                }, null, false, false, contentDatum);
            }
        }

    }

    private void sendFirebaseLoginSubscribeSuccess() {
        //Send Firebase Analytics when user is subscribed and user is Logged In
        if (isUserSubscribed()) {
            firebaseAnalytics.userPropertySubscriptionStatus(currentContext.getString(R.string.status_subscription_subscribed));
            firebaseAnalytics.userPropertyLoginStatus(currentContext.getString(R.string.status_logged_in));
            firebaseAnalytics.userPropertyPlanId(appPreference.getActiveSubscriptionId());
            firebaseAnalytics.userPropertyPlanName(appPreference.getActiveSubscriptionPlanName());
        }
    }

    public ReferenceQueue<Object> getSoftReferenceQueue() {
        return referenceQueue;
    }

    public String getApiKey() {
        return apikey;
    }

    private String getDownloadURL(ContentDatum contentDatum) {
        String downloadURL = null;
        int downloadQualityPosition = appPreference.getUserDownloadPositionQualityPref();
        Map<String, String> urlRenditionMap = new HashMap<>();

        if (contentDatum.getStreamingInfo() != null &&
                contentDatum.getStreamingInfo().getVideoAssets() != null &&
                contentDatum.getStreamingInfo().getVideoAssets().getMpeg() != null) {
            for (Mpeg mpeg : contentDatum.getStreamingInfo().getVideoAssets().getMpeg()) {
                if (mpeg.getRenditionValue() != null) {
                    urlRenditionMap.put(mpeg.getRenditionValue().replace("_", "").trim(),
                            mpeg.getUrl());
                }
            }
        }

        if (contentDatum.getStreamingInfo() != null &&
                contentDatum.getStreamingInfo().getVideoAssets() != null &&
                contentDatum.getStreamingInfo().getVideoAssets().getMpeg() != null) {
            List<Mpeg> mpegList = contentDatum.getStreamingInfo().getVideoAssets().getMpeg();
            if (mpegList.size() > 0) {
                int downloadPos = (mpegList.size() - 1) - downloadQualityPosition;
                if (downloadPos < 0)
                    downloadPos = 0;
                if (mpegList.get(downloadPos) != null) {
                    downloadURL = mpegList.get(downloadPos).getUrl();
                    //showToast(mpegList.get((mpegList.size()-1)-downloadQualityPosition).getRenditionValue(), Toast.LENGTH_LONG);
                } else {
                    downloadURL = contentDatum.getStreamingInfo().getVideoAssets().getMpeg().get(0).getUrl();
                }
            }
        }

        if (downloadURL != null && downloadURL.contains("Policy=")
                && downloadURL.contains("Key-Pair-Id=")
                && downloadURL.contains("Signature=")
                && downloadURL.contains("?")) {
            downloadURL = downloadURL.substring(0, downloadURL.indexOf("?"));
        }

        return downloadURL;
    }

    public void openVideoPageFromSearch(String[] searchResultClick) {
        String permalink = searchResultClick[3];
        String action = currentActivity.getString(R.string.app_cms_action_detailvideopage_key);
        String title = searchResultClick[0];
        String runtime = searchResultClick[1];
        String mediaType = searchResultClick[4];
        String contentType = searchResultClick[5];
        String gistId = searchResultClick[searchResultClick.length - 6];
        String tag = searchResultClick[10];
        Boolean seriesData = Boolean.valueOf(searchResultClick[11]);
        if (contentType.contains(currentActivity.getString(R.string.content_type_series)))
            action = currentActivity.getString(R.string.app_cms_action_showvideopage_key);
        else if (contentType.contains(currentActivity.getString(R.string.content_type_bundle)))
            action = currentActivity.getString(R.string.app_cms_action_detailbundlepage_key);

        // TODO : enable check and open video detail page if toggle is off.
        if ((appCMSMain.getFeatures().isOpenShowDetail() || getTemplateType() == AppCMSPresenter.TemplateType.NEWS)
                && (contentType.contains(currentActivity.getString(R.string.app_cms_series_content_type)) || seriesData)) {
            action = currentActivity.getString(R.string.app_cms_action_showvideopage_key);
        }
        //Log.d(TAG, "Launching " + permalink + ":" + action);
        String seriesAvailable = searchResultClick[11];
        if (seriesAvailable != null && !seriesAvailable.isEmpty() && seriesAvailable.contains("true") && gistId != null)
            setEpisodeId(gistId);
        else
            setEpisodeId(null);
        if (mediaType.toLowerCase().contains(currentContext.getString(R.string.app_cms_article_key_type).toLowerCase())) {
            setCurrentArticleIndex(-1);
            navigateToArticlePage(gistId, title, false, null, false);
            return;
        } else if (mediaType.toLowerCase().contains(currentContext.getString(R.string.app_cms_photo_gallery_key_type).toLowerCase())) {
            navigateToPhotoGalleryPage(gistId, title, null, false);
            return;
        } else if (mediaType.toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.media_type_player).toLowerCase())) {
            navigateToPersonDetailPage(permalink);
            return;
        }
        if (action.contains(currentContext.getString(R.string.app_cms_action_detailvideopage_key)))
            setPlaySource(getPlaySource() + "_Video Detail");
        if (getAppCMSMain() != null && getAppCMSMain().getFeatures() != null) {
            if (getAppCMSMain().getFeatures().isOpenShowDetail() && getAppCMSMain().getFeatures().isTrickPlay()
                    && !mediaType.isEmpty()
                    && mediaType.toLowerCase().contains(currentContext.getString(R.string.media_type_video).toLowerCase())) {
                action = currentContext.getString(R.string.app_cms_action_watchvideo_key);
            } else if (getAppCMSMain().getFeatures().isOpenShowDetail() && !getAppCMSMain().getFeatures().isTrickPlay()
                    && !mediaType.isEmpty()
                    && mediaType.toLowerCase().contains(currentContext.getString(R.string.media_type_video).toLowerCase())) {
                action = currentContext.getString(R.string.app_cms_action_detailvideopage_key);
            } else if (getAppCMSMain().getFeatures().isTrickPlay() &&
                    !getAppCMSMain().getFeatures().isOpenShowDetail()
                    && !mediaType.isEmpty()
                    && !mediaType.toLowerCase().contains(currentContext.getString(R.string.media_type_series).toLowerCase())) {
                action = currentContext.getString(R.string.app_cms_action_watchvideo_key);
            }
        }
        if (action != null && action.equalsIgnoreCase(currentContext.getString(R.string.app_cms_action_watchvideo_key))) {
            //  action = currentContext.getString(R.string.app_cms_action_watchvideo_key);
            ContentDatum contentDatum = new ContentDatum();
            Gist gist = new Gist();
            gist.setTitle(title);
            gist.setPermalink(permalink);
            gist.setId(gistId);
            gist.setWatchedPercentage(0);
            gist.setWatchedTime(0);
            contentDatum.setGist(gist);
            if (!launchVideoPlayer(contentDatum,
                    gistId,
                    0,
                    null,
                    -1,
                    action)) {

            }
        } else {
            if (!launchButtonSelectedAction(permalink,
                    action,
                    title,
                    null,
                    null,
                    false,
                    0,
                    null)) {
                //Log.e(TAG, "Could not launch action: " +
//                    " permalink: " +
//                    permalink +
//                    " action: " +
//                    action);
            }
        }
    }

    public NavigationPrimary getLoginNavigationFromLeftInAndroid() {
        if (getNavigation() != null && getNavigation().getLeft() != null
                && getNavigation().getLeft().size() > 0) {
            for (NavigationPrimary navigationUser : getNavigation().getLeft()) {
           /* if (!isUserLoggedIn() && navigationUser.getUrl().contains(currentActivity.getString(R.string.app_cms_action_login_key))) {
                return navigationUser;
            }*/

                if (!isUserLoggedIn() && (getPageFunctionValue(navigationUser.getPageId()).equalsIgnoreCase(currentContext.getString(R.string.app_cms_pagename_authscreen_key)))) {
                    return navigationUser;
                }
            }
        }
        return null;
    }

    @SuppressWarnings("unused")
    public NavigationUser getLoginNavigation() {
        for (NavigationUser navigationUser : getNavigation().getNavigationUser()) {
            String pageFunctionValue = getPageFunctionValue(navigationUser.getPageId(), navigationUser.getTitle());
            if (null != pageFunctionValue) {
                if (!isUserLoggedIn() && (pageFunctionValue.toLowerCase()
                        .contains(currentContext.getString(R.string.app_cms_pagename_authscreen_key).toLowerCase()))) {
                    return navigationUser;
                }
            }
        }
        NavigationUser navigationUser = new NavigationUser();
        navigationUser.setPageId("");
        navigationUser.setAnchor("");
        navigationUser.setDisplayedName("");
        navigationUser.setDisplayedPath("");
        navigationUser.setIcon("");
        navigationUser.setTitle("");
        return navigationUser;
    }

    @SuppressWarnings("unused")
    public NavigationUser getSignUpNavigation() {
        for (NavigationUser navigationUser : getNavigation().getNavigationUser()) {

            if (!isUserLoggedIn() && (getPageFunctionValue(navigationUser.getPageId()).equalsIgnoreCase(currentContext.getString(R.string.app_cms_pagename_create_login_key)))) {
                return navigationUser;
            }
        }
        return null;
    }

    public boolean getLoginFromNavPage() {
        return loginFromNavPage;
    }

    public void openErrorDialog(ContentDatum data,
                                boolean queued,
                                Action1<AppCMSAddToWatchlistResult> action1) {

        RetryCallBinder retryCallBinder = getRetryCallBinder(null, null,
                null, null,
                data, false, data.getGist().getId(), EDIT_WATCHLIST);
        retryCallBinder.setCallback(action1);
        Bundle bundle = new Bundle();
        bundle.putBoolean(currentActivity.getString(R.string.retry_key), true);
        bundle.putBoolean(currentActivity.getString(R.string.register_internet_receiver_key), true);
        bundle.putBoolean("queued", queued);
        Intent args = new Intent(AppCMSPresenter.ERROR_DIALOG_ACTION);
        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
        bundle.putBinder(currentActivity.getString(R.string.retryCallBinderKey), retryCallBinder);
        args.putExtra(currentActivity.getString(R.string.retryCallBundleKey), bundle);
        args.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(args);
    }

    public void setEntitlementPendingVideoData(EntitlementPendingVideoData
                                                       entitlementPendingVideoData) {
        this.entitlementPendingVideoData = entitlementPendingVideoData;
    }

    @SuppressWarnings("unused")
    public void getSubscriptionData(Action1<AppCMSUserSubscriptionPlanResult> action1,
                                    boolean retryRequired) {
        try {
            appCMSSubscriptionPlanCall.call(
                    currentActivity.getString(R.string.app_cms_get_current_subscription_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appPreference.getLoggedInUser(),
                            appCMSMain.getInternalName()),
                    R.string.app_cms_subscription_subscribed_plan_key,
                    null,
                    retryRequired,
                    apikey,
                    getAuthToken(),
                    listResult -> Log.v("currentActivity", "currentActivity"),
                    appCMSSubscriptionPlanResults -> {
                        AppCMSPresenter.this.sendCloseOthersAction(null, true, false);
                        AppCMSPresenter.this.refreshSubscriptionData(
                                AppCMSPresenter.this::sendRefreshPageAction, true);
                    }, action1, errorResponse -> {

                    }
            );
        } catch (Exception e) {
            //
        }
    }

    public Typeface getRegularFontFace() {
        return regularFontFace;
    }

    public void setRegularFontFace(Typeface regularFontFace) {
        this.regularFontFace = regularFontFace;
    }

    public Typeface getLightTypeFace() {
        return lightTypeFace;
    }

    public void setLightTypeFace(Typeface lightTypeFace) {
        this.lightTypeFace = lightTypeFace;
    }

    public Typeface getBoldTypeFace() {
        return boldTypeFace;
    }

    public void setBoldTypeFace(Typeface boldTypeFace) {
        this.boldTypeFace = boldTypeFace;
    }

    public Typeface getSemiBoldTypeFace() {
        return semiBoldTypeFace;
    }

    public void setSemiBoldTypeFace(Typeface semiBoldTypeFace) {
        this.semiBoldTypeFace = semiBoldTypeFace;
    }

    public Typeface getExtraBoldTypeFace() {
        return extraBoldTypeFace;
    }

    public void setExtraBoldTypeFace(Typeface extraBoldTypeFace) {
        this.extraBoldTypeFace = extraBoldTypeFace;
    }

    public Typeface getItalicTypeFace() {
        return italicTypeFace;
    }

    public void setItalicTypeFace(Typeface italicTypeFace) {
        this.italicTypeFace = italicTypeFace;
    }

    public AppCalendarEvent getAppCalendarEvent() {
        return appCalendarEvent;
    }

    public void showPopUpMenuSports
            (ArrayList<Links> links, ArrayList<SocialLinks> socialLinks) {
        AppCMSMoreMenuDialogFragment appCMSMoreMenuDialogFragment = AppCMSMoreMenuDialogFragment.newInstance(getLinks(links, socialLinks));
        appCMSMoreMenuDialogFragment.show(currentActivity.getFragmentManager(), AppCMSMoreMenuDialogFragment.class.getSimpleName());
    }

    private ArrayList<Links> getLinks
            (ArrayList<Links> links, ArrayList<SocialLinks> socialLinks) {
        ArrayList<Links> linksToOpen = new ArrayList<>();
        ArrayList<Links> tempLinks = new ArrayList<>();

        /*combine both social links and link into a single list of links*/
        if (links != null && socialLinks != null) {
            for (int i = 0; i < socialLinks.size(); i++) {
                Links link = new Links();
                link.setDisplayedPath(socialLinks.get(i).getDisplayedPath());
                link.setTitle(socialLinks.get(i).getTitle());
                tempLinks.add(link);
            }
            for (int i = 0; i < links.size(); i++) {
                Links link = new Links();
                link.setDisplayedPath(links.get(i).getDisplayedPath());
                link.setTitle(links.get(i).getTitle());
                tempLinks.add(link);
            }
        }
        /*check if socialLinks are empty , then fill list with links*/
        if (links != null && socialLinks == null) {
            for (int i = 0; i < links.size(); i++) {
                Links link = new Links();
                link.setDisplayedPath(links.get(i).getDisplayedPath());
                link.setTitle(links.get(i).getTitle());
                tempLinks.add(link);
            }
        }
        /*check if links are empty , then fill list with social links*/
        if (links == null && socialLinks != null) {
            for (int i = 0; i < socialLinks.size(); i++) {
                Links link = new Links();
                link.setDisplayedPath(socialLinks.get(i).getDisplayedPath());
                link.setTitle(socialLinks.get(i).getTitle());
                tempLinks.add(link);
            }
        }
        linksToOpen = tempLinks;
        return linksToOpen;
    }

    public void openChromeTab(String browseURL) {
        CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
        builder.setToolbarColor(getBrandPrimaryCtaColor());
        CustomTabsHelper.openCustomTab(currentActivity, builder.build(), browseURL);
    }

    public void launchFreshChat(String appid, String appKey, boolean isFAQPage) {
        if (currentActivity != null) {
            Intent launchFreshChatBroadcast = new Intent("LAUNCH_EVENT");
            launchFreshChatBroadcast.putExtra("FRESHCHAT_APP_ID", appid);
            launchFreshChatBroadcast.putExtra("FRESHCHAT_APP_KEY", appKey);
            launchFreshChatBroadcast.putExtra("FRESHCHAT_APP_LAUNCH_TIME", String.valueOf(System.currentTimeMillis()));
            launchFreshChatBroadcast.putExtra("IS_FAQ_PAGE", isFAQPage);
            currentActivity.sendBroadcast(launchFreshChatBroadcast);
        }

    }

    public void showEmptySearchToast() {
        showToast(localisedStrings.getEmptySearchText(), Toast.LENGTH_SHORT);
    }

    public Action0 getAfterLoginAction() {
        return afterLoginAction;
    }

    public void setAfterLoginAction(Action0 afterLoginAction) {
        this.afterLoginAction = afterLoginAction;
        this.shouldLaunchLoginAction = false;
    }

    public MetaPage getPrivacyPolicyPage() {
        return privacyPolicyPage;
    }

    public MetaPage getTosPage() {
        return tosPage;
    }

    public LruCache<String, Object> getPlayerLruCache() {
        if (tvPlayerViewCache == null) {
            int Player_lru_cache_size = 5;
            tvPlayerViewCache = new LruCache<>(Player_lru_cache_size);
        }
        return tvPlayerViewCache;
    }

    public void setVideoPlayerView(CustomVideoPlayerView customVideoPlayerView) {
        this.videoPlayerView = customVideoPlayerView;
    }

    Boolean isMiniPlayerPlaying = true;

    public Boolean getIsMiniPlayerPlaying() {
        return isMiniPlayerPlaying;
    }

    public void setIsMiniPlayerPlaying(Boolean isMiniPlayerPlaying) {
        this.isMiniPlayerPlaying = isMiniPlayerPlaying;
    }

    public void showPopupWindowPlayer(Boolean starPlay) {
        if (videoPlayerView != videoPlayerViewHome) {
            videoPlayerView = videoPlayerViewHome;
            videoPlayerViewParent = videoPlayerViewHomeParent;
        }
        if (videoPlayerView != null) {
            // if preview frame need to show than mini player will be true and miniplayer need to be hide
            if (videoPlayerView.hideMiniPlayer) {
                videoPlayerView.pausePlayer();
                dismissPopupWindowPlayer(true);
                return;
            }
            if (isCastConnected()) {
                videoPlayerView.pausePlayer();
                dismissPopupWindowPlayer(true);
                return;
            }
            if (getIsTeamPageVisible()) {
                return;
            }

            if (!appPreference.getMiniPLayerVisibility()) {
                videoPlayerView.pausePlayer();
                videoPlayerView.setPauseState();
                dismissPopupWindowPlayer(true);
                return;
            }
            if (relativeLayoutPIP != null && pipPlayerVisible) {
                videoPlayerView.disableController();
                if (getIsMiniPlayerPlaying() || starPlay)
                    videoPlayerView.resumePlayer();
                else
                    videoPlayerView.pausePlayer();
                videoPlayerView.setUseController(false);
            }
            if (videoPlayerView == null || videoPlayerView.getPlayer() == null || videoPlayerView.getPlayer().getPlaybackState() == Player.STATE_IDLE) {
                videoPlayerView.pausePlayer();
                dismissPopupWindowPlayer(true);
                return;
            }

            if (relativeLayoutPIP != null && !pipPlayerVisible) {
                relativeLayoutPIP.setVisibility(View.VISIBLE);
                relativeLayoutPIP.addPlayerToView();
                if (relativeLayoutPIP.getParent() == null && currentActivity != null && currentActivity.findViewById(R.id.app_cms_parent_view) != null) {
                    RelativeLayout.LayoutParams parentParams = (RelativeLayout.LayoutParams) relativeLayoutPIP.getLayoutParams();
                    parentParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
                    parentParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
                    parentParams.bottomMargin = ((AppCMSPageActivity) getCurrentActivity()).getTabbarHeight();
                    parentParams.rightMargin = 0;
                    relativeLayoutPIP.setLayoutParams(parentParams);
                    ((RelativeLayout) currentActivity.findViewById(R.id.app_cms_parent_view)).addView(relativeLayoutPIP);
                    ((AppCMSPageActivity) currentActivity).dragMiniPlayer(relativeLayoutPIP);
                }
                videoPlayerView.disableController();
                if (getIsMiniPlayerPlaying() || starPlay)
                    videoPlayerView.resumePlayer();
                else
                    videoPlayerView.pausePlayer();
                videoPlayerView.setUseController(false);
                pipPlayerVisible = true;
            }

        }
    }

    public void dismissPopupWindowPlayer(boolean pause) {

        if (relativeLayoutPIP != null && currentActivity != null && videoPlayerViewParent != null && relativeLayoutPIP.getVisibility() == View.VISIBLE) {
            relativeLayoutPIP.adjustAudio();
            relativeLayoutPIP.removeAllViews();
            if (videoPlayerView != null && videoPlayerViewParent != null) {
                if (videoPlayerView.getParent() != null) {
                    ((ViewGroup) videoPlayerView.getParent()).removeView(videoPlayerView);
                }
                videoPlayerView.setLayoutParams(videoPlayerViewParent.getLayoutParams());
                if (pause)
                    videoPlayerView.pausePlayer();
                videoPlayerViewParent.addView(videoPlayerView);
                relativeLayoutPIP.removeView(videoPlayerView);
                pipPlayerVisible = false;
                playerExpandAnimation(videoPlayerViewParent);
            }
            relativeLayoutPIP.setVisibility(View.GONE);
            RelativeLayout rootView = currentActivity.findViewById(R.id.app_cms_parent_view);
            if (rootView != null)
                rootView.removeView(relativeLayoutPIP);
        }

        pipPlayerVisible = false;
    }

    public void playerExpandAnimation(final View v) {

        Animation animMoveUp = AnimationUtils.loadAnimation(currentActivity, R.anim.top_player_expand);
        v.startAnimation(animMoveUp);
    }

    public void showFullScreenPlayer() {
        if (videoPlayerViewParent == null) {
            videoPlayerViewParent = (ViewGroup) videoPlayerView.getParent();
        }
        if (videoPlayerView != null && videoPlayerView.getParent() != null) {
            if (currentActivity.findViewById(R.id.app_cms_parent_view) == null) {
                return;
            }

            relativeLayoutFull = new FullPlayerView(currentActivity, this);
            relativeLayoutFull.setVisibility(View.VISIBLE);

            ((RelativeLayout) currentActivity.findViewById(R.id.app_cms_parent_view)).addView(relativeLayoutFull);
            currentActivity.findViewById(R.id.app_cms_parent_view).setVisibility(View.VISIBLE);

            isFullScreenVisible = true;
            if (!BaseView.isTablet(getCurrentContext())) {
                restrictLandscapeOnly();
                new Handler().postDelayed(() -> {
                    int orientation = getCurrentActivity().getResources().getConfiguration().orientation;
                    unrestrictPortraitOnly();
                }, 1000);
            }

            if (currentActivity != null && currentActivity instanceof AppCMSPageActivity) {
                ((AppCMSPageActivity) currentActivity).setFullScreenFocus();
            }
        }

    }

    public void showFullScreenEpisodePlayer() {
        if (episodePlayerViewParent == null) {
            episodePlayerViewParent = (ViewGroup) trailerPlayerView.getParent();
        }
        if (trailerPlayerView != null && trailerPlayerView.getParent() != null) {
            if (currentActivity.findViewById(R.id.app_cms_parent_view) == null) {
                return;
            }
            if (trailerPlayerParams == null)
                trailerPlayerParams = trailerPlayerView.getLayoutParams();

            relativeLayoutFull = new FullPlayerEpisodeView(currentActivity, this);
            relativeLayoutFull.setVisibility(View.VISIBLE);

            ((RelativeLayout) currentActivity.findViewById(R.id.app_cms_parent_view)).addView(relativeLayoutFull);
            currentActivity.findViewById(R.id.app_cms_parent_view).setVisibility(View.VISIBLE);

            isFullScreenVisible = true;
            if (!BaseView.isTablet(getCurrentContext())) {
                restrictLandscapeOnly();
                new Handler().postDelayed(() -> {
                    int orientation = getCurrentActivity().getResources().getConfiguration().orientation;
                    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                        System.out.println("Current is ladnscape");
                    } else {
                        System.out.println("Current is portrait");

                    }
                    unrestrictPortraitOnly();
                }, 1000);
            }
            if (currentActivity != null && currentActivity instanceof AppCMSPageActivity) {
                ((AppCMSPageActivity) currentActivity).setFullScreenFocus();
            }
        }

    }

    public void exitFullScreenEpisodePlayer() {
        try {
            if (relativeLayoutFull != null) {
//                relativeLayoutFull.removeAllViews();
                if (episodePlayerViewParent != null) {
                    relativeLayoutFull.removeView(trailerPlayerView);
                    trailerPlayerView.setLayoutParams(trailerPlayerParams);
                    trailerPlayerView.updateFullscreenButtonState(Configuration.ORIENTATION_PORTRAIT);
                    episodePlayerViewParent.addView(trailerPlayerView);
                }

                RelativeLayout rootView = currentActivity.findViewById(R.id.app_cms_parent_view);
                rootView.postDelayed(() -> {
                    try {
                        rootView.removeView(relativeLayoutFull);
                        relativeLayoutFull = null;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }, 50);

            }
        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
        }
        if (relativeLayoutFull != null) {
            relativeLayoutFull.setVisibility(View.GONE);
        }
        if (!BaseView.isTablet(getCurrentContext())) {
            restrictPortraitOnly();
            new Handler().postDelayed(() -> {
                int orientation = getCurrentActivity().getResources().getConfiguration().orientation;
                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    System.out.println("Current is ladnscape");
                } else {
                    System.out.println("Current is portrait");

                }
                unrestrictPortraitOnly();
            }, 1000);
        }

        if (currentActivity != null && currentActivity instanceof AppCMSPageActivity) {
            ((AppCMSPageActivity) currentActivity).exitFullScreenFocus();
        }
        isFullScreenVisible = false;
    }

    public void exitFullScreenPlayer() {
        try {
            if (relativeLayoutFull != null) {
//                relativeLayoutFull.removeAllViews();
                if (videoPlayerViewParent != null && videoPlayerView.getParent().getClass().getSimpleName().equalsIgnoreCase("FullPlayerView")) {
                    relativeLayoutFull.removeView(videoPlayerView);
                    videoPlayerView.setLayoutParams(videoPlayerViewParent.getLayoutParams());
                    videoPlayerView.updateFullscreenButtonState(Configuration.ORIENTATION_PORTRAIT);
                    videoPlayerViewParent.addView(videoPlayerView);
                }

//                relativeLayoutFull.setVisibility(View.GONE);
//                relativeLayoutFull.removeAllViews();

                RelativeLayout rootView = currentActivity.findViewById(R.id.app_cms_parent_view);
                rootView.postDelayed(() -> {
                    try {
                        rootView.removeView(relativeLayoutFull);
                        relativeLayoutFull = null;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }, 50);

            }
        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
            e.printStackTrace();
        }
        if (relativeLayoutFull != null) {
            relativeLayoutFull.setVisibility(View.GONE);
        }
        // setAppOrientation();
        if (!BaseView.isTablet(getCurrentContext())) {
            restrictPortraitOnly();
            new Handler().postDelayed(() -> {
                int orientation = getCurrentActivity().getResources().getConfiguration().orientation;
                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    System.out.println("Current is ladnscape");
                } else {
                    System.out.println("Current is portrait");

                }
                unrestrictPortraitOnly();
            }, 1000);
        }

//        new Handler().postDelayed(() -> {
//            if (currentActivity != null && isAutoRotate() &&
//                    !AppCMSPresenter.isFullScreenVisible &&
//                    currentActivity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT &&
//                    currentActivity.findViewById(R.id.video_player_id) != null) {
//                unrestrictPortraitOnly();
//            } else if (currentActivity != null && !BaseView.isTablet(currentActivity) && currentActivity.findViewById(R.id.video_player_id) == null) {
//                restrictPortraitOnly();
//            } else if (BaseView.isTablet(currentActivity)) {
//                unrestrictPortraitOnly();
//            }
//        }, 100);

        if (currentActivity != null && currentActivity instanceof AppCMSPageActivity) {
            ((AppCMSPageActivity) currentActivity).exitFullScreenFocus();
        }
        isFullScreenVisible = false;
    }

    public boolean isAutoRotate() {
        if (currentActivity != null) {
            return (android.provider.Settings.System.getInt(currentActivity.getContentResolver(), android.provider.Settings.System.ACCELEROMETER_ROTATION, 0) == 1);
        }
        return false;
    }

    public ModuleList getTabBarUIModule() {
        AppCMSPageUI appCmsHomePage = getAppCMSPageUI(homePage.getPageFunction());
        ModuleList footerModule = null;
        if (appCmsHomePage != null) {
            ArrayList<ModuleList> moduleList = appCmsHomePage.getModuleList();
            for (int i = moduleList.size() - 1; i >= 0; i--) {
                if (moduleList.get(i).getType().contains("AC Footer 01")) {
                    footerModule = moduleList.get(i);
                    break;
                }
            }
        }
        return footerModule;
    }

    public ModuleList getTabBarUIFooterModule() {
        /*FIX for MSEAN-1324*/
        ModuleList footerModule = null;
        if (getModuleListComponent(currentActivity.getResources().getString(R.string.app_cms_module_list_footer_key)) != null) {
            footerModule = getModuleListComponent(currentActivity.getResources().getString(R.string.app_cms_module_list_footer_key));
        } else {
            //In case we did not get footer module some how.
            footerModule = new ModuleList();
            footerModule.setBlockName("footer01");
            footerModule.setTabSeparator(false);
            ArrayList<Component> componets = new ArrayList<>();
            Component componet1, componet2;
            componet1 = new Component();
            componet2 = new Component();

            componet1.setType("image");
            componet1.setKey("tabImage");
            componet1.setSelectable(true);

            componet2.setType("label");
            componet2.setKey("tabName");
            componet2.setSelectable(true);

            componets.add(componet1);
            componets.add(componet2);
            footerModule.setComponents(componets);

        }
        return footerModule;
    }

    public ModuleList getModuleListComponent(String moduleId) {
        ModuleList moduleList = null;
        /*FIX for MSEAN-1324*/
        if (appCMSAndroidModules != null && appCMSAndroidModules.getModuleListMap() != null) {
            moduleList = appCMSAndroidModules.getModuleListMap().get(moduleId);
        }
        return moduleList;
    }

    public ModuleList getModuleListByName(List<ModuleList> listModule, String idOrName) {
        int mosudlePosition = 0;
        for (ModuleList moduleList : listModule) {
            if (idOrName.equalsIgnoreCase(moduleList.getType()) || idOrName.equalsIgnoreCase(moduleList.getId())) {
                moduleList.setModulePosition(mosudlePosition);
                return moduleList;
            }
            mosudlePosition++;
        }
        return null;
    }

    public Module getModuleById(List<Module> listModule, String idOrName) {
        for (Module moduleList : listModule) {
            if (idOrName.equalsIgnoreCase(moduleList.getId())) {
                return moduleList;

            }
        }
        return null;
    }

    public void setVideoPlayerViewCache(String key, CustomVideoPlayerView videoPlayerView) {
        if (playerViewCache == null) {
            playerViewCache = new HashMap<String, CustomVideoPlayerView>();
        }
        playerViewCache.put(key, videoPlayerView);
    }

    public void clearVideoPlayerViewCache() {
        if (playerViewCache != null) {
            playerViewCache.clear();
        }
    }

    public CustomVideoPlayerView getVideoPlayerViewCache(String key) {
        if (playerViewCache == null) {
            playerViewCache = new HashMap<String, CustomVideoPlayerView>();
        }
        if (playerViewCache.get(key) != null) {
            return playerViewCache.get(key);
        }
        return null;
    }

    public RecyclerView getDownlistScreenCache() {
        if (downloadRecyclerView != null) {
            return downloadRecyclerView;

        }
        return null;
    }

    public void setDownlistScreenCache(RecyclerView recyclerView) {
        this.downloadRecyclerView = recyclerView;

    }

    public void setWebViewCache(String key, CustomWebView webView) {
        if (webViewCache == null) {
            webViewCache = new HashMap<String, CustomWebView>();
        }
        webViewCache.put(key, webView);
    }

    public void clearWebViewCache() {
        if (webViewCache != null) {
            webViewCache.clear();
        }
    }

    public CustomWebView getWebViewCache(String key) {
        if (webViewCache == null) {
            webViewCache = new HashMap<String, CustomWebView>();
        }
        if (webViewCache.get(key) != null) {
            return webViewCache.get(key);
        }
        return null;
    }

    public void launchFullScreenStandalonePlayer(String videoId) {
        refreshVideoData(videoId, new Action1<ContentDatum>() {
            @Override
            public void call(ContentDatum contentDatum) {
                if (/*moduleAPI.getContentData() != null &&
                                            !moduleAPI.getContentData().isEmpty() &&*/
                        contentDatum != null &&
                                contentDatum.getContentDetails() != null) {

                    List<String> relatedVideoIds = null;
                    if (contentDatum.getContentDetails() != null &&
                            contentDatum.getContentDetails().getRelatedVideoIds() != null) {
                        relatedVideoIds = contentDatum.getContentDetails().getRelatedVideoIds();
                    }
                    int currentPlayingIndex = -1;
                    if (relatedVideoIds == null) {
                        currentPlayingIndex = 0;
                    }

                    launchVideoPlayer(contentDatum,
                            videoId,
                            currentPlayingIndex,
                            relatedVideoIds,
                            contentDatum.getGist().getWatchedTime(),
                            "watchVideo");

                }
            }
        }, null, false, false, null);
    }

    public void setMoreIconAvailable() {

        isMoreOptionsAvailable = true;
    }

    public Boolean getIsMoreOptionsAvailable() {
        return isMoreOptionsAvailable;
    }

    public long setCurrentWatchProgress(long runTime, long watchedTime) {
        long videoPlayTime;
        if (runTime > 0 && watchedTime > 0 && runTime > watchedTime) {
            long playDifference = runTime - watchedTime;
            long playTimePercentage = ((watchedTime * 100) / runTime);

            // if video watchtime is greater or equal to 98% of total run time and interval is less than 30 then play from start
            if (playTimePercentage >= 98 && playDifference <= 30) {
                videoPlayTime = 0;
            } else {
                videoPlayTime = watchedTime;
            }
        } else {
            videoPlayTime = 0;
        }
        return videoPlayTime;

    }

    public String getLoginPageUserName() {
        return loginPageUserName;
    }

    public void setLoginPageUserName(String loginPageUserName) {
        this.loginPageUserName = loginPageUserName;
    }

    public String getLoginPagePassword() {
        return loginPagePassword;
    }

    public void setLoginPagePassword(String loginPagePassword) {
        this.loginPagePassword = loginPagePassword;
    }

    public String getLastWatchedTime(ContentDatum contentDatum, MetadataMap metadataMap) {
        if (contentDatum.getGist().getUpdateDate() == null) {
            return "";
        }
        long currentTime = System.currentTimeMillis();
        long lastWatched = Long.parseLong(contentDatum.getGist().getUpdateDate());

        if (currentTime == 0) {
            lastWatched = 0;
        }

        long seconds = TimeUnit.MILLISECONDS.toSeconds(currentTime - lastWatched);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(currentTime - lastWatched);
        long hours = TimeUnit.MILLISECONDS.toHours(currentTime - lastWatched);
        long days = TimeUnit.MILLISECONDS.toDays(currentTime - lastWatched);

        int weeks = (int) ((currentTime - lastWatched) / (1000 * 60 * 60 * 24 * 7));
        int months = (weeks / 4);
        int years = months / 12;

        String lastWatchedMessage = "";

        if (years > 0) {
            if (years > 1) {
                lastWatchedMessage = years + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_years_ago));
                if (metadataMap != null && metadataMap.getkStrYearsAgo() != null)
                    lastWatchedMessage = years + " " + metadataMap.getkStrYearsAgo();
            } else {
                lastWatchedMessage = years + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_year_ago));
                if (metadataMap != null && metadataMap.getkStrYearAgo() != null)
                    lastWatchedMessage = years + " " + metadataMap.getkStrYearAgo();
            }
        } else if (months > 0 && months < 12) {
            if (months > 1) {
                lastWatchedMessage = months + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_months_ago));
                if (metadataMap != null && metadataMap.getkStrMonthsAgo() != null)
                    lastWatchedMessage = months + " " + metadataMap.getkStrMonthsAgo();
            } else {
                lastWatchedMessage = months + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_month_ago));
                if (metadataMap != null && metadataMap.getkStrMonthAgo() != null)
                    lastWatchedMessage = months + " " + metadataMap.getkStrMonthAgo();
            }
        } else if (weeks > 0 && weeks < 4) {
            if (weeks > 1) {
                lastWatchedMessage = weeks + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_weeks_ago));
                if (metadataMap != null && metadataMap.getkStrWeeksAgo() != null)
                    lastWatchedMessage = weeks + " " + metadataMap.getkStrWeeksAgo();
            } else {
                lastWatchedMessage = weeks + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_week_ago));
                if (metadataMap != null && metadataMap.getkStrWeekAgo() != null)
                    lastWatchedMessage = weeks + " " + metadataMap.getkStrWeekAgo();
            }
        } else if (days > 0 && days <= 6) {
            if (days > 1) {
                lastWatchedMessage = days + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_days_ago));
                if (metadataMap != null && metadataMap.getkStrDaysAgo() != null)
                    lastWatchedMessage = days + " " + metadataMap.getkStrDaysAgo();
            } else {
                lastWatchedMessage = days + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_day_ago));
                if (metadataMap != null && metadataMap.getkStrDayAgo() != null)
                    lastWatchedMessage = days + " " + metadataMap.getkStrDayAgo();
            }
        } else if (hours > 0 && hours < 24) {
            if (hours > 1) {
                lastWatchedMessage = hours + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_hours_ago));
                if (metadataMap != null && metadataMap.getkStrHoursAgo() != null)
                    lastWatchedMessage = hours + " " + metadataMap.getkStrHoursAgo();
            } else {
                lastWatchedMessage = hours + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_hour_ago));
                if (metadataMap != null && metadataMap.getkStrHourAgo() != null)
                    lastWatchedMessage = hours + " " + metadataMap.getkStrHourAgo();
            }
        } else if (minutes > 0 && minutes < 60) {
            if (minutes > 1) {
                lastWatchedMessage = minutes + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_mins_ago));
                if (metadataMap != null && metadataMap.getkStrMinutesAgo() != null)
                    lastWatchedMessage = minutes + " " + metadataMap.getkStrMinutesAgo();
            } else {
                lastWatchedMessage = minutes + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_min_ago));
                if (metadataMap != null && metadataMap.getkStrMinuteAgo() != null)
                    lastWatchedMessage = minutes + " " + metadataMap.getkStrMinuteAgo();
            }
        } else if (seconds < 60) {
            if (seconds > 3) {
                lastWatchedMessage = seconds + getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_sec_ago));
                if (metadataMap != null && metadataMap.getkStrSecondsAgo() != null)
                    lastWatchedMessage = seconds + " " + metadataMap.getkStrSecondsAgo();
            } else {
                lastWatchedMessage = getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.watchlist_duration_just_now));
                if (metadataMap != null && metadataMap.getkStrJustNow() != null)
                    lastWatchedMessage = metadataMap.getkStrJustNow();
            }
        }

        return lastWatchedMessage;
    }


    public boolean getIsTeamPageVisible() {
        return isTeamPAgeVisible;
    }

    public void setIsTeamPageVisible(boolean isVisible) {
        isTeamPAgeVisible = isVisible;
    }

    private UAAssociateNamedUserRequest getUAAssociateNamedUserRequest(String userId) {
        UAAssociateNamedUserRequest uaAssociateNamedUserRequest = new UAAssociateNamedUserRequest();
        uaAssociateNamedUserRequest.setNamedUserId(userId);
        if (currentContext != null) {
            uaAssociateNamedUserRequest.setDeviceType(currentContext.getString(R.string.ua_android_device_key));
        }
        uaAssociateNamedUserRequest.setChannelId(uaChannelId);

        return uaAssociateNamedUserRequest;
    }

    private void sendUAAboutCategory(String userId, String category) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0) {
            urbanAirshipEventPresenter.videoCategoryUATagging(userId,
                    category,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                        sendUAAssociateUserEventRequest(getUAAssociateNamedUserRequest(userId),
                                true);
                    });
        }
    }

    public void sendUAAboutLapsedUser(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0) {
            urbanAirshipEventPresenter.sendUAAboutLapsedUser(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                        sendUAAssociateUserEventRequest(getUAAssociateNamedUserRequest(userId),
                                true);
                    });
        }
    }

    private void sendUALoggedInEvent(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendUserLoginEvent(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                        sendUAAssociateUserEventRequest(getUAAssociateNamedUserRequest(userId),
                                true);
                    });
        }
    }

    private void sendUALoggedOutEvent(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendUserLogoutEvent(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                        sendUAAssociateUserEventRequest(getUAAssociateNamedUserRequest(userId),
                                false);
                    });
        }
    }

    private void sendUASubscribedEvent(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendSubscribedEvent(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private void sendUASubscribedMOTV(String userId) {

        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) &&
                !currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().equals("null") &&
                currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendMOTVSubscription(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private void sendUAUnsubscribedEvent(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key))
                && currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendUnsubscribedEvent(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private void sendUASubscriptionAboutToExpireEvent(String userId) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key))
                && currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /* currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendSubscriptionAboutToExpireEvent(userId,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private void sendUASubscriptionEndDateEvent(String userId, String subscriptionEndDate) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key))
                && currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendSubscriptionEndDateEvent(userId,
                    subscriptionEndDate,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private void sendUASubscriptionPlanEvent(String userId, String subscriptionPlan) {
        if (currentContext != null &&
                !TextUtils.isEmpty(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key))
                && currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key).trim().length() != 0
            /*currentContext.getResources().getBoolean(R.bool.send_ua_user_churn_events)*/) {
            urbanAirshipEventPresenter.sendSubscriptionPlanEvent(userId,
                    subscriptionPlan,
                    uaNamedUserRequest -> {
                        sendUANamedUserEventRequest(uaNamedUserRequest);
                    });
        }
    }

    private PostUANamedUserEventAsyncTask.Params getUAParams() {
        return new PostUANamedUserEventAsyncTask.Params
                .Builder()
                .accessKey(uaAccessKey)
                /** This value should ideally come from the Site.json response (2017-12-22 WIP AC-1384) */
//                .authKey("4qiw5pNUSuaw5HfAfVf-AQ") /** Production */
//                        .authKey("9NvLFbMITeuJtb-AqrwOpw") /** QA */
                .authKey(currentContext.getResources().getString(R.string.app_cms_urban_airship_master_key)) /** Production */
                .build();
    }

    private void sendUAAssociateUserEventRequest(UAAssociateNamedUserRequest
                                                         uaAssociateNamedUserRequest,
                                                 boolean associate) {
        PostUANamedUserEventAsyncTask.Params params = getUAParams();

        new PostUANamedUserEventAsyncTask(uaNamedUserEventCall)
                .execute(params, uaAssociateNamedUserRequest, associate);
    }

    private void sendUANamedUserEventRequest(UANamedUserRequest uaNamedUserRequest) {
        PostUANamedUserEventAsyncTask.Params params = getUAParams();

        new PostUANamedUserEventAsyncTask(uaNamedUserEventCall)
                .execute(params, uaNamedUserRequest);
    }

    public String getAdsUrl(String pagePath) {
        if (currentActivity != null && appCMSAndroid != null) {
            String videoTag = "";
            if (appCMSAndroid.getAdvertising() != null &&
                    appCMSAndroid.getAdvertising().getAdProvider() != null &&
                    !TextUtils.isEmpty(appCMSAndroid.getAdvertising().getVideoTag())) {
                Date now = new Date();
                videoTag = appCMSAndroid.getAdvertising().getVideoTag();
                if (appCMSAndroid.getAdvertising().getAdProvider().contains("spotxAdTags")) {
                    if (videoTag.contains("&")) {
                        videoTag = videoTag.split("&", 2)[0];
                        videoTag = currentActivity.getString(R.string.app_cms_spotx_ads_api_url,
                                videoTag,
                                currentContext.getResources().getString(R.string.package_name),
                                currentContext.getResources().getString(R.string.app_name),
                                2,
                                Utils.getAdvertisingID(currentContext),
                                Build.MANUFACTURER,
                                CommonUtils.getDeviceName(),
                                Utils.getDeviceHeight(currentContext),
                                Utils.getDeviceHeight(currentContext),
                                Utils.getIPAddress(),
                                new WebView(currentContext).getSettings().getUserAgentString(),
                                now.getTime());
                    }
                    return videoTag;
                } else {
                    if (videoTag.contains("[placeholder]")) {
                        videoTag = videoTag.replace("[placeholder]", getPermalinkCompletePath(pagePath));
                    }

                    return currentActivity.getString(R.string.app_cms_ads_api_url,
                            videoTag,
                            now.getTime(),
                            appCMSMain.getSite());
                }
            }
        }
        return null;
    }

    public void setTVVideoPlayerView(TVVideoPlayerView customVideoPlayerView) {
        this.tvVideoPlayerView = customVideoPlayerView;
    }

    public void showFullScreenTVPlayer() {
        if (tvVideoPlayerView != null && tvVideoPlayerView.getContentDatum() != null
                && !isPinVerified() && CommonUtils.isUnderAgeRestrictions(this, tvVideoPlayerView.getContentDatum().getParentalRating())) {
            currentActivity.sendBroadcast(new Intent(AppCMSPresenter.PRESENTER_OPEN_PIN_DIALOG_ACTION));
            return;
        }
        if (videoPlayerViewParent == null) {
            videoPlayerViewParent = (ViewGroup) tvVideoPlayerView.getParent();
        }
        if (tvVideoPlayerView != null && tvVideoPlayerView.getParent() != null) {
            relativeLayoutFull = new FullPlayerView(currentActivity, this);
            relativeLayoutFull.setVisibility(View.VISIBLE);
            ((RelativeLayout) currentActivity.findViewById(R.id.app_cms_parent_view)).addView(relativeLayoutFull);
            currentActivity.findViewById(R.id.app_cms_parent_view).setVisibility(View.VISIBLE);
            tvVideoPlayerView.getPlayerView().showController();
            isFullScreenVisible = true;
        }
    }

    public void exitFullScreenTVPlayer() {
        try {
            if (relativeLayoutFull != null) {
                if (videoPlayerViewParent != null) {
                    relativeLayoutFull.removeView(tvVideoPlayerView);
                    if (tvVideoPlayerView != null && tvVideoPlayerView.getParent() != null) {
                        ((ViewGroup) tvVideoPlayerView.getParent()).removeView(tvVideoPlayerView);
                    }
                    //tvVideoPlayerView.setLayoutParams(videoPlayerViewParent.getLayoutParams());
                    videoPlayerViewParent.addView(tvVideoPlayerView);
                }
                tvVideoPlayerView = null;
                videoPlayerViewParent = null;

                RelativeLayout rootView = currentActivity.findViewById(R.id.app_cms_parent_view);
                rootView.postDelayed(() -> {
                    try {
                        rootView.removeView(relativeLayoutFull);
                        relativeLayoutFull = null;
                    } catch (Exception e) {

                    }
                }, 50);

            }
        } catch (Exception e) {
        }
        if (relativeLayoutFull != null) {
            relativeLayoutFull.setVisibility(View.GONE);
        }
        isFullScreenVisible = false;
    }

    /**
     * Last position of playing audio item will save in following conditions:-
     * uf user kill the app , if video starts to play while audio is playing
     *
     * @param
     */
    public void stopAudioServices() {
        try {
            Intent intent = new Intent();
            intent.setAction(AudioServiceHelper.APP_CMS_STOP_AUDIO_SERVICE_ACTION);
            intent.putExtra(AudioServiceHelper.APP_CMS_STOP_AUDIO_SERVICE_MESSAGE, true);
            currentActivity.sendBroadcast(intent);
        } catch (Exception ex) {
        }
    }

    public void updatePlaybackControl() {
        try {
            if (currentActivity != null) {
                Intent intent = new Intent();
                intent.setAction(AudioServiceHelper.APP_CMS_PLAYBACK_UPDATE);
                intent.putExtra(AudioServiceHelper.APP_CMS_PLAYBACK_UPDATE_MESSAGE, true);
                currentActivity.sendBroadcast(intent);
            }
        } catch (Exception ex) {
        }
    }

    public String audioDuration(int totalSeconds) {

        final int MINUTES_IN_AN_HOUR = 60;
        final int SECONDS_IN_A_MINUTE = 60;

        int seconds = totalSeconds % SECONDS_IN_A_MINUTE;
        int totalMinutes = totalSeconds / SECONDS_IN_A_MINUTE;
        int minutes = totalMinutes % MINUTES_IN_AN_HOUR;
//        int hours = totalMinutes / MINUTES_IN_AN_HOUR;

//        return hours + " hours " + minutes + " minutes " + seconds + " seconds";
        String min = "";
        String sec = "";
        if (minutes < 10) {
            min = min + "0" + minutes;
        } else {
            min = min + minutes;
        }
        if (seconds < 10) {
            sec = sec + "0" + seconds;
        } else {
            sec = sec + seconds;
        }
        return min + ":" + sec;
    }

    public Context getCurrentContext() {
        return currentContext;
    }

    public void setCurrentContext(Context context) {
        this.currentContext = context;
        try {
            this.cachedAPIUserToken = context.getString(R.string.app_cms_cached_api_user_token);
        } catch (Exception e) {

        }
    }

    public void setIsTVAppLaunchTypeDeepLink(boolean isTVAppLaunchTypeDeepLink) {
        appPreference.setIsTVAppLaunchTypeDeepLink(isTVAppLaunchTypeDeepLink);
    }

    public void setDeepLinkContentID(String contentID) {
        appPreference.setDeepLinkContentID(contentID);
    }

    public String getActiveSubscriptionEndDate() {
        return appPreference.getActiveSubscriptionEndDate();
    }

    public void setActiveSubscriptionStatus(String subscriptionStatus) {
        appPreference.setActiveSubscriptionStatus(subscriptionStatus);
    }

    public String getActiveSubscriptionPlatform() {
        return appPreference.getActiveSubscriptionPlatform();
    }

    public void setSubscriptionPlanRenewable(boolean isSubscribedPlanRenewable) {
        appPreference.setIsSubscribedPlanRenewable(isSubscribedPlanRenewable);
    }

    public boolean isSubscribedPlanRenewable() {
        return appPreference.isSubscribedPlanRenewable();
    }

    public void setUserFreePlayTimePreference(long userFreePlayTime) {
        appPreference.setUserFreePlayTimePreference(userFreePlayTime);
    }

    public String getActiveSubscriptionStatus() {
        return appPreference.getActiveSubscriptionStatus();
    }

    public long getUserFreePlayTimePreference() {
        return appPreference.getUserFreePlayTimePreference();
    }

    public boolean setActiveSubscriptionPlatform(String platform) {
        return appPreference.setActiveSubscriptionPlatform(platform);
    }

    public void setActiveSubscriptionPlanName(String subscriptionPlanName) {
        appPreference.setActiveSubscriptionPlanName(subscriptionPlanName);
    }

    public void setActiveSubscriptionPlanTitle(String subscriptionPlanTitle) {
        appPreference.setActiveSubscriptionTitle(subscriptionPlanTitle);
    }

    public void setActiveSubscriptionEndDate(String subscriptionEndDate) {
        appPreference.setActiveSubscriptionEndDate(subscriptionEndDate);
    }

    public boolean getAudioReload() {
        return appPreference.getAudioReload();
    }

    public void setAudioReload(boolean isReload) {
        appPreference.setAudioReload(isReload);
    }

    public void saveLastPlaySongPosition(String id, long pos) {
        Gson gson = new Gson();
        String json = gson.toJson(new LastPlayAudioDetail(id, pos));
        appPreference.saveLastPlaySongPosition(json);
    }

    public LastPlayAudioDetail getLastPlaySongPosition() {
        Gson gson = new Gson();
        String json = appPreference.getLastPlaySongPosition();
        LastPlayAudioDetail obj = gson.fromJson(json, LastPlayAudioDetail.class);
        return obj;
    }


    public boolean isAllPlaylistAudioDownloaded(List<ContentDatum> contentData) {
        boolean isPlaylistDownloaded = true;
        if (contentData != null) {
            for (int i = 0; i < contentData.size(); i++) {
                if (contentData.get(i).getGist() != null &&
                        contentData.get(i).getGist().getMediaType() != null
                        && !contentData.get(i).getGist().getMediaType().toLowerCase().contains(currentContext.getString(R.string.media_type_playlist).toLowerCase())
                        && !isVideoDownloaded(String.valueOf(contentData.get(i).getGist().getId()))) {
                    isPlaylistDownloaded = false;
                    break;
                }
            }
        }
        return isPlaylistDownloaded;
    }

    public boolean getAudioPlayerOpen() {
        return isAudioPlayerOpen;
    }

    public void setAudioPlayerOpen(boolean isAudioPlayer) {
        isAudioPlayerOpen = isAudioPlayer;
    }

    public boolean isAudioActvityVisible() {
        return isAudioActvityVisible;
    }

    public void setAudioActvityVisible(boolean audioActvityVisible) {
        isAudioActvityVisible = audioActvityVisible;
    }

    private boolean isAudioActvityVisible;


    public String getArtistNameFromCreditBlocks(List<CreditBlock> creditBlocks) {
        StringBuilder artist = new StringBuilder();
        if (creditBlocks != null && creditBlocks.size() > 0 && creditBlocks.get(0) != null
                && creditBlocks.get(0).getCredits() != null && creditBlocks.get(0).getCredits().size() > 0 && creditBlocks.get(0).getCredits().get(0).getTitle() != null) {

            for (int i = 0; i < creditBlocks.size(); i++) {
                if (creditBlocks.get(i).getTitle().equalsIgnoreCase("Starring")) {
                    if (creditBlocks.get(i).getCredits() != null && creditBlocks.get(i).getCredits().size() > 0 && creditBlocks.get(i).getCredits().get(0).getTitle() != null) {
                        for (int j = 0; j < creditBlocks.get(i).getCredits().size(); j++) {
                            if (j > 0 && j == creditBlocks.get(i).getCredits().size() - 1) {
                                artist.append(" & ");
                            } else if (j > 0) {
                                artist.append(" , ");
                            }
                            artist.append(creditBlocks.get(i).getCredits().get(j).getTitle());

                        }
                    }
                }
            }
        }
        if (TextUtils.isEmpty(artist.toString())) {
            artist.append("");
        }
        return artist.toString();
    }

    public String getDirectorNameFromCreditBlocks(List<CreditBlock> creditBlocks) {
        StringBuilder artist = new StringBuilder();
        if (creditBlocks != null && creditBlocks.size() > 0 && creditBlocks.get(0).getCredits() != null && creditBlocks.get(0).getCredits().size() > 0 && creditBlocks.get(0).getCredits().get(0).getTitle() != null) {

            for (int i = 0; i < creditBlocks.size(); i++) {
                if (creditBlocks.get(i).getTitle().equalsIgnoreCase("Director")) {
                    if (creditBlocks.get(i).getCredits() != null && creditBlocks.get(i).getCredits().size() > 0 && creditBlocks.get(i).getCredits().get(0).getTitle() != null) {
                        for (int j = 0; j < creditBlocks.get(i).getCredits().size(); j++) {
                            if (j > 0 && j == creditBlocks.get(i).getCredits().size() - 1) {
                                artist.append(" & ");
                            } else if (j > 0) {
                                artist.append(" , ");
                            }
                            artist.append(creditBlocks.get(i).getCredits().get(j).getTitle());

                        }
                    }
                }
            }
        }
        if (TextUtils.isEmpty(artist.toString())) {
            artist.append("");
        }
        return artist.toString();
    }

    public enum LaunchType {
        SUBSCRIBE, LOGIN_AND_SIGNUP, INIT_SIGNUP, NAVIGATE_TO_HOME_FROM_LOGIN_DIALOG, HOME, SIGNUP, LOGIN, NAVIGATE_TO_PLANS_PAGE, LOGIN_FROM_MINI_PLAYER,
        VIDEO_PIN_VIEW, VIEWING_RESTRICTIONS_VIEW, AUTOPLAY_SCREEN, VIEWING_RESTRICTIONS_FROM_VIDEO_PIN_VIEW, DEEPLINK, TVOD_PURCHASE, LOGIN_AND_SUBSCRIBE, V2_SUBSCRIPTION_FLOW
    }

    public enum PlatformType {
        ANDROID, TV
    }

    public enum TemplateType {
        ENTERTAINMENT, SPORTS, EDUCATION, LIVE, FITNESS, NEWS, KIDS
    }

    public enum BeaconEvent {
        PLAY, RESUME, PING, AD_REQUEST, AD_IMPRESSION, FIRST_FRAME, BUFFERING, FAILED_TO_START, DROPPED_STREAM
    }

    public enum DialogType {
        NONE,
        SUBSCRIPTION_EMAIL_SUCCESS,
        SUBSCRIPTION_EMAIL_EXIST,
        SUBSCRIPTION_EMAIL_FAIL,
        SUBSCRIPTION_EMAIL_INVALID,
        NETWORK,
        DRM_NOT_DOWNLOAD,
        DRM_NOT_CAST,
        DRM_PLAY_ERROR,
        SIGNIN,
        SIGNUP,
        PROFILE_GUEST_USER,
        SIGNUP_PASSWORD_INVALID,
        RESET_PASSWORD,
        CANCEL_SUBSCRIPTION,
        SUBSCRIBE,
        RETRY_SUBSCRIPTION,
        DELETE_ONE_HISTORY_ITEM,
        DELETE_ALL_HISTORY_ITEMS,
        DELETE_ONE_WATCHLIST_ITEM,
        EXISTING_DOWNLOAD_OFFLINE_ITEM,
        DELETE_ALL_WATCHLIST_ITEMS,
        DELETE_ONE_DOWNLOAD_ITEM,
        RE_START_DOWNLOAD_ITEM,
        DELETE_ALL_DOWNLOAD_ITEMS,
        LOGIN_REQUIRED,
        ENTITLEMENT_LOGIN_REQUIRED,
        ADD_TO_WATCHLIST,
        SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
        SUBSCRIPTION_PLAN_UPGRADE,
        SUBSCRIPTION_PREMIUM_DOWNLOAD,
        SUBSCRIPTION_PREMIUM_CASTING,
        SUBSCRIPTION_REQUIRED_AUDIO,
        SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW,
        SUBSCRIPTION_REQUIRED,

        SUBSCRIPTION_REQUIRED_PLAYER,
        LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
        LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO,
        LOGIN_AND_SUBSCRIPTION_REQUIRED,
        SUBSCRIPTION_REQUIRED_ON_WEB,
        TVOD_CONTENT_ERROR,

        LOGIN_AND_SUBSCRIPTION_REQUIRED_PREVIEW,
        LOGIN_AND_SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW,
        SUBSCRIPTION_REQUIRED_AUDIO_PREVIEW,
        LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER_PREVIEW,
        LOGIN_AND_SUBSCRIPTION_REQUIRED_PLAYER,
        LOGOUT_WITH_RUNNING_DOWNLOAD,
        EXISTING_SUBSCRIPTION,
        EXISTING_SUBSCRIPTION_LOGOUT,
        DOWNLOAD_INCOMPLETE,
        CANNOT_UPGRADE_SUBSCRIPTION,
        CANNOT_UPGRADE_SUBSCRIPTION_CONTENT,
        UPGRADE_UNAVAILABLE,
        CANNOT_CANCEL_SUBSCRIPTION,
        STREAMING_INFO_MISSING,
        REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION_FOR_DOWNLOAD,
        REQUEST_WRITE_CALENDAR,
        DOWNLOAD_NOT_AVAILABLE,
        DOWNLOAD_FAILED,
        SD_CARD_NOT_AVAILABLE,
        UNKNOWN_SUBSCRIPTION_FOR_UPGRADE,
        UNKNOWN_SUBSCRIPTION_FOR_CANCEL,
        SIGN_OUT,
        DOWNLOAD_VIA_MOBILE_DISABLED,
        VIDEO_NOT_AVAILABLE,
        VIDEO_NOT_AVAILABLE_ALERT,

        UNABLE_TO_PLAY_VIDEO,
        ARTICLE_API_RESPONSE_ERROR,
        OPEN_URL_IN_BROWSER,
        REDEEM_CODE,
        RECOMMENDATION_CATEGORY_EMPTY,
        RATING_PROMPT,
        CONTACT_US,
        MAX_STREAMS_ERROR,
        SSL_SUBSCRIPTION_ERROR,
        APP_MENU,
        GET_SOCIAL_INIVITE,
        CANNOT_RE_SUBSCRIPTION,
        US_PLAN_VALIDATION,
        CARD_NOT_SUPPORT_RECURRING_PAYMENT
    }

    public enum RETRY_TYPE {
        VIDEO_ACTION, BUTTON_ACTION, PAGE_ACTION, SEARCH_RETRY_ACTION, WATCHLIST_RETRY_ACTION,
        HISTORY_RETRY_ACTION, RESET_PASSWORD_RETRY, LOGOUT_ACTION, EDIT_WATCHLIST, SUB_NAV_RETRY_ACTION
    }

    public enum ExtraScreenType {
        NAVIGATION,
        SEARCH,
        FILTER,
        RESET_PASSWORD,
        CHANGE_PASSWORD,
        EDIT_PROFILE,
        TERM_OF_SERVICE,
        BLANK,
        NONE,
        TEAM,
        LINK_YOUR_ACCOUNT,
        REST_SCREEN,
        MATH_PROBLEM_SCREEN,
        OTP_VERIFTY_SCREEN,
        PARENTAL_CONTROLS,
        VIEWING_RESTRICTIONS,
        VIDEO_PIN,
        RE_AUTHORISE_USER,
        GET_SOCIAL,
        TV_PROVIDER_SCREEN,
        WEB_VIEW_SCREEN,
        ENTITLEMNET_SCREEN,
        GENERIC_LOGIN_SIGNUP,
        USER_PROFILE_SETTINGS,
        AUTOPLAY;
    }

    public void launchMathProblemPage(LaunchData launchData) {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            Bundle args = getPageActivityBundle(currentActivity,
                    null,
                    null,
                    currentActivity.getString(R.string.app_cms_math_problem_page_tag),
                    currentActivity.getString(R.string.app_cms_math_problem_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_math_problem_page_tag),
                    false,
                    true,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.MATH_PROBLEM_SCREEN,
                    launchData,
                    false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private LaunchData createLaunchData(ContentDatum contentDatum) {
        return new LaunchData(contentDatum, false, false,
                null, null, null, null, false,
                -1, null, null, null);
    }

    public MetaPage getEntitlementScreenPage() {
        return entitlementScreenPage;
    }

    public boolean ways2WatchScreenOpenFromPlayer = false;

    public void openEntitlementScreen(ContentDatum contentDatum, boolean screenFromStandAlonePlayer) {
        if (getPlatformType() == PlatformType.TV) {
            ways2WatchScreenOpenFromPlayer = screenFromStandAlonePlayer;
            AppCMSPageUI appCMSPageUI = navigationPages.get(entitlementScreenPage.getPageId());
            if (appCMSPageUI == null) {
                showLoader();
                getAppCMSPage(createPageUiUrl(entitlementScreenPage),
                        appCMSPageUIResult -> {
                            stopLoader();
                            if (appCMSPageUIResult != null) {
                                navigationPages.put(entitlementScreenPage.getPageId(), appCMSPageUIResult);
                                openEntitlementScreen(contentDatum, false);
                            }
                        },
                        loadFromFile,
                        false);
            } else {
                waysToWatchScreenShown = true;
                AppCMSPageAPI appCMSPageAPI = null;
                if (appCMSPageUI.getModuleList() != null &&
                        appCMSPageUI.getModuleList() != null && appCMSPageUI.getModuleList().size() > 0) {
                    appCMSPageAPI = convertModuleToAppCMSPageAPI(appCMSPageUI.getModuleList().get(0).getId(), contentDatum);
                }
                launchAppFragment(currentActivity.getString(R.string.app_cms_entitlement_screen_tag),
                        createLaunchData(contentDatum), ExtraScreenType.ENTITLEMNET_SCREEN, false, appCMSPageUI, appCMSPageAPI);
            }
        } else {
            long delay = 100;

            if (getCurrentActivity() instanceof AppCMSPlayVideoActivity) {
                delay = 500;
                getCurrentActivity().finish();
            }
            new Handler().postDelayed(() -> waysToWatchBottom = new WaysToWatchBottom(AppCMSPresenter.this, contentDatum), delay);
        }
    }

    public WaysToWatchBottom getWaysToWatchBottom() {
        return waysToWatchBottom;
    }

    WaysToWatchBottom waysToWatchBottom;

    public AppCMSPageAPI convertModuleToAppCMSPageAPI(String pageId, ContentDatum contentDatum) {
        try {
            AppCMSPageAPI appCMSPageAPI = null;
            if (contentDatum != null) {
                appCMSPageAPI = new AppCMSPageAPI();
                appCMSPageAPI.setId(pageId);
                List<Module> moduleList = new ArrayList<>();
                List<ContentDatum> contentDatumList = new ArrayList<>();
                Module moduleApi = new Module();
                contentDatumList.add(contentDatum);
                moduleApi.setContentData(contentDatumList);
                moduleList.add(moduleApi);
                appCMSPageAPI.setModules(moduleList);
            }
            return appCMSPageAPI;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public void launchAppFragment(String pageName, LaunchData launchData, ExtraScreenType
            screenType, boolean appbarPresent,
                                  AppCMSPageUI appCMSPageUI, AppCMSPageAPI appCMSPageAPI) {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    appCMSPageAPI,
                    pageName,
                    pageName,
                    null,
                    pageName,
                    false,
                    appbarPresent,
                    false,
                    false,
                    false,
                    null,
                    screenType,
                    launchData, false, null);
            if (args != null) {
                Intent updatePageIntent =
                        new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(
                        currentActivity.getString(R.string.app_cms_bundle_key),
                        args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private interface OnRunOnUIThread {
        void runOnUiThread(Action0 runOnUiThreadAction);
    }

    private static class DownloadTimerTask extends TimerTask {
        final String filmIdLocal;
        final long videoId;
        final OnRunOnUIThread onRunOnUIThread;
        final boolean isTablet;
        final AppCMSPresenter appCMSPresenter;
        final Action1<UserVideoDownloadStatus> responseAction;
        final Timer timer;
        final int radiusDifference;
        final String id;
        volatile ImageView imageView;
        volatile boolean cancelled;
        volatile boolean finished;
        volatile boolean running;

        public DownloadTimerTask(String filmId,
                                 long videoId,
                                 OnRunOnUIThread onRunOnUIThread,
                                 boolean isTablet,
                                 AppCMSPresenter appCMSPresenter,
                                 ImageView imageView,
                                 Action1<UserVideoDownloadStatus> responseAction,
                                 Timer timer,
                                 int radiusDifference,
                                 String id) {
            this.filmIdLocal = filmId;
            this.videoId = videoId;
            this.onRunOnUIThread = onRunOnUIThread;
            this.isTablet = isTablet;
            this.appCMSPresenter = appCMSPresenter;
            this.imageView = imageView;
            this.responseAction = responseAction;
            this.timer = timer;
            this.radiusDifference = radiusDifference;
            this.cancelled = false;
            this.finished = false;
            this.id = id;
            this.running = false;
        }

        @Override
        public boolean cancel() {
            this.cancelled = true;
            this.running = false;
            return super.cancel();
        }

        @Override
        public void run() {
            this.running = true;
            try {
                DownloadManager.Query query = new DownloadManager.Query();
                DownloadManager.Request request;
                query.setFilterById(videoId);
                Cursor c = appCMSPresenter.downloadManager.query(query);
                if (c != null && c.moveToFirst()) {
                    long totalSize = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES));
                    long downloaded = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));
                    int downloadStatus = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));
                    int reason = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_REASON));
                    String url = c.getString(c.getColumnIndex(DownloadManager.COLUMN_URI));
                    String filmId =
                            c.getString(c.getColumnIndex(DownloadManager.COLUMN_TITLE));
                    Log.e(TAG, reason + " :Updating download status for: " + url + " : " + filmId);

                    c.close();


                    int downloadPercent = (int) (downloaded * 100.0 / totalSize + 0.5);
                    //Log.d(TAG, "download progress =" + downloaded + " total-> " + totalSize + " " + downloadPercent);
                    //Log.d(TAG, "download getCanonicalName " + filmIdLocal);
                   /* if(downloadPercent>=0 && downloaded<=0){
                        imageView.setBackground(ContextCompat.getDrawable(appCMSPresenter.currentContext,
                                R.drawable.ic_download_queued));
                    }
                    else*/

                    if (onRunOnUIThread != null &&
                            appCMSPresenter.runUpdateDownloadIconTimer &&
                            appCMSPresenter.isUserLoggedIn()) {


                        if ((downloaded >= totalSize ||
                                downloadPercent > 100 ||
                                downloadStatus == DownloadManager.STATUS_SUCCESSFUL ||
                                downloadStatus == DownloadManager.STATUS_FAILED) && totalSize > 0) {
                            cancelled = true;
                            this.cancel();
                        }
                        onRunOnUIThread.runOnUiThread(() -> {
                            if ((downloaded >= totalSize ||
                                    downloadPercent > 100 ||
                                    downloadStatus == DownloadManager.STATUS_SUCCESSFUL) &&
                                    totalSize > 0 &&
                                    !finished) {
                                imageView.setImageBitmap(null);
                                imageView.requestLayout();
                                appCMSPresenter.appCMSUserDownloadVideoStatusCall
                                        .call(filmIdLocal, appCMSPresenter, responseAction, appCMSPresenter.getLoggedInUser());
                                finished = true;
                                Log.e(TAG, "Film download completed: " + filmId);
                            } else if (downloadStatus == DownloadManager.STATUS_RUNNING) {
                                try {
                                    if ((imageView.getTag() == null) ||
                                            (imageView.getTag() != null &&
                                                    imageView.getTag() instanceof String &&
                                                    imageView.getTag().equals(filmIdLocal))) {
//                                        int radiusDifference = 5;
//                                        if (isTablet) {
//                                            radiusDifference = 2;
//                                        }
                                        imageView.setBackground(null);
                                        Log.e(TAG, "Draw circular image: " + filmId + " percentage- " + downloadPercent);

                                        circularImageBar(imageView, downloadPercent, radiusDifference);
                                    } else if (cancelled) {
                                        imageView.setImageBitmap(null);
                                        imageView.requestLayout();
                                    }
                                } catch (Exception e) {
                                    //Log.e(TAG, "Error rendering circular image bar");
                                }
                                Log.e(TAG, "Updating film download progress: " + filmId);
                            } else if (downloadStatus == DownloadManager.STATUS_FAILED ||
                                    //downloadStatus == DownloadManager.STATUS_PAUSED ||
                                    downloadStatus == 403 ||
                                    downloadStatus == 195) {
                                Log.e(TAG, downloadStatus + " Failed to download film: " + filmId);
                                updateDownloadStatusException();
                            } else if (downloadStatus == DownloadManager.STATUS_PAUSED) {
                                appCMSPresenter.appCMSUserDownloadVideoStatusCall
                                        .call(filmIdLocal, appCMSPresenter, responseAction, appCMSPresenter.getLoggedInUser());
                            }
                        });
                    }
                } else {
                    //noinspection ConstantConditions
                    Log.e(TAG, " Downloading failed: " + c.getLong(c.getColumnIndex(DownloadManager.COLUMN_STATUS)));
                    imageView.setImageBitmap(null);
                    imageView.setBackground(ContextCompat.getDrawable(imageView.getContext(),
                            android.R.drawable.stat_sys_warning));
                }
            } catch (StaleDataException exception) {

            } catch (Exception exception) {
                Log.e(TAG, filmIdLocal + " Removed from top +++ " + exception.getMessage());
                updateDownloadStatusException();
            }


        }

        private void updateDownloadStatusException() {
            this.cancel();
            UserVideoDownloadStatus statusResponse = new UserVideoDownloadStatus();
            statusResponse.setDownloadStatus(DownloadStatus.STATUS_INTERRUPTED);

            if (onRunOnUIThread != null) {
                try {
                    onRunOnUIThread.runOnUiThread(() -> {
                        try {
                            DownloadVideoRealm downloadVideoRealm = appCMSPresenter.realmController.getRealm()
                                    .copyFromRealm(
                                            appCMSPresenter.realmController
                                                    .getDownloadByIdBelongstoUser(filmIdLocal, appCMSPresenter.getLoggedInUser()));
                            downloadVideoRealm.setDownloadStatus(statusResponse.getDownloadStatus());
                            appCMSPresenter.realmController.updateDownload(downloadVideoRealm);

                            Observable.just(statusResponse)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(responseAction);
                            //   removeDownloadedFile(filmIdLocal);
                        } catch (Exception e) {
                            //Log.e(TAG, "Error rendering circular image bar");
                        }
                    });
                } catch (Exception e) {

                }
            }
        }

        public void circularImageBar(ImageView iv2, int i, int radiusDifference) {
            System.out.println("sowload percent-" + i);

            if (appCMSPresenter.runUpdateDownloadIconTimer) {
                Bitmap b = null;
                Canvas canvas = null;
                Paint paint = null;
                if (b == null) {
                    b = Bitmap.createBitmap(iv2.getWidth(), iv2.getHeight(), Bitmap.Config.ARGB_8888);
                    canvas = new Canvas(b);
                    paint = new Paint();
                }
                //Canvas canvas = new Canvas(b);
                //Paint paint = new Paint();

                paint.setColor(Color.DKGRAY);
                paint.setStrokeWidth(iv2.getWidth() / 10);
                paint.setStyle(Paint.Style.STROKE);
                paint.setAntiAlias(true);
                canvas.drawCircle(iv2.getWidth() / 2, iv2.getHeight() / 2, (iv2.getWidth() / 2) - radiusDifference, paint);// Fix SVFA-1561 changed  -2 to -7

//                if (isTablet) {
//                    canvas.drawCircle(iv2.getWidth() / 2, iv2.getHeight() / 2, (iv2.getWidth() / 2) - 5, paint);
//                } else {
//                    canvas.drawCircle(iv2.getWidth() / 2, iv2.getHeight() / 2, (iv2.getWidth() / 2) - 5, paint);// Fix SVFA-1561 changed  -2 to -7
//                }

                int tintColor = Color.parseColor((appCMSPresenter.getAppCMSMain().getBrand().getCta().getPrimary().getBackgroundColor()));
                paint.setColor(tintColor);
                paint.setStrokeWidth(iv2.getWidth() / 10);
                paint.setAntiAlias(true);
//                paint.setStyle(Paint.Style.FILL);
                final RectF oval = new RectF();
                paint.setStyle(Paint.Style.STROKE);
                oval.set(radiusDifference, radiusDifference, iv2.getWidth() - radiusDifference, iv2.getHeight() - radiusDifference); //Fix SVFA-1561  change 2 to 6

//                if (isTablet) {
//                    oval.set(2, 2, iv2.getWidth() - 2, iv2.getHeight() - radiusDifference);
//                } else {
//                    oval.set(6, 6, iv2.getWidth() - 6, iv2.getHeight() - radiusDifference); //Fix SVFA-1561  change 2 to 6
//                }
                canvas.drawArc(oval, 270, ((i * 360) / 100), false, paint);

                iv2.setImageBitmap(b);
               /* appCMSPresenter.getCurrentActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        iv2.setImageBitmap(b);
                    }
                });*/
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    iv2.setForegroundGravity(View.TEXT_ALIGNMENT_CENTER);
                }
                iv2.requestLayout();
            }
        }
    }

    private static class DownloadTimerTaskDownloadComponent extends TimerTask {
        final String filmIdLocal;
        final long videoId;
        final OnRunOnUIThread onRunOnUIThread;
        final boolean isTablet;
        final AppCMSPresenter appCMSPresenter;
        final Action1<UserVideoDownloadStatus> responseAction;
        final Timer timer;
        final String id;
        volatile DownloadComponent mDownloadComponent;
        volatile boolean cancelled;
        volatile boolean finished;
        volatile boolean running;

        public DownloadTimerTaskDownloadComponent(String filmId,
                                                  long videoId,
                                                  OnRunOnUIThread onRunOnUIThread,
                                                  boolean isTablet,
                                                  AppCMSPresenter appCMSPresenter,
                                                  DownloadComponent downloadComponent,
                                                  Action1<UserVideoDownloadStatus> responseAction,
                                                  Timer timer,
                                                  String id) {
            this.filmIdLocal = filmId;
            this.videoId = videoId;
            this.onRunOnUIThread = onRunOnUIThread;
            this.isTablet = isTablet;
            this.appCMSPresenter = appCMSPresenter;
            this.responseAction = responseAction;
            this.timer = timer;
            this.mDownloadComponent = downloadComponent;
            this.cancelled = false;
            this.finished = false;
            this.id = id;
            this.running = false;
        }

        @Override
        public boolean cancel() {
            this.cancelled = true;
            this.running = false;
            return super.cancel();
        }

        @Override
        public void run() {
            this.running = true;
            try {
                DownloadManager.Query query = new DownloadManager.Query();
                DownloadManager.Request request;
                query.setFilterById(videoId);
                Cursor c = appCMSPresenter.downloadManager.query(query);
                if (c != null && c.moveToFirst()) {
                    long totalSize = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES));
                    long downloaded = c.getLong(c.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR));
                    int downloadStatus = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));
                    int reason = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_REASON));
                    String url = c.getString(c.getColumnIndex(DownloadManager.COLUMN_URI));
                    String filmId =
                            c.getString(c.getColumnIndex(DownloadManager.COLUMN_TITLE));
                    Log.e(TAG, reason + " :Updating download status for: " + url + " : " + filmId);

                    c.close();


                    int downloadPercent = (int) (downloaded * 100.0 / totalSize + 0.5);
                    //Log.d(TAG, "download progress =" + downloaded + " total-> " + totalSize + " " + downloadPercent);
                    //Log.d(TAG, "download getCanonicalName " + filmIdLocal);
                   /* if(downloadPercent>=0 && downloaded<=0){
                        imageView.setBackground(ContextCompat.getDrawable(appCMSPresenter.currentContext,
                                R.drawable.ic_download_queued));
                    }
                    else*/
                    if (onRunOnUIThread != null &&
                            appCMSPresenter.runUpdateDownloadIconTimer &&
                            appCMSPresenter.isUserLoggedIn()) {
                        if ((downloaded >= totalSize ||
                                downloadPercent > 100 ||
                                downloadStatus == DownloadManager.STATUS_SUCCESSFUL ||
                                downloadStatus == DownloadManager.STATUS_FAILED) && totalSize > 0) {
                            cancelled = true;
                            this.cancel();
                        }
                        onRunOnUIThread.runOnUiThread(() -> {
                            if ((downloaded >= totalSize ||
                                    downloadPercent > 100 ||
                                    downloadStatus == DownloadManager.STATUS_SUCCESSFUL) &&
                                    totalSize > 0 &&
                                    !finished) {
                                mDownloadComponent.getImageButtonDownloadStatus().setVisibility(View.INVISIBLE);
                                appCMSPresenter.appCMSUserDownloadVideoStatusCall
                                        .call(filmIdLocal, appCMSPresenter, responseAction, appCMSPresenter.getLoggedInUser());
                                finished = true;
                                Log.e(TAG, "Film download completed: " + filmId);
                            } else if (downloadStatus == DownloadManager.STATUS_RUNNING) {
                                try {
                                    if (cancelled) {
                                        mDownloadComponent.getImageButtonDownloadStatus().setImageBitmap(null);
                                        mDownloadComponent.getImageButtonDownloadStatus().requestLayout();
                                    } else {

                                        mDownloadComponent.getImageButtonDownloadStatus().setVisibility(View.INVISIBLE);
                                        Log.e(TAG, "Draw circular DownloadTimerTaskDownloadComponent: " + filmId + " percentage- " + downloadPercent);
                                        mDownloadComponent.getProgressBarDownload().setVisibility(View.VISIBLE);
                                        mDownloadComponent.getProgressBarDownload().setProgress(downloadPercent);
                                        //circularImageBar(imageView, downloadPercent, radiusDifference);
                                    }
                                } catch (Exception e) {
                                    //Log.e(TAG, "Error rendering circular image bar");
                                }
                                Log.e(TAG, "Updating film download progress: " + filmId);
                            } else if (downloadStatus == DownloadManager.STATUS_PENDING) {
                                mDownloadComponent.getImageButtonDownloadStatus().setImageResource(R.drawable.ic_download_queued);
                                mDownloadComponent.getImageButtonDownloadStatus().setVisibility(View.VISIBLE);
                            } else if (downloadStatus == DownloadManager.STATUS_FAILED ||
                                    //downloadStatus == DownloadManager.STATUS_PAUSED ||
                                    downloadStatus == 403 ||
                                    downloadStatus == 195) {
                                Log.e(TAG, downloadStatus + " Failed to download film: " + filmId);
                                updateDownloadStatusException();
                            } else if (downloadStatus == DownloadManager.STATUS_PAUSED) {
                                appCMSPresenter.appCMSUserDownloadVideoStatusCall
                                        .call(filmIdLocal, appCMSPresenter, responseAction, appCMSPresenter.getLoggedInUser());
                            }
                        });
                    }
                } else {
                    //noinspection ConstantConditions
                    Log.e(TAG, " Downloading failed: " + c.getLong(c.getColumnIndex(DownloadManager.COLUMN_STATUS)));
                    mDownloadComponent.getImageButtonDownloadStatus().setImageBitmap(null);
                    mDownloadComponent.getImageButtonDownloadStatus().setBackground(ContextCompat.getDrawable(mDownloadComponent.getImageButtonDownloadStatus().getContext(),
                            android.R.drawable.stat_sys_warning));
                }
            } catch (StaleDataException exception) {

            } catch (Exception exception) {
                Log.e(TAG, filmIdLocal + " Removed from top +++ " + exception.getMessage());
                updateDownloadStatusException();
            }


        }

        private void updateDownloadStatusException() {
            this.cancel();
            UserVideoDownloadStatus statusResponse = new UserVideoDownloadStatus();
            statusResponse.setDownloadStatus(DownloadStatus.STATUS_INTERRUPTED);

            if (onRunOnUIThread != null) {
                try {
                    onRunOnUIThread.runOnUiThread(() -> {
                        try {
                            DownloadVideoRealm downloadVideoRealm = appCMSPresenter.realmController.getRealm()
                                    .copyFromRealm(
                                            appCMSPresenter.realmController
                                                    .getDownloadByIdBelongstoUser(filmIdLocal, appCMSPresenter.getLoggedInUser()));
                            downloadVideoRealm.setDownloadStatus(statusResponse.getDownloadStatus());
                            appCMSPresenter.realmController.updateDownload(downloadVideoRealm);

                            Observable.just(statusResponse)
                                    .onErrorResumeNext(throwable -> Observable.empty())
                                    .subscribe(responseAction);
                            //   removeDownloadedFile(filmIdLocal);
                        } catch (Exception e) {
                            //Log.e(TAG, "Error rendering circular image bar");
                        }
                    });
                } catch (Exception e) {

                }
            }
        }

    }


    private static class EntitlementCheckActive implements Action1<UserIdentity> {
        private final Action0 onFailAction;
        private final Action0 onSuccessAction;
        private String pagePath;
        private String action;
        private String filmTitle;
        private String[] extraData;
        private ContentDatum contentDatum;
        private boolean closeLauncher;
        private int currentlyPlayingIndex;
        private List<String> relateVideoIds;
        private boolean success;

        EntitlementCheckActive(Action0 onSuccessAction, Action0 onFailAction) {
            this.onSuccessAction = onSuccessAction;
            this.onFailAction = onFailAction;
            this.success = false;
        }

        @Override
        public void call(UserIdentity userIdentity) {
            if (userIdentity != null && userIdentity.isSubscribed()) {
                onSuccessAction.call();
                success = true;
            } else {
                onFailAction.call();
                success = false;
            }
        }

        String getPagePath() {
            return pagePath;
        }

        void setPagePath(String pagePath) {
            this.pagePath = pagePath;
        }

        public String getAction() {
            return action;
        }

        public void setAction(String action) {
            this.action = action;
        }

        String getFilmTitle() {
            return filmTitle;
        }

        void setFilmTitle(String filmTitle) {
            this.filmTitle = filmTitle;
        }

        public String[] getExtraData() {
            return extraData;
        }

        public void setExtraData(String[] extraData) {
            this.extraData = extraData;
        }

        public ContentDatum getContentDatum() {
            return contentDatum;
        }

        public void setContentDatum(ContentDatum contentDatum) {
            this.contentDatum = contentDatum;
        }

        boolean isCloseLauncher() {
            return closeLauncher;
        }

        void setCloseLauncher(boolean closeLauncher) {
            this.closeLauncher = closeLauncher;
        }

        int getCurrentlyPlayingIndex() {
            return currentlyPlayingIndex;
        }

        void setCurrentlyPlayingIndex(int currentlyPlayingIndex) {
            this.currentlyPlayingIndex = currentlyPlayingIndex;
        }

        List<String> getRelateVideoIds() {
            return relateVideoIds;
        }

        void setRelateVideoIds(List<String> relateVideoIds) {
            this.relateVideoIds = relateVideoIds;
        }

        boolean isSuccess() {
            return success;
        }

        void setSuccess(boolean success) {
            this.success = success;
        }
    }

    private static class DownloadQueueItem {
        ContentDatum contentDatum;
        Action1<UserVideoDownloadStatus> resultAction1;
        boolean isDownloadedFromOther;
    }

    private static class DownloadQueueThread extends Thread {
        private final AppCMSPresenter appCMSPresenter;
        private final Queue<DownloadQueueItem> filmDownloadQueue;
        private final List<String> filmsInQueue;
        private String downloadURL;
        private long file_size = 0;

        private boolean running;
        private boolean startNextDownload;

        DownloadQueueThread(AppCMSPresenter appCMSPresenter) {
            this.appCMSPresenter = appCMSPresenter;
            this.filmDownloadQueue = new ConcurrentLinkedQueue<>();
            this.filmsInQueue = new ArrayList<>();
            this.running = false;
            this.startNextDownload = true;
        }

        void addToQueue(DownloadQueueItem downloadQueueItem) {
            if (!filmsInQueue.contains(downloadQueueItem.contentDatum.getGist().getTitle())) {
                filmDownloadQueue.add(downloadQueueItem);
                filmsInQueue.add(downloadQueueItem.contentDatum.getGist().getTitle());

                if (!filmsInQueue.isEmpty()) {
                    downloadQueueItem.resultAction1.call(null);
                }
            }
        }

        @Override
        public void run() {
            running = true;
            while (running) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    //Log.e(TAG, "Error while running download queue: " + e.getMessage());
                }
            }
        }

        boolean running() {
            return running;
        }

        @SuppressWarnings("unused")
        public void setRunning(boolean running) {
            this.running = running;
        }

        void setStartNextDownload() {
            this.startNextDownload = true;
        }
    }

    private static class BeaconRunnable implements Runnable {
        final AppCMSBeaconRest appCMSBeaconRest;
        String url;

        BeaconRunnable(AppCMSBeaconRest appCMSBeaconRest) {
            this.appCMSBeaconRest = appCMSBeaconRest;
        }

        public void setUrl(String url) {
            this.url = url;
        }

        @Override
        public void run() {
            appCMSBeaconRest.sendBeaconMessage(url).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(@NonNull Call<Void> call, @NonNull Response<Void> response) {
                    //Log.d(TAG, "Succeeded to send Beacon message: " + response.code());
                }

                @Override
                public void onFailure(@NonNull Call<Void> call, @NonNull Throwable t) {
                    //Log.d(TAG, "Failed to send Beacon message: " + t.getMessage());
                }
            });
        }
    }

    private abstract static class AppCMSPageAPIAction implements Action1<AppCMSPageAPI> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final boolean sendCloseAction;
        final Uri searchQuery;

        AppCMSPageAPIAction(boolean appbarPresent,
                            boolean fullscreenEnabled,
                            boolean navbarPresent,
                            AppCMSPageUI appCMSPageUI,
                            String action,
                            String pageId,
                            String pageTitle,
                            String pagePath,
                            boolean launchActivity,
                            boolean sendCloseAction,
                            Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.sendCloseAction = sendCloseAction;
            this.searchQuery = searchQuery;
        }

        public void setAppCMSPageUI(AppCMSPageUI appCMSPageUI) {
            this.appCMSPageUI = appCMSPageUI;
        }
    }

    private abstract static class AppCMSWatchlistAPIAction implements Action1<AppCMSWatchlistResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final Uri searchQuery;

        AppCMSWatchlistAPIAction(boolean appbarPresent,
                                 boolean fullscreenEnabled,
                                 boolean navbarPresent,
                                 AppCMSPageUI appCMSPageUI,
                                 String action,
                                 String pageId,
                                 String pageTitle,
                                 String pagePath,
                                 Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.searchQuery = searchQuery;
        }
    }

    private abstract static class AppCMSPlaylistAPIAction implements Action1<AppCMSPlaylistResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSPlaylistAPIAction(boolean appbarPresent,
                                boolean fullscreenEnabled,
                                boolean navbarPresent,
                                AppCMSPageUI appCMSPageUI,
                                String action,
                                String pageId,
                                String pageTitle,
                                String pagePath,
                                boolean launchActivity,
                                Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }


    private abstract static class AppCMSStandingtAPIAction implements Action1<AppCMSStandingResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSStandingtAPIAction(boolean appbarPresent,
                                 boolean fullscreenEnabled,
                                 boolean navbarPresent,
                                 AppCMSPageUI appCMSPageUI,
                                 String action,
                                 String pageId,
                                 String pageTitle,
                                 String pagePath,
                                 boolean launchActivity,
                                 Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    private abstract static class AppCMSRoasterAPIAction implements Action1<AppCMSTeamRoasterResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSRoasterAPIAction(boolean appbarPresent,
                               boolean fullscreenEnabled,
                               boolean navbarPresent,
                               AppCMSPageUI appCMSPageUI,
                               String action,
                               String pageId,
                               String pageTitle,
                               String pagePath,
                               boolean launchActivity,
                               Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    private abstract static class AppCMSEventArchieveAPIAction implements Action1<AppCMSEventArchieveResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSEventArchieveAPIAction(boolean appbarPresent,
                                     boolean fullscreenEnabled,
                                     boolean navbarPresent,
                                     AppCMSPageUI appCMSPageUI,
                                     String action,
                                     String pageId,
                                     String pageTitle,
                                     String pagePath,
                                     boolean launchActivity,
                                     Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }


    public abstract static class AppCMSAudioDetailAPIAction implements Action1<AppCMSAudioDetailResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        public AppCMSAudioDetailAPIAction(boolean appbarPresent,
                                          boolean fullscreenEnabled,
                                          boolean navbarPresent,
                                          AppCMSPageUI appCMSPageUI,
                                          String action,
                                          String pageId,
                                          String pageTitle,
                                          String pagePath,
                                          boolean launchActivity,
                                          Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }


    private abstract static class AppCMSHistoryAPIAction implements Action1<AppCMSHistoryResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSHistoryAPIAction(boolean appbarPresent,
                               boolean fullscreenEnabled,
                               boolean navbarPresent,
                               AppCMSPageUI appCMSPageUI,
                               String action,
                               String pageId,
                               String pageTitle,
                               String pagePath,
                               boolean launchActivity,
                               Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    @SuppressWarnings("unused")
    private abstract static class AppCMSSubscriptionAPIAction
            implements Action1<AppCMSSubscriptionResult> {

        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final boolean launchActivity;
        final Uri searchQuery;

        @SuppressWarnings("unused")
        public AppCMSSubscriptionAPIAction(boolean appbarPresent,
                                           boolean fullscreenEnabled,
                                           boolean navbarPresent,
                                           AppCMSPageUI appCMSPageUI,
                                           String action,
                                           String pageId,
                                           String pageTitle,
                                           boolean launchActivity,
                                           Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    public static class EntitlementPendingVideoData {
        String pagePath;
        String action;
        String filmTitle;
        String[] extraData;
        ContentDatum contentDatum;
        boolean closeLauncher;
        boolean isFromContent;
        int currentlyPlayingIndex;
        List<String> relateVideoIds;
        long currentWatchedTime;

        public static class Builder {
            final EntitlementPendingVideoData entitlementPendingVideoData;

            public Builder() {
                entitlementPendingVideoData = new EntitlementPendingVideoData();
            }

            public Builder pagePath(String pagePath) {
                entitlementPendingVideoData.pagePath = pagePath;
                return this;
            }

            public Builder action(String action) {
                entitlementPendingVideoData.action = action;
                return this;
            }

            public Builder filmTitle(String filmTitle) {
                entitlementPendingVideoData.filmTitle = filmTitle;
                return this;
            }

            public Builder extraData(String[] extraData) {
                entitlementPendingVideoData.extraData = extraData;
                return this;
            }

            public Builder contentDatum(ContentDatum contentDatum) {
                entitlementPendingVideoData.contentDatum = contentDatum;
                return this;
            }

            public Builder closerLauncher(boolean closeLauncher) {
                entitlementPendingVideoData.closeLauncher = closeLauncher;
                return this;
            }

            public Builder isFromContent(boolean isFromContent) {
                entitlementPendingVideoData.isFromContent = isFromContent;
                return this;
            }

            public Builder currentlyPlayingIndex(int currentlyPlayingIndex) {
                entitlementPendingVideoData.currentlyPlayingIndex = currentlyPlayingIndex;
                return this;
            }

            public Builder relatedVideoIds(List<String> relatedVideosIds) {
                entitlementPendingVideoData.relateVideoIds = relatedVideosIds;
                return this;
            }

            public Builder currentWatchedTime(long currentWatchedTime) {
                entitlementPendingVideoData.currentWatchedTime = currentWatchedTime;
                return this;
            }

            public EntitlementPendingVideoData build() {
                return entitlementPendingVideoData;
            }
        }
    }

    public static class SemVer {
        private static final String SEMVER_REGEX = "(\\d+)\\.(\\d+)\\.(\\d+)";
        int major;
        int minor;
        int patch;
        String original;

        public void parse(String original) {
            this.original = original;

            Matcher semverMatcher = Pattern.compile(SEMVER_REGEX).matcher(original);
            if (semverMatcher.find()) {
                if (semverMatcher.group(1) != null) {
                    major = Integer.parseInt(semverMatcher.group(1));
                }

                if (semverMatcher.group(2) != null) {
                    minor = Integer.parseInt(semverMatcher.group(2));
                }
                if (semverMatcher.group(3) != null) {
                    patch = Integer.parseInt(semverMatcher.group(3));
                }
            }
        }
    }


    public int getCurrentArticleIndex() {
        return currentArticleIndex;
    }

    public void setCurrentArticleIndex(int currentArticleIndex) {
        this.currentArticleIndex = currentArticleIndex;
    }

    public int getCurrentPhotoGalleryIndex() {
        return currentPhotoGalleryIndex;
    }

    public void setCurrentPhotoGalleryIndex(int currentPhotoGalleryIndex) {
        this.currentPhotoGalleryIndex = currentPhotoGalleryIndex;
    }

    public void setRelatedPhotoGalleryIds(List<String> ids) {
        this.relatedPhotoGalleryIds = ids;
    }

    public List<String> getRelatedPhotoGalleryIds() {
        return this.relatedPhotoGalleryIds;
    }

    public void navigateToPhotoGalleryPage(String photoGalleryId, String
            pageTitle, List<ContentDatum> relatedPhotoGallery,
                                           boolean launchActivity) {
        if (currentActivity != null && !TextUtils.isEmpty(photoGalleryId)) {
            showLoader();
            if (photoGalleryPage == null) {
                Toast.makeText(currentContext, "Page not available", Toast.LENGTH_LONG).show();
                stopLoader();
                return;

            }

            AppCMSPageUI appCMSPageUI = navigationPages.get(photoGalleryPage.getPageId());

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(photoGalleryPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToPhotoGalleryPage(photoGalleryId, pageTitle, relatedPhotoGallery, false);
                                }
                            },
                            loadFromFile,
                            false);
                }

            } else {
                getPhotoGalleryPageContent(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        photoGalleryId, new AppCMSArticlePhotoGalleryAPIAction(true,
                                false,
                                true,
                                appCMSPageUI,
                                photoGalleryId,
                                photoGalleryId,
                                pageTitle,
                                photoGalleryId,
                                launchActivity, null) {
                            @Override
                            public void call(AppCMSPhotoGalleryResult appCMSPhotoGalleryResult) {
                                if (appCMSPhotoGalleryResult != null) {
                                    cancelInternalEvents();
                                    pushActionInternalEvents(photoGalleryPage.getPageId()
                                            + BaseView.isLandscape(currentActivity));

                                    AppCMSPageAPI pageAPI = null;
                                    if (appCMSPhotoGalleryResult != null) {
                                        pageAPI = appCMSPhotoGalleryResult.convertToAppCMSPageAPI(photoGalleryPage.getPageId());
                                        if (relatedPhotoGallery != null && relatedPhotoGallery.size() > 0) {
                                            List<String> relatedPhotoGalleryIds = new ArrayList<>();
                                            for (int index = 0; index < relatedPhotoGallery.size(); index++) {
                                                relatedPhotoGalleryIds.add(relatedPhotoGallery.get(index).getGist().getId());
                                            }
                                            setRelatedPhotoGalleryIds(relatedPhotoGalleryIds);
                                        }
                                    }

                                    navigationPageData.put(photoGalleryPage.getPageId(), pageAPI);

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(photoGalleryPage.getPageId()))) {
                                        screenName.append(photoGalleryPage.getPageFunction());
                                    }
                                    screenName.append(currentActivity.getString(R.string.app_cms_template_page_separator));
                                    screenName.append(pageTitle);

                                    Bundle args = getPageActivityBundle(currentActivity,
                                            this.appCMSPageUI,
                                            pageAPI,
                                            photoGalleryPage.getPageId(),
                                            this.pageTitle,
                                            this.pagePath,
                                            screenName.toString(),
                                            loadFromFile,
                                            this.appbarPresent,
                                            this.fullscreenEnabled,
                                            this.navbarPresent,
                                            false,
                                            null,
                                            ExtraScreenType.NONE,
                                            null, false, null);
                                    if (args != null) {
                                        Intent pageIntent =
                                                new Intent(AppCMSPresenter
                                                        .PRESENTER_NAVIGATE_ACTION);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                args);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(pageIntent);
                                    }
                                    stopLoader();

                                } else {
                                    stopLoader();
                                    showEntitlementDialog(DialogType.ARTICLE_API_RESPONSE_ERROR, null, null);
                                }
                            }
                        });
            }

        }
    }

    public void setRelatedArticleIds(List<String> ids) {
        this.relatedArticleIds = ids;
    }

    public List<String> getRelatedArticleIds() {
        return this.relatedArticleIds;
    }

    public void navigateToArticlePage(String articleId,
                                      String pageTitle,
                                      boolean launchActivity,
                                      Action0 callback, boolean isDeepLink) {

        if (currentActivity != null && !TextUtils.isEmpty(articleId) && articlePage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(articlePage.getPageId());

            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(articlePage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToArticlePage(articleId, pageTitle, launchActivity, null, false);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getArticlePageContent(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        articleId, new AppCMSArticleAPIAction(true,
                                false,
                                true,
                                appCMSPageUI,
                                articleId,
                                articleId,
                                pageTitle,
                                articleId,
                                launchActivity, null) {
                            @Override
                            public void call(AppCMSArticleResult appCMSArticleResult) {
                                if (appCMSArticleResult != null) {

                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.pageId
                                            + BaseView.isLandscape(currentActivity));

                                    AppCMSPageAPI pageAPI = null;
                                    if (appCMSArticleResult != null) {
                                        pageAPI = appCMSArticleResult.convertToAppCMSPageAPI(articlePage.getPageId());
                                        if (getCurrentArticleIndex() == -1) {
                                            setRelatedArticleIds(pageAPI.getModules().get(0).getContentData().get(0).getContentDetails().getRelatedArticleIds());
                                        }
                                    }
                                    navigationPageData.put(this.pageId, pageAPI);

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(articlePage.getPageId()))) {
                                        screenName.append(articlePage.getPageFunction());
                                    }
                                    screenName.append(currentActivity.getString(R.string.app_cms_template_page_separator));
                                    screenName.append(pageTitle);

                                    Bundle args = getPageActivityBundle(currentActivity,
                                            this.appCMSPageUI,
                                            pageAPI,
                                            articlePage.getPageId(),
                                            this.pageTitle,
                                            this.pagePath,
                                            screenName.toString(),
                                            loadFromFile,
                                            this.appbarPresent,
                                            this.fullscreenEnabled,
                                            this.navbarPresent,
                                            false,
                                            null,
                                            ExtraScreenType.NONE,
                                            null,
                                            false, null);
                                    if (args != null) {
                                        Intent pageIntent =
                                                new Intent(AppCMSPresenter
                                                        .PRESENTER_NAVIGATE_ACTION);

                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                args);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(pageIntent);
                                    }
                                    stopLoader();
                                } else {
                                    stopLoader();
                                    showEntitlementDialog(DialogType.ARTICLE_API_RESPONSE_ERROR, null, null);
                                    if (callback != null) {
                                        callback.call();
                                    }
                                }
                            }
                        }, isDeepLink);
            }
        } else {
            launchErrorActivity(PlatformType.ANDROID, "Artical Page UI not available", true);
        }
    }

    public void navigateToPersonDetailsPage(String personPerma) {

        if (currentActivity != null && !TextUtils.isEmpty(personPerma) && personPage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(personPage.getPageId());
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(personPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToPersonDetailsPage(personPerma);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {

                cancelInternalEvents();
                pushActionInternalEvents(personPage.getPageId()
                        + BaseView.isLandscape(currentActivity));


                AppCMSPageAPI pageAPI = new AppCMSPageAPI();
                Module module = new Module();
                List<ContentDatum> data = new ArrayList<>();

                ContentDatum contentDatum = new ContentDatum();
                Gist gist = new Gist();
                gist.setPermalink(personPerma);
                contentDatum.setGist(gist);
                data.add(contentDatum);

                List<Module> moduleList = new ArrayList<>();
                module.setContentData(data);
                moduleList.add(module);
                pageAPI.setModules(moduleList);


                navigationPageData.put(personPage.getPageId(), pageAPI);

                final StringBuffer screenName = new StringBuffer();
                if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(personPage.getPageId()))) {
                    screenName.append(personPage.getPageFunction());
                }

                Bundle args = getPageActivityBundle(currentActivity,
                        appCMSPageUI,
                        pageAPI,
                        personPage.getPageId(),
                        personPage.getPageFunction(),
                        personPerma,
                        screenName.toString(),
                        loadFromFile,
                        true,
                        false,
                        true,
                        false,
                        null,
                        ExtraScreenType.NONE,
                        null,
                        false, null);
                if (args != null) {
                    Intent pageIntent =
                            new Intent(AppCMSPresenter
                                    .PRESENTER_NAVIGATE_ACTION);

                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(pageIntent);
                }
                stopLoader();
            }
        } else {
            stopLoader();
        }
    }

    public void navigateToPersonDetailPage(String personPerma) {

        if (currentActivity != null && !TextUtils.isEmpty(personPerma) && playerDetailPage != null) {
            showLoader();

            AppCMSPageUI appCMSPageUI = navigationPages.get(playerDetailPage.getPageId());
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(playerDetailPage.getPageId());
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToPersonDetailPage(personPerma);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {

                cancelInternalEvents();
                pushActionInternalEvents(playerDetailPage.getPageId()
                        + BaseView.isLandscape(currentActivity));


                AppCMSPageAPI pageAPI = new AppCMSPageAPI();
                Module module = new Module();
                List<ContentDatum> data = new ArrayList<>();

                ContentDatum contentDatum = new ContentDatum();
                Gist gist = new Gist();
                gist.setPermalink(personPerma);
                contentDatum.setGist(gist);
                data.add(contentDatum);

                List<Module> moduleList = new ArrayList<>();
                module.setContentData(data);
                moduleList.add(module);
                pageAPI.setModules(moduleList);


                navigationPageData.put(playerDetailPage.getPageId(), pageAPI);

                final StringBuffer screenName = new StringBuffer();
                if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(playerDetailPage.getPageId()))) {
                    screenName.append(playerDetailPage.getPageFunction());
                }

                Bundle args = getPageActivityBundle(currentActivity,
                        appCMSPageUI,
                        pageAPI,
                        playerDetailPage.getPageId(),
                        playerDetailPage.getPageFunction(),
                        personPerma,
                        screenName.toString(),
                        loadFromFile,
                        true,
                        false,
                        true,
                        false,
                        null,
                        ExtraScreenType.NONE,
                        null,
                        false, null);
                if (args != null) {
                    Intent pageIntent =
                            new Intent(AppCMSPresenter
                                    .PRESENTER_NAVIGATE_ACTION);

                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(pageIntent);
                }
                stopLoader();
            }
        } else {
            stopLoader();
        }
    }

    public void navigateToSchedulePage(String id, String pageTitle, boolean launchActivity) {
        if (currentActivity != null && !TextUtils.isEmpty(id)) {
            showLoader();
            AppCMSPageUI appCMSPageUI = navigationPages.get(id);
            //AppCMSPageUI appCMSPageUI = navigationPages.get(schedulePage.getPageId());
            if (appCMSPageUI == null) {
                MetaPage metaPage = pageIdToMetaPageMap.get(id);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                    if (action != null && actionToPageMap.containsKey(action)) {
                                        actionToPageMap.put(action, appCMSPageUIResult);
                                    }
                                    navigateToSchedulePage(id, pageTitle, launchActivity);
                                }
                            },
                            loadFromFile,
                            false);
                }
            } else {
                getSchedulePageContent(appCMSMain.getApiBaseUrl(),
                        appCMSMain.getInternalName(),
                        id, new AppCMSAPIAction<AppCMSScheduleResult>(true,
                                false,
                                true,
                                appCMSPageUI,
                                id,
                                id,
                                pageTitle,
                                id,
                                launchActivity, null) {
                            @Override
                            public void call(List<AppCMSScheduleResult> appCMSScheduleResult) {
                                if (appCMSScheduleResult != null) {
                                    cancelInternalEvents();
                                    pushActionInternalEvents(this.pageId
                                            + BaseView.isLandscape(currentActivity));

                                    AppCMSPageAPI pageAPI = null;
                                    if (appCMSScheduleResult != null) {
                                        pageAPI = convertToMonthlyData(appCMSScheduleResult);
                                    }
                                    navigationPageData.put(this.pageId, pageAPI);

                                    final StringBuffer screenName = new StringBuffer();
                                    if (!TextUtils.isEmpty(pageIdToPageFunctionMap.get(id))) {
                                        screenName.append(schedulePage.getPageFunction());
                                    }

                                    Bundle args = getPageActivityBundle(currentActivity,
                                            this.appCMSPageUI,
                                            pageAPI,
                                            this.pageId,
                                            this.pageTitle,
                                            this.pagePath,
                                            screenName.toString(),
                                            loadFromFile,
                                            this.appbarPresent,
                                            this.fullscreenEnabled,
                                            this.navbarPresent,
                                            false,
                                            null,
                                            ExtraScreenType.NONE,
                                            null,
                                            false, null);
                                    if (args != null) {
                                        Intent pageIntent =
                                                new Intent(AppCMSPresenter
                                                        .PRESENTER_NAVIGATE_ACTION);

                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                                                args);
                                        pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                                        currentActivity.sendBroadcast(pageIntent);
                                    }
                                    stopLoader();
                                } else {
                                    stopLoader();
                                }
                            }
                        });
            }
        }
    }


    public void navigateToJuspayPaymentPage(Action0 action0) {
        if (juspayPaymentPage == null) return;
        currentActivity.sendBroadcast(new Intent(ACTION_PRE_FATCH_JUSPAY_ASSETS));
        String pageId = juspayPaymentPage.getPageId();
        if (getPageAPILruCache() != null && getPageAPILruCache().get(pageId) != null) {
            getPageAPILruCache().remove(pageId);
        }
        AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
        if (appCMSPageUI != null) {
            action0.call();
            navigateToPage(pageId, juspayPaymentPage.getPageFunction(), createPageUiUrl(juspayPaymentPage), false, false, false, false, false, null);
        } else {
            MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
            if (metaPage != null) {
                getAppCMSPage(createPageUiUrl(metaPage), appCMSPageUIResult -> {
                    if (appCMSPageUIResult != null) {
                        navigationPages.put(pageId, appCMSPageUIResult);
                        String action = pageNameToActionMap.get(metaPage.getPageFunction());
                        if (action != null && actionToPageMap.containsKey(action)) {
                            actionToPageMap.put(action, appCMSPageUIResult);
                        }
                        action0.call();
                        navigateToPage(pageId, juspayPaymentPage.getPageFunction(), createPageUiUrl(juspayPaymentPage), false, false, false, false, false, null);
                    }
                }, loadFromFile, false);
            } else {
                action0.call();
            }
        }
    }

    public void navigateToBankListPage() {
        if (currentActivity != null) {
            showLoader();
            AppCMSPageUI appCMSPageUI = new GsonBuilder().create().fromJson(loadJsonFromAssets(currentContext, "bank_list.json"), AppCMSPageUI.class);
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    new AppCMSPageAPI(),
                    "",
                    "BankList",
                    "",
                    "",
                    loadFromFile,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.NONE,
                    null,
                    false, null);
            if (args != null) {
                Intent pageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(pageIntent);
            }
            stopLoader();
        }
    }

    public void navigateToCardPage() {
        if (currentActivity != null) {
            showLoader();
            AppCMSPageUI appCMSPageUI = new GsonBuilder().create().fromJson(loadJsonFromAssets(currentContext, "card.json"), AppCMSPageUI.class);
            Bundle args = getPageActivityBundle(currentActivity,
                    appCMSPageUI,
                    new AppCMSPageAPI(),
                    "",
                    "",
                    "",
                    "",
                    loadFromFile,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.NONE,
                    null,
                    false, null);
            if (args != null) {
                Intent pageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                pageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                pageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(pageIntent);
            }
            stopLoader();
        }
    }

    private void navigateToParentalControlsPage() {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            Bundle args = getPageActivityBundle(currentActivity,
                    navigationPages.get(accountSettingsPage.getPageId()),
                    getPageAPILruCache().get(accountSettingsPage.getPageId()),
                    currentActivity.getString(R.string.app_cms_parental_controls_page_tag),
                    currentActivity.getString(R.string.app_cms_parental_controls_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_parental_controls_page_tag),
                    false,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.PARENTAL_CONTROLS,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private void navigateToReauthoriseUser(LaunchType launchType) {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            setLaunchType(launchType);
            if (appPreference.getLoginType().equalsIgnoreCase(currentActivity.getString(R.string.login_type_otp))) {
                String pageId = loginPage.getPageId();
                AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
                if (appCMSPageUI != null) {
                    showLoader();
                    AppCMSPageAPI appCMSPageAPI = null;
                    if (platformType == PlatformType.ANDROID) {
                        try {
                            appCMSPageAPI = getPageAPILruCache().get(pageId);
                        } catch (Exception e) {
                            appCMSPageAPI = null;
                        }
                    }

                    if (appCMSPageAPI == null) {
                        showLoadingDialog(true);
                        refreshPageAPIData(appCMSPageUI, pageId, null, appCMSPageAPI1 -> {
                            loadingPage = false;
                            try {
                                getPageAPILruCache().put(pageId, appCMSPageAPI1);
                            } catch (Exception e) {

                            }
                            cancelInternalEvents();
                            restartInternalEvents();
                            navigationPageData.put(pageId, appCMSPageAPI1);
                            navigateToReauthoriseUser(launchType);
                        });
                    } else {
                        navigateOtpPage(appCMSPageUI, appCMSPageAPI);
                    }
                } else {
                    MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                    if (metaPage != null) {
                        getAppCMSPage(createPageUiUrl(metaPage), appCMSPageUIResult -> {
                            if (appCMSPageUIResult != null) {
                                navigationPages.put(pageId, appCMSPageUIResult);
                                String action = pageNameToActionMap.get(metaPage.getPageFunction());
                                if (action != null && actionToPageMap.containsKey(action)) {
                                    actionToPageMap.put(action, appCMSPageUIResult);
                                }
                                navigateToReauthoriseUser(launchType);
                            }
                        }, loadFromFile, false);
                    }
                }
            } else {
                String pageId = currentActivity.getString(R.string.app_cms_viewing_restrictions_page_tag);
                if (launchType == LaunchType.VIDEO_PIN_VIEW) {
                    pageId = currentActivity.getString(R.string.app_cms_pin_view_page_tag);
                }

                Bundle args = getPageActivityBundle(currentActivity, navigationPages.get(accountSettingsPage.getPageId()),
                        getPageAPILruCache().get(accountSettingsPage.getPageId()), pageId, pageId, null, pageId,
                        false, false, false, false, false, null,
                        ExtraScreenType.RE_AUTHORISE_USER, null, false, null);
                if (args != null) {
                    Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                    updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                    currentActivity.sendBroadcast(updatePageIntent);
                }
            }
        }
    }

    private void navigateOtpPage(AppCMSPageUI appCMSPageUI, AppCMSPageAPI appCMSPageAPI) {
        if (appCMSPageUI != null && appCMSPageAPI != null) {
            Module module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), currentActivity.getString(R.string.ui_block_authentication_01)), appCMSPageAPI);
            phoneObjectRequest.setPhone(appPreference.getLoggedInUserPhone());
            phoneObjectRequest.setScreenName("login");
            phoneObjectRequest.setRequestType("send");
            phoneObjectRequest.setFromVerify(true);
            if (module != null)
                phoneObjectRequest.setMetadataMap(module.getMetadataMap());
            showLoadingDialog(true);
            sendPhoneOTP(phoneObjectRequest, null);
        }
    }

    public void navigateToViewingRestrictionsPage() {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            Bundle args = getPageActivityBundle(currentActivity,
                    navigationPages.get(accountSettingsPage.getPageId()),
                    getPageAPILruCache().get(accountSettingsPage.getPageId()),
                    currentActivity.getString(R.string.app_cms_viewing_restrictions_page_tag),
                    currentActivity.getString(R.string.app_cms_viewing_restrictions_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_viewing_restrictions_page_tag),
                    false,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.VIEWING_RESTRICTIONS,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    public void navigateToChangeVideoPinPage() {
        if (currentActivity != null && !cancelAllLoads) {
            cancelInternalEvents();
            Bundle args = getPageActivityBundle(currentActivity,
                    navigationPages.get(accountSettingsPage.getPageId()),
                    getPageAPILruCache().get(accountSettingsPage.getPageId()),
                    currentActivity.getString(R.string.app_cms_pin_view_page_tag),
                    currentActivity.getString(R.string.app_cms_pin_view_page_tag),
                    null,
                    currentActivity.getString(R.string.app_cms_pin_view_page_tag),
                    false,
                    false,
                    false,
                    false,
                    false,
                    null,
                    ExtraScreenType.VIDEO_PIN,
                    null,
                    false, null);
            if (args != null) {
                Intent updatePageIntent = new Intent(AppCMSPresenter.PRESENTER_NAVIGATE_ACTION);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key), args);
                updatePageIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
                currentActivity.sendBroadcast(updatePageIntent);
            }
        }
    }

    private void navigateToUpdateMobileNumberPage() {
        if (currentActivity != null && loginPage != null) {
            String pageId = loginPage.getPageId();
            AppCMSPageUI appCMSPageUI = navigationPages.get(pageId);
            if (appCMSPageUI != null) {
                showLoader();
                AppCMSPageAPI appCMSPageAPI = null;
                try {
                    appCMSPageAPI = getPageAPILruCache().get(pageId);
                } catch (Exception e) {
                    appCMSPageAPI = null;
                }

                if (appCMSPageAPI == null) {
                    refreshPageAPIData(appCMSPageUI, pageId, null, appCMSPageAPI1 -> {
                        showLoadingDialog(false);
                        try {
                            getPageAPILruCache().put(pageId, appCMSPageAPI1);
                        } catch (Exception e) {

                        }
                        navigationPageData.put(pageId, appCMSPageAPI1);
                        navigateToUpdateMobileNumberPage();
                    });
                } else {
                    Module module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), currentActivity.getString(R.string.ui_block_authentication_01)), appCMSPageAPI);
                    if (module == null) {
                        module = matchModuleAPIToModuleUI(getRelatedModuleForBlock(appCMSPageUI.getModuleList(), currentActivity.getString(R.string.ui_block_authentication01_activate_device)), appCMSPageAPI);
                    }
                    if (module != null)
                        phoneObjectRequest.setMetadataMap(module.getMetadataMap());
                    showLoadingDialog(false);
                    openMobileUpdationScreen();
                }
            } else {
                MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
                if (metaPage != null) {
                    showLoader();
                    getAppCMSPage(createPageUiUrl(metaPage), appCMSPageUIResult -> {
                        showLoadingDialog(false);
                        if (appCMSPageUIResult != null) {
                            navigationPages.put(pageId, appCMSPageUIResult);
                            String action = pageNameToActionMap.get(metaPage.getPageFunction());
                            if (action != null && actionToPageMap.containsKey(action)) {
                                actionToPageMap.put(action, appCMSPageUIResult);
                            }
                            navigateToUpdateMobileNumberPage();
                        }
                    }, loadFromFile, false);
                }
            }
        }
    }

    AppCMSPageAPI pageApi = null;

    public AppCMSPageAPI convertToMonthlyData
            (List<AppCMSScheduleResult> appCMSScheduleResults) {
        HashMap<String, List<ContentDatum>> monthlyGameScheduleData = new HashMap<>();
        List<ContentDatum> contentDatumList = new ArrayList<>();
        Observable.from(appCMSScheduleResults).flatMap(new Func1<AppCMSScheduleResult, Observable<AppCMSScheduleResult>>() {
            @Override
            public Observable<AppCMSScheduleResult> call(AppCMSScheduleResult appCMSScheduleResult) {
                return Observable.just(appCMSScheduleResult);
            }
        }).subscribe(new Action1<AppCMSScheduleResult>() {
            @Override
            public void call(AppCMSScheduleResult appCMSScheduleResult) {
                for (GameSchedule gameSchedule : appCMSScheduleResult.getGist().getEventSchedule()) {
                    if (gameSchedule != null) {
                        Long gameDate = gameSchedule.getGameDate() * 1000L;
                        String month = getDateFormat(gameDate, "MMMM");

                        ContentDatum contentDatum = new ContentDatum();
                        contentDatum.setGist(appCMSScheduleResult.getGist());
                        contentDatum.setCategories(appCMSScheduleResult.getCategories());
                        contentDatumList.add(contentDatum);
                    }
                }
                pageApi = appCMSScheduleResult.convertToAppCMSPageAPI(contentDatumList);
            }
        });
        return pageApi;
    }

    private void getPhotoGalleryPageContent(final String apiBaseUrl,
                                            final String siteId,
                                            String pageId,
                                            final AppCMSArticlePhotoGalleryAPIAction photoGalleryAPIAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        appCMSPhotoGalleryCall.call(
                                currentActivity.getString(R.string.app_cms_photogallery_api_url,
                                        apiBaseUrl,
                                        pageId,
                                        siteId,
                                        getLanguageParamForAPICall()
                                ),
                                apikey, getAuthToken(),
                                photoGalleryAPIAction);

                    } catch (IOException e) {
                    }
                });
            } else {
                try {
                    appCMSPhotoGalleryCall.call(
                            currentActivity.getString(R.string.app_cms_photogallery_api_url,
                                    apiBaseUrl,
                                    pageId,
                                    siteId,
                                    getLanguageParamForAPICall()
                            ),
                            apikey, getAuthToken(),
                            photoGalleryAPIAction);

                } catch (IOException e) {
                }
            }
        }
    }

    private void getArticlePageContent(final String apiBaseUrl,
                                       final String siteId,
                                       String pageId,
                                       final AppCMSArticleAPIAction articleAPIAction, boolean isDeepLink) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        appCMSArticleCall.call(
                                currentActivity.getString((isDeepLink ? R.string.app_cms_article_api_url_with_perma : R.string.app_cms_article_api_url),
                                        apiBaseUrl,
                                        pageId,
                                        siteId,
                                        getLanguageParamForAPICall()), apikey, getAuthToken(),
                                articleAPIAction);

                    } catch (IOException e) {
                    }
                });

            } else {
                try {
                    appCMSArticleCall.call(
                            currentActivity.getString((isDeepLink ? R.string.app_cms_article_api_url_with_perma : R.string.app_cms_article_api_url),
                                    apiBaseUrl,
                                    pageId,
                                    siteId,
                                    getLanguageParamForAPICall()), apikey, getAuthToken(),
                            articleAPIAction);

                } catch (IOException e) {
                }
            }
        }
    }

    private abstract static class AppCMSArticleAPIAction implements Action1<AppCMSArticleResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSArticleAPIAction(boolean appbarPresent,
                               boolean fullscreenEnabled,
                               boolean navbarPresent,
                               AppCMSPageUI appCMSPageUI,
                               String action,
                               String pageId,
                               String pageTitle,
                               String pagePath,
                               boolean launchActivity,
                               Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    private abstract static class AppCMSArticlePhotoGalleryAPIAction implements Action1<AppCMSPhotoGalleryResult> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSArticlePhotoGalleryAPIAction(boolean appbarPresent,
                                           boolean fullscreenEnabled,
                                           boolean navbarPresent,
                                           AppCMSPageUI appCMSPageUI,
                                           String action,
                                           String pageId,
                                           String pageTitle,
                                           String pagePath,
                                           boolean launchActivity,
                                           Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    public void setCursorDrawableColor(EditText editText, int color) {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                editText.setTextCursorDrawable(R.drawable.custom_edit_text_cursor);
            } else {
                if (color == 0)
                    color = getBrandPrimaryCtaColor();
                Field field = TextView.class.getDeclaredField("mCursorDrawableRes");
                field.setAccessible(true);
                int drawableResId = field.getInt(editText);
                // Get the editor
                field = TextView.class.getDeclaredField("mEditor");
                field.setAccessible(true);
                Object editor = field.get(editText);
                // Get the drawable and set a color filter
                Drawable drawable = ContextCompat.getDrawable(editText.getContext(), drawableResId);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    drawable.setColorFilter(new BlendModeColorFilter(color, BlendMode.SRC_IN));
                } else {
                    drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);
                }
                // Set the drawables
                field = editor.getClass().getDeclaredField("mDrawableForCursor");
                field.setAccessible(true);
                field.set(editor, drawable);
            }
        } catch (Throwable ignored) {
        }
    }

    private void getSchedulePageContent(final String apiBaseUrl,
                                        final String siteId,
                                        String pageId,
                                        final AppCMSAPIAction scheduleAPIAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        appCMSScheduleCall.call(
                                currentActivity.getString(R.string.app_cms_schedule_api_url,
                                        apiBaseUrl,
                                        siteId,
                                        getLanguageParamForAPICall()), apikey, getAuthToken(),
                                scheduleAPIAction);

                    } catch (IOException e) {
                    }
                });
            } else {
                try {
                    appCMSScheduleCall.call(
                            currentActivity.getString(R.string.app_cms_schedule_api_url,
                                    apiBaseUrl,
                                    siteId,
                                    getLanguageParamForAPICall()), apikey, getAuthToken(),
                            scheduleAPIAction);

                } catch (IOException e) {
                }
            }
        }
    }

    private void getRosterPage(final String apiBaseUrl,
                               final String siteId,
                               String pageId,
                               final AppCMSAPIAction rosterAPIAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        appCMSRosterCall.call(
                                currentActivity.getString(R.string.app_cms_roster_data_page_api_url,
                                        apiBaseUrl,
                                        siteId,
                                        "roster",
                                        getLanguageParamForAPICall()
                                ), apikey,
                                rosterAPIAction);

                    } catch (IOException e) {
                    }
                });
            } else {
                try {
                    appCMSRosterCall.call(
                            currentActivity.getString(R.string.app_cms_roster_data_page_api_url,
                                    apiBaseUrl,
                                    siteId,
                                    "roster",
                                    getLanguageParamForAPICall()
                            ), apikey,
                            rosterAPIAction);

                } catch (IOException e) {
                }
            }
        }
    }

    private void getLibraryPage(final String apiBaseUrl,
                                final String siteId,
                                final AppCMSLibraryAPIAction rosterAPIAction) {
        if (currentActivity != null) {
            if (shouldRefreshAuthToken()) {
                callRefreshIdentity(() -> {
                    try {
                        getUserPurchases(apiBaseUrl, siteId, rosterAPIAction);
                    } catch (IOException ignored) {
                    }
                });

            } else {
                try {
                    getUserPurchases(apiBaseUrl, siteId, rosterAPIAction);
                } catch (IOException ignored) {
                }
            }
        }
    }

    private void getUserPurchases(final String apiBaseUrl,
                                  final String siteId, final AppCMSLibraryAPIAction rosterAPIAction) throws IOException {
        if (appCMSMain.isMonetizationModelEnabled())
            appCMSLibraryCall.call(
                    currentActivity.getString(R.string.app_cms_library_purchase_data_page_api_url, apiBaseUrl, siteId, appPreference.getLoggedInUser()), getAuthToken(), apikey,
                    rosterAPIAction);
        else
            appCMSLibraryCall.call(
                    currentActivity.getString(R.string.app_cms_library_data_page_api_url, apiBaseUrl, siteId, appPreference.getLoggedInUser()), getAuthToken(), apikey,
                    rosterAPIAction);
    }

    private abstract static class AppCMSAPIAction<T> implements Action1<List<T>> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSAPIAction(boolean appbarPresent,
                        boolean fullscreenEnabled,
                        boolean navbarPresent,
                        AppCMSPageUI appCMSPageUI,
                        String action,
                        String pageId,
                        String pageTitle,
                        String pagePath,
                        boolean launchActivity,
                        Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }

    private abstract static class AppCMSLibraryAPIAction<T> implements Action1<T> {
        final boolean appbarPresent;
        final boolean fullscreenEnabled;
        final boolean navbarPresent;
        final AppCMSPageUI appCMSPageUI;
        final String action;
        final String pageId;
        final String pageTitle;
        final String pagePath;
        final boolean launchActivity;
        final Uri searchQuery;

        AppCMSLibraryAPIAction(boolean appbarPresent,
                               boolean fullscreenEnabled,
                               boolean navbarPresent,
                               AppCMSPageUI appCMSPageUI,
                               String action,
                               String pageId,
                               String pageTitle,
                               String pagePath,
                               boolean launchActivity,
                               Uri searchQuery) {
            this.appbarPresent = appbarPresent;
            this.fullscreenEnabled = fullscreenEnabled;
            this.navbarPresent = navbarPresent;
            this.appCMSPageUI = appCMSPageUI;
            this.action = action;
            this.pageId = pageId;
            this.pageTitle = pageTitle;
            this.pagePath = pagePath;
            this.launchActivity = launchActivity;
            this.searchQuery = searchQuery;
        }
    }


    private String getDeviceDetail() {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            final String AMAZON_FEATURE_FIRE_TV = "amazon.hardware.fire_tv";
            String AMAZON_MODEL = Build.MODEL;
            if (currentActivity.getPackageManager().hasSystemFeature(AMAZON_FEATURE_FIRE_TV)) {
                //stringBuffer.append("FireTV :: ");
            } else {
                //  stringBuffer.append("NOT A FireTV :: ");
            }
            if (AMAZON_MODEL.matches("AFTN")) {
                stringBuffer.append("Firetv_Gen_3rd");
            } else if (AMAZON_MODEL.matches("AFTS")) {
                stringBuffer.append("Firetv_Gen_2nd");
            } else if (AMAZON_MODEL.matches("AFTB")) {
                stringBuffer.append("Firetv_Gen_1st");
            } else if (AMAZON_MODEL.matches("AFTT")) {
                stringBuffer.append("FireStick_Gen_2nd");
            } else if (AMAZON_MODEL.matches("AFTM")) {
                stringBuffer.append("FireStick_Gen_1st");
            } else if (AMAZON_MODEL.matches("AFTRS")) {
                stringBuffer.append("FireTV_Edition ");
            }
            //stringBuffer.append("SDK_INT = " + Build.VERSION.SDK_INT);
        } catch (Exception e) {

        }
        return stringBuffer.toString();
    }


    private void processRelatedArticleDeepLink(AppCMSPageAPI appCMSPageAPI) {
        if (getCurrentArticleIndex() == -1 && appCMSPageAPI.getModules() != null) {
            int moduleSize = appCMSPageAPI.getModules().size();
            for (int i = 0; i < moduleSize; i++) {
                if (appCMSPageAPI.getModules().get(i).getModuleType() != null && appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase(currentActivity.getResources().getString(R.string.app_cms_page_article_detail_module))) {
                    Module module = appCMSPageAPI.getModules().get(i);
                    if (module.getContentData() != null && module.getContentData().get(0).getContentDetails() != null && module.getContentData().get(0).getContentDetails().getRelatedArticleIds() != null) {
                        setRelatedArticleIds(module.getContentData().get(0).getContentDetails().getRelatedArticleIds());
                    }
                    break;
                }
            }
        }
    }

    private AppCMSPageAPI processBundleDetailReponse(AppCMSPageAPI appCMSPageAPI) {
        int moduleSize = appCMSPageAPI.getModules().size();
        for (int i = 0; i < moduleSize; i++) {
            if (appCMSPageAPI.getModules().get(i).getContentData() != null && appCMSPageAPI.getModules().get(i).getContentData().get(0) != null &&
                    appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist() != null && appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getBundleList() != null &&
                    appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getBundleList().size() > 0) {
                Module module = new Module();
                module.setContentData(appCMSPageAPI.getModules().get(i).getContentData().get(0).getGist().getBundleList());
                appCMSPageAPI.getModules().add(module);
                break;
            }
        }

        return appCMSPageAPI;
    }

    public void convertToAppCMSPageAPI(AppCMSPageAPI appCMSPageAPI) {
        if (appCMSPageAPI.getModules() != null) {
            List<ContentDatum> data = new ArrayList<>();
            int moduleSize = appCMSPageAPI.getModules().size();
            Module module = null;
            for (int i = 0; i < moduleSize; i++) {
                if (appCMSPageAPI.getModules().get(i).getModuleType() != null && appCMSPageAPI.getModules().get(i).getModuleType().equalsIgnoreCase(currentActivity.getResources().getString(R.string.app_cms_page_photo_gallery_detail_module))) {
                    module = appCMSPageAPI.getModules().get(i);
                    break;
                }
            }
            if (module.getContentData() != null) {
                ContentDatum contentDatum = module.getContentData().get(0);
                contentDatum.setGist(contentDatum.getGist());
                contentDatum.setId(contentDatum.getId());
                contentDatum.setStreamingInfo(contentDatum.getStreamingInfo());
                contentDatum.setContentDetails(contentDatum.getContentDetails());
                contentDatum.setCategories(contentDatum.getCategories());
                contentDatum.setTags(contentDatum.getTags());
                data.add(contentDatum);

                if (contentDatum.getStreamingInfo() != null && contentDatum.getStreamingInfo().getPhotogalleryAssets() != null) {
                    for (int i = 0; i < contentDatum.getStreamingInfo().getPhotogalleryAssets().size(); i++) {
                        PhotoGalleryData photoGalleryData = contentDatum.getStreamingInfo().getPhotogalleryAssets().get(i);
                        Gist gist = new Gist();
                        gist.setId(photoGalleryData.getId());
                        gist.setSelectedPosition(i == 0);
                        gist.setVideoImageUrl(photoGalleryData.getUrl() != null ? photoGalleryData.getUrl() : "");
                        ContentDatum contentDatum1 = new ContentDatum();
                        contentDatum1.setGist(gist);
                        data.add(contentDatum1);
                    }
                }
                module.setContentData(data);
            }
        }
    }

    public String getFontFamily() {
        if (null != appCMSMain
                && null != appCMSMain.getBrand()
                && null != appCMSMain.getBrand().getGeneral()) {
            return appCMSMain.getBrand().getGeneral().getFontFamily();
        }
        return null;
    }

    String videoId = null;

    public void setCurrentPlayingVideo(String videoId) {
        this.videoId = videoId;
    }

    public String getCurrentPlayingVideo() {
        return videoId;
    }

    public Boolean isAudioAvailable() {
        return appCMSMain != null && appCMSMain.getFeatures() != null && appCMSMain.getFeatures().getAudioPreview() != null;
    }

    public boolean isDownloadedMediaType(String mediaType) {
        if (realmController != null) {
            return realmController.getDownloadMediaType(mediaType);
        }
        return false;
    }

    public String getPageType(String pageId) {
        String pageType = null;
        if (null != pageId && null != pageIdToMetaPageMap && pageIdToMetaPageMap.size() > 0) {
            MetaPage metaPage = pageIdToMetaPageMap.get(pageId);
            if (null != metaPage) {
                pageType = metaPage.getPageType();
            }
        }
        return pageType;
    }


    public boolean isLeftNavigationEnabled() {
        if (!Utils.isFireTVDevice(currentContext)) {
            return true;
        } else if (null != appCMSMain &&
                null != appCMSMain.getFeatures() &&
                null != appCMSMain.getFeatures().getNavigationType()) {
            return appCMSMain.getFeatures().getNavigationType().equalsIgnoreCase("left");
        }
        return false;
    }

    public boolean isNewsLeftNavigationEnabled() {
        if (null != appCMSMain &&
                null != appCMSMain.getFeatures() &&
                null != appCMSMain.getFeatures().getNavigationType() &&
                isNewsTemplate()) {
            return appCMSMain.getFeatures().getNavigationType().equalsIgnoreCase("left");
        }
        return false;
    }

    public void getShowDetails(String showId, final Action1<AppCMSShowDetail> action1) {
        String url = currentContext.getString(R.string.app_cms_show_detail_api_url,
                appCMSMain.getApiBaseUrl(),
                showId,
                appCMSMain.getInternalName(),
                getLanguageParamForAPICall());
        GetAppCMSShowDetailAsyncTask.Params params =
                new GetAppCMSShowDetailAsyncTask.Params.Builder().url(url)
                        .authToken(getAuthToken())
                        .apiKey(apikey)
                        .build();
        new GetAppCMSShowDetailAsyncTask(appCMSShowDetailCall,
                action1).execute(params);
    }


    public void playEpisode(ContentDatum contentDatum, String contentId) {

        showLoadingDialog(true);
        if (contentDatum != null &&
                contentDatum.getSeason() != null &&
                contentDatum.getSeason().get(0) != null &&
                contentDatum.getSeason().get(0).getEpisodes() != null &&
                contentDatum.getSeason().get(0).getEpisodes().get(0) != null) {

            List<String> relatedVideosIds = Utils.getRelatedVideosInShow2(
                    contentDatum.getSeason(),
                    0,
                    -1,
                    contentId);

            ContentDatum updatedData = new ContentDatum();
            Gist gist = new Gist();
            updatedData.setGist(gist);
            gist.setId(contentId);

            launchTVVideoPlayer(
                    updatedData,
                    0,
                    relatedVideosIds,
                    0,
                    null);

        }
    }

    public int getSelectedSeason() {
        return selectedSeason;
    }

    public void setSelectedSeason(int selectedSeason) {
        this.selectedSeason = selectedSeason;
    }

    int selectedSeason = 0;

    public void makeTextViewLinks(TextView textView, String[] links, ClickableSpan[]
            clickableSpans, boolean hideTextHighlightColor) {
        SpannableString spannableString = new SpannableString(textView.getText());
        if (!TextUtils.isEmpty(textView.getText().toString())) {
            for (int i = 0; i < links.length; i++) {
                ClickableSpan clickableSpan = clickableSpans[i];
                String link = links[i];

                int startIndexOfLink = textView.getText().toString().toLowerCase().indexOf(link.toLowerCase());
                if (startIndexOfLink != -1) {
                    spannableString.setSpan(clickableSpan, startIndexOfLink,
                            startIndexOfLink + link.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                }
            }
            if (hideTextHighlightColor) {
                textView.setHighlightColor(Color.TRANSPARENT); // prevent TextView change background when highlight
            }
            textView.setMovementMethod(LinkMovementMethod.getInstance());
            textView.setText(spannableString, TextView.BufferType.SPANNABLE);
        }
    }

    public Boolean isSinglePlanFeatureAvailable() {
        return singlePlanFeatureAvailable;
    }

    public void setSinglePlanFeatureAvailable(Boolean singlePlanFeatureAvailable) {
        this.singlePlanFeatureAvailable = singlePlanFeatureAvailable;
    }

    Boolean singlePlanFeatureAvailable = false;

    public void initializeCleverTap() {
        isCleverTapAvailable = checkCleverTapAvailability();
        if (isCleverTapAvailable) {
            cleverTapSDK.initializeSDK(this);
            senduserProfileEvent();
        }
    }

    public void initializeFacebookSdk() {
        checkisFacebookSdkAvailability();
        if (isFacebookSdkAvailable) {
            facebookAnalytics.initializeSDK(this);
            senduserProfileEvent();
        }
    }

    public void senduserProfileEvent() {
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                sendUserProfileEvent();

            }
        }, 2000);
    }


    private void sendUserProfileEvent() {
        try {
            String userStatus = "Subscribed";
            if (!isUserSubscribed())
                userStatus = "Not Subscribed";
            if (!isUserLoggedIn())
                userStatus = "Anonymous";
            if (isUserLoggedIn() && getUserSubscriptionInfo() == null)
                userStatus = "Never subscribed";
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            double discountPrice = 0;
            String planName = "";
            String paymentHandler = "";
            String gatewayTransid = "";
            String paymentMode = "";
            boolean freeTrial = false;
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                gatewayTransid = getUserSubscriptionInfo().getGatewayChargeId();
                country = getUserSubscriptionInfo().getCountryCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                discountPrice = planToPurchaseDiscountedPrice;
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();
            }
            double planPrice = planToPurchasePrice;
            String currency = currencyCode;
            String mobile = appPreference.getLoggedInUserPhone();
            String provider = appPreference.getUserAuthProviderName();
            double transactionAmount = getUserSubscriptionInfo() != null ? getUserSubscriptionInfo().getTotalAmount() : 0.0;

            if (isCleverTapAvailable && isUserLoggedIn()) {
                cleverTapSDK.sendUserProfile(appPreference.getLoggedInUser(), appPreference.getLoggedInUserName(), appPreference.getLoggedInUserEmail(),
                        userStatus, subscriptionStartDate, subscriptionEndDate, transId, country, discountPrice,
                        planPrice, currency, planName, paymentHandler, freeTrial, mobile, paymentMode, provider);
            }

        } catch (Exception e) {
        }
    }

    private void sendSubscriptionPurchasedEvent() {
        try {
            String userStatus = "Subscribed";
            if (!isUserSubscribed())
                userStatus = "Not Subscribed";
            if (!isUserLoggedIn())
                userStatus = "Anonymous";
            if (isUserLoggedIn() && getUserSubscriptionInfo() == null)
                userStatus = "Never subscribed";
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            double discountPrice = 0;
            String planName = "";
            String paymentHandler = "";
            String gatewayTransid = "";
            String paymentMode = "";
            boolean freeTrial = false;
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                gatewayTransid = getUserSubscriptionInfo().getGatewayChargeId();
                country = getUserSubscriptionInfo().getCountryCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                discountPrice = planToPurchaseDiscountedPrice;
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();
            }
            double planPrice = planToPurchasePrice;
            String currency = currencyCode;
            String mobile = appPreference.getLoggedInUserPhone();
            String provider = appPreference.getUserAuthProviderName();
            double transactionAmount = getUserSubscriptionInfo() != null ? getUserSubscriptionInfo().getTotalAmount() : 0.0;

            if (appPreference.getPurchaseKey()) {
                facebookAnalytics.sendSubscriptionPurchased(getLoggedInUser(), getLoggedInUserName(), getLoggedInUserEmail(),
                        userStatus, subscriptionStartDate, subscriptionEndDate, transId, country, discountPrice,
                        planPrice, currency, planName, paymentHandler, freeTrial, mobile, paymentMode, provider, gatewayTransid);
                appPreference.setPurchaseKey(false);
            }

            if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                AppsFlyerUtils.setEventSubscriptionCompleted(AppCMSPresenter.this, paymentHandler, transactionAmount, country, discountPrice, planPrice, currency, planName, discountAmount_, subscriptionEndDate);
            }
        } catch (Exception e) {
        }

        GetSocialHelper.trackGetSocialEvent(this);
    }

    public void sendPlayStartedEvent(ContentDatum contentDatum) {
        if (contentDatum == null)
            return;
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventPlayStarted(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventPlayStarted(contentDatum);
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventPlayStarted(AppCMSPresenter.this, contentDatum);
        }
    }

    public void sendCastEvent(ContentDatum contentDatum) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventCast(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventCast(contentDatum);
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventCast(AppCMSPresenter.this, contentDatum);
        }
    }

    public void sendWatchedEvent(ContentDatum contentDatum, long watchTime, String stream,
                                 int bufferCount, int bufferTime) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventWatched(contentDatum, watchTime, stream, bufferCount, bufferTime);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventWatched(contentDatum, watchTime, stream, bufferCount, bufferTime);

    }

    public void sendDownloadStartEvent(ContentDatum contentDatum) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventDownloadStarted(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventDownloadStarted(contentDatum);
    }

    public void sendAddWatchlistEvent(ContentDatum contentDatum) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventAddWatchlist(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventAddWatchlist(contentDatum);
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventAddToWatchList(AppCMSPresenter.this, contentDatum);
        }
    }

    public void sendEventMediaError(ContentDatum contentDatum, String error, long watchTime) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventMediaError(contentDatum, error, watchTime);
    }

    public void sendRemoveWatchlistEvent(ContentDatum contentDatum) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventRemoveWatchlist(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventRemoveWatchlist(contentDatum);
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventRemoveFromWatchList(AppCMSPresenter.this, contentDatum);
        }
    }

    public void sendShareEvent(ContentDatum contentDatum) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventShare(contentDatum);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventShare(contentDatum);
    }

    public void sendSignUpEvent(String regType) {
        if (isCleverTapAvailable) {
            SemVer installAppSemVer = getInstalledAppSemVer();
            cleverTapSDK.sendEventSignUp(regType, installAppSemVer.original);
        }
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventSignUp(regType);
    }

    public void sendSubscriptionCancleEvent() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                country = getUserSubscriptionInfo().getCountryCode();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = false;
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                Log.e("all_data", "" + subscriptionStartDate + "" + subscriptionEndDate + "" + transId);
                cleverTapSDK.sendEventSubscriptionCancelledNEW(subscriptionStartDate, subscriptionEndDate, transId, transactionAmount, planName, platform, paymentHandler, country, currency, appPreference.getLoggedInUser(), freeTrial, paymentMode);
            }


        }
    }

    public void sendEventSubscripationPurchasedNew() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            double discountPrice = 0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                country = getUserSubscriptionInfo().getCountryCode();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                String planAmt = Double.toString(planToPurchaseDiscountedPrice);
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = false;
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                // Log.d("@@@",""+subscriptionStartDate+""+subscriptionEndDate+""+transId);
                cleverTapSDK.sendEventSubscripationPurchasedNew(subscriptionStartDate, subscriptionEndDate, transId, transactionAmount, planName, platform, paymentHandler, country, currency, appPreference.getLoggedInUser(), freeTrial, planAmt, paymentMode);
            }
        }
    }


    public void sendEventSubscriptionSuccess() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String planId = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            double discountPrice = 0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                country = getUserSubscriptionInfo().getCountryCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                String planAmt = Double.toString(planToPurchaseDiscountedPrice);
                planName = getUserSubscriptionInfo().getIdentifier();
                planId = getUserSubscriptionInfo().getPlanId();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                cleverTapSDK.sendEventSubscriptionSuccess(appPreference.getLoggedInUser(), planId, paymentHandler, transactionAmount,
                        planName, currency, country, subscriptionStartDate, subscriptionEndDate);
                cleverTapSDK.sendEventSubscriptionEnd(appPreference.getLoggedInUser()
                        , planName, currency, country, getUserSubscriptionInfo().getSubscriptionEndDate());
            }
        }
        sendSubscriptionPurchasedEvent();
    }


    public void sendEventSubscriptionFailure(String orderId) {

        try {
            String userStatus = "Subscribed";
            if (!isUserSubscribed())
                userStatus = "Not Subscribed";
            if (!isUserLoggedIn())
                userStatus = "Anonymous";
            if (isUserLoggedIn() && getUserSubscriptionInfo() == null)
                userStatus = "Never subscribed";
            String country = new Locale("", currencyCode).getDisplayCountry();

            String paymentHandler = currentActivity.getString(R.string.subscription_juspay_payment_processor);
            if (isCleverTapAvailable) {
                cleverTapSDK.sendEventSubscripationFailure(planToPurchase, paymentHandler, planToPurchaseDiscountedPrice, planToPurchaseName, country, currencyOfPlanToPurchase);
                if (isUserLoggedIn()) {
                    cleverTapSDK.updateUserProfile(userStatus, orderId, country, planToPurchaseDiscountedPrice, planToPurchasePrice, currencyCode,
                            planToPurchaseName, paymentHandler, jusPayUtils != null ? jusPayUtils.getPaymentMethod() : "");
                }
            }

            if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                AppsFlyerUtils.setEventSubscriptionFailed(
                        AppCMSPresenter.this,
                        paymentHandler,
                        planToPurchaseDiscountedPrice,
                        country,
                        discountAmount_,
                        planToPurchasePrice,
                        currencyOfPlanToPurchase,
                        planToPurchaseName,
                        discountAmount_,
                        null);
            }
        } catch (Exception e) {
            //e.printStackTrace();
        }

    }

    public void sendEventSubscriptionRenewedAutomaticallyNEW() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            double discountPrice = 0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                country = getUserSubscriptionInfo().getCountryCode();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                String planAmt = Double.toString(planToPurchaseDiscountedPrice);
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = false;
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                // Log.d("@@@",""+subscriptionStartDate+""+subscriptionEndDate+""+transId);
                cleverTapSDK.sendEventSubscriptionRenewedAutomaticallyNEW(subscriptionStartDate, subscriptionEndDate, transId, transactionAmount, planName, platform, paymentHandler, country, currency, appPreference.getLoggedInUser(), freeTrial, planAmt, paymentMode);
            }
        }
    }

    public void sendEventSubscriptionSuspendedNEW() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            double discountPrice = 0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                country = getUserSubscriptionInfo().getCountryCode();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                String planAmt = Double.toString(planToPurchaseDiscountedPrice);
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = false;
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                // Log.d("@@@",""+subscriptionStartDate+""+subscriptionEndDate+""+transId);
                cleverTapSDK.sendEventSubscriptionSuspendedNEW(subscriptionStartDate, subscriptionEndDate, transId, transactionAmount, planName, platform, paymentHandler, country, currency, appPreference.getLoggedInUser(), freeTrial, planAmt, paymentMode);
            }
        }
    }

    public void sendEventSubscriptionRenewedManualyNEW() {
        if (isCleverTapAvailable) {
            String subscriptionStartDate = "";
            String subscriptionEndDate = "";
            String transId = "";
            String country = "";
            String currency = "";
            String planName = "";
            String paymentHandler = "";
            String paymentMode = "";
            double transactionAmount = 0.0;
            double discountPrice = 0;
            String platform = "Android";
            if (getUserSubscriptionInfo() != null) {
                subscriptionStartDate = getUserSubscriptionInfo().getSubscriptionStartDate();
                subscriptionEndDate = getUserSubscriptionInfo().getSubscriptionEndDate();
                transId = getUserSubscriptionInfo().getVlTransactionId();
                transactionAmount = getUserSubscriptionInfo().getTotalAmount();
                country = getUserSubscriptionInfo().getCountryCode();
                currency = getUserSubscriptionInfo().getCurrencyCode();
                Locale loc = new Locale("", country);
                country = loc.getDisplayCountry();
                String planAmt = Double.toString(planToPurchaseDiscountedPrice);
                planName = getUserSubscriptionInfo().getIdentifier();
                paymentHandler = getUserSubscriptionInfo().getPaymentHandler();
                boolean freeTrial = false;
                if (paymentHandler.equalsIgnoreCase(currentActivity.getString(R.string.subscription_ccavenue_payment_processor))) {
                    paymentHandler = currentActivity.getString(R.string.subscription_ccavenue_payment_processor_friendly);
                }
                freeTrial = getUserSubscriptionInfo().isFreeTrial();
                paymentMode = getUserSubscriptionInfo().getBrand();

                // Log.d("@@@",""+subscriptionStartDate+""+subscriptionEndDate+""+transId);
                cleverTapSDK.sendEventSubscriptionRenewedManualyNEW(subscriptionStartDate, subscriptionEndDate, transId, transactionAmount, planName, platform, paymentHandler, country, currency, appPreference.getLoggedInUser(), freeTrial, planAmt, paymentMode);
            }
        }
    }

    public void sendSubscriptionEvent(String planName, double planPrice, double discountPrice, String currency,
                                      double discountAmount, String country) {
        double transactionAmount = getUserSubscriptionInfo() != null ? getUserSubscriptionInfo().getTotalAmount() : 0.0;


        Locale loc = new Locale("", country);
        country = loc.getDisplayCountry();
        String paymentHandler = "Google play";
        if (useJusPay()) {
            paymentHandler = "JusPay";
        } else if (useCCAvenue()) {
            paymentHandler = "CCAvenue";
        } else if (useSSLCommerz()) {
            paymentHandler = "SSL Commerz";
        }


        if (isCleverTapAvailable) {
            cleverTapSDK.sendEventSubscriptionInitiated(paymentHandler, transactionAmount, country, discountPrice, planPrice, currency, planName, discountAmount);
        }
        if (isFacebookSdkAvailable) {
            facebookAnalytics.sendEventSubscriptionInitiated(paymentHandler, country, discountPrice, planPrice, currency, planName);
        }
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventAddToCart(
                    AppCMSPresenter.this,
                    paymentHandler,
                    transactionAmount,
                    country,
                    discountPrice,
                    planPrice,
                    currency,
                    planName,
                    discountAmount,
                    null);
            AppsFlyerUtils.setEventSubscriptionInitiated(
                    AppCMSPresenter.this,
                    paymentHandler,
                    transactionAmount,
                    country,
                    discountPrice,
                    planPrice,
                    currency,
                    planName,
                    discountAmount,
                    null);
        }
    }

    public void sendPlayerBitrateEvent(String quality) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventPlayerBitrateChange(quality);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventPlayerBitrateChange(quality);
    }

    public void sendDownloadBitrateEvent(String quality) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventDownloadBitrateChange(quality);
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventDownloadBitrateChange(quality);
    }

    public void sendLoginEvent(String regType) {
        if (isCleverTapAvailable) {
            SemVer installAppSemVer = getInstalledAppSemVer();
            cleverTapSDK.sendEventLogin(regType, installAppSemVer.original);
        }
        if (isFacebookSdkAvailable) {
            SemVer installAppSemVer = getInstalledAppSemVer();
            facebookAnalytics.sendEventLogin(regType, installAppSemVer.original);
        }
    }

    public void sendPageViewEvent(String lastPage, String pageName, String pageURL) {
        SemVer installAppSemVer = getInstalledAppSemVer();
        if (isCleverTapAvailable) {
            cleverTapSDK.sendEventPageViewed(lastPage, pageName, installAppSemVer.original);
            if (getPlatformType() == AppCMSPresenter.PlatformType.TV && pageName != null) {
                cleverTapSDK.sendEventPageView(lastPage, pageName);
            }
            if (lastPage != null && pageName != null &&
                    (lastPage.contains((getCurrentContext().getString(R.string.app_cms_movies_label)).toLowerCase())
                            || lastPage.contains((getCurrentContext().getString(R.string.app_cms_series_content_type)).toLowerCase())
                            || lastPage.contains((getCurrentContext().getString(R.string.app_cms_kids_content_type)).toLowerCase())
                            || pageName.contains((getCurrentContext().getString(R.string.app_cms_movies_label)).toLowerCase())
                            || pageName.contains((getCurrentContext().getString(R.string.app_cms_series_content_type)).toLowerCase())
                            || pageName.contains((getCurrentContext().getString(R.string.app_cms_kids_content_type)).toLowerCase()))) {
                cleverTapSDK.sendEventPageView(lastPage, pageName);
            }
        }
        if (isFacebookSdkAvailable) {
            facebookAnalytics.sendEventPageViewed(lastPage, pageName, installAppSemVer.original);
        }
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventPageViewed(AppCMSPresenter.this, lastPage, pageName, installAppSemVer.original, pageURL);
        }

    }

    public void sendAnalyticsLogoutEvent() {
        if (isCleverTapAvailable)
            cleverTapSDK.sendEventLogout();
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventLogout();
        if (!TextUtils.isEmpty(appPreference.getLoggedInUser())) {
            if (platformType.equals(PlatformType.ANDROID)) {
                sendUALoggedOutEvent(appPreference.getLoggedInUser());
            }
        }
        sendFireBaseLogOutEvent();
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.logoutEvent(currentActivity, appPreference.getLoggedInUser());
            AppsFlyerUtils.setEventLogout(AppCMSPresenter.this);
        }

    }

    public void sendPlanEvent() {
        if (isCleverTapAvailable) {
            cleverTapSDK.sendEventViewPlans(currentActivity.getString(R.string.view_plans_label));
        }
        if (isFacebookSdkAvailable)
            facebookAnalytics.sendEventViewPlans();
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventViewPlans(AppCMSPresenter.this);
        }
    }

    public void sendSearchEvent(String keyword) {
        if (isCleverTapAvailable) {
            cleverTapSDK.sendEventSearch(keyword);
        }
        if (isFacebookSdkAvailable) {
            facebookAnalytics.sendEventSearch(keyword);
        }
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
            AppsFlyerUtils.setEventSearched(AppCMSPresenter.this, keyword);
        }
    }

    public void sendDownloadCompleteEvent(long downloadId) {
        if (isCleverTapAvailable) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            DownloadVideoRealm videoDownloaded = getVideoDownloadedByDMID(downloadId);
            if (videoDownloaded != null && appPreference.getLoggedInUser() != null) {
                ContentDatum contentDatum = videoDownloaded.convertToContentDatum(appPreference.getLoggedInUser());
                cleverTapSDK.sendEventDownloadComplete(contentDatum);
            }
        }
        if (isFacebookSdkAvailable) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            DownloadVideoRealm videoDownloaded = getVideoDownloadedByDMID(downloadId);
            if (videoDownloaded != null) {
                ContentDatum contentDatum = videoDownloaded.convertToContentDatum(appPreference.getLoggedInUser());
                facebookAnalytics.sendEventDownloadComplete(contentDatum);
            }
        }
        if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey()) && binder != null && binder.getContentData() != null) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            DownloadVideoRealm videoDownloaded = getVideoDownloadedByDMID(downloadId);
            if (videoDownloaded != null) {
                ContentDatum contentDatum = videoDownloaded.convertToContentDatum(appPreference.getLoggedInUser());
                if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                    AppsFlyerUtils.setEventOfflineDownload(AppCMSPresenter.this, contentDatum);
                }
            }
        }


    }

    public AppCMSUserSubscriptionPlanInfoResult getUserSubscriptionInfo() {
        return userSubscriptionInfo;
    }

    public void setUserSubscriptionInfo(AppCMSUserSubscriptionPlanInfoResult
                                                userSubscriptionInfo) {
        this.userSubscriptionInfo = userSubscriptionInfo;
    }

    AppCMSUserSubscriptionPlanInfoResult userSubscriptionInfo;

    public AppCMSSubscriptionPlanResult getUserSubscriptionPlanResult() {
        return userSubscriptionPlanResult;
    }

    public void setUserSubscriptionPlanResult(AppCMSSubscriptionPlanResult
                                                      userSubscriptionPlanResult) {
        this.userSubscriptionPlanResult = userSubscriptionPlanResult;
    }

    AppCMSSubscriptionPlanResult userSubscriptionPlanResult;

    AppCMSActionType currentAction;

    void setCurrentAction(String action) {
        currentAction = actionToActionTypeMap.get(action);
    }

    AppCMSActionType getCurrentAction() {
        return currentAction;
    }

    public ContentDatum getShowDatum() {
        return showDatum;
    }

    public void setShowDatum(ContentDatum showDatum) {
        this.showDatum = showDatum;
    }

    ContentDatum showDatum;

    public String getPlaySource() {
        return playSource;
    }

    public void setPlaySource(String playSource) {
        this.playSource = playSource;
    }

    String playSource = "";

    public boolean isCleverTapAvailable = false;
    public boolean isFacebookSdkAvailable = false;

    public boolean checkCleverTapAvailability() {
        return appCMSMain != null && !TextUtils.isEmpty(appCMSMain.getCleverTapAnalyticsId()) && !TextUtils.isEmpty(appCMSMain.getCleverTapToken());
    }

    private void checkisFacebookSdkAvailability() {
        if (getAppCMSMain() != null
                && getAppCMSMain().getSocialMedia() != null
                && getAppCMSMain().getSocialMedia().getFacebook() != null
                && getAppCMSMain().getSocialMedia().getFacebook().getAppId() != null) {
            isFacebookSdkAvailable = true;
        }
    }

    public CleverTapSDK getCleverTapInstance() {
        return cleverTapSDK;
    }

    private boolean isAppsFlyerExist() {
        return getCurrentActivity().getString(R.string.app_cms_apps_flyer_key) != null &&
                !getCurrentActivity().getString(R.string.app_cms_apps_flyer_key).isEmpty() &&
                getCurrentActivity().getString(R.string.app_cms_apps_flyer_key).length() > 0 &&
                !getCurrentActivity().getString(R.string.app_cms_apps_flyer_key).contains("null");
    }


    public String getCurrentVideoStreamingQuality() {
        return currentVideoStreamingQuality;
    }

    public void setCurrentVideoStreamingQuality(String currentVideoStreamingQuality) {
        this.currentVideoStreamingQuality = currentVideoStreamingQuality;
    }

    String currentVideoStreamingQuality;


    /**
     * This method will remove languages from navigation in case languages list in main json having 1 language.
     */
    private void removeLanguage() {
        if (appCMSMain.getLanguages() != null
                && appCMSMain.getLanguages().getLanguageList() != null
                && appCMSMain.getLanguages().getLanguageList().size() <= 1) {
            //remove language from NavigationPrimary.
            List<NavigationPrimary> navigationPrimaryList = navigation.getNavigationPrimary();
            Iterator<NavigationPrimary> navigationPrimaryIterator = navigationPrimaryList.iterator();
            while (navigationPrimaryIterator.hasNext()) {
                NavigationPrimary navigationPrimary = navigationPrimaryIterator.next();
                if (navigationPrimary != null && navigationPrimary.getTitle().toLowerCase().contains("language")) {
                    navigationPrimaryIterator.remove();
                }
            }

            //remove language from NavigationFooter.
            List<NavigationFooter> navigationFooterList = navigation.getNavigationFooter();
            Iterator<NavigationFooter> navigationFooterIterator = navigationFooterList.iterator();
            while (navigationFooterIterator.hasNext()) {
                NavigationFooter navigationFooter = navigationFooterIterator.next();
                if (navigationFooter != null && navigationFooter.getTitle().toLowerCase().contains("language")) {
                    navigationFooterIterator.remove();
                }
            }

            //remove language from NavigationUser.
            List<NavigationUser> navigationUserList = navigation.getNavigationUser();
            Iterator<NavigationUser> navigationUserIterator = navigationUserList.iterator();
            while (navigationUserIterator.hasNext()) {
                NavigationUser navigationUser = navigationUserIterator.next();
                if (navigationUser != null && navigationUser.getTitle().toLowerCase().contains("language")) {
                    navigationUserIterator.remove();
                }
            }
        }
    }


    public Resources getLanguageResourcesFile() {
        if (languageResources == null) {
            languageResources = new GsonBuilder().create().fromJson(Utils.loadJsonFromAssets(currentContext, "default_language_res.json"), Resources.class);
        }
        return languageResources;
    }

    public String getNavigationTitle
            (HashMap<String, LocalizationResult> localizationResultHashMap) {
        String title = null;
        if (localizationResultHashMap != null && localizationResultHashMap.get(getLanguage().getLanguageCode()) != null
                && localizationResultHashMap.get(getLanguage().getLanguageCode()).getTitle() != null) {
            title = localizationResultHashMap.get(getLanguage().getLanguageCode()).getTitle();
        }
        return title;
    }

    public String getPageFunctionValue(String pageId) {
        return pageIdToPageFunctionMap.get(pageId);
    }

    public String getPageFunctionValue(String pageId, String title) {
        if (pageId != null && pageIdToPageFunctionMap.get(pageId) != null) {
            return pageIdToPageFunctionMap.get(pageId);
        } else {
            return title;
        }
    }

    public String getLocalizedCtaText
            (HashMap<String, LocalizationResult> localizationResultHashMap, PrimaryCta primaryCta, Boolean isBannerEnable) {
        StringBuilder message = new StringBuilder();

        if (localizationResultHashMap != null && localizationResultHashMap.get(getLanguage().getLanguageCode()) != null
                && localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta() != null &&
                ((localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText() != null &&
                        !TextUtils.isEmpty(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText().trim())) ||
                        (localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText() != null &&
                                !TextUtils.isEmpty(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText().trim())))) {

            if (isBannerEnable && localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText() != null) {
                message.append(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText());
                message.append(" ");
            }

            if (localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText() != null) {
                message.append(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText());
            }
        } else {
            if (null != getNavigation()
                    && null != getNavigation().getSettings()
                    && null != getNavigation().getSettings().getPrimaryCta()) {
                if (isBannerEnable && getNavigation().getSettings().getPrimaryCta().getBannerText() != null) {
                    message.append(getNavigation().getSettings().getPrimaryCta().getBannerText());
                    message.append(" ");
                }

                if (getNavigation().getSettings().getPrimaryCta().getCtaText() != null)
                    message.append(getNavigation().getSettings().getPrimaryCta().getCtaText());
            }
        }
        return message.toString();
    }

    public String getLocalizedBannerText
            (HashMap<String, LocalizationResult> localizationResultHashMap, PrimaryCta primaryCta) {
        StringBuilder message = new StringBuilder();
        if (localizationResultHashMap != null && localizationResultHashMap.get(getLanguage().getLanguageCode()) != null &&
                ((localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText() != null &&
                        !TextUtils.isEmpty(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText().trim())))) {
            message.append(localizationResultHashMap.get(getLanguage().getLanguageCode()).getPrimaryCta().getBannerText());
            message.append(" ");
        } else {
            if (null != getNavigation()
                    && null != getNavigation().getSettings()
                    && null != getNavigation().getSettings().getPrimaryCta() &&
                    getNavigation().getSettings().getPrimaryCta().getBannerText() != null) {
                message.append(getNavigation().getSettings().getPrimaryCta().getBannerText());
                message.append(" ");
            }
        }
        return message.toString();
    }

    public String getLocalizedLoginText() {
        String login = getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.app_cms_login_button_text));
        if (getNavigation().getSettings().getLocalizationMap() != null && getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()) != null
                && getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta() != null
                && getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getLoginCtaText() != null)
            login = getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getLoginCtaText();
        if (login.length() == 0)
            login = getNavigation().getSettings().getPrimaryCta().getLoginCtaText();
        return login;
    }

    public String getLocalizedLogoutText() {
        String logout = getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.logout));
        if (getNavigation().getSettings().getLocalizationMap() != null &&
                getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()) != null &&
                getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta() != null &&
                getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getLogoutCtaText() != null)
            logout = getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getLogoutCtaText();
        if (logout.length() == 0)
            logout = getNavigation().getSettings().getPrimaryCta().getLogoutCtaText();
        return logout;
    }

    public String getNavigationTitleForEN
            (HashMap<String, LocalizationResult> localizationResultHashMap) {
        String title = null;
        if (localizationResultHashMap != null && localizationResultHashMap.get(getLanguage().getLanguageCode()) != null
                && localizationResultHashMap.get("en") != null && localizationResultHashMap.get("en").getTitle() != null) {
            title = localizationResultHashMap.get("en").getTitle().toUpperCase();
        }
        return title;
    }

    public void clearPageApiData() {
        clearPageAPIData(() -> navigateToHomePage(true), true);
        userHistoryData.clear();
        navigationPageData.clear();
        if (isUserLoggedIn())
            populateUserHistoryData();
    }

    HashMap<String, String> pageMap;

    public void setPageMap(String pageId, boolean isOpen) {
        if (pageMap == null) {
            pageMap = new HashMap<>();
        }
        pageMap.put(pageId, "true");
    }

    public void removeFromPageMap(String pageId) {
        if (pageMap != null) {
            pageMap.remove(pageId);
        }
    }

    public boolean getPageMapData(String pageId) {
        if (pageMap != null && pageMap.size() > 0 && pageId != null) {
            return pageMap.get(pageId).equals("true");
        }
        return false;

    }


    public boolean isScheduleContentVisible(final ContentDatum data) {

        boolean isVisible = true;
        long scheduleStartDate = (data.getGist().getScheduleStartDate());
        long scheduleEndDate = (data.getGist().getScheduleEndDate());

        //calculate remaining time from event date and current date
        long timeToStart = CommonUtils.getTimeIntervalForEvent(scheduleStartDate, "yyyy MMM dd HH:mm:ss");
        long endTimeMillis = CommonUtils.getTimeIntervalForEvent(scheduleEndDate, "yyyy MMM dd HH:mm:ss");

        if ((scheduleStartDate > 0 && timeToStart > 0) || (scheduleEndDate > 0 && endTimeMillis < 0)) {
            isVisible = false;

        } else if ((data != null &&
                data.getGist() != null &&
                data.getGist().getContentType() != null) &&
                (data.getGist().getContentType().equalsIgnoreCase("SERIES") || data.getGist().getContentType().equalsIgnoreCase("SEASON"))
                || (data != null && data.getGist() != null && data.getGist().getRuntime() == 0)) {
            isVisible = false;
        }

        return isVisible;
    }

    public boolean isStartTimeAvailable(long startTime, long endTime, MetadataMap metadataMap) {

        boolean isPlayable = false;
        long timeToStart = startTime - System.currentTimeMillis();//getTimeIntervalForEvent(startTime, "EEE MMM dd HH:mm:ss");
        long timeEnd = endTime - System.currentTimeMillis();//getTimeIntervalForEvent(endTime, "EEE MMM dd HH:mm:ss");


        /**
         * if start schedule time is available and greater than current time then
         * show below message
         */
        if (startTime > 0 && timeToStart > 0) {
            String scheduleRemianTime = geTimeFormat(timeToStart, true);// appCMSPresenter.getTimeDifference(remainingTime);

            if (platformType == PlatformType.ANDROID) {
                showRentTimeDialog(retry -> {

                }, /*getLanguageResourcesFile().getStringValue(currentContext.getString(R.string.content_time_available_in_for_rent),*/metadataMap.getTimerLabel() + " " +
                        scheduleRemianTime, "", "", "", false, true);
            } else if (platformType == PlatformType.TV) {
                openTVErrorDialog(
                        getLanguageResourcesFile().getStringValue(currentContext.getString(R.string.content_time_available_in_for_rent), scheduleRemianTime),
                        "",
                        false
                );
            }
        } else {
            isPlayable = true;
        }
        return isPlayable;
    }

    public boolean isScheduleVideoPlayable(long startTime, long endTime) {
        boolean isPlayable = false;
        long timeToStart = startTime - System.currentTimeMillis();
        long timeEnd = endTime - System.currentTimeMillis();
        if (startTime > 0 && timeToStart > 0) {
            return true;
        } else
            return false;
    }

    public boolean isScheduleVideoPlayable(long startTime, long endTime, MetadataMap metadataMap) {

        boolean isPlayable = false;
        long timeToStart = startTime - System.currentTimeMillis();//getTimeIntervalForEvent(startTime, "EEE MMM dd HH:mm:ss");
        long timeEnd = endTime - System.currentTimeMillis();//getTimeIntervalForEvent(endTime, "EEE MMM dd HH:mm:ss");


        /**
         * if start schedule time is available and greater than current time then
         * show below message
         */
        if (startTime > 0 && timeToStart > 0) {
            String scheduleRemianTime = geTimeFormat(timeToStart, true);// appCMSPresenter.getTimeDifference(remainingTime);

            if (platformType == PlatformType.ANDROID) {
                if (metadataMap != null) {
                    String message = localisedStrings.getContentAvailableText();
                    if (metadataMap.getTimerLabel() != null)
                        message = metadataMap.getTimerLabel();
                    showRentTimeDialog(retry -> {

                    }, message + " " +
                            scheduleRemianTime, "", "", "", false, true);
                }
            } else if (platformType == PlatformType.TV) {
                openTVErrorDialog(
                        currentContext.getString(R.string.content_time_available_in_for_rent, scheduleRemianTime),
                        "",
                        false
                );
            }
        } else if (endTime > 0 && timeEnd < 0) {
            /**
             * if end  schedule time is available and less than current time then
             * show below message
             */
            if (platformType == PlatformType.ANDROID) {
                showRentTimeDialog(retry -> {

                }, localisedStrings.getContentNotAvailable(), "", "", "", false, true);
            } else {
                openTVErrorDialog(
                        getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.content_time_not_available_in_for_rent)),
                        getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.alert)),
                        false
                );
            }
        } else {
            isPlayable = true;
        }

        return isPlayable;
    }


    public void showSubscribeMessage() {
        if (isUserLoggedIn() && !isUserSubscribed()) {
            showEntitlementDialog(AppCMSPresenter.DialogType.SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                    () -> {
                        setAfterLoginAction(() -> {
                        });
                    }, null);

        } else if (!isUserLoggedIn() && !isUserSubscribed()) {
            showEntitlementDialog(AppCMSPresenter.DialogType.LOGIN_AND_SUBSCRIPTION_PREMIUM_CONTENT_REQUIRED,
                    () -> {
                        setAfterLoginAction(() -> {
                        });
                    }, null);


        }
    }

    private boolean isLocalizationSupported() {
        return appCMSMain != null
                && appCMSMain.getLanguages() != null
                && appCMSMain.getLanguages().getLanguageList() != null
                && appCMSMain.getLanguages().getLanguageList().size() > 0;
    }

    public String getLanguageParamForAPICall() {
        if (isLocalizationSupported() && !TextUtils.isEmpty(defaultLanguage.getLanguageCode())) {
            return defaultLanguage.getLanguageCode();
        } else {
            return "default";
        }
    }

    public String getTopBannerText() {
        StringBuilder message = new StringBuilder();
        if (null != getNavigation()
                && null != getNavigation().getSettings()
                && null != getNavigation().getSettings().getLocalizationMap()
                && null != getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode())
                && null != getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta()
                && null != getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText()) {
            message.append(getNavigation().getSettings().getLocalizationMap().get(getLanguage().getLanguageCode()).getPrimaryCta().getCtaText());

        }
        return message.toString();
    }

    public boolean isMOTVApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_myoutdoortv)) ||
                Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.tv_package_name_myoutdoortv));
    }

    public boolean isKrononApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_kronon));
    }

    public boolean isAFAApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_afa));
    }


    public boolean isMovieSpreeApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_moviespree));
    }

    public boolean isHoichoiApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_hoichoi));
    }

    public boolean isAhaApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_aha));
    }

    public boolean isProthomApp() {
        return Utils.getProperty("AppPackageName", currentContext).equalsIgnoreCase(getCurrentContext().getString(R.string.package_name_prothom));
    }

    public boolean checkPreinstallApp(String pkg) {
        boolean result = false;
        try {
            // Use the interface by Java reflection：miui.os.MiuiInit.isPreinstalledPackage
            Class<?> miui = Class.forName("miui.os.MiuiInit");
            Method method = miui.getMethod("isPreinstalledPackage", String.class);
            // Call interface
            result = (Boolean) method.invoke(null, pkg);
        } catch (Exception e) {
            Log.i(TAG, e.getMessage());
            //e.printStackTrace();
        }
        appPreference.setAppPreinstalled(result);
        sendPreinstallEvent(result);
        return result;
    }

    public void sendPreinstallEvent(boolean isPreInstall) {
        /**
         * send GA event.Need to send only for xiaomi pre install device
         * So check if isPreInstall is true
         */
        if (isPreInstall) {
            sendGaEvent(String.valueOf(isPreInstall), currentActivity.getResources().getString(R.string.ga_preinstall_category), null);
        }
        /**
         * send GA Custom Dimension event on every app launch
         */
        sendGACustomDimension(isPreInstall);
        setFirebaseXiomiUserProperty();
    }

    /**
     * set firebase user property for xiaomi preinstalled device
     */
    public void setFirebaseXiomiUserProperty() {

        if (getmFireBaseAnalytics() != null) {
            getmFireBaseAnalytics().setUserProperty("xiaomipreinstalled", String.valueOf(appPreference.isAppPreinstalled()));
        }
    }

    public void sendGACustomDimension(boolean isPreinstalled) {
        /**
         * Not adding in Firbase event since it is already done in method setFirebaseXiomiUserProperty()
         */
        if (tracker != null) {

            tracker.setScreenName("Home Screen");

            // Send the custom dimension value with a screen view.
            // Note that the value only needs to be sent once.
            tracker.send(new HitBuilders.ScreenViewBuilder()
                    .setCustomDimension(1, String.valueOf(isPreinstalled))
                    .build()
            );

        }
    }

    public void showWebPurchaseDialog() {

        String positiveButtonText = localisedStrings.getSignInText();
        String negativeButtonText = "";

        boolean isPositiveBtnVisible = true;
        boolean isNegativeBtnVisible = false;

        if (!isUserLoggedIn()) {
            isPositiveBtnVisible = true;
            isNegativeBtnVisible = true;
            negativeButtonText = localisedStrings.getCancelText().toUpperCase();
        } else {
            isPositiveBtnVisible = false;
            isNegativeBtnVisible = true;
            negativeButtonText = localisedStrings.getOkText().toUpperCase();
        }

        showRentTimeDialog(retry -> {
            if (retry) {
                setLaunchType(LaunchType.LOGIN_AND_SIGNUP);
                navigateToLoginPage(false);
            }
        }, localisedStrings.getGuestUserSubsctiptionMsgText(), localisedStrings.getSubscriptionMsgHeaderText(), positiveButtonText, negativeButtonText, isNegativeBtnVisible, isPositiveBtnVisible);

    }

    public boolean isShowDialogForWebPurchase() {
        boolean needWebPurchaseDialog = false;
        try {
            needWebPurchaseDialog = appCMSMain.getFeatures().isWebSubscriptionOnly();
        } catch (NullPointerException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return needWebPurchaseDialog;
    }


    private Cities weatherWidgetData = null;

    public void getWeatherFeedXML(String apiUrl, Action1<Cities> weatherData) {
        Log.w(TAG, "Attempting to retrieve getWeatherFeedXML");
        if (currentActivity != null && weatherWidgetData == null) {
            //Log.d(TAG, "Retrieving site.json");
            String url = apiUrl != null && apiUrl.length() > 0 ? apiUrl : currentActivity.getString(R.string.app_cms_weather_feed);

            appCMSWeatherFeedCall.call(url, new Action1<Cities>() {
                @Override
                public void call(Cities ipGeoLocatorResponse) {
                    weatherWidgetData = ipGeoLocatorResponse;
                    weatherData.call(ipGeoLocatorResponse);
                }
            });
        } else {
            weatherData.call(weatherWidgetData);
        }
    }

    public void getTickerFeedXML(String apiUrl, Action1<TickerFeed> tickerFeedAction1) {
        if (currentActivity != null) {
            String url = apiUrl != null && apiUrl.length() > 0 ? apiUrl : currentActivity.getString(R.string.app_cms_ticker_feed);
            appCMSWeatherFeedCall.callTickerFeed(url, tickerFeedAction1::call);
        }
    }


    public void navigateToSeeAllPage(String action,
                                     String filmTitle,
                                     String baseUrl,
                                     String endPoint,
                                     String siteId,
                                     String pagePath,
                                     StringBuffer screenName,
                                     boolean loadFromFile,
                                     boolean useCachedAPI) {
        moduleId = "";
        final String[] replaceModuleId = {""};
        // String[] modules_to_ignore = currentActivity.getResources().getStringArray(R.array.app_cms_modules_to_ignore);

        String apiUrl = getApiUrl(false,
                false,
                false,
                true,
                null,
                baseUrl,
                endPoint,
                siteId,
                pagePath,
                useCachedAPI);

        //int finalCurrentlyPlayingIndex1 = currentlyPlayingIndex;
        //List<String> finalRelateVideoIds1 = relateVideoIds;
        getPageIdContent(apiUrl,
                pagePath,
                null,
                useCachedAPI,
                true,
                new AppCMSPageAPIAction(appbarPresent,
                        false,
                        navbarPresent,
                        null,
                        action,
                        null,
                        filmTitle,
                        pagePath,
                        false,
                        false,
                        null) {

                    final AppCMSPageAPIAction appCMSPageAPIAction = this;

                    @Override
                    public void call(final AppCMSPageAPI appCMSPageAPI) {
                        if (appCMSPageAPI != null) {
                            for (Module module : appCMSPageAPI.getModules()) {
                                ContentDatum data = null;
                                if (module.getContentData() != null && module.getContentData().size() > 0) {
                                    data = module.getContentData().get(0);
                                }
                                if (module.getModuleType() != null && module.getModuleType().equalsIgnoreCase("ShowDetailModule")) {
                                    loadingPage = false;
                                    launchButtonSelectedAction(pagePath,
                                            "showDetailPage",
                                            appCMSPageAPI.getTitle(),
                                            null,
                                            data,
                                            false,
                                            0,
                                            null);
                                    return;
                                } else if (module.getModuleType() != null && module.getModuleType().equalsIgnoreCase("VideoDetailModule")) {
                                    loadingPage = false;
                                    launchButtonSelectedAction(pagePath,
                                            "lectureDetailPage",
                                            appCMSPageAPI.getTitle(),
                                            null,
                                            data,
                                            false,
                                            0,
                                            null);
                                    return;
                                } else if (module.getModuleType() != null && module.getModuleType().equalsIgnoreCase("GeneratedTrayModule")) {
                                    replaceModuleId[0] = module.getId();
                                    CommonUtils.seeAllColumnCount = 1;
                                }
                            }
                            AppCMSPageUI appCMSPageUI = navigationPages.get(appCMSPageAPI.getId());
                            if (appCMSPageUI == null) {
                                MetaPage metaPage = getMetaPage(appCMSPageAPI.getId());
                                if (metaPage != null) {

                                    getAppCMSPage(createPageUiUrl(metaPage),
                                            appCMSPageUIResult -> {
                                                showLoadingDialog(false);
                                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                                    replaceModuleForSeeAllCategory(replaceModuleId[0], appCMSPageUIResult);
                                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                                    appCMSPageAPIAction.setAppCMSPageUI(appCMSPageUIResult);
                                                    launchNavigationPageWithBundleData(appCMSPageAPIAction, appCMSPageAPI, screenType, screenName);
                                                    loadingPage = false;
                                                }

                                            },
                                            false,
                                            false);
                                }
                            } else {
                                replaceModuleForSeeAllCategory(replaceModuleId[0], appCMSPageUI);
                                appCMSPageAPIAction.setAppCMSPageUI(appCMSPageUI);
                                launchNavigationPageWithBundleData(appCMSPageAPIAction, appCMSPageAPI, screenType, screenName);
                                loadingPage = false;
                            }

                        } else {
                            showLoadingDialog(false);
                            loadingPage = false;
                        }
                    }
                });

    }

    public void replaceModuleForSeeAllCategory(String moduleId, AppCMSPageUI appCMSPageUI) {
        if (moduleId != null && !TextUtils.isEmpty(moduleId)) {
            for (ModuleList moduleList : appCMSPageUI.getModuleList()) {
                if (moduleList.getId().equalsIgnoreCase(moduleId)) {
                    moduleList.setBlockName("categoryDetail02");
                    moduleList.setView("AC CategoryDetail 02");
                    moduleList.setType("AC CategoryDetail 02");

                    break;
                }
            }
        } else {
            CommonUtils.seeAllColumnCount = 2;
        }
    }

    public void navigateToSeeAllCategoryPage(Module moduleApi, String action) {

        if (currentActivity != null) {
            showLoader();
            final AppCMSActionType actionType = actionToActionTypeMap.get(action);
            AppCMSPageUI appCMSPageUI = actionToPageMap.get(action);

            if (appCMSPageUI == null) {
                MetaPage metaPage = actionTypeToMetaPageMap.get(actionType);
                if (metaPage != null) {
                    getAppCMSPage(createPageUiUrl(metaPage),
                            appCMSPageUIResult -> {
                                if (appCMSPageUIResult != null && metaPage.getPageId() != null) {
                                    navigationPages.put(metaPage.getPageId(), appCMSPageUIResult);
                                    String updatedAction = pageNameToActionMap.get(metaPage.getPageFunction().trim());
                                    if (updatedAction != null && actionToPageMap.get(updatedAction) == null) {
                                        actionToPageMap.put(updatedAction, appCMSPageUIResult);
                                    }
                                    navigateToSeeAllCategoryPage(moduleApi, action);
                                }
                            },
                            loadFromFile,
                            false);
                }
                stopLoader();
            } else {
                AppCMSPageAPI pageAPI = convertToAppCMSPageAPIForSeeAllCategory(moduleApi);
                getPageAPILruCache().put(moduleApi.getId(), pageAPI);
                Bundle args = getPageActivityBundle(currentActivity,
                        appCMSPageUI,
                        pageAPI,
                        moduleApi.getId(),
                        moduleApi.getName(),
                        moduleApi.getId(),
                        moduleApi.getName(),
                        loadFromFile,
                        false,
                        false,
                        false,
                        false,
                        null,
                        ExtraScreenType.NONE,
                        null,
                        false, null);
                if (args != null) {
                    Intent intent =
                            new Intent(AppCMSPresenter
                                    .PRESENTER_NAVIGATE_ACTION);
                    intent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key),
                            currentActivity.getPackageName());
                    intent.putExtra(currentActivity.getString(R.string.app_cms_bundle_key),
                            args);
                    currentActivity.sendBroadcast(intent);
                }
            }
        }

    }

    private AppCMSPageAPI convertToAppCMSPageAPIForSeeAllCategory(Module moduleApi) {
        AppCMSPageAPI appCMSPageAPI = new AppCMSPageAPI();
        Module module = moduleApi;
        appCMSPageAPI.setId(moduleApi.getId());
        List<Module> moduleList = new ArrayList<>();
        moduleList.add(module);
        appCMSPageAPI.setModules(moduleList);
        return appCMSPageAPI;
    }

    public long getAPICacheTime() {
        if (appCMSMain != null && appCMSMain.getCacheInterval() != 0) {
            return appCMSMain.getCacheInterval();
        } else {
            return 60 * 1 * 30;
        }
    }

    /**
     * By default landscape play is true .if portrait view is true from template builder then enable portrait player view
     *
     * @return
     */
    public boolean isPlayerLandscapeOnly() {
        boolean isLandscapeOnly = true;

        if (appCMSMain != null && appCMSMain.getFeatures() != null && appCMSMain.getFeatures().isPortraitViewing()) {
            isLandscapeOnly = false;
        }
        if (BaseView.isTablet(getCurrentActivity())) {
            if (getAppCMSMain() != null && getAppCMSMain().getFeatures() != null && getAppCMSMain().getFeatures().getOrientation() != null
                    && getAppCMSMain().getFeatures().getOrientation().getTablet() != null
                    && getAppCMSMain().getFeatures().getOrientation().getTablet().isLandscape())
                isLandscapeOnly = true;
            else
                isLandscapeOnly = false;
        }

        return isLandscapeOnly;
    }

    public void sendAppsFlyerEvents() {
        //   appPreference.setAppOpenCount();
        if (!appPreference.getAppsflyerEventFirstAppOpenSent()) {
            appPreference.setAppsflyerEventFirstAppOpenSent(true);
            AppsFlyerUtils.firstAppOpen(getCurrentContext(), getLoggedInUser());
        }
        if ((appPreference.getAppOpenCount() == 1 || appPreference.getAppOpenCount() == 2)) {
            if (!appPreference.getAppsflyerEventEngagedUserSent()) {
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    int secCount = 0;

                    public void run() {
                        handler.postDelayed(this, 1000 * 1);
                        secCount++;
                        if (secCount == 120) {
                            appPreference.setAppsflyerEventEngagedUserSent(true);
                            AppsFlyerUtils.engageInstaller(getCurrentContext(), getLoggedInUser());
                            handler.removeCallbacks(this);
                        }
                    }
                }, 1000 * 1);

            }
        }
    }

    public void sendInviteEvent(String medium, String countOfReferrals, String successfulInstalls, String successfulSubscription) {
        if (isCleverTapAvailable)
            cleverTapSDK.sendInviteEvent(countOfReferrals, medium, successfulInstalls, successfulSubscription);
    }

    public Module convertToVideoPlaylistAppCMSPageAPI(Module moduleApi) {
        if (moduleApi != null && moduleApi.getContentData() != null) {
            Module module = new Module();
            List<ContentDatum> data = new ArrayList<>();

            ContentDatum contentDatum = new ContentDatum();
            contentDatum.setGist(moduleApi.getContentData().get(0).getGist());
            contentDatum.setId(moduleApi.getContentData().get(0).getId());
            contentDatum.setVideoList(moduleApi.getContentData().get(0).getVideoList());
            data.add(contentDatum);

            if (moduleApi.getContentData().get(0).getVideoList() != null) {
                for (VideoList records : moduleApi.getContentData().get(0).getVideoList()) {
                    data.add(records.convertToContentDatum());
                }
            }

            module.setContentData(data);
            return module;
        }
        return moduleApi;
    }

    public boolean isPortraitViewing() {
        return getAppCMSMain() != null
                && getAppCMSMain().getFeatures() != null
                && !getAppCMSMain().getFeatures().isPortraitViewing();
    }

    public long getSplashPlayerPos() {
        return splashPlayerPos;
    }

    public void setSplashPlayerPos(long splashPlayerPos) {
        this.splashPlayerPos = splashPlayerPos;
    }

    long splashPlayerPos = 0;

    public int getLoginSignupSelectionPos() {
        return loginSignupSelectionPos;
    }

    public void setLoginSignupSelectionPos(int loginSignupSelectionPos) {
        this.loginSignupSelectionPos = loginSignupSelectionPos;
    }

    int loginSignupSelectionPos = 0;

    public LruCache<String, List<?>> getFilterCache() {
        return filterCache;
    }

    LruCache<String, List<?>> filterCache = new LruCache<>(10);

    public String getBrowseCategorySelection() {
        return browseCategorySelection;
    }

    public void setBrowseCategorySelection(String browseCategorySelection) {
        this.browseCategorySelection = browseCategorySelection;
    }

    String browseCategorySelection;

    public String getBrowseCategorySelected() {
        return browseCategorySelected;
    }

    public void setBrowseCategorySelected(String browseCategorySelected) {
        this.browseCategorySelected = browseCategorySelected;
    }

    String browseCategorySelected;

    @BindView(R.id.sortRadioGroup)
    RadioGroup rgSort;
    View sortDialogView;

    public void showBrowseSortDialog(View view) {
        LayoutInflater inflater = (LayoutInflater) view.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        if (sortDialogView == null)
            sortDialogView = inflater.inflate(R.layout.layout_browse_sort, null);
        ButterKnife.bind(this, sortDialogView);

        PopupWindow mPopupWindow = new PopupWindow(
                sortDialogView,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
        );
        if (Build.VERSION.SDK_INT >= 21) {
            mPopupWindow.setElevation(5.0f);
        }
        mPopupWindow.setOutsideTouchable(true);
        mPopupWindow.setFocusable(true);
        int[] viewLocation = new int[2];
        view.getLocationOnScreen(viewLocation);
        if (!mPopupWindow.isShowing()) {
            mPopupWindow.showAtLocation(view, Gravity.NO_GRAVITY, viewLocation[0], viewLocation[1] + view.getHeight());
        }
        rgSort.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                rgSort.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(RadioGroup group, int checkedId) {
                    }
                });
            }
        });

    }

    List<Person> filteredClasses;

    public List<Person> getFilteredClasses() {
        return filteredClasses;
    }

    public void setFilteredClasses(List<Person> filteredClasses) {
        this.filteredClasses = filteredClasses;
    }

    public Map<String, Object> getAppsFlyerConversionData() {
        return appsFlyerConversionData;
    }

    public void setAppsFlyerConversionData(Map<String, Object> appsFlyerConversionData) {
        this.appsFlyerConversionData = appsFlyerConversionData;
    }

    Map<String, Object> appsFlyerConversionData;

    public AppPreference getAppPreference() {
        return appPreference;
    }

    public Map<String, ContentDatum> getUserHistoryData() {
        return userHistoryData;
    }

    public List<String> getFilmsInUserWatchList() {
        return temporaryWatchlist;
    }

    public NavigationUser findHistory() {
        NavigationUser history = null;
        for (int i = 0; i < getNavigation().getNavigationUser().size(); i++) {
            if (getNavigation().getNavigationUser().get(i).getTitle().contains("History"))
                return getNavigation().getNavigationUser().get(i);
        }
        return history;
    }

    public NavigationUser findWatchlist() {
        NavigationUser watchlist = null;
        for (int i = 0; i < getNavigation().getNavigationUser().size(); i++) {
            if (getNavigation().getNavigationUser().get(i).getTitle().contains("Watchlist") ||
                    getNavigation().getNavigationUser().get(i).getTitle().contains("Favorite") ||
                    getNavigation().getNavigationUser().get(i).getTitle().contains("Bookmark"))
                return getNavigation().getNavigationUser().get(i);
        }
        return watchlist;
    }

    public void setLoginFromNavPage(boolean loginFromNavPage) {
        this.loginFromNavPage = loginFromNavPage;
    }

    public static void showListSlectionDialog(ArrayList<String> content, AppCMSPresenter
            appCMSPresenter, String title, TextView textView) {
        ListSelectionDialog selectionDialog = new ListSelectionDialog();
        Bundle b = new Bundle();
        b.putStringArrayList("content", content);
        b.putString("title", title);
        selectionDialog.setArguments(b);
        selectionDialog.show(appCMSPresenter.getCurrentActivity().getSupportFragmentManager(), "");
        selectionDialog.setSelectedValue(new Action1<String>() {
            @Override
            public void call(String s) {
                textView.setText(s);
                selectionDialog.dismiss();
            }
        });
    }

    public static class DatePickerFragment extends DialogFragment
            implements DatePickerDialog.OnDateSetListener {


        Action1<String> selectedDate;

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            final Calendar c = Calendar.getInstance();
            int year = c.get(Calendar.YEAR);
            int month = c.get(Calendar.MONTH);
            int day = c.get(Calendar.DAY_OF_MONTH);
            year = year - 10;
            DatePickerDialog dialog = new DatePickerDialog(getActivity(), this, year, month, day);
            Calendar c2 = Calendar.getInstance();
            c2.set(year, month, day);
            dialog.getDatePicker().setMaxDate(c2.getTimeInMillis());
            return dialog;
        }

        public void onDateSet(DatePicker view, int year, int month, int day) {
            selectedDate.call(month + "/" + day + "/" + year);
        }

        public void setSelectedDate(Action1<String> selectedDate) {
            this.selectedDate = selectedDate;
        }

    }

    public long getDifferenceDays(Date d1, Date d2) {
        long diff = d2.getTime() - d1.getTime();
        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
    }

    public boolean isNewUser() {
        return newUser;
    }

    public void setNewUser(boolean newUser) {
        this.newUser = newUser;
    }

    boolean newUser;

    public boolean isItemViewClicked() {
        return itemViewClicked;
    }

    public void setItemViewClicked(boolean itemViewClicked) {
        this.itemViewClicked = itemViewClicked;
    }

    public String getApiBaseUrl() {
        String baseUrl = appCMSMain.getApiBaseUrl();
        if (isHardCodedUrlNeeded) {
            baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha); //"https://prod-api-cached-2.viewlift.com";
            if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null
                    && appCMSMain.getApiBaseUrl().contains("staging-api")) {
                baseUrl = currentContext.getString(R.string.hardcoded_url_hoichoi_aha_staging);
            }
        } else {
            baseUrl = appCMSMain.getApiBaseUrl();
            if (appCMSMain != null && appCMSMain.getApiBaseUrl() != null
                    && appCMSMain.getApiBaseUrl().contains("staging-api")
                    && appCMSMain.getApiBaseUrlCached() != null) {
                baseUrl = appCMSMain.getApiBaseUrlCached();
            }
        }
        return baseUrl;
    }

    private boolean itemViewClicked;

    int offset = 0;

    private String findPagePathFromNavigation(String pageId) {
        String pagePath = null;
        for (int i = 0; i < navigation.getNavigationPrimary().size(); i++) {
            if (navigation.getNavigationPrimary().get(i).getPageId().equalsIgnoreCase(pageId))
                return navigation.getNavigationPrimary().get(i).getUrl();
        }
        return pagePath;
    }

    public void getPaginatedModuleData(String pageId, Filters filters, String moduleId, Consumer<AppCMSPageAPI> moduleData) {
        String path = findPagePathFromNavigation(pageId);
        if (path == null)
            return;

        int limit = filters.getLimit();
        offset += limit;
        String apiUrl = currentContext.getString(R.string.app_cms_module_content_paginated_api_url,
                appApiBaseUrl(),
                appCMSMain.getInternalName(),
                path,
                getLanguageParamForAPICall(),
                CommonUtils.getCountryCodeFromAuthToken(getAuthToken()),
                moduleId, String.valueOf(offset));
        getPageIdContent(apiUrl,
                pageId,
                null,
                false,
                true,
                new AppCMSPageAPIAction(true,
                        false,
                        true,
                        null,
                        "",
                        moduleId,
                        "",
                        pageId,
                        false,
                        false,
                        null) {
                    @Override
                    public void call(final AppCMSPageAPI appCMSPageAPI) {
                        if (appCMSPageAPI != null && appCMSPageAPI.getModules() != null &&
                                appCMSPageAPI.getModules().get(0).getContentData() != null &&
                                appCMSPageAPI.getModules().get(0).getContentData().size() > 0 &&
                                appCMSPageAPI.getModules().get(0).hasNext()) {
                            try {
                                moduleData.accept(appCMSPageAPI);
                            } catch (Throwable throwable) {
                                throwable.printStackTrace();
                            }
                        } else {
                            offset = 0;
                            isLastPage = true;
                            try {
                                moduleData.accept(null);
                            } catch (Throwable throwable) {
                                throwable.printStackTrace();
                            }
                        }
                        loadingPage = false;
                    }
                });
    }


    public void getSeeAllCategory(Filters filters, String moduleId, Action1<AppCMSPageAPI> action1) {
        String baseUrl = getApiBaseUrl();

        int limit = filters.getLimit();
        if (getSeeAllModule() != null && getSeeAllModule().getSettings() != null && getSeeAllModule().getSettings().getSeeAllPermalink() != null) {
            offset += limit;
            String endPoint = actionToPageAPIUrlMap.get(currentContext.getString(R.string.app_cms_see_all_category_action));
            String apiUrl = currentContext.getString(R.string.app_cms_category_api_url,
                    baseUrl,
                    endPoint,
                    getSeeAllModule().getSettings().getSeeAllPermalink(),
                    appCMSMain.getInternalName(),
                    String.valueOf(offset),
                    getLanguageParamForAPICall(),
                    CommonUtils.getCountryCodeFromAuthToken(getAuthToken()),
                    moduleId);
            //apiUrl = apiUrl + "&countryCode=" + CommonUtils.getCountryCodeFromAuthToken(getAuthToken());
            getPageIdContent(apiUrl,
                    getSeeAllModule().getSettings().getSeeAllPermalink(),
                    null,
                    false,
                    true,
                    new AppCMSPageAPIAction(true,
                            false,
                            true,
                            null,
                            "",
                            getSeeAllModule().getId(),
                            "",
                            getSeeAllModule().getSettings().getSeeAllPermalink(),
                            false,
                            false,
                            null) {

                        @Override
                        public void call(final AppCMSPageAPI appCMSPageAPI) {
                            if (appCMSPageAPI != null && appCMSPageAPI.getModules() != null &&
                                    appCMSPageAPI.getModules().get(0).getContentData() != null &&
                                    appCMSPageAPI.getModules().get(0).getContentData().size() > 0 &&
                                    appCMSPageAPI.getModules().get(0).hasNext()) {
                                /*if ((appCMSPageAPI.getModules().get(0).getContentData().size() < limit))
                                    isLastPage = true;*/
                                action1.call(appCMSPageAPI);

                            } else {
                                offset = 0;
                                isLastPage = true;
                                action1.call(null);
                            }

                            loadingPage = false;
                        }
                    });
        }

    }


    public void getTVSeeAllCategory(int limit, String moduleId, Action1<AppCMSPageAPI> action1) {
        if (getSeeAllModule() != null && getSeeAllModule().getSettings() != null && getSeeAllModule().getSettings().getSeeAllPermalink() != null) {
            offset += limit;
            String endPoint = actionToPageAPIUrlMap.get(currentContext.getString(R.string.app_cms_see_all_category_action));
            String apiUrl;
            if (isUserLoggedIn()) {
                apiUrl = currentContext.getString(R.string.app_cms_see_all_category_api_url_with_user_id,
                        appCMSMain.getApiBaseUrlCached(),
                        endPoint,
                        getSeeAllModule().getSettings().getSeeAllPermalink(),
                        appCMSMain.getInternalName(),
                        "true",
                        String.valueOf(offset),
                        getLanguageParamForAPICall(),
                        CommonUtils.getCountryCodeFromAuthToken(getAuthToken()),
                        /*moduleId,*/
                        getLoggedInUser());
            } else {
                apiUrl = currentContext.getString(R.string.app_cms_see_all_category_api_url,
                        appCMSMain.getApiBaseUrlCached(),
                        endPoint,
                        getSeeAllModule().getSettings().getSeeAllPermalink(),
                        appCMSMain.getInternalName(),
                        "true",
                        String.valueOf(offset),
                        getLanguageParamForAPICall(),
                        CommonUtils.getCountryCodeFromAuthToken(getAuthToken())/*,
                        moduleId*/);
            }
            getPageIdContent(apiUrl,
                    getSeeAllModule().getSettings().getSeeAllPermalink(),
                    null,
                    false,
                    true,
                    new AppCMSPageAPIAction(true,
                            false,
                            true,
                            null,
                            "",
                            getSeeAllModule().getId(),
                            "",
                            getSeeAllModule().getSettings().getSeeAllPermalink(),
                            false,
                            false,
                            null) {

                        @Override
                        public void call(final AppCMSPageAPI appCMSPageAPI) {
                            action1.call(appCMSPageAPI);
                            loadingPage = false;
                        }
                    });
        }

    }

    private Module seeAllModule;
    private boolean isLastPage;

    public Module getSeeAllModule() {
        return seeAllModule;
    }

    public void setSeeAllModule(Module seeAllModule) {
        this.seeAllModule = seeAllModule;
    }

    public boolean isLastPage() {
        return isLastPage;
    }

    public void setLastPage(boolean lastPage) {
        isLastPage = lastPage;
    }

    public int getOffset() {
        return offset;
    }

    public void setOffset(int offset) {
        this.offset = offset;
    }

    public ModuleList getRelatedModuleForBlock(List<ModuleList> modulesList, String blockName) {

        if (modulesList == null || appCMSAndroidModules == null || appCMSAndroidModules.getModuleListMap() == null)
            return null;

        List<String> modulesToIgnoreList;
        if (getAppCMSMain().isMonetizationModelEnabled()) {
            modulesToIgnoreList = Arrays.asList(getCurrentContext().getResources().getStringArray(R.array.app_cms_deprecate_modules_ignore));
        } else {
            modulesToIgnoreList = Arrays.asList(getCurrentContext().getResources().getStringArray(R.array.app_cms_modules_to_ignore));
        }

        for (ModuleList moduleInfo : modulesList) {
            ModuleList module = appCMSAndroidModules.getModuleListMap().get(moduleInfo.getBlockName());
            boolean ignoreModule = module != null && modulesToIgnoreList.contains(module.getType());
            if (!ignoreModule && moduleInfo.getBlockName() != null && moduleInfo.getBlockName().equalsIgnoreCase(blockName)) {
                return moduleInfo;
            }
        }
        return null;
    }

    public Module matchModuleAPIToModuleUI(ModuleList module, AppCMSPageAPI appCMSPageAPI) {
        if (appCMSPageAPI != null && appCMSPageAPI.getModules() != null) {
            for (Module moduleAPI : appCMSPageAPI.getModules()) {
                if (module != null && module.getId() != null && module.getId().equals(moduleAPI.getId())) {
                    return moduleAPI;
                }
                if (!TextUtils.isEmpty(moduleAPI.getModuleType()) && moduleAPI.getModuleType().equalsIgnoreCase("ShowDetailModule")) {
                    return moduleAPI;
                }
            }
        }
        return null;
    }

    public Map<String, Object> convertClassToMap(Object obj) throws
            IllegalAccessException,
            IllegalArgumentException,
            InvocationTargetException {
        Class<?> pomclass = obj.getClass();
        pomclass = obj.getClass();
        Method[] methods = obj.getClass().getMethods();


        Map<String, Object> map = new HashMap<String, Object>();
        for (Method m : methods) {
            if (m.getName().startsWith("get") && !m.getName().startsWith("getClass")) {
                Object value = m.invoke(obj);
                map.put(m.getName().substring(3), value);
            }
        }
        return map;
    }

    public Module getModuleApi() {
        return moduleApi;
    }

    public void setModuleApi(Module moduleApi) {
        this.moduleApi = moduleApi;
    }

    Module moduleApi;

    public MetadataMap getMetadataMap() {
        return metadataMap;
    }

    public void setMetadataMap(MetadataMap metadataMap) {
        this.metadataMap = metadataMap;
    }

    MetadataMap metadataMap;


    public LocalizationResult getGenericMessagesLocalizationMap() {
        if (getAppCMSMain() != null
                && getAppCMSMain().getGenericMessages() != null
                && getAppCMSMain().getGenericMessages().getLocalizationMap() != null
                && getAppCMSMain().getGenericMessages().getLocalizationMap().get(getLanguage().getLanguageCode()) != null) {
            return getAppCMSMain().getGenericMessages().getLocalizationMap().get(getLanguage().getLanguageCode());
        }
        return null;
    }

    private String createPageUiUrl(MetaPage metaPage) {
        if (getPlatformType() == PlatformType.TV)
            return getCurrentContext().getString(R.string.page_ui_url_firetv, Utils.getProperty("BaseUrl", getCurrentContext()),
                    Utils.getProperty("SiteId", getCurrentContext()), metaPage.getPageId(), metaPage.getVersion());
        else
            return getCurrentContext().getString(R.string.page_ui_url, Utils.getProperty("BaseUrl", getCurrentContext()),
                    Utils.getProperty("SiteId", getCurrentContext()), metaPage.getPageId(), metaPage.getVersion());
    }

    public boolean isValidEmail(CharSequence target) {
        return (!TextUtils.isEmpty(target) && android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches());
    }

    public LocalizationResult getLocalizationResult() {
        return localizationResult;
    }

    public GenericMessages getGenericMessages() {
        return genericMessages;
    }


    public boolean isAppbarPresent() {
        return appbarPresent;
    }

    public void setAppbarPresent(boolean appbarPresent) {
        this.appbarPresent = appbarPresent;
    }

    public boolean isNavbarPresent() {
        return navbarPresent;
    }

    public void setNavbarPresent(boolean navbarPresent) {
        this.navbarPresent = navbarPresent;
    }

    public void createJusPayOrder(String mobileNumber, String planId, Action1<AppCMSUserSubscriptionPlanResult> juspayOrderAction) {
        if (jusPayUtils != null) {
            jusPayUtils.createJusPayOrder(mobileNumber, planId, skuToPurchase, currencyCode, juspayOrderAction);
        }
    }

    public void createJusPayOrderTVOD(Action1<TvodPurchaseResponse> juspayOrderAction) {
        ContentRequest contentRequest = null;
        if (contentToPurchase.isSeriesPurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_series), contentToPurchase.getSeriesId(), null, null, contentToPurchase.getSeriesId(), "HD");
        else if (contentToPurchase.isSeasonPurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.app_cms_season_content_type), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getSeasonId(), "HD");
        else if (contentToPurchase.isBundlePurchase())
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_bundle), null, null, contentToPurchase.getVideoId(), contentToPurchase.getVideoId(), "HD");
        else
            contentRequest = new ContentRequest(currentActivity.getString(R.string.content_type_video), contentToPurchase.getSeriesId(), contentToPurchase.getSeasonId(), null, contentToPurchase.getVideoId(), "HD");
        String purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[0];
        if (contentToPurchase.isRent())
            purchaseType = currentContext.getResources().getStringArray(R.array.purchase_type)[1];
        InAppPurchase inAppPurchase = new InAppPurchase();
        inAppPurchase.setTransaction("juspay");
        inAppPurchase.setPurchaseType(purchaseType);
        inAppPurchase.setOfferCode(jusPayUtils.getOfferCode());
        inAppPurchase.setPlatform(getPlatformValueForAPI());
        inAppPurchase.setSiteId(Utils.getProperty("SiteId", currentActivity));
        inAppPurchase.setUserId(getLoggedInUser());
        inAppPurchase.setSite(appCMSMain.getInternalName());
        inAppPurchase.setDevice(getDeviceValueForAPI());
        inAppPurchase.setContentRequest(contentRequest);
        inAppPurchase.setRedirectUrl(Base64.encodeToString(appCMSMain.getDomainName().getBytes(), Base64.NO_WRAP));
        JuspayData data = new JuspayData();
        data.setMobileNumber(getUserPhoneNumber());
        inAppPurchase.setJuspayData(data);
        PurchaseProductCall productCall = new PurchaseProductCall(retrofit);
        String storeCountryCode = CommonUtils.getPlay_Store_Country_Code(this, Utils.getCountryCode());
        productCall.call(currentActivity.getString(R.string.app_cms_purchase_product_api_url,
                appCMSMain.getApiBaseUrl(), storeCountryCode), apikey,
                getAuthToken(), inAppPurchase, response -> {
                    stopLoader();
                    if (response != null)
                        juspayOrderAction.call(response);

                });
    }

    ItemAdapter seasonBottomSheetAdapter;
    List<Season_> seasonData;

    public void setBottomSheetDialogdata(List<Season_> seasonData) {
        this.seasonData = seasonData;
    }

    public List<Season_> getSeasonList() {
        return seasonData;
    }

    public void setBottomSheetDialog(Context context, ConstraintLayout constraintLayout) {
        BottomSheetDialog mBottomSheetDialog = new BottomSheetDialog(context);
        View sheetView = ((LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.fragment_history_bottom_sheet, null);
        RecyclerView recyclerView = sheetView.findViewById(R.id.recyclerView);
        TextView sheetTitle = sheetView.findViewById(R.id.sheetTitle);
        sheetTitle.setTextColor(Color.parseColor(getAppCtaBackgroundColor()));
        recyclerView.setHasFixedSize(true);
        //if (seasonBottomSheetAdapter == null)
        seasonBottomSheetAdapter = new ItemAdapter(seasonData, context, this, mBottomSheetDialog, constraintLayout);
        seasonBottomSheetAdapter.setmBottomSheetDialog(mBottomSheetDialog);
        recyclerView.setLayoutManager(new LinearLayoutManager(context));
        recyclerView.setAdapter(seasonBottomSheetAdapter);
        mBottomSheetDialog.setContentView(sheetView);
        mBottomSheetDialog.show();
    }

    ContentDatum showdetailsContenData = null;

    public void setshowdetailsClickPostionDate(ContentDatum showdetailsContenData) {
        this.showdetailsContenData = showdetailsContenData;
    }

    public ContentDatum getshowdetailsContenData() {
        return showdetailsContenData;
    }

    List<ContentDatum> relatedVideosadapterData = null;

    public void setRelatedVideos(List<ContentDatum> relatedVideosadapterData) {
        this.relatedVideosadapterData = relatedVideosadapterData;
        //  SeasonTabSelectorBus.instanceOf().setTab(relatedVideosadapterData);
    }

    public void getRelatedVideos() {
        if (relatedVideosadapterData == null)
            relatedVideosadapterData = new ArrayList<>();
        SeasonTabSelectorBus.instanceOf().setTab(relatedVideosadapterData);
    }

    public List<ContentDatum> getEpisodeRelatedVideos() {
        return relatedVideosadapterData;
    }

    public List<ContentDatum> getSeasonEpisodeAdapterData() {
        return seasonEpisodeAdapterData;
    }

    public void setSeasonEpisodeAdapterData(List<ContentDatum> seasonEpisodeAdapterData) {
        this.seasonEpisodeAdapterData = seasonEpisodeAdapterData;
    }

    List<ContentDatum> seasonEpisodeAdapterData = null;

    public void getseasonEpisodeRefreshList() {
        SeasonTabSelectorBus.instanceOf().setTab(seasonEpisodeAdapterData);
    }

    Boolean userAbleToDownload;

    public Boolean getUserAbleToDownload() {
        return userAbleToDownload;
    }

    public void setUserAbleToDownload(Boolean userAbleToDownload) {
        this.userAbleToDownload = userAbleToDownload;
    }

    private void updateDownloadView(View view) {
        TextView UpdateDownloadTxt = view.findViewById(R.id.downloadButton);
        if (UpdateDownloadTxt != null)
            UpdateDownloadTxt.setText(localisedStrings.getDownloadingLabelText());
    }

    String episodeId = null;

    public void setEpisodeId(String seriesID) {
        this.episodeId = seriesID;
    }

    public String getseriesID() {
        return episodeId;
    }

    public String getShowDeatil06TrailerPlayerKey() {
        return showDeatil06TrailerPlayerKey;
    }

    public void setShowDeatil06TrailerPlayerKey(String showDeatil06TrailerPlayerKey) {
        this.showDeatil06TrailerPlayerKey = showDeatil06TrailerPlayerKey;
    }

    Gist ShowDetailsGist = null;

    public Gist getShowDetailsGist() {
        return ShowDetailsGist;
    }

    public void setShowDetailsGist(Gist ShowDetailsGist) {
        this.ShowDetailsGist = ShowDetailsGist;
    }

    Boolean playshareControl = false;

    public Boolean getPlayshareControl() {
        return playshareControl;
    }

    public void setPlayshareControl(Boolean playshareControl) {
        this.playshareControl = playshareControl;
    }

    String episodeTrailerID = "";

    public String getEpisodeTrailerID() {
        return episodeTrailerID;
    }

    public void setEpisodeTrailerID(String episodeTrailerID) {
        this.episodeTrailerID = episodeTrailerID;
    }

    String episodePromoID = "";

    public String getEpisodePromoID() {
        return episodePromoID;
    }

    public void setEpisodePromoID(String episodePromoID) {
        this.episodePromoID = episodePromoID;
    }

    String watchlistStatus = "";

    public String getWatchlistStatus() {
        return watchlistStatus;
    }

    public void setWatchlistStatus(String watchlistStatus) {
        this.watchlistStatus = watchlistStatus;
    }

    String downloadStatus = "";

    public String getDownloadStatus() {
        return downloadStatus;
    }

    public void setDownloadStatus(String downloadStatus) {
        this.downloadStatus = downloadStatus;
    }

    Boolean isSegmentListSelcted = false;

    public Boolean getSegmentListSelcted() {
        return isSegmentListSelcted;
    }

    public void setSegmentListSelcted(Boolean segmentListSelcted) {
        isSegmentListSelcted = segmentListSelcted;
    }

    Boolean isEpisodeListSelcted = false;

    public Boolean getEpisodeListSelcted() {
        return isEpisodeListSelcted;
    }

    public void setEpisodeListSelcted(Boolean episodeListSelcted) {
        isEpisodeListSelcted = episodeListSelcted;
    }

    public CustomVideoPlayerView getTrailerPlayerView() {
        return trailerPlayerView;
    }

    public void setTrailerPlayerView(CustomVideoPlayerView trailerPlayerView) {
        this.trailerPlayerView = trailerPlayerView;
    }

    Boolean isPromoPage = false;

    public void setIsPromoPage(Boolean isPromoPage) {
        this.isPromoPage = isPromoPage;
    }

    public boolean getIsPromoPage() {
        return isPromoPage;
    }

    Boolean isDefaultTrailerPlay = false;

    public Boolean getDefaultTrailerPlay() {
        return isDefaultTrailerPlay;
    }

    public void setDefaultTrailerPlay(Boolean defaultTrailerPlay) {
        isDefaultTrailerPlay = defaultTrailerPlay;
    }

    SimpleExoPlayer playerView = null;

    public SimpleExoPlayer setLaunchingVideoPlayerView() {
        return playerView;
    }

    public void setLaunchingVideoPlayerView(SimpleExoPlayer playerView) {
        this.playerView = playerView;
    }

    public void setAppOrientation() {
        if (!(getCurrentActivity() instanceof AutoplayActivity)) {// this was placed because of autoplay04 shall be always in landscape mode
            if (!BaseView.isTablet(getCurrentActivity())) {
                restrictPortraitOnly();
            } else if (BaseView.isTablet(getCurrentActivity())) {
                if (getAppCMSMain() == null) {
                    unrestrictPortraitOnly();
                } else {
                    Tablet tablet = getAppCMSMain().getFeatures().getOrientation().getTablet();
                    if (tablet.isLandscape() && tablet.isPortrait())
                        unrestrictPortraitOnly();
                    else if (tablet.isLandscape())
                        restrictLandscapeOnly();
                    else if (tablet.isPortrait())
                        restrictPortraitOnly();
                    else
                        unrestrictPortraitOnly();
                }
            }
        }
    }

    public boolean isPromoValidationRequired() {
        return getPlatformType() == PlatformType.TV && isNewsTemplate();
    }

    //Below two flags are used to show recomendation dialog after subscription followed by signup.
    private boolean isAmazonPurchaseInitiated = false;
    private boolean isSignupFlag = false;
    private boolean isViewPlanPageOpenFromADialog = false;

    public boolean isAmazonPurchaseInitiated() {
        return isAmazonPurchaseInitiated;
    }

    public void setAmazonPurchaseInitiated(boolean amazonPurchaseInitiated) {
        isAmazonPurchaseInitiated = amazonPurchaseInitiated;
    }

    public boolean isSignupFlag() {
        return isSignupFlag;
    }

    public void setSignupFlag(boolean signupFlag) {
        isSignupFlag = signupFlag;
    }

    public boolean isViewPlanPageOpenFromADialog() {
        return isViewPlanPageOpenFromADialog;
    }

    public void setViewPlanPageOpenFromADialog(boolean viewPlanPageOpenFromADialog) {
        isViewPlanPageOpenFromADialog = viewPlanPageOpenFromADialog;
    }

    private String amazonReceiptId, amazonUserId, storeCountryCode;

    public void setAmazonPurchaseDetails(String amazonReceiptId, String amazonUserId, String
            storeCountryCode) {
        this.amazonReceiptId = amazonReceiptId;
        this.amazonUserId = amazonUserId;
        this.storeCountryCode = storeCountryCode;
    }

    /**
     * Sync current subscription with backend
     */
    public void syncSubscription() {
        if (!isUserLoggedIn())
            return;

        String activeInAppSubscriptionReceipt = appPreference.getActiveSubscriptionReceipt();
        if (TextUtils.isEmpty(activeInAppSubscriptionReceipt)) {
            Log.d(TAG, "syncSubscription() : " + "We do not have IAP receipt");
            return;
        }
        String planToPurchase = appPreference.getActiveSubscriptionId();
        String skuToPurchase = appPreference.getActiveSubscriptionSku();

        if (isUserSubscribed()) {
            //Make a validation call with subscription data
            validateReceipt(activeInAppSubscriptionReceipt, skuToPurchase);
        } else {
            // user is not subscribe but we have subscription details and receipt
            // make a subscription call.
            if (!TextUtils.isEmpty(planToPurchase) && !TextUtils.isEmpty(skuToPurchase) && !TextUtils.isEmpty(activeInAppSubscriptionReceipt)) {
                subscribe(planToPurchase, skuToPurchase, activeInAppSubscriptionReceipt);
            }
        }

    }

    /**
     * Description : validate current receipt with backend
     *
     * @param activeSubscriptionReceipt
     * @param skuToPurchase
     */

    public void validateReceipt(String activeSubscriptionReceipt, String skuToPurchase) {

        if (appCMSMain == null)
            return;

        String url = currentActivity.getString(R.string.app_cms_google_play_subscription_validation_api_url,
                appCMSMain.getApiBaseUrl(),
                appCMSMain.getInternalName());

        int subscriptionCallType = R.string.app_cms_subscription_receipt_validate_key;

        SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
        subscriptionRequest.setPlanIdentifier(skuToPurchase);
        subscriptionRequest.setReceipt(activeSubscriptionReceipt);

        try {
            appCMSSubscriptionPlanCall.call(
                    url,
                    subscriptionCallType,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    result -> {
                        //
                    },
                    appCMSSubscriptionPlanResult -> {
                        if (appCMSSubscriptionPlanResult != null) {
                            Log.d(TAG, "Google InApp Subscription response-" + gson.toJson(appCMSSubscriptionPlanResult,
                                    AppCMSSubscriptionPlanResult.class));

                        }
                    },
                    planResult -> {
                        //
                    }, errorResponse -> {

                    });
        } catch (Exception e) {

        }
    }

    /**
     * Description make a subscription call to backend
     *
     * @param planToPurchase
     * @param skuToPurchase
     * @param activeSubscriptionReceipt
     */
    public void subscribe(String planToPurchase, String skuToPurchase, String
            activeSubscriptionReceipt) {
        SubscriptionRequest subscriptionRequest = new SubscriptionRequest();
        subscriptionRequest.setPlatform(currentActivity.getString(R.string.app_cms_subscription_platform_key));
        subscriptionRequest.setSiteId(Utils.getProperty("SiteId", currentActivity));
        subscriptionRequest.setSubscription(currentActivity.getString(R.string.app_cms_subscription_key));
        subscriptionRequest.setPlanId(planToPurchase);
        subscriptionRequest.setPlanIdentifier(skuToPurchase);
        subscriptionRequest.setUserId(appPreference.getLoggedInUser());
        subscriptionRequest.setReceipt(activeSubscriptionReceipt);

        int subscriptionCallType = R.string.app_cms_subscription_plan_create_key;

        try {
            appCMSSubscriptionPlanCall.call(
                    currentActivity.getString(R.string.app_cms_register_subscription_api_url,
                            appCMSMain.getApiBaseUrl(),
                            appCMSMain.getInternalName(),
                            currentActivity.getString(R.string.app_cms_subscription_platform_key)),
                    subscriptionCallType,
                    subscriptionRequest,
                    true,
                    apikey,
                    getAuthToken(),
                    result -> {
                        //
                    },
                    appCMSSubscriptionPlanResult -> {
                        if (appCMSSubscriptionPlanResult != null) {
                            Log.d(TAG, "InApp Subscription response-" + gson.toJson(appCMSSubscriptionPlanResult,
                                    AppCMSSubscriptionPlanResult.class));
                            // We already saved purchase data, no need to update, just update and refresh user as subscribed
                            appPreference.setIsUserSubscribed(true);
                            refreshSubscriptionData(AppCMSPresenter.this::sendRefreshPageAction, true);


                        }
                    },
                    planResult -> {
                        //
                    }, errorResponse -> {

                    });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void getCurrentLocation(Action1<AppCMSLocationResponse> locationResponseAction) {
        if (currentActivity != null && appCMSMain != null && !TextUtils.isEmpty(appCMSMain.getInternalName())) {
            appCMSLocationCall.getCurrentLocation(currentActivity.getString(R.string.app_cms_location_api_url, appCMSMain.getInternalName()), locationResponseAction);
        }
    }

    public void clearPageAPIAndUI() {
//        if (navigationPages != null) navigationPages.clear();
        if (navigationPageData != null) navigationPageData.clear();
    }

    public Headers getHeaderObj(String navigationId) {
        List<Headers> headerList = appCMSAndroid.getHeaders();
        for (Headers header : headerList) {
            if (header.getId().equalsIgnoreCase(navigationId)) {
                return header;
            }
        }
        return null;
    }

    public List<ContentDatum> getDataFromHeaderNav(String navigationId) {
        Headers header = getHeaderObj(navigationId);
        List<ContentDatum> contentDatumList = new ArrayList<>();
        if (header != null) {
            contentDatumList = header.convertHeaderListtoContentDatumList();
        }

        return contentDatumList;
    }

    public void firePhoneHintReceiver() {
        Intent phoneDataActionIntent = new Intent(AppCMSPresenter.PRESENTER_PHONE_HINT);
        phoneDataActionIntent.putExtra(currentActivity.getString(R.string.app_cms_package_name_key), currentActivity.getPackageName());
        currentActivity.sendBroadcast(phoneDataActionIntent);
    }

    public boolean setNavigationModuleFirstTime(boolean isNavModuleOpen) {
        SharedPreferences sharedPrefs = currentContext.getSharedPreferences(NAVIGATION_MODULE_SHARED_PREF, 0);
        return sharedPrefs.edit().putBoolean("isnavigationmoduleopen", isNavModuleOpen).commit();
    }

    public boolean getNavigationModulePref() {
        SharedPreferences sharedPrefs = currentContext.getSharedPreferences(NAVIGATION_MODULE_SHARED_PREF, 0);
        return sharedPrefs.getBoolean("isnavigationmoduleopen", false);
    }


    public void openAppcmsWebView(String webUrl) {
        launchAppFragment(currentActivity.getString(R.string.app_cms_web_view_page_tag),
                new LaunchData(null, false, false,
                        null, null, null, new String[]{webUrl}, false,
                        -1, null, null, null), ExtraScreenType.WEB_VIEW_SCREEN, true, null, null);
    }

    public void openTvProviderScreen() {
        showLoader();
        String url = getCurrentContext().getString(R.string.verimatrix_chooser, getCurrentContext().getString(R.string.verimatrix__base_url),
                CommonUtils.getVerimatrixPartnerId(getAppCMSAndroid(), currentContext.getString(R.string.tvprovider_verimatrix)));
        verimatrixCall.getTvProviders(url, new Action1<VerimatrixResponse>() {
            @Override
            public void call(VerimatrixResponse verimatrixResponse) {
                stopLoader();
                launchAppFragment(currentActivity.getString(R.string.app_cms_tv_providers_page_tag),
                        new LaunchData(null, false, false,
                                null, null, null, null, false,
                                -1, null, null, verimatrixResponse), ExtraScreenType.TV_PROVIDER_SCREEN, true, null, null);

            }
        });
    }

    private boolean isContentAllowedForTV(ContentDatum contentDatum) {
        if (contentDatum.getSubscriptionPlans() != null
                && ((contentTypeChecker.isContentTVOD(contentDatum.getSubscriptionPlans())
                && contentDatum.getSubscriptionPlans().size() > 0
                && contentDatum.getSubscriptionPlans().get(0).getFeatureSetting() != null
                && !contentTypeChecker.isContentConsumptionFireTV(contentDatum.getSubscriptionPlans().get(0).getFeatureSetting().getAllowedDevices()))
                || (contentTypeChecker.isSvodContentExist(contentDatum.getSubscriptionPlans())
                && !appPreference.isFiretvPlayAllowed()))
                && ((contentDatum != null &&
                contentDatum.getGist() != null &&
                !contentDatum.getGist().getFree()) ||
                (getAppCMSMain().getFeatures() != null &&
                        getAppCMSMain().getFeatures().getFreePreview() != null &&
                        !getAppCMSMain().getFeatures().getFreePreview().isPerVideo()))) {
            stopLoader();
            if (contentTypeChecker.isContentTVOD(contentDatum.getSubscriptionPlans())) {
                openTVGenericDialog(null, getLocalisedStrings().getPlanUpgradeText(),
                        null, getLocalisedStrings().getOkText(), null, contentDatum);
                openTVErrorDialog(null, getLocalisedStrings().getPlanUpgradeText(), false);
            } else {
                openTVGenericDialog(null, getLocalisedStrings().getPlanUpgradeText(),
                        getLocalisedStrings().getSubscribeNowText(), null, null, contentDatum);
            }

            return false;
        }
        return true;
    }

    public void openTVGenericDialog(String headerTitle, String message, String
            positiveButtonText, String negativeButtonText, String neutralButtonText, ContentDatum
                                            contentDatum) {
        Intent args = new Intent(AppCMSPresenter.GENERIC_DIALOG);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_content_datum), contentDatum);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_msg_key), message);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_header_key), headerTitle);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_positive_button_key), positiveButtonText);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_negative_button_key), negativeButtonText);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_neutral_button_key), neutralButtonText);
        currentActivity.sendBroadcast(args);
    }

    public void openAccountDetailsEditInfoDialog(String headerTitle, String message, String
            dialogType, String action) {
        Intent args = new Intent(action);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_msg_key), message);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_header_key), headerTitle);
        args.putExtra(currentActivity.getString(R.string.tv_dialog_type_key), dialogType);
        currentActivity.sendBroadcast(args);
    }

    private void validateTVEUserSubscription(ContentDatum contentDatum) {
        if (isUserLoggedInByTVProvider() && !isTVEUserSubscribed()) {
            updateTVEAsyncTask(false);
        }
    }

    private boolean validateTVEContent(ContentDatum contentDatum) {
        String message = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.unsubscribe_text_with_subscribe_and_login));
        String title = getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.preview_content));

        openEntitlementScreen(contentDatum, false);
        return true;
        /*if (contentTypeChecker.isContentSVOD_TVE(contentDatum) && (!isUserLoggedInByTVProvider() || !isUserSubscribed())) {
            openTVEntitlementDialog(message, title, false, currentActivity.getString(R.string.pricing_model_SVOD_TVE), contentDatum);
            return true;
        } else if (contentTypeChecker.isContentSVOD_TVOD(contentDatum)) {
            openTVEntitlementDialog(message, title, false, currentActivity.getString(R.string.pricing_model_SVOD_TVOD), contentDatum);
            return true;
        } else if (contentTypeChecker.isContentSVOD_TVOD_TVE(contentDatum)) {
            openTVEntitlementDialog(message, title, false, currentActivity.getString(R.string.pricing_model_SVOD_TVOD_TVE), contentDatum);
            return true;
        } else if (contentTypeChecker.isContentTVOD(contentDatum) || contentTypeChecker.isContentTVOD_AVOD(contentDatum)) {
            openTVErrorDialog(getLanguageResourcesFile().getUIresource(currentContext.getString(R.string.cannot_purchase_msg)),
                    null,
                    false);
            return true;
        } else if (contentDatum != null &&
                !isUserLoggedInByTVProvider() &&
                (contentTypeChecker.isContentTVE(contentDatum) ||
                        contentTypeChecker.isContentTVE_AVOD(contentDatum) ||
                        contentTypeChecker.isContentTVOD_TVE(contentDatum))) {
            if ((getLaunchType() != (AppCMSPresenter.LaunchType.NAVIGATE_TO_HOME_FROM_LOGIN_DIALOG))) {
                setLaunchType(AppCMSPresenter.LaunchType.HOME);
            }
            String[] extraData = new String[1];
            extraData[0] = currentContext.getResources().getString(R.string.app_cms_page_link_your_account_with_tv_provider_btn_key);
            launchTVButtonSelectedAction(
                    null,
                    "linkAccount",
                    null,
                    extraData,
                    null,
                    false,
                    0,
                    null,
                    null);
            return true;
        } else if (contentDatum != null && contentTypeChecker.isContentSVOD(contentDatum)) {
            if (!isUserLoggedInByTVProvider() && appPreference.getLoggedInUserEmail() == null) {
                openTVEntitlementDialog(message, title, false, currentActivity.getString(R.string.pricing_model_SVOD), contentDatum);
            } else {
                if (contentDatum != null && contentDatum.getSubscriptionPlans() != null) {
                    navigateToContentSubscription(contentDatum.getSubscriptionPlans());
                } else {
                    PrimaryCta primaryCta = getNavigation().getSettings().getPrimaryCta();
                    navigateToTVPage(primaryCta.getPageId(),
                            primaryCta.getCtaText(),
                            primaryCta.getUrl(),
                            false,
                            Uri.EMPTY,
                            false,
                            true, false, true, false, false);
                }
                setViewPlanPageOpenFromADialog(true);
            }
            return true;
        } else if (contentTypeChecker.isContentSVOD_TVE(contentDatum)) {
            openTVEntitlementDialog(message, title, false, currentActivity.getString(R.string.pricing_model_SVOD_TVE), contentDatum);
            return true;
        }
        return false;*/
    }

    com.viewlift.models.data.appcms.ui.page.Settings settings;

    public void setstyle(com.viewlift.models.data.appcms.ui.page.Settings settings) {
        this.settings = settings;
    }

    public com.viewlift.models.data.appcms.ui.page.Settings getSettings() {
        return settings;
    }

    Boolean isWorkoutDialogNavigation = false;

    public Boolean getRestWorkoutDialog() {
        return isWorkoutDialogNavigation;
    }

    public void setRestWorkoutDialog(Boolean isWorkoutDialogNavigation) {
        this.isWorkoutDialogNavigation = isWorkoutDialogNavigation;
    }

    private HashMap<String, List<String>> parentalRatingMap;

    public HashMap<String, List<String>> getParentalRatingMap() {
        return parentalRatingMap;
    }

    public String getPersonalizedGenresPreference() {
        return appPreference.getUserPersonalizedGenres();
    }

    public void setPersonalizedGenresPreference(String genres, boolean isFromSettingsPage, boolean isNavigateToHomePage) {
        Log.d(TAG, "setPersonalizedGenresPreference() called with: genres = [" + genres + "]");
        if ((getPersonalizedGenresPreference() == null || CommonUtils.isEmpty(genres)) && isNewsTemplate()) {
            if (isNavigateToHomePage) {
                if (!isFromSettingsPage) {
                    //TO-DO to be handled create issues with deep linking
                    this.isFromDeeplink = false;
                    new Handler(Looper.getMainLooper()).postDelayed(() -> {
                        clearPageAPIData(() -> navigateToHomePage(true), false);
                    }, 1000);
                }
            }
            CommonUtils.clearPersonalizationModuleData();
        } else if (getPersonalizedGenresPreference() != null && genres != null && getPersonalizedGenresPreference().trim().length() != genres.trim().length()) {

            CommonUtils.clearPersonalizationModuleData();

        }
        appPreference.setUserPersonalizedGenres(genres);
    }

    private void downloadParentalRatingMap() {
        GetAppCMSParentalRatingMapAsyncTask.Params params = new GetAppCMSParentalRatingMapAsyncTask.Params.Builder()
                .context(currentActivity)
                .networkDisconnected(!isNetworkConnected())
                .build();

        new GetAppCMSParentalRatingMapAsyncTask(appCMSParentalRatingMapCall, parentalRatingMapResponse -> {
            if (parentalRatingMapResponse != null && parentalRatingMapResponse.size() > 0) {
                if (parentalRatingMap == null) {
                    parentalRatingMap = new HashMap<>();
                }
                parentalRatingMap.clear();

                for (AppCMSParentalRatingMapResponse response : parentalRatingMapResponse) {
                    parentalRatingMap.put(response.getKey(), response.getValue());
                }
            }
        }).execute(params);
    }

    SwitchCompat miniPlayerToggleView = null;

    public SwitchCompat getMiniPlayerToggleView() {
        return miniPlayerToggleView;
    }

    public void setMiniPlayerToggleView(SwitchCompat miniPlayerToggleView) {
        this.miniPlayerToggleView = miniPlayerToggleView;
    }


    ////////////////////////// OFFLINE DRM PROGRESS UPDATE ///////////////////////////
    public void updateOfflineVideoStatus(String filmId, View updateView, int radiusDifference,
                                         boolean isFromDownload, View.OnClickListener onClickListener, TextView viewSizeBox,
                                         View.OnClickListener deleteClickListener) {
        Timer offlineTimer = new Timer();
        runUpdateDownloadIconTimer = true;
        OfflineDownloadTimerTask offlineDownloadTimerTask = null;
        stopDownloadProgressDialog();

        for (TimerTask downloadProgressTask : downloadProgressTimerList) {
            if (downloadProgressTask instanceof OfflineDownloadTimerTask) {
                if (((OfflineDownloadTimerTask) downloadProgressTask).getFilmId().equalsIgnoreCase(filmId)) {
                    if (((OfflineDownloadTimerTask) downloadProgressTask).isRunning()) {
                        offlineDownloadTimerTask = (com.viewlift.offlinedrm.OfflineDownloadTimerTask) downloadProgressTask;
                        offlineDownloadTimerTask.setViewSizeBox(viewSizeBox);
                        offlineDownloadTimerTask.setView(updateView);
                        offlineDownloadTimerTask.setDeleteClickListener(deleteClickListener);
                        offlineDownloadTimerTask.setFromDownloadPage(isFromDownload);
                        return;
                    }
                }
            }
        }

        offlineDownloadTimerTask = new OfflineDownloadTimerTask(filmId,
                currentContext,
                BaseView.isTablet(currentActivity), updateView,
                null,
                null,
                radiusDifference,
                isFromDownload, onClickListener, viewSizeBox, deleteClickListener);

        //schedule the timer, after the first 5000ms the TimerTask will run every 10000ms
        downloadProgressTimerList.add(offlineDownloadTimerTask);
        offlineTimer.schedule(offlineDownloadTimerTask, 0, 3000);
    }

    public OfflineVideoData createOfflineDataObject(ContentDatum contentDatum,
                                                    byte[] offlineLicenseID) {
        OfflineVideoData offlineVideoData = new OfflineVideoData();
        offlineVideoData.setOfflineLicenseKeySetId(offlineLicenseID);
        offlineVideoData.setVideoTitle(contentDatum.getGist().getTitle());

        long thumbEnqueueId;
        long posterEnqueueId;
        long ccEnqueueId = 0;

        thumbEnqueueId = downloadVideoImage(contentDatum.getGist().getVideoImageUrl(), contentDatum.getGist().getId());
        posterEnqueueId = downloadPosterImage(contentDatum.getGist().getPosterImageUrl(), contentDatum.getGist().getId());

        if (contentDatum.getContentDetails() != null &&
                contentDatum.getContentDetails().getClosedCaptions() != null &&
                !contentDatum.getContentDetails().getClosedCaptions().isEmpty() &&
                contentDatum.getContentDetails().getClosedCaptions().get(0).getUrl() != null) {
            for (ClosedCaptions cc : contentDatum.getContentDetails().getClosedCaptions()) {
                if ("SRT".equalsIgnoreCase(cc.getFormat())) {
                    DownloadClosedCaptionRealm downloadClosedCaptionRealm = Utils.convertClosedCaptionToDownloadClosedCaption(cc, contentDatum.getGist().getId());
                    ccEnqueueId = downloadVideoSubtitles(downloadClosedCaptionRealm);
                    break;
                }
            }
        }

        contentDatum = handleTagData(contentDatum);
        currentActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                View downloadButton = currentActivity.findViewById(R.id.downloadButton);
                if (downloadButton != null && downloadButton instanceof TextView)
                    ((TextView) downloadButton).setText(localisedStrings.getDownloadingLabelText());
            }
        });


        String artist = "";
        String director = "";
        String album_year = "";

        if (contentDatum != null && contentDatum.getGist() != null) {
            offlineVideoData.setVideoThumbId_DM(thumbEnqueueId);
            offlineVideoData.setPosterThumbId_DM(posterEnqueueId);
            offlineVideoData.setCcFileEnqueueId(ccEnqueueId);

            if (contentDatum.getGist().getPrimaryCategory() != null && contentDatum.getGist().getPrimaryCategory().getTitle() != null)
                offlineVideoData.setGenre(contentDatum.getGist().getPrimaryCategory().getTitle());
            if (contentDatum.getGist().getId() != null) {
               /* String videoId = contentDatum.getGist().getOriginalObjectId();
                if(videoId == null) {
                    videoId = contentDatum.getGist().getId();
                }*/
                offlineVideoData.setVideoId(contentDatum.getGist().getId());
//                downloadVideoRealm.setVideoImageUrl(getPngPosterPath(contentDatum.getGist().getId()));
//                downloadVideoRealm.setPosterFileURL(getPngPosterPath(contentDatum.getGist().getId()));
                offlineVideoData.setVideoImageUrl(downloadedMediaLocalURI(thumbEnqueueId));
                offlineVideoData.setPosterFileURL(downloadedMediaLocalURI(posterEnqueueId));
                offlineVideoData.setSubtitlesFileURL(downloadedMediaLocalURI(ccEnqueueId));
                offlineVideoData.setSubtitlesFileFormat("SRT");
                offlineVideoData.setSubtitlesFileLanguage("English");
            }

            offlineVideoData.getSubtitlesFileURL();
            if (contentDatum.getGist().getTitle() != null) {
                offlineVideoData.setVideoTitle(contentDatum.getGist().getTitle());
            }

            if (contentDatum.getCreditBlocks() != null && contentDatum.getCreditBlocks().size() > 0) {

                artist = getArtistNameFromCreditBlocks(contentDatum.getCreditBlocks());
                director = getDirectorNameFromCreditBlocks(contentDatum.getCreditBlocks());
                offlineVideoData.setArtistName(artist);
                offlineVideoData.setDirectorName(director);

            }
            if (contentDatum.getGist().getYear() != null) {
                album_year = contentDatum.getGist().getYear();
                offlineVideoData.setSongYear(album_year);
            }
            if (contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().equalsIgnoreCase(currentContext.getResources().getString(R.string.media_type_audio))) {
                offlineVideoData.setVideoDescription(artist);
            } else if (contentDatum.getGist().getDescription() != null) {
                offlineVideoData.setVideoDescription(contentDatum.getGist().getDescription());
            }
            try {
                if (!TextUtils.isEmpty(offlineVideoData.getVideoTitle())) {
                    offlineVideoData.setVideoIdDB(getStreamingId(offlineVideoData.getVideoTitle()));
                } else if (!TextUtils.isEmpty(contentDatum.getGist().getId())) {
                    offlineVideoData.setVideoIdDB(contentDatum.getGist().getId() + getCurrentTimeStamp());
                }
            } catch (Exception e) {
                //Log.e(TAG, e.getMessage());
                offlineVideoData.setVideoIdDB(offlineVideoData.getVideoId() + getCurrentTimeStamp());
            }

            offlineVideoData.setLocalURI("");

            if ((ccEnqueueId != 0) && (contentDatum.getGist().getId() != null)) {
                offlineVideoData.setSubtitlesId_DM(ccEnqueueId);
                offlineVideoData.setSubtitlesFileURL(downloadedMediaLocalURI(ccEnqueueId));
                //offlineVideoData.setSubtitlesFileURL(getClosedCaptionsPath(contentDatum.getGist().getId()));
            }

            if (contentDatum.getGist().getVideoImageUrl() != null) {
                offlineVideoData.setVideoFileURL(contentDatum.getGist().getVideoImageUrl()); //This change has been done due to making thumb image available at time of videos are downloading.
            }

            offlineVideoData.setPlayListName(contentDatum.getPlayListName());
            offlineVideoData.setDownloadDate(System.currentTimeMillis());
            offlineVideoData.setVideoDuration(contentDatum.getGist().getRuntime());
            offlineVideoData.setWatchedTime(contentDatum.getGist().getWatchedTime());
            offlineVideoData.setContentType(contentDatum.getGist().getContentType());
            offlineVideoData.setMediaType(contentDatum.getGist().getMediaType());
//            downloadVideoRealm.setTransactionEndDate(1535816891000L);
            offlineVideoData.setRentStartWatchTime(0l);
            offlineVideoData.setRentStartTimeSyncedWithServer(false);
            if (contentDatum.getGist().getTransactionEndDate() > 0) {
                offlineVideoData.setTransactionEndDate(contentDatum.getGist().getTransactionEndDate());

            } else if (contentDatum.getGist().getTransactionDateEpoch() > 0) {
                offlineVideoData.setTransactionEndDate(contentDatum.getGist().getTransactionDateEpoch());

            }
            offlineVideoData.setRentalPeriod(contentDatum.getGist().getRentalPeriod());

            offlineVideoData.setSubscriptionType(contentDatum.getGist().getPurchaseType());
            offlineVideoData.setDurationCategory(contentDatum.getGist().getDurationCategory());
            offlineVideoData.setInstructorTitle(contentDatum.getGist().getInstructorTitle());

            offlineVideoData.setPermalink(contentDatum.getGist().getPermalink());
            offlineVideoData.setUserId(appPreference.getLoggedInUser());

            if (contentDatum.isDRMEnabled())
                offlineVideoData.setDrmEnabled(true);

            if (contentDatum.getGist().getMediaType() != null &&
                    contentDatum.getGist().getMediaType().contains(getCurrentContext().getResources().getString(R.string.media_type_episode))) {
                offlineVideoData.setEpisodeNum(getShowDatum().getGist().getEpisodeNum());
                offlineVideoData.setShowName(getShowDatum().getGist().getShowName());
                offlineVideoData.setSeasonNum(getShowDatum().getGist().getSeasonNum());
            }
            if (contentDatum.getGist().getMediaType() != null && contentDatum.getGist().getMediaType().toLowerCase().contains(currentActivity.getString(R.string.media_type_episode).toLowerCase())) {
                offlineVideoData.setShowTitle(contentDatum.getSeriesName());
            }

            offlineVideoData.setParentalRating(contentDatum.getParentalRating());
        }
        return offlineVideoData;
    }

    public DownloadTracker downloadTracker;

    public ContentDatum getCurrentContentDatum() {
        return currentContentDatum;
    }

    public ContentDatum currentContentDatum;

    public void setCurrentContentDatum(ContentDatum currentContentDatum) {
        this.currentContentDatum = currentContentDatum;
    }

    public synchronized void editOfflineExoDownload(final ContentDatum contentDatum,
                                                    boolean add, Action1<Boolean> downloadNotProcessedAction, View view, View.OnClickListener
                                                            addClickListener) {
        if (!appPreference.getDownloadOverCellularEnabled() && appPreference.getActiveNetworkType() == ConnectivityManager.TYPE_MOBILE) {
            stopDownloadProgressDialog();
            showDialog(DialogType.DOWNLOAD_VIA_MOBILE_DISABLED,
                    localisedStrings.getCellularDisableText(),
                    false,
                    null,
                    null, null);
            final Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    //Do something after 100ms
                    if (view instanceof ImageView)
                        ((ImageView) view).setOnClickListener(addClickListener);
                    if (view instanceof DownloadComponent)
                        ((DownloadComponent) view).setOnClickListener(addClickListener);
                }
            }, 400);
            return;
        }

        HashMap<String, Download> offlineDownloads = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().getAllOfflineDownloads();
        Iterator hmIterator = offlineDownloads.entrySet().iterator();
        try {
            while (hmIterator.hasNext()) {
                Map.Entry mapElement = (Map.Entry) hmIterator.next();
                Download download = ((Download) mapElement.getValue());
                if (download.state == Download.STATE_COMPLETED) {
                    OfflineVideoData offlineVideoData = deserialize(download.request.data);
                    if ((offlineVideoData.getVideoId()).equalsIgnoreCase(contentDatum.getGist().getId())) {
                        stopDownloadProgressDialog();
                        showDialog(AppCMSPresenter.DialogType.EXISTING_DOWNLOAD_OFFLINE_ITEM, localisedStrings.getDownloadExistsOfflineHeaderText(), true, () -> {
                            DownloadService.sendRemoveDownload(currentContext, OfflineDownloadService.class, download.request.id, /* foreground= */ false);
                        }, () -> {
                            if (view instanceof ImageView)
                                ((ImageView) view).setOnClickListener(addClickListener);
                            if (view instanceof DownloadComponent)
                                ((DownloadComponent) view).setOnClickListener(addClickListener);
                        }, localisedStrings.getDownloadExistsOfflineMessageText());

                        final Handler handler = new Handler();
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                //Do something after 100ms
                                if (view instanceof ImageView)
                                    ((ImageView) view).setOnClickListener(addClickListener);
                                if (view instanceof DownloadComponent)
                                    ((DownloadComponent) view).setOnClickListener(addClickListener);
                            }
                        }, 400);
                        return;
                    }
                }
            }
        } catch (Exception e) {
        }

        currentContentDatum = contentDatum;
        videoEntitlementDownload(contentDatum, updateContentDatum -> {
            if (updateContentDatum != null &&
                    updateContentDatum.getGist() != null &&
                    updateContentDatum.getGist().getId() != null) {
                boolean isContentPurchased = appPreference.getUserPurchases() != null && !TextUtils.isEmpty(appPreference.getUserPurchases())
                        && (contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getGist().getId())
                        || (updateContentDatum.getSeasonId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getSeasonId()))
                        || (updateContentDatum.getSeasonId() != null && contentTypeChecker.isContentPurchased(appPreference.getUserPurchases(), updateContentDatum.getSeriesId())));
                if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getTransactionDateEpoch() > 0) {
                    String endDate = "";
                    Date date = new Date(contentDatum.getGist().getTransactionDateEpoch());
                    SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                    endDate = df2.format(date);
                    updateContentDatum.getGist().setTransactionEndDate(endDate);
                } else if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getTransactionEndDate() > 0) {
                    String endDate = "";
                    Date date = new Date(contentDatum.getGist().getTransactionEndDate());
                    SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                    endDate = df2.format(date);
                    updateContentDatum.getGist().setTransactionEndDate(endDate);
                } else if (isContentPurchased) {
                    long rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getGist().getId());
                    if (rentExpiry == 0)
                        rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getSeasonId());
                    if (rentExpiry == 0)
                        rentExpiry = contentTypeChecker.getVideoRentEndDate(appPreference.getUserPurchases(), updateContentDatum.getSeriesId());

                    if (rentExpiry > 0) {
                        String endDate = "";
                        Date date = new Date(rentExpiry);
                        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
                        endDate = df2.format(date);
                        updateContentDatum.getGist().setTransactionEndDate(endDate);
                    }
                }

                if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getRentalPeriod() > 0) {
                    updateContentDatum.getGist().setRentalPeriod(contentDatum.getGist().getRentalPeriod());
                }
                if (contentDatum != null && contentDatum.getGist() != null && contentDatum.getGist().getRentStartTime() > 0) {
                    updateContentDatum.getGist().setRentStartTime(contentDatum.getGist().getRentStartTime());
                }

                if (updateContentDatum.getGist().getGenre() == null)
                    updateContentDatum.getGist().setPrimaryCategory(contentDatum.getGist().getPrimaryCategory());
                if (contentDatum.getSeriesName() != null)
                    updateContentDatum.setSeriesName(contentDatum.getSeriesName());
                if (updateContentDatum.getCreditBlocks() == null)
                    if (contentDatum.getCreditBlocks() != null)
                        updateContentDatum.setCreditBlocks(contentDatum.getCreditBlocks());

                DownloadRequest downloadRequest = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker().isVideoOfflineDownloaded(contentDatum.getGist().getId());
                //Download download = getAppCMSApplication().getDownloadTracker().getDowloadedVideoObject(contentDatum.getGist().getId());
                if (downloadRequest != null) {
                    //Video Already Downloaded or In Downloading Running Mode.
                    stopDownloadProgressDialog();
                    //DownloadService.sendRemoveDownload(currentContext, OfflineDownloadService.class, contentDatum.getGist().getId(), /* foreground= */ false);
                    showToast(localisedStrings.getAlreadyDownloadedText(contentDatum.getGist().getTitle()), Toast.LENGTH_LONG);
                } else {
                    //Video Needs to Be DownLoaded.
                    RenderersFactory renderersFactory = getAppCMSApplication().getOfflineDRMManager().buildRenderersFactory(false);
                    downloadTracker = getAppCMSApplication().getOfflineDRMManager().getDownloadTracker();

                    //downloadAutoPlayPage(contentDatum); This Needs to Be Done.
                    downloadAutoPlayPage(contentDatum);
                    if (downloadTracker != null) {
                        TrackSelectionView.setHighDownloadText(localisedStrings.getDownloadHighText());
                        TrackSelectionView.setMediumDownloadText(localisedStrings.getDowloadMediumText());
                        TrackSelectionView.setLowDownloadText(localisedStrings.getDownloadLowText());
                        TrackSelectionDialog.setDownloadTitle(localisedStrings.getDownloadSettingsText());
                        TrackSelectionView.setTintColorValue(getBrandPrimaryCtaColor());

                        downloadTracker.toggleDownload(
                                currentActivity,
                                updateContentDatum,
                                currentActivity.getSupportFragmentManager(),
                                contentDatum.getGist().getTitle() != null ? contentDatum.getGist().getTitle() : null,
                                Uri.parse(updateContentDatum.getStreamingInfo().getVideoAssets().getWideVine().getUrl()),
                                currentActivity.getString(R.string.exo_extension),
                                renderersFactory,
                                view,
                                addClickListener);
                    }
                }
                //downloadURLParsing(updateContentDatum, resultAction1, isFromPlaylistDownload);
            }
        });
    }

    /////////////////////////updateOfflineDRMStat/ OFFLINE DRM PROGRESS END ///////////////////////////

    public AppCMSApplication getAppCMSApplication() {
        return ((AppCMSApplication) currentActivity.getApplication());
    }

    public byte[] serialize(OfflineVideoData obj) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(out);
        os.writeObject(obj);
        return out.toByteArray();
    }

    public List<TimerTask> getDownloadProgressTimerList() {
        return downloadProgressTimerList;
    }

    public OfflineVideoData deserialize(byte[] data) throws
            IOException, ClassNotFoundException {
        ByteArrayInputStream in = new ByteArrayInputStream(data);
        ObjectInputStream is = new ObjectInputStream(in);
        return (OfflineVideoData) is.readObject();
    }

    public void circularImageBar(ImageView iv2, int i, int radiusDifference) {
        System.out.println("sowload percent-" + i);

        if (iv2 == null)
            return;

        if (runUpdateDownloadIconTimer && iv2.getWidth() > 0 && iv2.getHeight() > 0) {
            Bitmap b = null;
            Canvas canvas = null;
            Paint paint = null;
            if (b == null) {
                b = Bitmap.createBitmap(iv2.getWidth(), iv2.getHeight(), Bitmap.Config.ARGB_8888);
                canvas = new Canvas(b);
                paint = new Paint();
            }
            //Canvas canvas = new Canvas(b);
            //Paint paint = new Paint();
            paint.setColor(Color.DKGRAY);
            paint.setStrokeWidth(iv2.getWidth() / 10);
            paint.setStyle(Paint.Style.STROKE);
            paint.setAntiAlias(true);
            canvas.drawCircle(iv2.getWidth() / 2, iv2.getHeight() / 2, (iv2.getWidth() / 2) - radiusDifference, paint);// Fix SVFA-1561 changed  -2 to -7

            int tintColor = Color.parseColor((getAppCMSMain().getBrand().getCta().getPrimary().getBackgroundColor()));
            paint.setColor(tintColor);
            paint.setStrokeWidth(iv2.getWidth() / 10);
            paint.setAntiAlias(true);
//                paint.setStyle(Paint.Style.FILL);
            final RectF oval = new RectF();
            paint.setStyle(Paint.Style.STROKE);
            oval.set(radiusDifference, radiusDifference, iv2.getWidth() - radiusDifference, iv2.getHeight() - radiusDifference); //Fix SVFA-1561  change 2 to 6

            canvas.drawArc(oval, 270, ((i * 360) / 100), false, paint);

            iv2.setImageBitmap(b);
               /* appCMSPresenter.getCurrentActivity().runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        iv2.setImageBitmap(b);
                    }
                });*/
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                iv2.setForegroundGravity(View.TEXT_ALIGNMENT_CENTER);
            }
            iv2.requestLayout();
        }
    }

    public void signUpNativeUser(String email, String password, String consent, Boolean
            emailConsent, MetadataMap
                                         metadataMap, Action1<Boolean> successfull) {
        showLoader();
        if (TextUtils.isEmpty(email)) {
            stopLoader();
            showDialog(DialogType.SIGNUP, localisedStrings.getEmptyEmailValidationText(), false, null, null, localisedStrings.getSignUpText());
            return;
        }
        if (!isValidEmail(email)) {
            stopLoader();
            showDialog(DialogType.SIGNUP, localisedStrings.getEmailFormatValidationMsg(), false, null, null, localisedStrings.getSignUpText());
            return;
        }
        if (TextUtils.isEmpty(password)) {
            stopLoader();
            showDialog(DialogType.SIGNUP, localisedStrings.getEmptyPasswordValidationText(), false, null, null, localisedStrings.getSignUpText());
            return;
        }
        if (password.length() < 5 && metadataMap != null && metadataMap.getPasswordLengthError() != null) {
            stopLoader();
            showDialog(DialogType.SIGNUP, metadataMap.getPasswordLengthError(), false, null, null, localisedStrings.getSignUpText());
            return;
        }
        if (password.length() > 50 && metadataMap != null && metadataMap.getPASSWORD_NOT_VALID() != null) {
            stopLoader();
            showDialog(DialogType.SIGNUP, metadataMap.getPASSWORD_NOT_VALID(), false, null, null, localisedStrings.getSignUpText());
            return;
        }
        closeSoftKeyboard();
        String deviceName;
        String platform;
        if (platformType.equals(PlatformType.ANDROID)) {
            deviceName = currentContext.getString(R.string.app_cms_query_param_android_phone);
            platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
        } else {
            if (isFireTVDevice(currentContext)) {
                deviceName = currentContext.getString(R.string.app_cms_query_param_fire_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_amazon_platform);
            } else {
                deviceName = currentContext.getString(R.string.app_cms_query_param_android_tv);
                platform = currentContext.getString(R.string.app_cms_query_param_android_platform);
            }
        }
        String url = currentActivity.getString(R.string.app_cms_signup_api_url,
                appCMSMain.getApiBaseUrl(),
                platform,
                deviceName,
                appCMSMain.getInternalName(),
                getDeviceId(),
                CommonUtils.getDeviceName());

        if (getAppsFlyerConversionData() != null) {
            url = url + createConversionDataQuery();
        }
        firebaseAnalytics.signupEvent(currentContext.getString(R.string.method_email));
        PostAppCMSLoginRequestAsyncTask.Params params = new PostAppCMSLoginRequestAsyncTask.Params
                .Builder()
                .url(url)
                .email(email)
                .password(password)
                .tveId(appPreference.getTVEUserId())
                .isEmailConsentPresent(consent)
                .emailConsent(emailConsent)
                .build();
        new PostAppCMSLoginRequestAsyncTask(appCMSSignInCall, new Action1<SignInResponse>() {
            @Override
            public void call(SignInResponse signInResponse) {
                String loginText = localisedStrings.getSignInText();
                String signupText = localisedStrings.getSignUpText();
                if (signInResponse == null) {
                    showDialog(DialogType.SIGNUP_PASSWORD_INVALID, getLanguageResourcesFile().getUIresource(currentActivity.getString(R.string.app_cms_error_user_already_exists)), false, null, null, signupText);
                    stopLoader();
                } else if (!TextUtils.isEmpty(signInResponse.getMessage()) || signInResponse.isErrorResponseSet()) {
                    if (signInResponse.getErrorResponse().getError() != null) {
                        try {
                            if (getModuleApi() != null && metadataMap != null && convertClassToMap(metadataMap).get(signInResponse.getErrorResponse().getCode()) != null)
                                showDialog(DialogType.SIGNUP, (String) convertClassToMap(metadataMap).get(signInResponse.getErrorResponse().getCode()), false, null, null, signupText);
                            else
                                showDialog(DialogType.SIGNUP, signInResponse.getErrorResponse().getError(), false, null, null, signupText);
                        } catch (IllegalAccessException | InvocationTargetException e) {
                            e.printStackTrace();
                        }
                        stopLoader();
                    }
                } else {
                    stopLoader();
                    appPreference.setRefreshToken(signInResponse.getRefreshToken());
                    appPreference.setAuthToken(signInResponse.getAuthorizationToken());
                    setLoggedInUser(signInResponse.getUserId());
                    firebaseAnalytics.signinEvent(currentContext.getString(R.string.method_email));
                    appPreference.setLoggedInUserName(signInResponse.getName());
                    appPreference.setLoggedInUserEmail(signInResponse.getEmail());
                    appPreference.setLoggedInUserPassword(password);
                    senduserProfileEvent();
                    if (!TextUtils.isEmpty(appPreference.getAppsFlyerKey())) {
                        AppsFlyerUtils.registrationEvent(AppCMSPresenter.this, currentActivity, signInResponse.getUserId(),
                                appPreference.getAppsFlyerKey());
                    }
                    sendSignUpEvent("native");
                    if (getSelectedPlanId() != null)
                        AppBus.instanceOf().setShowPaymentOption(true);
                    else
                        finalizeLogin(false, false, false, false);
//                    successfull.call(true);
                }
            }
        }, apikey).execute(params);
    }

    public boolean isBlockShowDetail06(AppCMSPageUI appCMSPageUI) {
        if (appCMSPageUI != null && appCMSPageUI.getModuleList().size() != 0) {
            for (int i = 0; i < appCMSPageUI.getModuleList().size(); i++) {
                if (appCMSPageUI.getModuleList().get(i).getBlockName().equalsIgnoreCase(currentContext.getString(R.string.ui_block_showDetail_06)))
                    return true;
            }
        }
        return false;
    }


    public void emailDialog(Action0 onCloseAction) {
        AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
        builder.setTitle(localisedStrings.getEmailText());
        builder.setMessage(localisedStrings.getEmailRequiredMsgText());
        final EditText input = new EditText(currentActivity);
        input.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
        input.setTextColor(Color.parseColor(getAppTextColor()));
        input.setHint("abc@mail.com");
        input.setHintTextColor(Color.parseColor(getAppTextColor()));
        input.requestFocus();
        builder.setView(input);
        builder.setPositiveButton(localisedStrings.getOkText(), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {

            }
        });
        builder.setNegativeButton(localisedStrings.getCancelText(), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                if (onCloseAction != null)
                    onCloseAction.call();

            }
        });

        currentActivity.runOnUiThread(() -> {
            AlertDialog emailDialog = builder.create();
            emailDialog.setOnShowListener(new DialogInterface.OnShowListener() {
                @Override
                public void onShow(DialogInterface dialogInterface) {
                    emailDialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(getBrandPrimaryCtaColor());
                    if (emailDialog.getButton(AlertDialog.BUTTON_POSITIVE) != null) {
                        emailDialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(getBrandPrimaryCtaColor());
                    }
                    if (emailDialog.getButton(AlertDialog.BUTTON_NEUTRAL) != null) {
                        emailDialog.getButton(AlertDialog.BUTTON_NEUTRAL).setTextColor(getBrandPrimaryCtaColor());
                    }
                    ((TextView) emailDialog.findViewById(android.R.id.message)).setTextColor(Color.parseColor(getAppTextColor()));
                    ((TextView) emailDialog.findViewById(android.R.id.message)).setTypeface(ResourcesCompat.getFont(currentActivity, R.font.font_regular));
                    ((DialogTitle) emailDialog.findViewById(R.id.alertTitle)).setTypeface(ResourcesCompat.getFont(currentActivity, R.font.font_regular));
                    ((DialogTitle) emailDialog.findViewById(R.id.alertTitle)).setTextColor(getBrandPrimaryCtaColor());

                    Button button = ((AlertDialog) emailDialog).getButton(AlertDialog.BUTTON_POSITIVE);
                    button.setOnClickListener(new View.OnClickListener() {

                        @Override
                        public void onClick(View view) {
                            if (TextUtils.isEmpty(input.getText().toString()) || !isValidEmail(input.getText().toString())) {
                                showToast("Enter correct email", Toast.LENGTH_SHORT);
                            } else {
                                closeSoftKeyboard();
                                appPreference.setLoggedInUserEmail(input.getText().toString());
                                updateUserEmail(input.getText().toString());
                                emailDialog.dismiss();
                                if (onCloseAction != null)
                                    onCloseAction.call();
                            }
                        }
                    });
                }
            });
            if (emailDialog.getWindow() != null) {
                emailDialog.getWindow().setBackgroundDrawable(new ColorDrawable(getGeneralBackgroundColor()));
                if (currentActivity.getWindow().isActive() && !currentActivity.isFinishing() && !currentActivity.isDestroyed()) {
                    try {
                        emailDialog.show();
                    } catch (Exception e) {
                    }
                }
            }
        });
    }

    public String selectedPlanId;

    List<ContentDatum> plans;

    public void setSelectedPlan(String selectedPlanId, List<ContentDatum> contentData) {
        this.selectedPlanId = selectedPlanId;
        this.plans = contentData;
    }

    public String getSelectedPlanId() {
        return selectedPlanId;
    }

    public List<ContentDatum> getPlans() {
        return plans;
    }

    public String getUnformattedPhone() {
        return unformattedPhone;
    }

    public String getUnformattedPhoneCountryCode() {
        return unformattedPhoneCountryCode;
    }

    public void setUnformattedPhone(String unformattedPhone) {
        this.unformattedPhone = unformattedPhone;
    }

    public void setUnformattedPhoneCountryCode(String unformattedPhoneCountryCode) {
        this.unformattedPhoneCountryCode = unformattedPhoneCountryCode;
    }

    public String getUserPhoneNumber() {
        if (!Strings.isEmptyOrWhitespace(appPreference.getLoggedInUserPhone())) {
            return appPreference.getLoggedInUserPhone();
        } else {
            return appPreference.getCheckOutPhoneNumber();
        }
    }

    public String getVerimatrixPartnerId() {
        String platformId = null;
        if (getAppCMSAndroid().getTveSettings() != null
                && getAppCMSAndroid().getTveSettings().getTveProvider().toLowerCase().equalsIgnoreCase(currentContext.getString(R.string.tvprovider_verimatrix))
                && getAppCMSAndroid().getTveSettings().getPlatformId() != null)
            platformId = getAppCMSAndroid().getTveSettings().getPlatformId();
        return platformId;
    }


    public void saveOfflineVideoKeys(String keyName, byte[] offlineKeyValue) {
        Map<String, byte[]> savedOfflineKeysMap = new HashMap<>();
        savedOfflineKeysMap = loadOfflineLicenseKeys();
        if (savedOfflineKeysMap.get(keyName) != null) {
            //Already a Video ID is present. We need to replace it.
            savedOfflineKeysMap.remove(keyName);
        }
        savedOfflineKeysMap.put(keyName, offlineKeyValue);
        JSONObject jsonObject = new JSONObject(savedOfflineKeysMap);
        String jsonString = jsonObject.toString();
        appPreference.setOfflineLicenseMap(jsonString);
    }

    public Map<String, byte[]> loadOfflineLicenseKeys() {
        Map<String, byte[]> outputMap = new HashMap<>();
        try {
            String jsonString = appPreference.getOfflineKeyPreference();
            JSONObject jsonObject = new JSONObject(jsonString);
            Iterator<String> keysItr = jsonObject.keys();
            while (keysItr.hasNext()) {
                String key = keysItr.next();
                byte[] bytes = new byte[((JSONArray) jsonObject.get(key)).length()];
                for (int i = 0; i < ((JSONArray) jsonObject.get(key)).length(); i++) {
                    bytes[i] = (byte) (((int) ((JSONArray) jsonObject.get(key)).get(i)) & 0xFF);
                }
                Base64.encodeToString(bytes, Base64.DEFAULT);
//                    byte[] testID = new byte[]{107, 115, 105, 100, 69, 69, 50, 53, 49, 57, 56, 70};
                outputMap.put(key, bytes);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return outputMap;
    }

    public void checkLicenseDuration(byte[] offlineKeys, String
            videoID, DefaultDrmSessionManager<ExoMediaCrypto> drmSessionManager, VideoPlayerView
                                             videoPlayerView, boolean isAppOffline) {

        if (!isNetworkConnected()) {
            videoPlayerView.prepareDRMPlayer(drmSessionManager);
            return;
        }

        new Thread() {
            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
            @Override
            public void run() {
                {
                    try {
                        ContentDatum contentDatum = new ContentDatum();
                        Gist gist = new Gist();
                        gist.setId(videoID);
                        contentDatum.setGist(gist);
                        contentDatum.setDRMEnabled(true);
                        //License Expired Time to Renew;
                        videoEntitlementDownload(contentDatum, updatedContentDatum -> {
                            try {
                                WideVine wideVine = updatedContentDatum.getStreamingInfo().getVideoAssets().getWideVine();
                                OfflineLicenseHelper<FrameworkMediaCrypto> offlineLicenseHelper = null;
                                DefaultHttpDataSourceFactory httpDataSourceFactory;
                                HashMap<String, String> keyRequestProperties = new HashMap<>();
                                keyRequestProperties.put(currentContext.getString(R.string.drm_token_key_axinom), wideVine.getLicenseToken());
                                httpDataSourceFactory = new DefaultHttpDataSourceFactory(CommonUtils.getUserAgent(AppCMSPresenter.this));
                                offlineLicenseHelper = OfflineLicenseHelper.newWidevineInstance(wideVine.getLicenseUrl(), false, httpDataSourceFactory, keyRequestProperties);
                                Pair<Long, Long> lDuration = offlineLicenseHelper.getLicenseDurationRemainingSec(offlineKeys);

                                if (lDuration.first < 100) {
                                    OfflineLicenseHelper<FrameworkMediaCrypto> offlineLicenseHelp = null;
                                    byte[] offlineLicenseKeySetId;
                                    HashMap<String, String> keyRequestProperty = new HashMap<>();
                                    keyRequestProperty.put(currentContext.getString(R.string.drm_token_key_axinom), wideVine.getLicenseToken());
                                    offlineLicenseHelp = OfflineLicenseHelper.newWidevineInstance(wideVine.getLicenseUrl(), false, httpDataSourceFactory, keyRequestProperty);
                                    DrmInitData drmInitData = null;
                                    DataSource dataSource = httpDataSourceFactory.createDataSource();
                                    DashManifest dashManifest;
                                    dashManifest = DashUtil.loadManifest(dataSource, Uri.parse(wideVine.getUrl()));
                                    drmInitData = DashUtil.loadDrmInitData(dataSource, dashManifest.getPeriod(0));
                                    offlineLicenseKeySetId = offlineLicenseHelp.downloadLicense(drmInitData);
                                    saveOfflineVideoKeys(videoID, offlineLicenseKeySetId);
                                    currentActivity.runOnUiThread(() -> videoPlayerView.prepareDRMPlayer(drmSessionManager));
                                } else {
                                    currentActivity.runOnUiThread(() -> videoPlayerView.prepareDRMPlayer(drmSessionManager));
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        });

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();
    }

    public boolean isFetchingVideoQualities() {
        return isFetchingVideoQualities;
    }

    public void setFetchingVideoQualities(boolean fetchingVideoQualities) {
        isFetchingVideoQualities = fetchingVideoQualities;
    }

    public void handleWhatsAppConsent(AppCompatCheckBox view) {
        if (view != null && isSiteOTPEnabled(this) && appCMSMain.getFeatures().getWhatsAppConsent() != null
                && appCMSMain.getFeatures().getWhatsAppConsent().isEnableWhatsappConsent() && !appPreference.getWhatsappChecked()) {
            view.setVisibility(View.VISIBLE);
            int appTextColor = Color.parseColor(getAppTextColor());
            int[][] states = {{android.R.attr.state_checked}, {}};
            int[] colors = {getBrandPrimaryCtaColor(), appTextColor};
            CompoundButtonCompat.setButtonTintList(view, new ColorStateList(states, colors));
            view.setSingleLine(false);
            view.setMaxLines(2);
            view.setEllipsize(TextUtils.TruncateAt.END);
            view.setTextColor(getGeneralTextColor());
            String formattedText = appCMSMain.getFeatures().getWhatsAppConsent().getWhatsappConsentMessage();
            ImageGetterFromHTMLText imageGetter = new ImageGetterFromHTMLText(view, getCurrentActiveContext());
            Spannable htmlText;
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                htmlText = (Spannable) Html.fromHtml(formattedText, Html.FROM_HTML_MODE_LEGACY, imageGetter, null);
            } else {
                htmlText = (Spannable) Html.fromHtml(formattedText, imageGetter, null);
            }
            view.setText(htmlText);
            view.setChecked(appCMSMain.getFeatures().getWhatsAppConsent().isWhatsappChecked());
        } else {
            if (view != null)
                view.setVisibility(View.GONE);
        }
    }

    boolean waysToWatchFromEntitlement = false;

    public boolean isWaysToWatchFromEntitlement() {
        return waysToWatchFromEntitlement;
    }

    public void setWaysToWatchFromEntitlement(boolean waysToWatchFromEntitlement) {
        this.waysToWatchFromEntitlement = waysToWatchFromEntitlement;
    }

    public void removeWaysToWatch() {
        if (getWaysToWatchBottom() != null && getWaysToWatchBottom().isVisible()) {
            getWaysToWatchBottom().removeSheet();
        }
    }

    public String selectedPlanPrice;
    public String selectedPlanValue;

    public void setSelectedPlanPrice(Double selectedPlan, String selectedPlanValidity) {
        selectedPlanPrice = String.valueOf(selectedPlan);
        selectedPlanValue = selectedPlanValidity;
    }

    public String getSelectedPlanPrice() {
        return selectedPlanPrice;
    }

    public String getSelectedPlanValue() {
        return selectedPlanValue;
    }

    public void openFooterPage(NavigationFooter navigationFooter, String pageFunction) {
        stopLoader();
        if (TextUtils.isEmpty(navigationFooter.getPageId()) && Utils.isValid(navigationFooter.getDisplayedPath())) {
            if (navigationFooter.isOpenInChromeCustomTab()) {
                openChromeTab(navigationFooter.getDisplayedPath() + "?app=true");
            } else {
                Intent intent = new Intent(currentActivity, com.viewlift.views.activity.WebViewActivity.class);
                intent.putExtra("url", navigationFooter.getDisplayedPath() + "?app=true");
                currentActivity.startActivity(intent);
            }
        } else if (isAncillaryPage(navigationFooter.getPageId())) {
            if (isFreshChatEnable() && getAppCMSMain() != null && getAppCMSMain().getCustomerService() != null
                    && getAppCMSMain().getCustomerService().getFreshChat() != null && getAppCMSMain().getCustomerService().getFreshChat().getAppID() != null
                    && !TextUtils.isEmpty(getAppCMSMain().getCustomerService().getFreshChat().getAppID()) &&
                    (pageFunction.equalsIgnoreCase(currentContext.getString(R.string.frequently_asked_questions)) || pageFunction.equalsIgnoreCase(currentContext.getString(R.string.faq)))) {
                launchFreshChat(getAppCMSMain().getCustomerService().getFreshChat().getAppID(),
                        getAppCMSMain().getCustomerService().getFreshChat().getKey(), true);

            } else if (pageFunction.equalsIgnoreCase(currentContext.getString(R.string.contact_us)) ||
                    pageFunction.contains(currentContext.getString(R.string.contact_us)) ||
                    pageFunction.equals(currentContext.getString(R.string.support))) {
                if (navigationFooter.getDisplayedPath() != null) {
                    String contactUsEmail = null;
                    if (navigationFooter.getDisplayedPath().contains("mailto:")) {
                        contactUsEmail = navigationFooter.getDisplayedPath().substring(7);
                    } else if (contactUsEmail == null && contactUsEmail.isEmpty() && getAppCMSMain() != null &&
                            getAppCMSMain().getCustomerService() != null &&
                            getAppCMSMain().getCustomerService().getEmail() != null) {
                        contactUsEmail = getAppCMSMain().getCustomerService().getEmail();
                    }
                    try {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("mailto", contactUsEmail, null));
                        currentActivity.startActivity(intent);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } else {
                    navigateToPage(navigationFooter.getPageId(),
                            navigationFooter.getTitle(),
                            navigationFooter.getUrl(),
                            false,
                            false,
                            false,
                            false,
                            false,
                            null);
                }
            } else if (navigationFooter != null && navigationFooter.isOpenInChromeCustomTab() && getAppCMSMain() != null && getAppCMSMain().getDomainName() != null &&
                    !TextUtils.isEmpty(getAppCMSMain().getDomainName()) && !TextUtils.isEmpty(navigationFooter.getUrl())) {
                String url = navigationFooter.getUrl();
                if (!url.startsWith(currentContext.getString(R.string.https_scheme))) {
                    url = getAppCMSMain().getDomainName() + navigationFooter.getUrl() + "?app=true";
                }
                openChromeTab(url);
            } else {
                navigateToPage(navigationFooter.getPageId(),
                        navigationFooter.getTitle(),
                        navigationFooter.getUrl(),
                        false,
                        false,
                        false,
                        false,
                        false,
                        null);
            }
        } else if (navigationFooter.isOpenInChromeCustomTab() && pageFunction.equalsIgnoreCase(currentContext.getString(R.string.app_cms_page_shop_title)) && !TextUtils.isEmpty(pageFunction)) {
            openChromeTab(navigationFooter.getUrl());
        } else if (navigationFooter.isOpenInChromeCustomTab() && getAppCMSMain() != null && !TextUtils.isEmpty(getAppCMSMain().getDomainName())
                && !TextUtils.isEmpty(navigationFooter.getUrl())
                && (pageFunction.equalsIgnoreCase(currentContext.getString(R.string.app_cms_pagename_privacy_policy_key))
                || pageFunction.equalsIgnoreCase(currentContext.getString(R.string.app_cms_pagename_terms_of_services_key))
                || pageFunction.equalsIgnoreCase(currentContext.getString(R.string.app_cms_pagename_about_us_key)))) {
            String url = getAppCMSMain().getDomainName() + navigationFooter.getUrl() + "?app=true";
            openChromeTab(url);
        } else if (pageFunction.equalsIgnoreCase(currentContext.getString(R.string.frequently_asked_questions))
                || pageFunction.toLowerCase().contains(currentContext.getString(R.string.faq).toLowerCase())) {
            if (isFreshChatEnable() && getAppCMSMain() != null && getAppCMSMain().getCustomerService() != null &&
                    getAppCMSMain().getCustomerService().getFreshChat() != null && getAppCMSMain().getCustomerService().getFreshChat().getAppID() != null) {
                launchFreshChat(getAppCMSMain().getCustomerService().getFreshChat().getAppID(),
                        getAppCMSMain().getCustomerService().getFreshChat().getAppID(), true);
            } else if (navigationFooter.isOpenInChromeCustomTab() && getAppCMSMain() != null && !TextUtils.isEmpty(getAppCMSMain().getDomainName())
                    && !TextUtils.isEmpty(navigationFooter.getUrl())) {
                String url = getAppCMSMain().getDomainName() + navigationFooter.getUrl() + "?app=true";
                openChromeTab(url);
            } else {
                navigateToPage(navigationFooter.getPageId(),
                        navigationFooter.getTitle(),
                        navigationFooter.getUrl(),
                        false,
                        false,
                        false,
                        false,
                        false,
                        null);
            }
        } else if (pageFunction.equalsIgnoreCase(currentContext.getString(R.string.contact_us)) ||
                pageFunction.contains(currentContext.getString(R.string.contact_us)) ||
                pageFunction.contains(currentContext.getString(R.string.contact_us_roku)) ||
                pageFunction.equalsIgnoreCase(currentContext.getString(R.string.support))) {
            if (isFreshChatEnable() && getAppCMSMain() != null && getAppCMSMain().getCustomerService() != null &&
                    getAppCMSMain().getCustomerService().getFreshChat() != null && getAppCMSMain().getCustomerService().getFreshChat().getAppID() != null) {
                launchFreshChat(getAppCMSMain().getCustomerService().getFreshChat().getAppID(),
                        getAppCMSMain().getCustomerService().getFreshChat().getKey(), false);
            } else  //For contactUs link openig mail intent
                if (navigationFooter != null && navigationFooter.getDisplayedPath() != null) {
                    String contactUsEmail = "";
                    if (navigationFooter.getDisplayedPath().contains("mailto:")) {
                        contactUsEmail = navigationFooter.getDisplayedPath().substring(7);
                    } else if (contactUsEmail == null && contactUsEmail.isEmpty() && getAppCMSMain() != null &&
                            getAppCMSMain().getCustomerService() != null &&
                            getAppCMSMain().getCustomerService().getEmail() != null) {
                        contactUsEmail = getAppCMSMain().getCustomerService().getEmail();
                    }
                    try {
                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("mailto", contactUsEmail, null));
                        currentActivity.startActivity(intent);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    navigateToPage(navigationFooter.getPageId(),
                            navigationFooter.getTitle(),
                            navigationFooter.getUrl(),
                            false,
                            false,
                            false,
                            false,
                            false,
                            null);
                }
        } else if (!navigateToPage(navigationFooter.getPageId(),
                navigationFooter.getTitle(),
                navigationFooter.getUrl(),
                false,
                false,
                false,
                false,
                false,
                null)) {
        }
    }

    public void showPersonalizationscreenIfEnabled(boolean isFromSetting, boolean isNavigateToHomePage) {
        if (isPersonalizationEnabled() && !appPreference.isPersonalizationScreenShown() && getPersonalizedGenresPreference() == null) {
            if (!isRecommendationOnlyForSubscribedEnabled() || (isRecommendationOnlyForSubscribedEnabled() && isUserSubscribed())) {
                showLoader();
                AppCMSPresenter.isFromSettings = false;
                getUserRecommendedGenres(getLoggedInUser(), s -> {
                    setSelectedGenreString(s);
                    Handler handler = new Handler();
                    handler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                stopLoader();
                                showRecommendationGenreDialog(null);
                            } catch (Exception e) {
                            }
                        }
                    }, 1000);
                }, isFromSetting, isNavigateToHomePage);
            }
        }
    }
}
